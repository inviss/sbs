/***********************************************************
 * 프로그램ID  	: ExternalDAO.java
 * 프로그램명  	: ExternalDAO
 * 작성일자     	:
 * 작성자       	:
 * 설명          : Client 와 WebService 관련 DataObject
 * 변경이력
 * --------------------------------------------------------------------
 *    변경NO     변경일자        변경자                설   명
 * --------------------------------------------------------------------
 *    1          2008/01/04     ysk523               최초생성
 *    2			 2010/08/09     김동은                DAS2.0
 ***********************************************************/

package com.app.das.business.dao;

import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.nio.CharBuffer;
import java.rmi.RemoteException;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.StringTokenizer;
import com.app.das.util.CommonUtl;
import javax.naming.NamingException;
import javax.xml.bind.JAXBException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.methods.GetMethod;
import org.apache.log4j.Logger;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import com.app.das.business.ExternalBusinessProcessor;
import com.app.das.business.constants.CodeConstants;
import com.app.das.business.constants.Constants;
import com.app.das.business.constants.DASBusinessConstants;
import com.app.das.business.constants.ErrorConstants;
import com.app.das.business.dao.statement.ExternalStatement;
import com.app.das.business.dao.statement.UserRoleStatement;
import com.app.das.business.dao.statement.WorkStatement;
import com.app.das.business.exception.DASException;
import com.app.das.business.transfer.Annot;
import com.app.das.business.transfer.AnnotInfo;
import com.app.das.business.transfer.AnnotInfoDO;
import com.app.das.business.transfer.ApproveInfoDO;
import com.app.das.business.transfer.ArchiveReqDO;
import com.app.das.business.transfer.Attach;
import com.app.das.business.transfer.AttachFileInfoDO;
import com.app.das.business.transfer.AttachItem;
import com.app.das.business.transfer.CartContDO;
import com.app.das.business.transfer.CartItemDO;
import com.app.das.business.transfer.CnInfoDO;
import com.app.das.business.transfer.CodeDO;
import com.app.das.business.transfer.ContentMappInfoDO;
import com.app.das.business.transfer.ContentsInfoDO;
import com.app.das.business.transfer.ContentsPrevInfoDO;
import com.app.das.business.transfer.Corner;
import com.app.das.business.transfer.CornerInfoDO;
import com.app.das.business.transfer.CornerItem;
import com.app.das.business.transfer.DASCommonDO;
import com.app.das.business.transfer.Das;
import com.app.das.business.transfer.DiscardDO;
import com.app.das.business.transfer.DivaManagerDO;
import com.app.das.business.transfer.DownCartDO;
import com.app.das.business.transfer.DtlInfoDO;
import com.app.das.business.transfer.EmployeeInfoDO;
import com.app.das.business.transfer.EquipMentInfoDO;
import com.app.das.business.transfer.EquipmentMonitoringDO;
import com.app.das.business.transfer.ErrorLogDO;
import com.app.das.business.transfer.ErrorRegisterDO;
import com.app.das.business.transfer.FIWatchInfoDO;
import com.app.das.business.transfer.FileDeleteInfoDO;
import com.app.das.business.transfer.IfCmsArchiveDO;
import com.app.das.business.transfer.Ingest;
import com.app.das.business.transfer.IngestInfo;
import com.app.das.business.transfer.KeyFrameImgDO;
import com.app.das.business.transfer.KeyFrameInfoDO;
import com.app.das.business.transfer.LogInOutDO;
import com.app.das.business.transfer.ManagementInfoDO;
import com.app.das.business.transfer.ManualArchiveDO;
import com.app.das.business.transfer.ManualDeleteDO;
import com.app.das.business.transfer.MappingDO;
import com.app.das.business.transfer.MediaArchiveDO;
import com.app.das.business.transfer.MediaInfoDO;
import com.app.das.business.transfer.MetaDataInfo;
import com.app.das.business.transfer.MetaInfoDO;
import com.app.das.business.transfer.MetadataMstInfoDO;
import com.app.das.business.transfer.ModeUserInfoDO;
import com.app.das.business.transfer.MonitoringDO;
import com.app.das.business.transfer.MyCatalogDO;
import com.app.das.business.transfer.NdsDownDO;
import com.app.das.business.transfer.PageDO;
import com.app.das.business.transfer.PathInfoDO;
import com.app.das.business.transfer.PdsArchiveDO;
import com.app.das.business.transfer.PdsDownDO;
import com.app.das.business.transfer.PgmContensInfoDO;
import com.app.das.business.transfer.PhotDownDO;
import com.app.das.business.transfer.PhotoInfoDO;
import com.app.das.business.transfer.PreProcessingDO;
import com.app.das.business.transfer.ProgramInfoDO;
import com.app.das.business.transfer.ReflectionInfoDO;
import com.app.das.business.transfer.Relation;
import com.app.das.business.transfer.RelationDO;
import com.app.das.business.transfer.ScenarioDO;
import com.app.das.business.transfer.Scheduler;
import com.app.das.business.transfer.ServersDO;
import com.app.das.business.transfer.TapeContentInfoDO;
import com.app.das.business.transfer.TapeInfoDO;
import com.app.das.business.transfer.TapeItemInfoDO;
import com.app.das.business.transfer.TcBeanDO;
import com.app.das.business.transfer.TimeRist;
import com.app.das.business.transfer.TimeRistInfo;
import com.app.das.business.transfer.TotalChangeInfoDO;
import com.app.das.business.transfer.TransferDO;
import com.app.das.business.transfer.UseInfoDO;
import com.app.das.business.transfer.VideoPageContentInfoDO;
import com.app.das.business.transfer.VideoPageInfoDO;
import com.app.das.business.transfer.VideoPageMetaInfoDO;
import com.app.das.business.transfer.WmvH264DO;
import com.app.das.business.transfer.WorkStatusConditionDO;
import com.app.das.log.DasPropHandler;
import com.app.das.services.ArchiveReqDOXML;
import com.app.das.services.DivaManagerDOXML;
import com.app.das.services.IfCmsArchiveDOXML;
import com.app.das.services.PdsDownDOXML;
import com.app.das.services.TcBeanDOXML;
import com.app.das.services.TokenDOXML;
import com.app.das.services.TransferByStorageDOXML;
import com.app.das.services.TransferDOXML;
import com.app.das.services.XmlConvertorService;
import com.app.das.services.XmlConvertorServiceImpl;
import com.app.das.util.CalendarUtil;
import com.app.das.util.CommonUtl;
import com.app.das.util.DBService;
import com.app.das.util.DateTime;
import com.app.das.util.LoggableStatement;
import com.app.das.util.StringUtils;
import com.app.das.util.XmlUtil;
import com.app.das.util.jutil;
import com.sbs.das.web.Nevigator;
import com.sbs.das.web.NevigatorProxy;
import com.sbs.das.web.ServiceNevigatorService;
import com.sbs.das.web.ServiceNevigatorServiceLocator;
import com.sbs.tm.service.Tansfer;
import com.sbs.tm.service.TansferLocator;
import com.sbs.tm.service.TansferPortType;
import com.sbs.tm.service.TansferPortTypeProxy;
import com.sun.swing.internal.plaf.basic.resources.basic;
/**
 * 우리 시스템의 외부 인터페이스하는 함수 들이 모여있는 classs로
 * ExternalDAO 외부 시스템과 인터페이스 통신 하거나 관련된 함수를 정의한다
 */
public class ExternalDAO extends AbstractDAO 
{
	private static ExternalDAO instance;

	private static ExternalBusinessProcessor ExternalBusinessProcessor;

	private Logger logger = Logger.getLogger(ExternalDAO.class);

	private static DasPropHandler dasHandler = DasPropHandler.getInstance();

	private static  CodeInfoDAO codeInfoDAO = CodeInfoDAO.getInstance();

	private static  WorkDAO workDAO = WorkDAO.getInstance();
	private static SystemManageDAO systemManageDAO = SystemManageDAO.getInstance();

	private static  CommonUtl commonUtl;
	/**
	 * A private constructor  
	 *
	 */
	private ExternalDAO()
	{
	}
	/**
	 * 초기화
	 */
	public static synchronized ExternalDAO getInstance() 
	{
		if (instance == null) 
		{
			instance = new ExternalDAO();
		}
		return instance;
	}


	/**
	 * 입력받은 카트번호에 해당하는 다운로드 카트정보를 조회한다.
	 * @param cartNo 카트번호
	 * @return DownCartDO 다운로드 카트 정보를 포함하고 있는 DataObject
	 * @throws Exception 
	 */
	public DownCartDO selectDownCartInfo(String reqUserId) throws Exception
	{
		String query = ExternalStatement.selectDownCartInfoQuery();

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			stmt = con.prepareStatement(query);

			int index = 0;
			stmt.setString(++index, reqUserId );

			rs = stmt.executeQuery();	

			DownCartDO item = new DownCartDO();

			while(rs.next())
			{
				item.setCartNo(rs.getLong("CART_NO"));
				item.setDataClfCd(rs.getString("DATA_CLF_CD"));
				item.setPrioCd(rs.getString("PRIO_CD"));
				item.setStrgLoc(rs.getString("STRG_LOC"));
				item.setRistYn(rs.getString("RIST_YN"));
				item.setAppCont((rs.getString("APP_CONT")));
				item.setReqUsrid(rs.getString("REQ_USRID"));
				item.setReqNm(rs.getString("REQ_NM"));
				item.setReqDt(rs.getString("REQ_DT"));
				item.setDownDt(rs.getString("DOWN_DT"));
				item.setAppDt(rs.getString("APP_DT"));
				item.setDownSubj((rs.getString("DOWN_SUBJ")));
				item.setGaurantorId(rs.getString("GAURANTOR_ID"));
				item.setRegDt(rs.getString("REG_DT"));
				item.setRegrId(rs.getString("REGRID"));
				item.setModDt(rs.getString("MOD_DT"));
				item.setModrId(rs.getString("MODRID"));
				item.setDeptCd(rs.getString("DEPT_CD"));
				item.setVdQlty(rs.getString("VD_QLTY"));
				item.setAspRtoCd(rs.getString("ASP_RTO_CD"));
				item.setCartStat(rs.getString("down_STAT"));
				item.setRist_clf_cd(rs.getString("DESC"));

			}

			return item;

		} 
		catch (Exception e) 
		{
			logger.error(query);

			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}

	}



	/**
	 * 메타데이터 검색결과의 갯수를 가져온다.
	 * @param conditionDO 조회조건을 가지고있는 beans
	 * @return Map 
	 * @throws Exception 
	 */
	@Deprecated
	public Map getMetadatInfoListCount(WorkStatusConditionDO conditionDO) throws Exception
	{
		conditionDO.setQueryResultCount(true);
		String query = ExternalStatement.selectMetadatInfoQuery(conditionDO);
		conditionDO.setQueryResultCount(false);

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		Map nMap = new HashMap();
		try 
		{
			con = DBService.getInstance().getConnection();

			stmt = con.prepareStatement(query);
			rs = stmt.executeQuery();	
			if (rs.next()){
				nMap.put("CCOUNT", rs.getInt("CCOUNT"));
				long k = rs.getLong("SUM_BRD_LENG");

				nMap.put("SUM_BRD_LENG",k);
			}
			return nMap;
		} 

		catch (Exception e) 
		{
			logger.error(query);


			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}
	
	public MetaInfoDO selectMetadatInfoCount(WorkStatusConditionDO conditionDO, String flag) throws Exception {
		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
			String query = ExternalStatement.selectNewMetadatInfoQuery(conditionDO, flag);
			if(logger.isDebugEnabled()) logger.debug(query);
			
			con = DBService.getInstance().getConnection();
			stmt = con.prepareStatement(query);
			rs = stmt.executeQuery();
			
			MetaInfoDO metaInfoDO = null;
			if (rs.next()){
				metaInfoDO = new  MetaInfoDO();
				metaInfoDO.setCount(rs.getInt("CCOUNT"));
				metaInfoDO.setSum_brd_leng(rs.getLong("SUM_BRD_LENG"));
				if(logger.isDebugEnabled()) {
					logger.debug("count: "+metaInfoDO.getCount());
				}
			}
			return metaInfoDO;
		} catch (Exception e) {
			throw e;
		} finally {
			release(rs, stmt, con);
		}
	}
	
	public List selectNewMetadatInfoList(WorkStatusConditionDO conditionDO) throws Exception {
		
		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			// 전체 건수 및 총 Duration 길이
			MetaInfoDO metaInfoDO = this.selectMetadatInfoCount(conditionDO, DASBusinessConstants.PageQueryFlag.TOTAL_COUNT);
			
			// 검색 리스트
			String query = ExternalStatement.selectNewMetadatInfoQuery(conditionDO, DASBusinessConstants.PageQueryFlag.NORMAL);
			if(logger.isDebugEnabled()) logger.debug(query);
			
			con = DBService.getInstance().getConnection();
			stmt = con.prepareStatement(query);
			rs = stmt.executeQuery();
			
			List resultList = new ArrayList();	
			logger.debug("list size: "+resultList.size());
			while(rs.next())
			{
				MetaInfoDO item = new MetaInfoDO();
				item.setMasterId(rs.getLong("MASTER_ID"));
				item.setTape_item_id(rs.getString("tape_item_id"));
				item.setMcuid(rs.getString("mcuid"));
				item.setDataStatCd(rs.getString("DATA_STAT_CD"));
				item.setDesc((rs.getString("DESC")));
				item.setTitle((rs.getString("TITLE")));
				item.setRegDt(rs.getString("REG_DT"));
				item.setBrdLeng(rs.getString("BRD_LENG"));
				item.setArchRegDd(rs.getString("ARCH_REG_DD"));
				item.setCount(rs.getInt("COUNT"));
				String epis = 	rs.getString("EPIS_NO");
				if(epis.trim().equals("0")){
					item.setEpis_No("");
				}else{
					item.setEpis_No(rs.getString("EPIS_NO"));
				}
				item.setBrdDd(rs.getString("BRD_DD"));
				item.setReqCd(rs.getString("REQ_CD"));
				item.setUser_nm(rs.getString("USER_NM"));
				item.setIng_Reg_DD(rs.getString("ING_REG_DD"));
				item.setLock_stat_cd(rs.getString("LOCK_STAT_CD"));
				item.setError_stat_cd(rs.getString("ERROR_STAT_CD"));
				item.setCtgr_l_Cd(rs.getString("ctgr_l_cd"));
				item.setQueryResultCount(metaInfoDO.getCount());
				item.setSum_brd_leng(metaInfoDO.getSum_brd_leng());
				item.setCt_id(Long.parseLong(rs.getString("ct_id")));
				item.setCti_id(Long.parseLong(rs.getString("CTI_ID")));
				item.setCtgr_l_nm(rs.getString("CTGR_L_NM"));
				item.setCt_cla(rs.getString("CT_CLA_NM"));
				item.setFM_DT(rs.getString("FM_DT"));
				item.setLock_stat_cd(rs.getString("lock_stat_cd"));
				item.setModrid(rs.getString("modrid"));
				item.setLink_parent(rs.getString("LINK_PARENT"));
				
				resultList.add(item);	
			}

			return resultList;
		} catch (Exception e) {
			throw e;
		} finally {
			release(rs, stmt, con);
		}
	}

	/**
	 * 메타데이타 마스터 정보를 조회한다.
	 * @param conditionDO 조회 조건
	 * @return List MetaInfoDO를 포함하고 있는 DataObject
	 * @throws Exception 
	 */
	@Deprecated
	public List selectMetadatInfoList(WorkStatusConditionDO conditionDO) throws Exception
	{
		int nDataCount = -1;

		Map value = null;

		// 만약 처음으로 검색하는 거라면(다음 페이지가 아니라) 그 검색의 전체 데이터 갯수를 넘겨줘야 한다.
		value = this.getMetadatInfoListCount(conditionDO);

		String query = ExternalStatement.selectMetadatInfoQuery2(conditionDO);
		/*
		if(logger.isDebugEnabled())
			logger.debug(query);
		 */
		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			stmt = con.prepareStatement(query);
			rs = stmt.executeQuery();	
			List resultList = new ArrayList();			
			while(rs.next())
			{
				MetaInfoDO item = new MetaInfoDO();
				item.setMasterId(rs.getLong("MASTER_ID"));
				item.setTape_item_id(rs.getString("tape_item_id"));
				item.setMcuid(rs.getString("mcuid"));
				item.setDataStatCd(rs.getString("DATA_STAT_CD"));
				item.setDesc((rs.getString("DESC")));
				item.setTitle((rs.getString("TITLE")));
				item.setRegDt(rs.getString("REG_DT"));
				item.setBrdLeng(rs.getString("BRD_LENG"));
				item.setArchRegDd(rs.getString("ARCH_REG_DD"));
				item.setCount(rs.getInt("COUNT"));
				String epis = 	rs.getString("EPIS_NO");
				if(epis.trim().equals("0")){
					item.setEpis_No("");
				}else{
					item.setEpis_No(rs.getString("EPIS_NO"));
				}
				item.setBrdDd(rs.getString("BRD_DD"));
				item.setReqCd(rs.getString("REQ_CD"));
				item.setUser_nm(rs.getString("USER_NM"));
				item.setIng_Reg_DD(rs.getString("ING_REG_DD"));
				item.setLock_stat_cd(rs.getString("LOCK_STAT_CD"));
				item.setError_stat_cd(rs.getString("ERROR_STAT_CD"));
				item.setCtgr_l_Cd(rs.getString("ctgr_l_cd"));
				item.setQueryResultCount(Integer.parseInt(value.get("CCOUNT").toString()));
				item.setSum_brd_leng(Long.parseLong(value.get("SUM_BRD_LENG").toString()));
				item.setCt_id(Long.parseLong(rs.getString("ct_id")));
				item.setCti_id(Long.parseLong(rs.getString("CTI_ID")));
				item.setCtgr_l_nm(rs.getString("CTGR_L_NM"));
				item.setCt_cla(rs.getString("CT_CLA_NM"));
				item.setFM_DT(rs.getString("FM_DT"));
				item.setLock_stat_cd(rs.getString("lock_stat_cd"));
				item.setModrid(rs.getString("modrid"));
				item.setLink_parent(rs.getString("LINK_PARENT"));
				resultList.add(item);	
			}

			return resultList;
		} 
		catch (Exception e) 
		{
			logger.error(query);


			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}


	/**
	 * 메타데이타 마스터 정보를 조회한다.
	 * @param conditionDO 조회 조건
	 * @return List MetaInfoDO를 포함하고 있는 DataObject
	 * @throws Exception 
	 */
	public String selectMetadatInfoListForString(WorkStatusConditionDO conditionDO) throws Exception
	{
		int nDataCount = -1;

		Map value = null;

		// 만약 처음으로 검색하는 거라면(다음 페이지가 아니라) 그 검색의 전체 데이터 갯수를 넘겨줘야 한다.
		value = this.getMetadatInfoListCount(conditionDO);

		String query = ExternalStatement.selectMetadatInfoQuery2(conditionDO);

		Connection con = null;
		PreparedStatement stmt = null;
		StringBuffer strResult = new StringBuffer();  
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();

			stmt = con.prepareStatement(query);
			rs = stmt.executeQuery();	

			List resultList = new ArrayList();			
			while(rs.next())
			{
				this.AddToResultXMLBuffer(strResult, "MASTER_ID", "      ", rs.getLong("MASTER_ID") + "");            	
				this.AddToResultXMLBuffer(strResult, "TAPE_ITEM_ID", "      ", rs.getString("tape_item_id") + "");            	

				this.AddToResultXMLBuffer(strResult, "MCUID", "      ", rs.getString("mcuid") + "");            	
				this.AddToResultXMLBuffer(strResult, "DATA_STAT_CD", "      ", rs.getString("DATA_STAT_CD") + "");            	
				this.AddToResultXMLBuffer(strResult, "DESC", "      ", rs.getString("DESC") + "");            	
				this.AddToResultXMLBuffer(strResult, "TITLE", "      ", rs.getString("TITLE") + "");            	
				this.AddToResultXMLBuffer(strResult, "REG_DT", "      ", rs.getString("REG_DT") + "");            	
				this.AddToResultXMLBuffer(strResult, "BRD_LENG", "      ", rs.getString("BRD_LENG") + "");            	
				this.AddToResultXMLBuffer(strResult, "ARCH_REG_DD", "      ", rs.getString("ARCH_REG_DD") + "");            	
				this.AddToResultXMLBuffer(strResult, "COUNT", "      ", rs.getInt("COUNT") + "");            	
				String epis = 	rs.getString("EPIS_NO");
				if(epis.trim().equals("0")){
					this.AddToResultXMLBuffer(strResult, "EPIS_NO", "      ",  ""); 
				}else{
					this.AddToResultXMLBuffer(strResult, "EPIS_NO", "      ", rs.getString("EPIS_NO") + ""); 
				}          	
				this.AddToResultXMLBuffer(strResult, "BRD_DD", "      ", rs.getString("BRD_DD") + "");            	
				this.AddToResultXMLBuffer(strResult, "USE_YN", "      ", rs.getString("REQ_CD") + "");            	
				this.AddToResultXMLBuffer(strResult, "USER_NM", "      ", rs.getString("USER_NM") + "");            	
				this.AddToResultXMLBuffer(strResult, "ING_REG_DD", "      ", rs.getString("ING_REG_DD") + "");            	
				this.AddToResultXMLBuffer(strResult, "LOCK_STAT_CD", "      ", rs.getString("LOCK_STAT_CD") + "");    
				this.AddToResultXMLBuffer(strResult, "ERROR_STAT_CD", "      ", rs.getString("ERROR_STAT_CD") + "");            	
				this.AddToResultXMLBuffer(strResult, "SCL_CD", "      ", rs.getString("ctgr_l_cd") + "");            	
				this.AddToResultXMLBuffer(strResult, "QUERY_RESULT_COUNT", "      ",  Integer.parseInt(value.get("CCOUNT").toString()) + "");            	
				this.AddToResultXMLBuffer(strResult, "SUM_BRD_LENG", "      ",  Long.parseLong(value.get("SUM_BRD_LENG").toString()) + "");    
				this.AddToResultXMLBuffer(strResult, "CT_ID", "      ", rs.getLong("ct_id") + "");            	
				this.AddToResultXMLBuffer(strResult, "CTI_ID", "      ", rs.getLong("cti_id") + "");            	
				this.AddToResultXMLBuffer(strResult, "CTGR_L_NM", "      ", rs.getString("CTGR_L_NM") + "");            	
				this.AddToResultXMLBuffer(strResult, "CT_CLA", "      ", rs.getString("CT_CLA_NM") + "");    
				this.AddToResultXMLBuffer(strResult, "FM_DT", "      ", rs.getString("FM_DT") + ""); 
				this.AddToResultXMLBuffer(strResult, "PARENTS_CD", "      ", rs.getString("modrid") + ""); 
				this.AddToResultXMLBuffer(strResult, "LINK_PARENTS", "      ", rs.getString("LINK_PARENT") + ""); 
			}



			return strResult.toString();
		} 

		catch (Exception e) 
		{
			logger.error(query);


			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}



	/**
	 * 마스터 ID에 대한 모든 메타데이타 마스터 정보를 조회한다.
	 * @param masterId  마스터 ID
	 * @return MetadataMstInfoDO를 포함하고 있는 DataObject
	 * @throws Exception 
	 */
	public List selectMetadataInfo(long masterId) throws Exception
	{
		StringBuffer buf = new StringBuffer();
		//buf.append("\n SELECT * from das.metadat_mst_tbl meta, PGM_INFO_TBL pgm where meta.pgm_ID = pgm.pgm_id and MASTER_ID = ? ");
		buf.append("\n SELECT ");
		buf.append("\n meta.master_ID as META_MASTER_ID ");		
		buf.append("\n , meta.PGM_ID as META_PGM_ID ");
		//buf.append("\n , meta.PGM_CD as META_PGM_CD ");	// meta에는 PGM_CD값이 전부 비어있다.
		buf.append("\n , PGM.PGM_CD as PGM_PGM_CD ");		// 위 PGM_CD를 PGM의 PGM_CD로 대체 
		buf.append("\n , meta.EPIS_NO as META_EPIS_NO ");
		buf.append("\n , meta.TITLE as META_TITLE ");
		buf.append("\n , meta.CTGR_L_CD as META_CTGR_L_CD ");
		buf.append("\n , meta.CTGR_M_CD as META_CTGR_M_CD ");
		buf.append("\n , meta.CTGR_S_CD as META_CTGR_S_CD ");
		buf.append("\n , meta.BRD_DD as META_BRD_DD ");
		buf.append("\n , meta.FINAL_BRD_YN as META_FINAL_BRD_YN ");
		buf.append("\n , meta.SNPS as META_SNPS ");
		buf.append("\n , meta.KEY_WORDS as META_KEY_WORDS ");
		buf.append("\n , meta.BRD_BGN_HMS as META_BRD_BGN_HMS ");
		buf.append("\n , meta.BRD_END_HMS as META_BRD_END_HMS ");
		buf.append("\n , meta.BRD_LENG as META_BRD_LENG ");
		buf.append("\n , meta.PGM_RATE as META_PGM_RATE ");
		buf.append("\n , meta.DRT_NM as META_DRT_NM ");
		buf.append("\n , meta.PRODUCER_NM as META_PRODUCER_NM ");
		buf.append("\n , meta.WRITER_NM as META_WRITER_NM ");
		buf.append("\n , meta.PRDT_IN_OUTS_CD as META_PRDT_IN_OUTS_CD ");
		buf.append("\n , meta.PRDT_DEPT_CD as META_PRDT_DEPT_CD ");
		buf.append("\n , meta.PRDT_DEPT_NM as META_PRDT_DEPT_NM ");
		buf.append("\n , meta.ORG_PRDR_NM as META_ORG_PRDR_NM ");
		buf.append("\n , meta.MC_NM as META_MC_NM ");
		buf.append("\n , meta.CAST_NM as META_CAST_NM ");
		buf.append("\n , meta.CMR_DRT_NM as META_CMR_DRT_NM ");
		buf.append("\n , meta.FM_DT as META_FM_DT ");
		buf.append("\n , meta.CMR_PLACE as META_CMR_PLACE ");
		buf.append("\n , meta.SPC_INFO as META_SPC_INFO ");
		buf.append("\n , meta.REQ_CD as META_REQ_CD ");
		buf.append("\n , meta.SEC_ARCH_NM as META_SEC_ARCH_NM ");
		buf.append("\n , meta.SEC_ARCH_ID as META_SEC_ARCH_ID ");
		buf.append("\n , meta.GATH_CO_CD as META_GATH_CO_CD ");
		buf.append("\n , meta.GATH_CLF_CD as META_GATH_CLF_CD ");
		buf.append("\n , meta.ARCH_REG_DD as META_ARCH_REG_DD ");
		buf.append("\n , meta.ARRG_END_DT as META_ARRG_END_DT ");
		buf.append("\n , meta.WORK_PRIO_CD as META_WORK_PRIO_CD ");		
		buf.append("\n , meta.RSV_PRD_CD as META_RSV_PRD_CD ");
		buf.append("\n , meta.CPRTR_NM as META_CPRTR_NM ");
		buf.append("\n , meta.CPRT_TYPE as META_CPRT_TYPE ");
		buf.append("\n , meta.CPRT_TYPE_DSC as META_CPRT_TYPE_DSC ");
		buf.append("\n , meta.VIEW_GR_CD as META_VIEW_GR_CD ");
		buf.append("\n , meta.DLBR_CD as META_DLBR_CD ");
		buf.append("\n , meta.AWARD_HSTR as META_AWARD_HSTR ");
		buf.append("\n , meta.RPIMG_KFRM_SEQ as META_RPIMG_KFRM_SEQ ");
		buf.append("\n , meta.TAPE_ID as META_TAPE_ID ");
		buf.append("\n , meta.TAPE_ITEM_ID as META_TAPE_ITEM_ID ");
		buf.append("\n , meta.TAPE_MEDIA_CLF_CD as META_TAPE_MEDIA_CLF_CD ");
		buf.append("\n , meta.RSV_PRD_END_DD as META_RSV_PRD_END_DD ");
		buf.append("\n , meta.DEL_DD as META_DEL_DD ");
		buf.append("\n , meta.USE_YN as META_USE_YN ");
		buf.append("\n , meta.REG_DT as META_REG_DT ");
		buf.append("\n , meta.MODRID as META_MODRID ");
		buf.append("\n , meta.MOD_DT as META_MOD_DT ");
		buf.append("\n , meta.GATH_DEPT_CD as META_GATH_DEPT_CD ");
		buf.append("\n , meta.MCUID as META_MCUID ");
		buf.append("\n , meta.RPIMG_CT_ID as META_RPIMG_CT_ID ");
		buf.append("\n , meta.DATA_STAT_CD as META_DATA_STAT_CD ");
		buf.append("\n , meta.ING_REG_DD as META_ING_REG_DD ");
		buf.append("\n , meta.COPY_KEEP as META_COPY_KEEP ");
		buf.append("\n , meta.CLEAN_KEEP as META_CLEAN_KEEP ");
		buf.append("\n , meta.MUSIC_INFO as META_MUSIC_INFO ");
		buf.append("\n , meta.RST_CONT as META_RST_CONT ");
		buf.append("\n , meta.RERUN as META_RERUN ");
		buf.append("\n , meta.ACCEPTOR_ID as META_ACCEPTOR_ID ");
		buf.append("\n , meta.SUB_TTL as META_SUB_TTL ");
		buf.append("\n , meta.ARRANGE_NM as META_ARRANGE_NM ");
		buf.append("\n , erpuser.USER_NM as ACCEPTOR_NM ");

		//buf.append("\n from das.metadat_mst_tbl meta left outer join das.PGM_INFO_TBL pgm on meta.pgm_ID = pgm.pgm_id");

		buf.append("\n from das.metadat_mst_tbl meta "); 
		buf.append("\n   left outer join das.PGM_INFO_TBL pgm on meta.pgm_ID = pgm.pgm_id ");
		buf.append("\n   left outer join DAS.ERP_COM_USER_TBL erpuser on meta.acceptor_ID = erpuser.USER_ID ");
		buf.append("\n where MASTER_ID = ? ");
		buf.append("\n WITH UR  ");	

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();

			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setLong(++index, masterId);

			rs = stmt.executeQuery();	

			List resultList = new ArrayList();			
			while(rs.next())
			{
				MetadataMstInfoDO item = new MetadataMstInfoDO();
				item.setMasterId(rs.getLong("META_MASTER_ID"));
				item.setPgmId(rs.getLong("META_PGM_ID"));
				//item.setPgmCd(rs.getString("META_PGM_CD"));
				item.setPgmCd(rs.getString("PGM_PGM_CD"));
				item.setEpisNo(rs.getInt("META_EPIS_NO"));
				item.setTitle((rs.getString("META_TITLE")));
				item.setCtgrLCd(rs.getString("META_CTGR_L_CD"));
				item.setCtgrMCd(rs.getString("META_CTGR_M_CD"));
				item.setCtgrSCd(rs.getString("META_CTGR_S_CD"));
				item.setBrdDd(rs.getString("META_BRD_DD"));
				item.setFinalBrdYn(rs.getString("META_FINAL_BRD_YN"));
				item.setSnps((rs.getString("META_SNPS")));
				item.setKeyWords(rs.getString("META_KEY_WORDS"));				
				item.setBrdBgnHms(rs.getString("META_BRD_BGN_HMS"));
				item.setBrdEndHms(rs.getString("META_BRD_END_HMS"));
				item.setBrdLeng(rs.getString("META_BRD_LENG"));
				item.setPgmRate(rs.getString("META_PGM_RATE"));
				item.setDrtNm((rs.getString("META_DRT_NM")));
				item.setProducerNm((rs.getString("META_PRODUCER_NM")));
				item.setWriterNm((rs.getString("META_WRITER_NM")));
				item.setPrdtInOutsCd(rs.getString("META_PRDT_IN_OUTS_CD"));
				item.setPrdtDeptCd(rs.getString("META_PRDT_DEPT_CD"));
				item.setPrdtDeptNm((rs.getString("META_PRDT_DEPT_NM")));
				item.setOrgPrdrNm((rs.getString("META_ORG_PRDR_NM")));
				item.setMcNm((rs.getString("META_MC_NM")));
				item.setCastNm((rs.getString("META_CAST_NM")));
				item.setCmrDrtNm((rs.getString("META_CMR_DRT_NM")));
				item.setFmDt(rs.getString("META_FM_DT"));
				item.setCmrPlace((rs.getString("META_CMR_PLACE")));
				item.setSpcInfo((rs.getString("META_SPC_INFO")));
				item.setReqCd(rs.getString("META_REQ_CD"));
				item.setSecArchNm(rs.getString("META_SEC_ARCH_NM"));
				item.setSecArchId(rs.getString("META_SEC_ARCH_ID"));
				item.setGathCoCd(rs.getString("META_GATH_CO_CD"));				
				item.setGathClfCd(rs.getString("META_GATH_CLF_CD"));
				item.setArchRegDd(rs.getString("META_ARCH_REG_DD"));				
				item.setArrgEndDt(rs.getString("META_ARRG_END_DT"));
				item.setWorkPrioCd(rs.getString("META_WORK_PRIO_CD"));
				item.setRsvPrdCd(rs.getString("META_RSV_PRD_CD"));
				item.setCprtrNm((rs.getString("META_CPRTR_NM")));
				item.setCprtType(rs.getString("META_CPRT_TYPE"));
				item.setCprtTypeDsc((rs.getString("META_CPRT_TYPE_DSC")));
				item.setViewGrCd(rs.getString("META_VIEW_GR_CD"));
				item.setDlbrCd(rs.getString("META_DLBR_CD"));
				item.setAwardHstr((rs.getString("META_AWARD_HSTR")));
				item.setRpimgKfrmSeq(rs.getInt("META_RPIMG_KFRM_SEQ"));
				item.setTapeId(rs.getString("META_TAPE_ID"));				
				item.setTapeItemId(rs.getString("META_TAPE_ITEM_ID"));
				item.setTapeMediaClfCd(rs.getString("META_TAPE_MEDIA_CLF_CD"));
				item.setRsvPrdEndDd(rs.getString("META_RSV_PRD_END_DD"));
				item.setDelDd(rs.getString("META_DEL_DD"));
				item.setUseYn(rs.getString("META_USE_YN"));
				item.setRegDt(rs.getString("META_REG_DT"));
				item.setModrid(rs.getString("META_MODRID"));
				item.setModDt(rs.getString("META_MOD_DT"));
				item.setGathDeptCd(rs.getString("META_GATH_DEPT_CD"));
				item.setMcuid(rs.getString("META_MCUID"));
				item.setRpimgCtId(rs.getInt("META_RPIMG_CT_ID"));
				item.setDataStatCd(rs.getString("META_DATA_STAT_CD"));
				item.setIngRegDd(rs.getString("META_ING_REG_DD"));
				item.setCopyKeep(rs.getString("META_COPY_KEEP"));
				item.setCleanKeep(rs.getString("META_CLEAN_KEEP"));				
				item.setMusicInfo((rs.getString("META_MUSIC_INFO")));
				item.setRstCont((rs.getString("META_RST_CONT")));
				item.setRerun(rs.getString("META_RERUN"));
				item.setAcceptorId(rs.getString("META_ACCEPTOR_ID"));
				item.setSubTtl((rs.getString("META_SUB_TTL")));
				item.setArrange_nm(rs.getString("META_ARRANGE_NM"));
				item.setAcceptorId(rs.getString("META_ACCEPTOR_ID"));

				String acceptor_nm = rs.getString("ACCEPTOR_NM");
				if (acceptor_nm != null)
				{
					item.setAcceptorNm(acceptor_nm.trim());
				}
				resultList.add(item);

			}

			return resultList;			

		} 
		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		} 
		finally
		{
			release(rs, stmt, con);
		}

	}

	/**
	 * 입력받은 카트번호에 해당하는 카트내용 정보를 조회한다.
	 * @param cartNo 카트번호
	 * @return List
	 * @throws Exception 
	 */
	public List selectCartContList(long cartNo) throws Exception
	{
		String query = ExternalStatement.selectCartContListQuery();

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			stmt = con.prepareStatement(query);

			int index = 0;
			stmt.setLong(++index, cartNo);

			rs = stmt.executeQuery();

			List resultList = new ArrayList();

			while(rs.next())
			{
				CartContDO item = new CartContDO();
				item.setCartNo(rs.getLong("CART_NO"));
				item.setCartSeq(rs.getInt("CART_SEQ"));
				item.setRistClfCd(rs.getString("RIST_CLF_CD"));
				item.setCtId(rs.getLong("CT_ID"));
				item.setCtiId(rs.getLong("CTI_ID"));
				item.setSom(rs.getString("SOM"));
				item.setEom(rs.getString("EOM"));
				item.setDuration(rs.getLong("DURATION"));
				item.setRegDt(rs.getString("REG_DT"));
				item.setRegrId(rs.getString("REGRID"));
				item.setModDt(rs.getString("MOD_DT"));
				item.setModrId(rs.getString("MODRID"));
				item.setCtgrLCd(rs.getString("CTGR_L_CD"));
				item.setCtgrMCd(rs.getString("CTGR_M_CD"));
				item.setCtgrSCd(rs.getString("CTGR_S_CD"));
				item.setCtCont((rs.getString("CT_CONT")));
				item.setCtNm((rs.getString("CT_NM")));
				item.setMasterId(rs.getLong("MASTER_ID"));
				item.setTitle(rs.getString("title"));
				int epis = rs.getInt("EPIS_NO");
				if(epis==0){
					item.setEpis_no("");
				}else {
					item.setEpis_no(rs.getString("EPIS_NO"));	
				}
				item.setDown_typ_nm(rs.getString("down_typ"));
				item.setVd_qlty_nm(rs.getString("VD_QLTY_NM"));
				resultList.add(item);
			}	

			return resultList;
		} 
		catch (Exception e) 
		{
			logger.error(query);


			throw e;
		} 
		finally
		{
			release(rs, stmt, con);
		}

	}


	/**
	 * 마스터 테이블 수정이력 정보를 조회한다.
	 * @param masterId 마스터 ID
	 * @return List
	 * @throws Exception 
	 */
	public List selectModeUserInfoList(long masterId) throws Exception
	{
		String query = ExternalStatement.selectModUserInfoQuery();

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			stmt = con.prepareStatement(query);

			int index = 0;
			stmt.setLong(++index, masterId);

			rs = stmt.executeQuery();

			List resultList = new ArrayList();

			while(rs.next())
			{
				ModeUserInfoDO item = new ModeUserInfoDO();
				item.setModDt(rs.getString("MOD_DT"));
				item.setModrId(rs.getString("MODRID"));
				item.setMod_nm(rs.getString("MOD_nm"));

				resultList.add(item);
			}	

			return resultList;
		} 
		catch (Exception e) 
		{
			logger.error(query);


			throw e;
		} 

		finally
		{
			release(rs, stmt, con);
		}

	}


	/**
	 * User ID를 주면 DEPT CD를 찾아온다. 만약 정직원이 아니라면 관리인(?)의 DEPT_CD를 넘겨준다.
	 * @throws Exception 
	 */
	public String getDECP_CDFromUserID(String userID) throws Exception
	{
		StringBuffer buf = new StringBuffer();
		if (userID.charAt(0) == 'D')	// 비직원이면 GUARANTOR의 부서를 넘겨준다.
		{
			buf.append(" select DEPT_CD from DAS.OUTSIDER_INFO_TBL outsider, DAS.ERP_COM_USER_TBL erp ");
			buf.append(" where outsider.GAURANTOR_ID = erp.USER_ID ");
			buf.append(" and outsider.OUT_USER_ID = ? with ur ");
		}
		else	// 정직원이면 COM USER TBL에서 바로 부서 정보를 찾아 넘겨준다.
		{
			buf.append(" select DEPT_CD from DAS.ERP_COM_USER_TBL erp where erp.USER_ID = ? with ur ");
		}

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();

			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setString(++index, userID);

			rs = stmt.executeQuery();

			if (rs.next())
			{
				return rs.getString("DEPT_CD");
			}	
			else
				return "";
		} 

		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}

	}


	/**
	 * CS  에서 받은 카트 정보를 저장한다.<p>
	 * 다운로드 카트 정보와 카트 내용을 DB 스키마와 동일하게 받아 저장한다.
	 * @param downCartDO 카트정보
	 * @param commonDO 공통정보
	 * @return DownCartDO 채번한 카트번호를 포함하고 있는 다운로드 카트
	 * @throws Exception 
	 */
	public DownCartDO insertCartInfo(DownCartDO downCartDO) throws Exception
	{
		// 먼저 DEPT_CD를 찾아온다.
		String DEPT_CD = getDECP_CDFromUserID(downCartDO.getReqUsrid());

		StringBuffer buf = new StringBuffer();
		buf.append("\n insert into DAS.DOWN_CART_TBL( ");
		buf.append("\n 	CART_NO, "); 
		buf.append("\n 	DATA_CLF_CD, "); 
		buf.append("\n 	PRIO_CD, "); 
		buf.append("\n 	STRG_LOC, "); 
		buf.append("\n 	RIST_YN, "); 

		buf.append("\n 	APP_CONT,  ");
		buf.append("\n 	REQ_USRID, "); 
		buf.append("\n 	REQ_NM,  ");
		buf.append("\n 	REQ_DT,  ");
		buf.append("\n 	DOWN_DT,  ");

		buf.append("\n 	APP_DT,  ");
		buf.append("\n 	DOWN_SUBJ,  ");
		buf.append("\n 	GAURANTOR_ID, "); 
		buf.append("\n 	REG_DT,  ");
		buf.append("\n 	REGRID,  ");

		buf.append("\n 	MOD_DT,  ");
		buf.append("\n 	MODRID,  ");
		buf.append("\n 	VD_QLTY,  ");
		buf.append("\n 	ASP_RTO_CD, ");
		buf.append("\n 	CART_STAT, ");

		buf.append("\n  CO_CD, ");
		buf.append("\n  SEG_CD, ");
		buf.append("\n  DEPT_CD ,");
		buf.append("\n  DOWN_GUBUN, ");
		buf.append("\n  OUT_STRG_LOC, ");
		buf.append("\n  TC_REQ_CD, ");
		buf.append("\n  file_path ");
		buf.append("\n ) ");
		buf.append("\n values(?, ?, ?, ?, ?,");
		buf.append("\n        ?, ?, ?, ?, ?,");
		buf.append("\n        ?, ?, ?, ?, ?,"); 
		buf.append("\n        ?, ?, ?, ?, ?, ?,");
		buf.append("\n        ?, ?, ?, ?, ?, ?) ");

		Connection con = null;
		PreparedStatement stmt = null;
		try 
		{
			con = DBService.getInstance().getConnection();

			stmt = con.prepareStatement(buf.toString());

			//현재 시간을 받아온다.
			String toDateTime = CalendarUtil.getDateTime("yyyyMMddHHmmss");

			//카트번호 시퀀스를 채번한다.
			long cartNo = Long.parseLong(getNextSquence(con, DASBusinessConstants.SequenceName.CART_NO));

			int index = 0;
			stmt.setLong(++index, cartNo); 
			stmt.setString(++index, downCartDO.getDataClfCd()); 
			stmt.setString(++index, downCartDO.getPrioCd()); 
			stmt.setString(++index, downCartDO.getStrgLoc()); 
			stmt.setString(++index, downCartDO.getRistYn()); 

			stmt.setString(++index, downCartDO.getAppCont()); 
			//stmt.setString(++index, CommonUtl.transXmlText(downCartDO.getAppCont()));
			stmt.setString(++index, downCartDO.getReqUsrid()); 
			stmt.setString(++index, downCartDO.getReqNm()); 
			stmt.setString(++index, toDateTime);
			stmt.setString(++index, downCartDO.getDownDt()); 

			stmt.setString(++index, downCartDO.getAppDt()); 
			stmt.setString(++index, downCartDO.getDownSubj()); 
			stmt.setString(++index, downCartDO.getGaurantorId()); 
			stmt.setString(++index, toDateTime); 
			stmt.setString(++index, downCartDO.getRegrId());

			stmt.setString(++index, toDateTime); 
			stmt.setString(++index, downCartDO.getModrId()); 
			stmt.setString(++index, downCartDO.getVdQlty()); 
			stmt.setString(++index, downCartDO.getAspRtoCd()); 
			stmt.setString(++index, downCartDO.getCartStat());

			stmt.setString(++index, downCartDO.getReqUsrid().substring(0,1));
			stmt.setString(++index, downCartDO.getSeg_cd());
			stmt.setString(++index, downCartDO.getDeptCd());			
			stmt.setString(++index, downCartDO.getDown_gubun());
			stmt.setString(++index, downCartDO.getOut_strg_loc());
			stmt.setString(++index, "");
			stmt.setString(++index, downCartDO.getFl_path());

			stmt.executeUpdate();

			//DownCartDO 에 채번한 카트번호를 셋팅한다.
			downCartDO.setCartNo(cartNo);			

			return downCartDO;
		} 
		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}

	/**
	 * 해당 카트번호에 해당하는 카트내용을 테이블에 저장한다.
	 * @param cartNo 카트번호
	 * @param cartContDOList 카트내용 DataObject인 CartContDO 를 포함하고 있는 List
	 * @return List 
	 * @throws Exception 
	 */
	/*public CartContDO insertCartContInfo(CartContDO cartContDO) throws DASException
		{
			Connection con = null;
			try 
			{
				con = DBService.getInstance().getConnection();

				//현재 시간을 받아온다.
				String toDateTime = CalendarUtil.getDateTime("yyyyMMddHHmmss");

				//입력받은 카트번호에 해당하는 카트 내용들 중에 가장 큰 카트 내 순번을 구한다.
				int seq = selectCartContMaxSeq(cartContDO.getCartNo());
				if(cartContDO.getDown_typ().equals("F")){
					//풀다운로드인데 마스터아이디만 잇는경우(das 2.0)
					if(cartContDO.getMasterId()!=0&&(cartContDO.getCtId()==0&&cartContDO.getCtiId()==0)){

						CartContDO cart = getIdForMasterId(cartContDO.getMasterId());
						CartContDO cart2 =  selectAspVdInfo(cart.getCtId());
						cartContDO.setCtId(cart.getCtId());
						cartContDO.setCtiId(cart.getCtiId());
						cartContDO.setVd_qlty(cart2.getVd_qlty());
						cartContDO.setAsp_rto_cd(cart2.getAsp_rto_cd());
					}else{
						//풀다운로드인데 ct_id,cti_id둘다 존재하는 경우
						CartContDO cart2 =  selectAspVdInfo(cartContDO.getCtId());

						cartContDO.setVd_qlty(cart2.getVd_qlty());
						cartContDO.setAsp_rto_cd(cart2.getAsp_rto_cd());	
					}
				}else if(cartContDO.getDown_typ().equals("P")){
					CartContDO cart;
					if(cartContDO.getMasterId()==0){
						cart = getIdsForCtId(cartContDO.getCtId());
						cartContDO.setMasterId(cart.getMaster_id());
					}else{
						cart = getIdForCtId(cartContDO.getCtId());

					}

					CartContDO cart2 =  selectAspVdInfo(cartContDO.getCtId());
					//	cartContDO.setCtId(cart.getCtId());
					cartContDO.setCtiId(cart.getCtiId());
					cartContDO.setVd_qlty(cart2.getVd_qlty());
					cartContDO.setAsp_rto_cd(cart2.getAsp_rto_cd());
				}
				String riskYn = DASBusinessConstants.YesNo.NO;

				cartContDO.setCartSeq(++seq);




				// 풀다운로드 요청에 대한 EOM 값 Call
				if(StringUtils.isEmpty(cartContDO.getEom())||cartContDO.getEom().equals("00:00:00:00")){
					cartContDO.setEom(selectEomByCtId(cartContDO.getCtId()));
				}
				if(StringUtils.isEmpty(cartContDO.getAsp_rto_cd())){
					cartContDO.setAsp_rto_cd(selectAspRtoCDByCtId(cartContDO.getCtId()));
				}
				String riskClfCd = getRiskClfCd(cartContDO);
				String riskclfnm = getRistClfcd(riskClfCd);
				cartContDO.setRistClfCd(riskClfCd);
				cartContDO.setRist_clf_nm(riskclfnm);
				//사용제한구분이 무제한이 아니면 사용제한포함여부는 'Y'이
				//if(!CodeConstants.RiskCode.UNLIMIT.equals(riskClfCd))
				if(riskClfCd.equals(CodeConstants.AnnotCode.UNLIMITED))
				{
					riskYn = DASBusinessConstants.YesNo.NO;
				}else if (riskClfCd.equals(CodeConstants.AnnotCode.USE_LIMITED)){
					riskYn = DASBusinessConstants.YesNo.NO;
				}else if (riskClfCd.equals(CodeConstants.AnnotCode.CHECK_BY_COMPANY)){
					riskYn = DASBusinessConstants.YesNo.YES;
				}else if (riskClfCd.equals(CodeConstants.AnnotCode.CHECK_BY_PD)){
					riskYn = DASBusinessConstants.YesNo.YES;
				}else if (riskClfCd.equals(CodeConstants.AnnotCode.NOT_USE)){
					riskYn = DASBusinessConstants.YesNo.YES;
				}else if (riskClfCd.equals(CodeConstants.AnnotCode.LIMITED_BY_BROADCASTCENTER)){
					riskYn = DASBusinessConstants.YesNo.YES;
				}else {
					riskYn = DASBusinessConstants.YesNo.NO;
				}

				if(StringUtils.isEmpty(cartContDO.getSom())){
					cartContDO.setDuration(Long.parseLong(selectDurationByCtId(cartContDO.getCtId())));
				}
				insertCartContInfo(con, cartContDO, toDateTime, riskClfCd);

				//사용제한 여부가 'Y'이면 다운로드카트의 사용제한포함여부를 'Y'로 수정한다.
				if(DASBusinessConstants.YesNo.YES.equals(riskYn))
				{
					updateRiskYn(con, cartContDO.getCartNo(),cartContDO.getCartSeq(), riskYn);
				}
				String epis_no = getEpisNo(cartContDO.getCtId());
				cartContDO.setEpis_no(epis_no);
				return cartContDO;
			} 
			catch (NamingException e) 
			{
				// TODO 자동 생성된 catch 블록
				e.printStackTrace();

				DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "시스템 장애입니다.", e);
				throw exception;

			} 
			catch (SQLException e) 
			{
				// TODO 자동 생성된 catch 블록
				e.printStackTrace();

				DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "시스템 장애입니다.", e);
				throw exception;
			}
			finally
			{
				release(null, null, con);
			}

		}
	 */


	//20120926. 원본소스 복원후 수정시작 마스터id별 중복카트 담기.
	public CartContDO insertCartContInfo(CartContDO cartContDO) throws Exception
	{
		Connection con = null;
		try 
		{
			con = DBService.getInstance().getConnection();

			//현재 시간을 받아온다.
			String toDateTime = CalendarUtil.getDateTime("yyyyMMddHHmmss");

			//입력받은 카트번호에 해당하는 카트 내용들 중에 가장 큰 카트 내 순번을 구한다.
			int seq = selectCartContMaxSeq(cartContDO.getCartNo());
			if(cartContDO.getDown_typ().equals("F")){
				//풀다운로드인데 마스터아이디만 잇는경우(das 2.0)
				if(cartContDO.getMasterId()!=0&&(cartContDO.getCtId()==0&&cartContDO.getCtiId()==0)){

					CartContDO cart = getIdForMasterId(cartContDO.getMasterId());
					String[] groupctids=cart.getGroup_ct_ids().split(",");
					String[] groupctiids=cart.getGroup_cti_ids().split(",");

					for(int i=0;i<groupctiids.length;i++){
						CartContDO cart2 =  selectAspVdInfo(Long.parseLong(groupctids[i]));
						cartContDO.setCtId(Long.parseLong(groupctids[i]));
						cartContDO.setCtiId(Long.parseLong(groupctiids[i]));
						cartContDO.setVd_qlty(cart2.getVd_qlty());
						cartContDO.setAsp_rto_cd(cart2.getAsp_rto_cd());
						String riskYn = DASBusinessConstants.YesNo.NO;

						cartContDO.setCartSeq(++seq);




						// 풀다운로드 요청에 대한 EOM 값 Call
						if(StringUtils.isEmpty(cartContDO.getEom())||cartContDO.getEom().equals("00:00:00:00")){
							cartContDO.setEom(selectEomByCtId(cartContDO.getCtId()));
						}
						if(StringUtils.isEmpty(cartContDO.getAsp_rto_cd())){
							cartContDO.setAsp_rto_cd(selectAspRtoCDByCtId(cartContDO.getCtId()));
						}
						String riskClfCd = getRiskClfCd(cartContDO);
						String riskclfnm = getRistClfcd(riskClfCd);
						cartContDO.setRistClfCd(riskClfCd);
						cartContDO.setRist_clf_nm(riskclfnm);
						//사용제한구분이 무제한이 아니면 사용제한포함여부는 'Y'이
						if(riskClfCd.equals(CodeConstants.AnnotCode.UNLIMITED))
						{
							riskYn = DASBusinessConstants.YesNo.NO;
						}else if (riskClfCd.equals(CodeConstants.AnnotCode.USE_LIMITED)){
							riskYn = DASBusinessConstants.YesNo.NO;
						}else if (riskClfCd.equals(CodeConstants.AnnotCode.CHECK_BY_COMPANY)){
							riskYn = DASBusinessConstants.YesNo.YES;
						}else if (riskClfCd.equals(CodeConstants.AnnotCode.CHECK_BY_PD)){
							riskYn = DASBusinessConstants.YesNo.YES;
						}else if (riskClfCd.equals(CodeConstants.AnnotCode.NOT_USE)){
							riskYn = DASBusinessConstants.YesNo.YES;
						}else if (riskClfCd.equals(CodeConstants.AnnotCode.LIMITED_BY_BROADCASTCENTER)){
							riskYn = DASBusinessConstants.YesNo.YES;
						}else {
							riskYn = DASBusinessConstants.YesNo.NO;
						}

						if(StringUtils.isEmpty(cartContDO.getSom())){
							cartContDO.setDuration(Long.parseLong(selectDurationByCtId(cartContDO.getCtId())));
						}

						insertCartContInfo(con, cartContDO, toDateTime, riskClfCd);

						//사용제한 여부가 'Y'이면 다운로드카트의 사용제한포함여부를 'Y'로 수정한다.
						if(DASBusinessConstants.YesNo.YES.equals(riskYn))
						{
							updateRiskYn(con, cartContDO.getCartNo(),cartContDO.getCartSeq(), riskYn);
						}
						String epis_no = getEpisNo(cartContDO.getCtId());
						cartContDO.setEpis_no(epis_no);
					}
				}else{
					//풀다운로드인데 ct_id,cti_id둘다 존재하는 경우
					CartContDO cart2 =  selectAspVdInfo(cartContDO.getCtId());
					if(cartContDO.getCtiId() ==0||cartContDO.getMasterId()==0){
						CartContDO ctiId = getIdForCtId(cartContDO.getCtId());
						cartContDO.setCtiId(ctiId.getCtiId());
						cartContDO.setMasterId(ctiId.getMasterId());
					}

					cartContDO.setVd_qlty(cart2.getVd_qlty());
					cartContDO.setAsp_rto_cd(cart2.getAsp_rto_cd());
					String riskYn = DASBusinessConstants.YesNo.NO;

					cartContDO.setCartSeq(++seq);




					// 풀다운로드 요청에 대한 EOM 값 Call
					if(StringUtils.isEmpty(cartContDO.getEom())||cartContDO.getEom().equals("00:00:00:00")){
						cartContDO.setEom(selectEomByCtId(cartContDO.getCtId()));
					}
					if(StringUtils.isEmpty(cartContDO.getAsp_rto_cd())){
						cartContDO.setAsp_rto_cd(selectAspRtoCDByCtId(cartContDO.getCtId()));
					}
					String riskClfCd = getRiskClfCd(cartContDO);
					String riskclfnm = getRistClfcd(riskClfCd);
					cartContDO.setRistClfCd(riskClfCd);
					cartContDO.setRist_clf_nm(riskclfnm);
					//사용제한구분이 무제한이 아니면 사용제한포함여부는 'Y'이
					//if(!CodeConstants.RiskCode.UNLIMIT.equals(riskClfCd))
					if(riskClfCd.equals(CodeConstants.AnnotCode.UNLIMITED))
					{
						riskYn = DASBusinessConstants.YesNo.NO;
					}else if (riskClfCd.equals(CodeConstants.AnnotCode.USE_LIMITED)){
						riskYn = DASBusinessConstants.YesNo.NO;
					}else if (riskClfCd.equals(CodeConstants.AnnotCode.CHECK_BY_COMPANY)){
						riskYn = DASBusinessConstants.YesNo.YES;
					}else if (riskClfCd.equals(CodeConstants.AnnotCode.CHECK_BY_PD)){
						riskYn = DASBusinessConstants.YesNo.YES;
					}else if (riskClfCd.equals(CodeConstants.AnnotCode.NOT_USE)){
						riskYn = DASBusinessConstants.YesNo.YES;
					}else if (riskClfCd.equals(CodeConstants.AnnotCode.LIMITED_BY_BROADCASTCENTER)){
						riskYn = DASBusinessConstants.YesNo.YES;
					}else {
						riskYn = DASBusinessConstants.YesNo.NO;
					}

					if(StringUtils.isEmpty(cartContDO.getSom())){
						cartContDO.setDuration(Long.parseLong(selectDurationByCtId(cartContDO.getCtId())));
					}
					insertCartContInfo(con, cartContDO, toDateTime, riskClfCd);

					//사용제한 여부가 'Y'이면 다운로드카트의 사용제한포함여부를 'Y'로 수정한다.
					if(DASBusinessConstants.YesNo.YES.equals(riskYn))
					{
						updateRiskYn(con, cartContDO.getCartNo(),cartContDO.getCartSeq(), riskYn);
					}
					String epis_no = getEpisNo(cartContDO.getCtId());
					cartContDO.setEpis_no(epis_no);
				}
			}else if(cartContDO.getDown_typ().equals("P")){
				CartContDO cart;
				if(cartContDO.getMasterId()==0){
					cart = getIdsForCtId(cartContDO.getCtId());
					cartContDO.setMasterId(cart.getMaster_id());
				}else{
					cart = getIdForCtId(cartContDO.getCtId());

				}

				CartContDO cart2 =  selectAspVdInfo(cartContDO.getCtId());
				//	cartContDO.setCtId(cart.getCtId());
				cartContDO.setCtiId(cart.getCtiId());
				cartContDO.setVd_qlty(cart2.getVd_qlty());
				cartContDO.setAsp_rto_cd(cart2.getAsp_rto_cd());
				String riskYn = DASBusinessConstants.YesNo.NO;

				cartContDO.setCartSeq(++seq);




				// 풀다운로드 요청에 대한 EOM 값 Call
				if(StringUtils.isEmpty(cartContDO.getEom())||cartContDO.getEom().equals("00:00:00:00")){
					cartContDO.setEom(selectEomByCtId(cartContDO.getCtId()));
				}
				if(StringUtils.isEmpty(cartContDO.getAsp_rto_cd())){
					cartContDO.setAsp_rto_cd(selectAspRtoCDByCtId(cartContDO.getCtId()));
				}
				String riskClfCd = getRiskClfCd(cartContDO);
				String riskclfnm = getRistClfcd(riskClfCd);
				cartContDO.setRistClfCd(riskClfCd);
				cartContDO.setRist_clf_nm(riskclfnm);
				//사용제한구분이 무제한이 아니면 사용제한포함여부는 'Y'이
				//if(!CodeConstants.RiskCode.UNLIMIT.equals(riskClfCd))
				if(riskClfCd.equals(CodeConstants.AnnotCode.UNLIMITED))
				{
					riskYn = DASBusinessConstants.YesNo.NO;
				}else if (riskClfCd.equals(CodeConstants.AnnotCode.USE_LIMITED)){
					riskYn = DASBusinessConstants.YesNo.NO;
				}else if (riskClfCd.equals(CodeConstants.AnnotCode.CHECK_BY_COMPANY)){
					riskYn = DASBusinessConstants.YesNo.YES;
				}else if (riskClfCd.equals(CodeConstants.AnnotCode.CHECK_BY_PD)){
					riskYn = DASBusinessConstants.YesNo.YES;
				}else if (riskClfCd.equals(CodeConstants.AnnotCode.NOT_USE)){
					riskYn = DASBusinessConstants.YesNo.YES;
				}else if (riskClfCd.equals(CodeConstants.AnnotCode.LIMITED_BY_BROADCASTCENTER)){
					riskYn = DASBusinessConstants.YesNo.YES;
				}else {
					riskYn = DASBusinessConstants.YesNo.NO;
				}

				if(StringUtils.isEmpty(cartContDO.getSom())){
					cartContDO.setDuration(Long.parseLong(selectDurationByCtId(cartContDO.getCtId())));
				}
				insertCartContInfo(con, cartContDO, toDateTime, riskClfCd);

				//사용제한 여부가 'Y'이면 다운로드카트의 사용제한포함여부를 'Y'로 수정한다.
				if(DASBusinessConstants.YesNo.YES.equals(riskYn))
				{
					updateRiskYn(con, cartContDO.getCartNo(),cartContDO.getCartSeq(), riskYn);
				}
				String epis_no = getEpisNo(cartContDO.getCtId());
				cartContDO.setEpis_no(epis_no);
			}

			return cartContDO;
		} 

		catch (Exception e) 
		{

			throw e;
		}
		finally
		{
			release(null, null, con);
		}

	}




	/**
	 * 카트의 내용을 저장한다.(스토리지에 있는 것 포함)
	 * @param cartContDO 카트내용정보
	 * @return CartContDO
	 * @throws Exception 
	 */
	public CartContDO insertStCartContInfo(CartContDO cartContDO) throws Exception
	{
		Connection con = null;
		try 
		{
			con = DBService.getInstance().getConnection();

			//현재 시간을 받아온다.
			String toDateTime = CalendarUtil.getDateTime("yyyyMMddHHmmss");

			//입력받은 카트번호에 해당하는 카트 내용들 중에 가장 큰 카트 내 순번을 구한다.
			int seq = selectCartContMaxSeq(cartContDO.getCartNo());

			CartContDO cart = getIdForMasterId(cartContDO.getMasterId());
			CartContDO cart2 =  selectAspVdInfo(cartContDO.getCtId());
			String riskYn = DASBusinessConstants.YesNo.NO;
			cartContDO.setCartSeq(++seq);
			cartContDO.setCtId(cart.getCtId());
			cartContDO.setCtiId(cart.getCtiId());
			cartContDO.setVd_qlty(cart2.getVd_qlty());

			cartContDO.setAsp_rto_cd(cart2.getAsp_rto_cd());
			cartContDO.setAsp_rto_nm(cart2.getAsp_rto_nm());

			cartContDO.setVd_qlty_nm(cart2.getVd_qlty_nm());

			// 풀다운로드 요청에 대한 EOM 값 Call
			if(StringUtils.isEmpty(cartContDO.getEom())||cartContDO.getEom().equals("00:00:00:00")){
				cartContDO.setEom(selectEomByCtId(cartContDO.getCtId()));
			}
			if(StringUtils.isEmpty(cartContDO.getAsp_rto_cd())){
				cartContDO.setAsp_rto_cd(selectAspRtoCDByCtId(cartContDO.getCtId()));
			}
			String riskClfCd = getRiskClfCd(cartContDO);
			//사용제한구분이 무제한이 아니면 사용제한포함여부는 'Y'이
			//if(!CodeConstants.RiskCode.UNLIMIT.equals(riskClfCd))
			String risknm =getRistCdnm(riskClfCd);
			cartContDO.setRist_clf_nm(risknm);
			if(riskClfCd.equals(CodeConstants.AnnotCode.UNLIMITED))
			{
				riskYn = DASBusinessConstants.YesNo.NO;
			}else if (riskClfCd.equals(CodeConstants.AnnotCode.USE_LIMITED)){
				riskYn = DASBusinessConstants.YesNo.NO;
			}else if (riskClfCd.equals(CodeConstants.AnnotCode.CHECK_BY_COMPANY)){
				riskYn = DASBusinessConstants.YesNo.YES;
			}else if (riskClfCd.equals(CodeConstants.AnnotCode.CHECK_BY_PD)){
				riskYn = DASBusinessConstants.YesNo.YES;
			}else if (riskClfCd.equals(CodeConstants.AnnotCode.NOT_USE)){
				riskYn = DASBusinessConstants.YesNo.YES;
			}else if (riskClfCd.equals(CodeConstants.AnnotCode.LIMITED_BY_BROADCASTCENTER)){
				riskYn = DASBusinessConstants.YesNo.YES;
			}else {
				riskYn = DASBusinessConstants.YesNo.NO;
			}
			if(StringUtils.isEmpty(cartContDO.getSom())){
				cartContDO.setDuration(Long.parseLong(selectDurationByCtId(cartContDO.getCtId())));
			}
			insertCartContInfo(con, cartContDO, toDateTime, riskClfCd);

			//사용제한 여부가 'Y'이면 다운로드카트의 사용제한포함여부를 'Y'로 수정한다.
			if(DASBusinessConstants.YesNo.YES.equals(riskYn))
			{
				updateRiskYn(con, cartContDO.getCartNo(),cartContDO.getCartSeq(), riskYn);
			}

			return cartContDO;
		} 
		catch (Exception e) 
		{

			throw e;
		}
		finally
		{
			release(null, null, con);
		}

	}

	/**
	 * 카트의 내용을 저장한다.(스토리지에 있는 것 포함)
	 * @param cartContDO 카트내용정보
	 * @return CartContDO
	 * @throws Exception 
	 */
	public CartContDO insertStCartContInfo(DownCartDO downCartDO,CartContDO cartContDO) throws Exception
	{
		Connection con = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//현재 시간을 받아온다.
			String toDateTime = CalendarUtil.getDateTime("yyyyMMddHHmmss");

			//입력받은 카트번호에 해당하는 카트 내용들 중에 가장 큰 카트 내 순번을 구한다.
			int seq = selectCartContMaxSeq(downCartDO.getCartNo());

			CartContDO cart = getIdForMasterId(cartContDO.getMasterId());
			CartContDO cart2 =  selectAspVdInfo(cartContDO.getCtId());
			String riskYn = DASBusinessConstants.YesNo.NO;
			cartContDO.setCartSeq(++seq);
			cartContDO.setCtId(cart.getCtId());
			cartContDO.setCtiId(cart.getCtiId());
			cartContDO.setVd_qlty(cart2.getVd_qlty());

			cartContDO.setAsp_rto_cd(cart2.getAsp_rto_cd());
			cartContDO.setAsp_rto_nm(cart2.getAsp_rto_nm());			
			cartContDO.setVd_qlty_nm(cart2.getVd_qlty_nm());
			cartContDO.setSom("00:00:00:00");
			// 풀다운로드 요청에 대한 EOM 값 Call
			if(StringUtils.isEmpty(cartContDO.getEom())||cartContDO.getEom().equals("00:00:00:00")){
				cartContDO.setEom(selectEomByCtId(cartContDO.getCtId()));
			}
			if(StringUtils.isEmpty(cartContDO.getAsp_rto_cd())){
				cartContDO.setAsp_rto_cd(selectAspRtoCDByCtId(cartContDO.getCtId()));
			}
			String riskClfCd = getRiskClfCd(cartContDO);
			//사용제한구분이 무제한이 아니면 사용제한포함여부는 'Y'이
			//if(!CodeConstants.RiskCode.UNLIMIT.equals(riskClfCd))
			String risknm =getRistCdnm(riskClfCd);
			//사용제한구분이 무제한이 아니면 사용제한포함여부는 'Y'이
			//if(!CodeConstants.RiskCode.UNLIMIT.equals(riskClfCd))
			if(riskClfCd.equals(CodeConstants.AnnotCode.UNLIMITED))
			{
				riskYn = DASBusinessConstants.YesNo.NO;
			}else if (riskClfCd.equals(CodeConstants.AnnotCode.USE_LIMITED)){
				riskYn = DASBusinessConstants.YesNo.NO;
			}else if (riskClfCd.equals(CodeConstants.AnnotCode.CHECK_BY_COMPANY)){
				riskYn = DASBusinessConstants.YesNo.YES;
			}else if (riskClfCd.equals(CodeConstants.AnnotCode.CHECK_BY_PD)){
				riskYn = DASBusinessConstants.YesNo.YES;
			}else if (riskClfCd.equals(CodeConstants.AnnotCode.NOT_USE)){
				riskYn = DASBusinessConstants.YesNo.YES;
			}else if (riskClfCd.equals(CodeConstants.AnnotCode.LIMITED_BY_BROADCASTCENTER)){
				riskYn = DASBusinessConstants.YesNo.YES;
			}else {
				riskYn = DASBusinessConstants.YesNo.NO;
			}
			if(StringUtils.isEmpty(cartContDO.getSom())){
				cartContDO.setDuration(Long.parseLong(selectDurationByCtId(cartContDO.getCtId())));
			}
			insertCartContInfo(con, cartContDO, toDateTime, riskClfCd);
			cartContDO.setRistClfCd(riskClfCd);
			cartContDO.setRist_clf_nm(risknm);
			cartContDO.setTitle(getTitle(cartContDO.getMasterId()));

			//사용제한 여부가 'Y'이면 다운로드카트의 사용제한포함여부를 'Y'로 수정한다.
			if(DASBusinessConstants.YesNo.YES.equals(riskYn))
			{
				updateRiskYn(con, cartContDO.getCartNo(),cartContDO.getCartSeq(), riskYn);
			}

			return cartContDO;
		} 
		catch (Exception e) 
		{

			throw e;
		}
		finally
		{
			release(null, null, con);
		}

	}



	/**
	 * 관련 영상 등록
	 * @param parent_master_id 부모 마스터 아이디
	 * @param child_master_id 관련영상 마스터 아이디
	 * @return
	 * @throws Exception 
	 */
	public int insertRelationMaster(long parent_master_id,long child_master_id)throws Exception{

		Connection con = null;
		PreparedStatement stmt = null;
		StringBuffer buf=new StringBuffer();
		try {
			con=DBService.getInstance().getConnection();

			buf.append("\n insert into DAS.RELATION_MASTER (PARENT_MASTER_ID,CHILD_MASTER_ID) VALUES(?,?) ");
			stmt=con.prepareStatement(buf.toString());
			int index=0;
			stmt.setLong(++index	, parent_master_id);
			stmt.setLong(++index    , child_master_id);

			int iTmp = stmt.executeUpdate();

			return iTmp;
		}
		catch (Exception e) 
		{
			logger.error(buf.toString());
			if(con != null)
			{
				try {
					con.rollback();					
				} catch (SQLException e1) {
					// TODO 자동 생성된 catch 블록
					e1.printStackTrace();
				}
			}


			throw e;

		} 

		finally
		{
			release(null, stmt, con);
		}
	}
	/**
	 * 관련영상 정보를 삭제한다.
	 * @param parent_master_id  부모 마스터 정보
	 * @param child_master_id 관련영상 마스터 정보
	 * @return updatecount
	 * @throws Exception 
	 * @throws RemoteException
	 */
	public int deleteRelationMaster(long parent_master_id,long child_master_id)throws Exception{

		Connection con = null;
		PreparedStatement stmt = null;
		StringBuffer buf=new StringBuffer();
		try {
			con=DBService.getInstance().getConnection();

			buf.append("\n delete from  DAS.RELATION_MASTER where PARENT_MASTER_ID =? and  CHILD_MASTER_ID=? ");
			stmt=con.prepareStatement(buf.toString());
			int index=0;
			stmt.setLong(++index	, parent_master_id);
			stmt.setLong(++index    , child_master_id);

			int iTmp = stmt.executeUpdate();
			return iTmp;
		}

		catch (Exception e) 
		{
			logger.error(buf.toString());
			if(con != null)
			{
				try {
					con.rollback();					
				} catch (SQLException e1) {
					// TODO 자동 생성된 catch 블록
					e1.printStackTrace();
				}
			}

			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}
	}

	/**
	 * 대본내용을 테이블에 저장한다.
	 * @param scenarioDO 대본내용 정보
	 * @return
	 * @throws Exception 
	 */
	public int insertScenario(ScenarioDO scenarioDO) throws Exception
	{
		Connection con = null;
		PreparedStatement stmt = null;
		StringBuffer buf = new StringBuffer();
		try 
		{
			con = DBService.getInstance().getConnection();
			con.setAutoCommit(false);

			//대본 정보 삭제
			buf.append("\n delete from das.SCENARIO_REAL_TBL where master_id = ? and seq=?");
			stmt = con.prepareStatement(buf.toString());
			stmt.setLong(1, scenarioDO.getMasterId());
			stmt.setLong(2, scenarioDO.getSeq());
			stmt.executeUpdate();

			//대본정보를 등록
			StringBuffer buf2 = new StringBuffer();
			buf2.append("\n insert into das.SCENARIO_REAL_TBL (master_id,title,note,regdt,seq) values(?,?,?,?,?) ");
			stmt = con.prepareStatement(buf2.toString());

			//현재 시간을 받아온다.
			String toDateTime = CalendarUtil.getDateTime("yyyyMMddHHmmss");

			int index = 0;
			stmt.setLong(++index, scenarioDO.getMasterId());
			stmt.setString(++index, scenarioDO.getTitle());
			stmt.setString(++index, scenarioDO.getDesc());
			stmt.setString(++index, toDateTime );
			stmt.setInt(++index, scenarioDO.getSeq() );
			int iTmp = stmt.executeUpdate();


			con.commit();
			insertSceanarioForProceduer(scenarioDO.getMasterId());
			return  iTmp;

		} 
		catch (Exception e) 
		{
			logger.error(buf.toString());

			if(con != null)
			{
				try {
					con.rollback();
				} catch (SQLException e1) {
					// TODO 자동 생성된 catch 블록
					e1.printStackTrace();
				}
			}


			throw e;

		} 
		finally
		{
			try {
				con.setAutoCommit(true);
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				logger.error(e);
			}
			release(null, stmt, con);
		}

	}





	/**
	 * 대본내용을 테이블에 삭제한다.
	 * @param scenarioDO 대본내용 정보
	 * @return
	 * @throws Exception 
	 */
	public int deleteScenario(long master_id) throws Exception
	{
		Connection con = null;
		PreparedStatement stmt = null;
		StringBuffer buf = new StringBuffer();
		try 
		{
			con = DBService.getInstance().getConnection();
			con.setAutoCommit(false);

			//대본 정보 삭제

			buf.append("\n delete from das.scenario_tbl where master_id = ? ");
			stmt = con.prepareStatement(buf.toString());
			stmt.setLong(1, master_id);
			int iTmp = stmt.executeUpdate();



			//대본 정보 삭제
			StringBuffer buf2 = new StringBuffer();
			buf2.append("\n delete from das.SCENARIO_REAL_tBL where master_id = ? ");
			stmt = con.prepareStatement(buf2.toString());
			stmt.setLong(1, master_id);
			int iTmp2 = stmt.executeUpdate();
			con.commit();
			return  iTmp;

		} 
		catch (Exception e) 
		{
			logger.error(buf.toString());
			if(con != null)
			{
				try {
					con.rollback();
				} catch (SQLException e1) {
					// TODO 자동 생성된 catch 블록
					e1.printStackTrace();
				}
			}


			throw e;

		} 
		finally
		{
			try {
				con.setAutoCommit(true);
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			release(null, stmt, con);
		}

	}




	/**
	 * 입력받은 카트번호에 해당하는 다운로드 카트 정보와 카트 내용정보를 삭제 한다.
	 * @param cartNo 삭제할 카트번호
	 * @throws Exception 
	 */
	public void deleteAllCartInfo(long cartNo) throws Exception
	{
		StringBuffer buf = new StringBuffer();
		buf.append("\n delete from DAS.DOWN_CART_TBL where  CART_NO = ? ");


		Connection con = null;
		PreparedStatement stmt = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			con.setAutoCommit(false);

			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setLong(++index, cartNo); 

			stmt.executeUpdate();

			//카트 내용을 모두 삭제한다.
			deleteAllCartContInfo(con, cartNo);

			con.commit();
		} 
		catch (Exception e) 
		{
			logger.error(buf.toString());

			if(con != null)
			{
				try {
					con.rollback();
				} catch (SQLException e1) {
					// TODO 자동 생성된 catch 블록
					logger.error(e1);
				}
			}


			throw e;

		} 

		finally
		{
			try {
				con.setAutoCommit(true);
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				logger.error(e);
			}
			release(null, stmt, con);
		}

	}

	/**
	 * 에러정보를 등록 및 갱신한다.
	 * @param errorRegisterDO 에러 정보
	 * @throws Exception 
	 * @retrun errorRegisterDO 에러 정보		
	 */
	public ErrorRegisterDO insertErrorInfo(ErrorRegisterDO errorRegisterDO) throws Exception
	{
		Connection con = null;
		try 
		{
			// work_clf가 000이나 003이 들어오면 그냥 ""으로 바꿔준다. 
			// 원래 이런 값이 들어오면 안되는데 내가 위험하게도! 이렇게 값을 사용하고 있다.주의하자.
			String work_clf = errorRegisterDO.getWorkClf().trim();
			if ( (work_clf.equals("000")) || (work_clf.equals("003")) )
				errorRegisterDO.setWorkClf("");

			con = DBService.getInstance().getConnection();

			con.setAutoCommit(false);

			//에러등록 테이블에서 해당 마스터 ID의 error정보가 등록되어 있는지 확인한다.
			int count = selectErrorCount(errorRegisterDO.getMasterId());

			// 등록된 정보가 없으면 에러를 신규 등록한다
			if(count == 0)
				insertErrorRegInfo(con, errorRegisterDO);

			// 등록된 에러가 이미존재 하면 에러 정보를 갱신한다
			else
				updateErrorInfo(con, errorRegisterDO);

			String data_stat_cd = "";
			//메타 데이타 마스터 테이블 정보를 갱신한다.	
			/*
				if (errorRegisterDO.getWorkClf().equals("001"))	// 인제스트 재지시
					data_stat_cd = "004";
				else if (errorRegisterDO.getWorkClf().equals("002"))	// 아카이브 재지시
					data_stat_cd = "005";
			 */

			updateStatusCd(con, Long.parseLong(errorRegisterDO.getMasterId()), 
					data_stat_cd, errorRegisterDO.getRegrId(), errorRegisterDO.getRegDt(), "", work_clf);

			// ERP_D_TAPEITEM_TBL에 상태정보를 변경한다.
			updateERP_ErrorData(con, Long.parseLong(errorRegisterDO.getMasterId()));

			con.commit();			
			return errorRegisterDO;

		} 

		catch (Exception e) 
		{

			if(con != null)
			{
				try {
					con.rollback();					
				} catch (SQLException e1) {
					// TODO 자동 생성된 catch 블록
					e1.printStackTrace();
				}
			}


			throw e;
		}
		finally
		{
			try {
				con.setAutoCommit(true);
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				logger.error(e);
			}
			release(null, null, con);
		}

	}

	/**
	 * 메타 데이타 마스터 테이블 정보를 갱신한다.	
	 * @param masterID 마스터 ID
	 * @retrun statCd 상태 코드
	 * @return updateCount 		
	 * @throws Exception 
	 */
	public int updateMetadataStatusCd(long masterId, String statCd, String modrid, String moddt, 
			String lock_stat_cd, String error_stat_cd) throws Exception
			{
		Connection con = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			con.setAutoCommit(false);			

			//메타 데이타 마스터 테이블 정보를 갱신한다.	
			int updateCount = updateStatusCd(con, masterId, statCd, modrid, moddt, lock_stat_cd, error_stat_cd);

			con.commit();
			return updateCount;

		} 

		catch (Exception e) 
		{
			logger.error(masterId);
			logger.error(statCd);
			logger.error(modrid);
			logger.error(moddt);
			logger.error(lock_stat_cd);
			logger.error(error_stat_cd);

			if(con != null)
			{
				try {
					con.rollback();
				} catch (SQLException e1) {
					// TODO 자동 생성된 catch 블록
					logger.error(e1);
				}
			}


			throw e;
		}
		finally
		{
			try {
				con.setAutoCommit(true);
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				logger.error(e);
			}
			release(null, null, con);
		}

			}



	/**
	 * Input으로 넘어온 카트 내용 정보를 삭제한다.
	 * @param cartContDO 삭제할 카트내용인 CartContDO를 포함하고 있는 List
	 * @throws Exception 
	 */
	public void deleteCartInfo(long cartNo, int seq) throws Exception
	{
		Connection con = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			con.setAutoCommit(false);


			deleteCartContInfo(con, cartNo, seq);

			con.commit();
		} 

		catch (Exception e) 
		{

			logger.error(cartNo);
			logger.error(seq);

			if(con != null)
			{
				try {
					con.rollback();
				} catch (SQLException e1) {
					// TODO 자동 생성된 catch 블록
					logger.error(e1);
				}
			}


			throw e;
		}
		finally
		{
			try {
				con.setAutoCommit(true);
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				logger.error(e);
			}
			release(null, null, con);
		}

	}

	/**
	 * 요청 고객의 화질코드와 종횡비 코드가 다운로드카트 정보에 존재하는지를 검증한다.
	 * @param reqUserId 요청자ID
	 * @param vdQlty 화질코드
	 * @param aspRtoCd 종횡비코드
	 * @return boolean 존재하면 'true', 존재하지 않으면 'false'
	 * @throws Exception 
	 */
	public long isThereDownCart(String reqUserId, String vdQlty, String aspRtoCd) throws Exception
	{
		StringBuffer buf = new StringBuffer();
		//		buf.append("\n select ");
		//		buf.append("\n 	CART_NO ");
		//		buf.append("\n from DAS.DOWN_CART_TBL ");
		//		buf.append("\n where REQ_USRID = ? ");
		//		buf.append("\n 	and VD_QLTY = ? ");
		//		buf.append("\n 	and ASP_RTO_CD = ? ");
		//		buf.append("\n 	and CART_STAT = ? ");
		//		buf.append("\n WITH UR	 ");
		/**
		 *  기존 카트별 상태값에 따라 cart_no 발행기준
		 *  =>
		 *  카트 아이템별 상태값에 따라 cart_no 발행기준 변경
		 *  by DEKIM
		 */
		buf.append("\n SELECT CART_NO FROM CART_CONT_TBL WHERE CART_NO = ( ");
		buf.append("\n SELECT MAX(cart.CART_NO) FROM CART_CONT_TBL cart");
		buf.append("\n inner join down_cart_tbl down on down.cart_no = cart.cart_no WHERE cart.REGRID =?");
		buf.append("\n ) AND DOWN_STAT = ? ");
		buf.append("\n GROUP BY CART_NO ");

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();

			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setString(++index, reqUserId);
			//			stmt.setString(++index, vdQlty);
			//			stmt.setString(++index, aspRtoCd);
			stmt.setString(++index, CodeConstants.CartStatus2.REQ);

			rs = stmt.executeQuery();

			if (rs.next())
			{
				return rs.getLong("CART_NO");
			}
			else
				return -1;

		} 
		catch (Exception e) 
		{
			logger.error(buf.toString());

			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}



	/*public long selectMetadat(long master_id) throws DASException
		{
			StringBuffer buf = new StringBuffer();
			buf.append("\n select ");
			buf.append("\n 	CART_NO ");
			buf.append("\n from DAS.DOWN_CART_TBL ");
			buf.append("\n where REQ_USRID = ? ");
			buf.append("\n 	and VD_QLTY = ? ");
			buf.append("\n 	and ASP_RTO_CD = ? ");
			buf.append("\n 	and CART_STAT = ? ");
			buf.append("\n WITH UR	 ");

			Connection con = null;
			PreparedStatement stmt = null;
			ResultSet rs = null;
			try 
			{
				con = DBService.getInstance().getConnection();

				stmt = con.prepareStatement(buf.toString());

				int index = 0;
				stmt.setLong(++index, master_id);


				rs = stmt.executeQuery();

				if (rs.next())
				{
					return rs.getLong("CART_NO");
				}
				else
					return -1;

			} 
			catch (NamingException e) 
			{
				// TODO 자동 생성된 catch 블록
				logger.error(e);
		        DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "시스템 장애입니다.", e);
		        throw exception;
			} 
			catch (SQLException e) 
			{
				// TODO 자동 생성된 catch 블록
				logger.error(e);
		        DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "시스템 장애입니다.", e);
		        throw exception;
			}
			finally
			{
				release(rs, stmt, con);
			}
		}
	 */
	//	/**
	//	 * 코너 정보를 삭제한다.
	//	 * @param masterId  마스터 ID
	//	 * @param contentMappInfoDO 주석 정보
	//	 * @param cornerInfoDO 코너 정보	 
	//	 * @return 	CornerInfoDO object
	//	 * @throws DASException
	//	 */
	/*
		public CornerInfoDO deleteCornerInfo(long masterId, ContentMappInfoDO contentMappInfoDO, CornerInfoDO cornerInfoDO) throws DASException
		{
			Connection con = null;
			PreparedStatement stmt = null;
			try 
			{
				con = DBService.getInstance().getConnection();
				con.setAutoCommit(false);			

				//mapp 테이블을 삭제한다
				StringBuffer buf1 = new StringBuffer();
				buf1.append("\n delete from das.CONTENTS_MAPP_TBL where master_id= ? ");

				stmt = con.prepareStatement(buf1.toString());

				int index = 0;
	            stmt.setLong(++index, masterId);
	            stmt.executeUpdate();

				//코너 테이블을 삭제한다.		     
	            StringBuffer buf2 = new StringBuffer();
				buf2.append("\n delete from das.CORNER_TBL where master_id= ? ");

				stmt = con.prepareStatement(buf2.toString());

				index = 0;
	            stmt.setLong(++index, masterId);
	            stmt.executeUpdate();

				// 주석 테이블을 삭제한다.			
	            StringBuffer buf3 = new StringBuffer();
				buf3.append("\n delete from das.ANNOT_INFO_TBL where master_id= ? ");

				stmt = con.prepareStatement(buf3.toString());

				index = 0;
	            stmt.setLong(++index, masterId);
	            stmt.executeUpdate();

				// 클립 대표하면을 갱신한다.

	            StringBuffer buf4 = new StringBuffer();
				buf4.append("\n update das.metadat_mst_tbl set RPIMG_KFRM_SEQ = 0, RPIMG_CT_ID = 0 where master_id= ? ");

				stmt = con.prepareStatement(buf4.toString());

				index = 0;
	            stmt.setLong(++index, masterId);
	            stmt.executeUpdate();


	            //코너 정보를 저장한다.
	       //     CornerInfoDO cnDo = insertCornerinfo(con, cornerInfoDO);

	            //콘텐트 멥 정보를 저장한다.
	         //   insertContentsMappinfo(con, contentMappInfoDO);

				con.commit();

				return cnDo;

			} 
			catch (NamingException e) 
			{
				// TODO 자동 생성된 catch 블록
				logger.error(e);

		        if(con != null)
		        {
		        	try {
						con.rollback();
					} catch (SQLException e1) {
						// TODO 자동 생성된 catch 블록
						e1.printStackTrace();
					}
		        }

		        DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "시스템 장애입니다.", e);
		        throw exception;

			} 
			catch (SQLException e) 
			{
				// TODO 자동 생성된 catch 블록
				logger.error(e);

		        if(con != null)
		        {
		        	try {
						con.rollback();
					} catch (SQLException e1) {
						// TODO 자동 생성된 catch 블록
						e1.printStackTrace();
					}
		        }

		        DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "시스템 장애입니다.", e);
		        throw exception;
			}
			finally
			{
				release(null, null, con);			
			}

		}
	 */
	/**
	 * 입력받은 카트번호어 해당하는 다운로드 카트정보중 카트상태가 <p>
	 * 승인요청, 승인, 승인거부, 다운로드진행중, 다운로드완료 인 것들이 존재하는지를 확인한다.
	 * @param cartNo 카트번호
	 * @return boolean 존재하면 'true', 존재하지 않으면 'false'
	 * @throws Exception 
	 */
	public boolean isThereDownCartForStatus(long cartNo) throws Exception
	{
		StringBuffer buf = new StringBuffer();
		buf.append("\n select ");
		buf.append("\n 	count(1) ");
		buf.append("\n from DAS.DOWN_CART_TBL ");
		buf.append("\n where CART_NO = ? ");
		buf.append("\n 	and CART_STAT = ? ");
		buf.append("\n WITH UR	 ");

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setLong(++index, cartNo);
			stmt.setString(++index, CodeConstants.CartStatus.USE);

			rs = stmt.executeQuery();

			rs.next();

			int totalCount = rs.getInt(1);

			if(totalCount > 0)
			{
				return true;
			}
			else
			{
				return false;
			}
		} 

		catch (Exception e) 
		{
			logger.error(buf.toString());

			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}

	/**
	 * 입력받은 콘텐트 ID로 파일 경로 정보를 가저온다
	 * 
	 * @param contentId 콘텐트 번호
	 * @return PathInfoDO
	 * @throws Exception 
	 */
	public PathInfoDO selectFilePathInfo(long contentId) throws Exception
	{
		StringBuffer buf = new StringBuffer();
		buf.append("\n select ");
		buf.append("\n 	ct.kfrm_path, ");
		buf.append("\n 	cti.fl_path  ");		
		buf.append("\n from das.contents_tbl ct,das.contents_inst_tbl cti ");
		buf.append("\n where ct.ct_id = ? ");
		buf.append("\n 	and ct.ct_id=cti.ct_id ");
		buf.append("\n 	and cti.CTI_FMT='301' ");
		buf.append("\n WITH UR	 ");		

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setLong(++index, contentId);

			rs = stmt.executeQuery();

			if(rs.next())
			{
				PathInfoDO item = new PathInfoDO();
				item.setKfrmPath(       		rs.getString("KFRM_PATH"));
				item.setFlPath(        		rs.getString("FL_PATH"));


				return item;
			}
			else
			{
				return new PathInfoDO();
			}

		} 
		catch (Exception e) 
		{
			// TODO 자동 생성된 catch 블록
			logger.error(buf.toString());

			throw e;
		} 
		finally
		{
			release(rs, stmt, con);
		}
	}
	/**
	 * 가장큰 카트넘버를 불러온다 사용자id기준
	 * @param reqUserId 사용자id
	 * @return cart_no 카드번호
	 * @throws Exception 
	 */
	public long getLastCartNo(String reqUserId) throws Exception
	{
		StringBuffer buf = new StringBuffer();
		buf.append("\n select ");
		buf.append("\n 	* ");
		buf.append("\n from ");
		buf.append("\n ( ");
		buf.append("\n 	select  ");
		buf.append("\n 		cont.CART_NO, ");
		buf.append("\n 		ROW_NUMBER() OVER(order by cont.REG_DT DESC) AS rownum ");
		buf.append("\n 	from DAS.CART_CONT_TBL cont, DAS.DOWN_CART_TBL down ");
		buf.append("\n 	where cont.CART_NO = down.CART_NO ");
		buf.append("\n 		and down.REQ_USRID = ? ");
		buf.append("\n 		and down.CART_STAT = ? ");
		buf.append("\n ) temp ");
		buf.append("\n where temp.rownum = 1 ");
		buf.append("\n WITH UR ");

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();

			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setString(++index, reqUserId);
			stmt.setString(++index, CodeConstants.CartStatus.USE);

			rs = stmt.executeQuery();

			if(rs.next())
			{
				long cartNo = rs.getLong("CART_NO");

				return cartNo;
			}
			else
			{
				/*
					DASException exception = new DASException(
			        		ErrorConstants.NOT_EXIST_CART_INFO_OF_REQ_USER, "사용자에 해당하는 카트정보가 존재하지 않습니다.");
			        throw exception; */
				return 0;

			}
		} 

		catch (Exception e) 
		{
			logger.error(buf.toString());

			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}

	/**
	 * 스토리지 IP를 조회한다.
	 * 
	 * @return List 조회한  IP List
	 * @throws Exception 
	 */
	public List selectStorageIP() throws Exception
	{
		StringBuffer buf = new StringBuffer();
		buf.append("\n select desc from das.code_tbl where clf_cd = ?   WITH UR ");

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######selectStorageIP######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setString(++index, CodeConstants.CodeGroup.CLF_CD_M4_STORAGE);

			rs = stmt.executeQuery();

			List resultList = new ArrayList();
			while(rs.next())
			{
				resultList.add(rs.getString("desc"));
			}

			return resultList;
		} 
		catch (Exception e) 
		{
			logger.error(buf.toString());

			throw e;
		} 

		finally
		{
			release(rs, stmt, con);
		}

	}

	/**
	 * 구분 상세 코드를 조회한다.
	 * @param clfCd 구분 코드
	 * @return List 조회한 상세 구분 코드  List
	 * @throws Exception 
	 */
	public List selectCommonInfoList(String clfCd) throws Exception
	{
		StringBuffer buf = new StringBuffer();

		if (clfCd.trim().equalsIgnoreCase("_ALL") == true)
			buf.append("\n select clf_cd, scl_cd, desc ,gubun from das.code_tbl  WHERE use_yn='Y' order by clf_cd asc, rmk_2 asc , desc asc with ur ");
		else if (clfCd.equals("P058"))
			buf.append("\n select clf_cd, scl_cd, desc ,gubun from das.code_tbl where clf_cd = ? AND  use_yn='Y'  order by gubun desc with ur ");
		else
			buf.append("\n select clf_cd, scl_cd, desc ,gubun from das.code_tbl where clf_cd = ? AND  use_yn='Y'  order by desc asc with ur ");

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			stmt = con.prepareStatement(buf.toString());

			if (clfCd.trim().equalsIgnoreCase("_ALL") == false)
			{
				int index = 0;
				stmt.setString(++index, clfCd);
			}

			rs = stmt.executeQuery();

			List resultList = new ArrayList();
			while(rs.next())
			{
				CodeDO item = new CodeDO();
				item.setClfCd(rs.getString("CLF_CD"));
				item.setSclCd(rs.getString("SCL_CD"));
				item.setDesc((rs.getString("DESC")));
				item.setGubun(rs.getString("GUBUN"));

				resultList.add(item);
			}

			return resultList;
		} 
		catch (Exception e) 
		{
			logger.error(buf.toString());

			throw e;
		} 

		finally
		{
			release(rs, stmt, con);
		}

	}

	/**
	 * 구분 상세 코드를 조회한다.
	 * @return List 조회한 상세 구분 코드  List
	 * @throws Exception 
	 */
	public List selectFLIngestCommonCodeList() throws Exception
	{

		String query = ExternalStatement.selectFLIngestCommonCodeQuery();

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			stmt = con.prepareStatement(query);

			rs = stmt.executeQuery();

			List resultList = new ArrayList();
			while(rs.next())
			{
				CodeDO item = new CodeDO();
				item.setClfCd(rs.getString("CLF_CD"));
				//item.setClfNm(rs.getString("CLF_NM"));
				item.setSclCd(rs.getString("SCL_CD"));
				//item.setDesc(rs.getString("DESC"));
				item.setClfNm((rs.getString("CLF_NM")));
				item.setDesc((rs.getString("DESC")));

				resultList.add(item);
			}

			return resultList;
		} 
		catch (Exception e) 
		{
			logger.error(query);

			throw e;
		} 
		finally
		{
			release(rs, stmt, con);
		}

	}

	/**
	 * 구분 상세 코드를 조회한다.
	 * @return List 조회한 상세 구분 코드  List
	 * @throws Exception 
	 */
	public List selectTapeOutIngestCommonCodeList() throws Exception
	{

		String query = ExternalStatement.selectTapeOutIngestCommonCodeQuery();

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			stmt = con.prepareStatement(query);

			rs = stmt.executeQuery();

			List resultList = new ArrayList();
			while(rs.next())
			{
				CodeDO item = new CodeDO();
				item.setClfCd(rs.getString("CLF_CD"));
				//item.setClfNm(rs.getString("CLF_NM"));
				item.setSclCd(rs.getString("SCL_CD"));
				//item.setDesc(rs.getString("DESC"));
				item.setClfNm((rs.getString("CLF_NM")));
				item.setDesc((rs.getString("DESC")));

				resultList.add(item);
			}

			return resultList;
		} 
		catch (Exception e) 
		{
			logger.error(query);

			throw e;
		} 

		finally
		{
			release(rs, stmt, con);
		}

	}

	/**
	 * 다운 카트 정보를 조회한다.
	 * @param 	reqUserId	요청자 ID
	 * @param 	resolution	해상도  
	 * @param 	reqDtChk
	 * @param 	String		요청일자
	 * @return List 조회한 상세 구분 코드  List
	 * @throws Exception 
	 */
	public List selectTapeOutIngestDownCartInfoList(String reqUserId, int resolution, boolean reqDtChk, String reqDt) throws Exception
	{

		String where = " WHERE DCT.DOWN_GUBUN='004'  and down.JOB_STATUS='C'    ";

		//        switch (resolution)
		//        {
		//            case 0: // 4:3 SD
		//              where += " AND DAS.DOWN_CART_TBL.ASP_RTO_CD='002' AND DAS.DOWN_CART_TBL.VD_QLTY='002' ";
		//              break;
		//            case 1: // 16:9 SD
		//               where += " AND DAS.DOWN_CART_TBL.ASP_RTO_CD='001' AND DAS.DOWN_CART_TBL.VD_QLTY='002' ";
		//                break;
		//            case 2: // 16:9 HD
		//               where += " AND DAS.DOWN_CART_TBL.ASP_RTO_CD='001' AND DAS.DOWN_CART_TBL.VD_QLTY='001' ";
		//               break;
		//         }

		if(!StringUtils.isEmpty(reqUserId))
			//        if (reqUserId!=null&&reqUserId!=""&&reqUserId!=" ")
			where += " AND DCT.REQ_USRID='" + reqUserId + "' ";

		if (reqDtChk)
			where += " AND DCT.REQ_DT LIKE '" + reqDt + "%' ";


		StringBuffer buf = new StringBuffer();
		buf.append("\n SELECT                                                                 ");
		buf.append("\n 	 	 DCT.CART_NO,                                                       ");
		buf.append("\n 	 	 DCT.VD_QLTY,                                                       ");
		buf.append("\n 	 	 DCT.ASP_RTO_CD,                                                    ");
		buf.append("\n 	 	 DCT.REQ_USRID,                                                     ");
		buf.append("\n 	 	 DCT.PRIO_CD,                                                       ");
		buf.append("\n 	 	 DCT.DOWN_SUBJ,                                                     ");
		//buf.append("\n 	 	 (select path from contents_down_tbl where cart_no = DCT.cart_no and cart_seq = cct.cart_seq group by path) STRG_LOC,  ");
		buf.append("\n 	 	 DOWN.PATH as STRG_LOC,                                                        ");
		buf.append("\n 	 	 DCT.REQ_DT,                                                        ");
		buf.append("\n 	 	 DCT.DOWN_DT,                                                       ");
		buf.append("\n 	 	 DCT.DATA_CLF_CD,                                                   ");
		buf.append("\n          SUM(CCT.DURATION) AS DURATION                                 ");
		buf.append("\n 		 	                                                                  ");
		buf.append("\n 	 	 FROM DAS.DOWN_CART_TBL  DCT                                        ");
		buf.append("\n 	 	 INNER JOIN DAS.CART_CONT_TBL CCT ON CCT.CART_NO = DCT.CART_NO      ");
		buf.append("\n 	 	  inner JOIN   CONTENTS_DOWN_TBL down ON  DCT.CART_NO = down.cart_no AND CCT.CART_SEQ = down.cart_seq       ");

		buf.append("\n" + where );
		buf.append("\n 	     GROUP BY  DCT.CART_NO,                                           ");
		buf.append("\n 	 	 DCT.VD_QLTY,                                                       ");
		buf.append("\n 	 	 DCT.ASP_RTO_CD,                                                    ");
		buf.append("\n 	 	 DCT.REQ_USRID,                                                     ");
		buf.append("\n 	 	 DCT.PRIO_CD,                                                       ");
		buf.append("\n 	 	 DCT.DOWN_SUBJ,                                                     ");
		buf.append("\n 	 	 DCT.STRG_LOC,                                                      ");
		buf.append("\n 	 	 DCT.REQ_DT,                                                        ");
		buf.append("\n 	 	 DCT.DOWN_DT,                                                       ");
		buf.append("\n	 	 DCT.DATA_CLF_CD ,                                                   ");
		buf.append("\n	 	 DOWN.PATH                                                ");
		buf.append("\n	 	 ORDER BY DCT.CART_NO                                               ");	
		buf.append("\n WITH UR ");	   

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			stmt = con.prepareStatement(buf.toString());

			rs = stmt.executeQuery();

			List resultList = new ArrayList();
			while(rs.next())
			{
				DownCartDO item = new DownCartDO();
				item.setCartNo(rs.getLong("CART_NO"));
				item.setVdQlty(rs.getString("VD_QLTY"));
				item.setAspRtoCd(rs.getString("ASP_RTO_CD"));
				item.setReqUsrid(rs.getString("REQ_USRID"));
				item.setDataClfCd(rs.getString("DATA_CLF_CD"));
				item.setPrioCd(rs.getString("PRIO_CD"));	
				item.setDownSubj((rs.getString("DOWN_SUBJ")));
				String path = rs.getString("STRG_LOC");
				if(!path.startsWith("/"))
					path = "/"+path;

				path = path.replace("//", "/");

				item.setStrgLoc("mp2"+path);
				item.setReqDt(rs.getString("REQ_DT"));
				item.setDownDt(rs.getString("DOWN_DT"));			
				item.setDuration(rs.getString("DURATION"));
				resultList.add(item);
			}

			return resultList;
		} 
		catch (Exception e) 
		{
			logger.error(buf.toString());

			throw e;
		} 

		finally
		{
			release(rs, stmt, con);
		}

	}

	/**
	 * 카트 콘텐트 정보를 조회한다.
	 * @param 	cartNo	카트 번호 
	 * @return List    카트 콘텐트 정보 List
	 * @throws Exception 
	 */
	public List selectTapeOutIngestCartItemInfo(long cartNo) throws Exception
	{

		StringBuffer buf = new StringBuffer();
		buf.append("\n SELECT ");
		buf.append("\n DAS.CART_CONT_TBL.CART_NO, ");
		buf.append("\n DAS.CART_CONT_TBL.CART_SEQ, ");
		buf.append("\n DAS.CART_CONT_TBL.CT_ID, ");
		buf.append("\n DAS.CART_CONT_TBL.CTI_ID, ");
		buf.append("\n DAS.CART_CONT_TBL.DURATION, ");
		buf.append("\n DAS.CONTENTS_TBL.CT_NM, ");
		buf.append("\n DAS.CART_CONT_TBL.VD_QLTY, ");
		buf.append("\n DAS.CART_CONT_TBL.ASP_RTO_CD, ");
		buf.append("\n DAS.CART_CONT_TBL.DOWN_DT, ");
		buf.append("\n DAS.CART_CONT_TBL.DOWN_STAT,");
		buf.append("\n VALUE(down.JOB_STATUS,'') AS JOB_STATUS ,");
		buf.append("\n VALUE(DOWN.PROGRESS, '0') AS PROGRESS ,");
		buf.append("\n VALUE(down.FILENAME,'') AS FILENAME , ");
		buf.append("\n MMT.TITLE,");
		buf.append("\n value(MMT.EPIS_NO,0) as EPIS_NO, ");
		buf.append("\n MMT.BRD_DD ,");
		buf.append("\n DAS.CONTENTS_TBL.MEDIA_ID ");
		buf.append("\n FROM DAS.CART_CONT_TBL "); 
		buf.append("\n INNER JOIN DAS.CONTENTS_TBL ON DAS.CART_CONT_TBL.CT_ID=DAS.CONTENTS_TBL.CT_ID ");
		buf.append("\n LEFT OUTER JOIN DAS.METADAT_MST_TBL MMT ON MMT.MASTER_ID = DAS.CART_CONT_TBL.MASTER_ID ");
		buf.append("\n LEFT OUTER JOIN ( select filename, cart_no,cart_seq , JOB_STATUS,PROGRESS from das.contents_down_tbl group by filename, cart_no,cart_seq, JOB_STATUS,PROGRESS ) down on down.cart_no =DAS.CART_CONT_TBL.cart_no  and down.CART_seq=DAS.CART_CONT_TBL.cart_seq ");
		buf.append("\n WHERE DAS.CART_CONT_TBL.CART_NO = ? ");
		buf.append("\n ORDER BY DAS.CART_CONT_TBL.CART_NO,DAS.CART_CONT_TBL.CART_SEQ ");
		buf.append("\n WITH UR ");	

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			stmt = con.prepareStatement(buf.toString());

			int index = 0;			
			stmt.setLong(++index, cartNo);

			rs = stmt.executeQuery();			

			List resultList = new ArrayList();
			while(rs.next())
			{
				CartContDO item = new CartContDO();
				item.setCartNo(rs.getLong("CART_NO"));
				item.setCartSeq(rs.getInt("CART_SEQ"));
				item.setCtId(rs.getLong("CT_ID"));
				item.setCtiId(rs.getLong("CTI_ID"));
				item.setDuration(rs.getLong("DURATION"));
				//item.setCtNm(rs.getString("CT_NM"));
				item.setCtNm((rs.getString("CT_NM")));
				item.setTitle((rs.getString("TITLE")));
				item.setEpis_no(rs.getString("EPIS_NO"));
				item.setBrd_dd((rs.getString("BRD_DD")));
				item.setAsp_rto_cd(rs.getString("ASP_RTO_CD"));
				item.setVd_qlty(rs.getString("VD_QLTY"));
				item.setDown_dt(rs.getString("DOWN_DT"));
				item.setFile_nm(rs.getString("filename"));
				item.setDown_stat(rs.getString("DOWN_STAT"));
				item.setJob_status(rs.getString("JOB_STATUS"));
				item.setProgress(rs.getString("progress"));
				item.setMedia_id(rs.getString("MEDIA_ID"));
				resultList.add(item);
			}

			return resultList;
		} 
		catch (Exception e) 
		{
			logger.error(buf.toString());

			throw e;
		} 

		finally
		{
			release(rs, stmt, con);
		}

	}

	/**
	 * 구분 상세 코드를 조회한다.
	 * @return List 조회한 상세 구분 코드  List
	 * @throws Exception 
	 */
	public List selectSDIngestCommonCodeList() throws Exception
	{

		String query = ExternalStatement.selectSDIngestCommonCodeQuery();

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			stmt = con.prepareStatement(query);

			rs = stmt.executeQuery();

			List resultList = new ArrayList();
			while(rs.next())
			{
				CodeDO item = new CodeDO();
				item.setClfCd(rs.getString("CLF_CD"));
				//item.setClfNm(rs.getString("CLF_NM"));
				item.setClfNm((rs.getString("CLF_NM")));
				item.setSclCd(rs.getString("SCL_CD"));
				//item.setDesc(rs.getString("DESC"));
				item.setDesc((rs.getString("DESC")));

				resultList.add(item);
			}

			return resultList;
		} 
		catch (Exception e) 
		{
			logger.error(query);

			throw e;
		} 

		finally
		{
			release(rs, stmt, con);
		}		
	}

	/**
	 * 인제스트 장비 정보를 조회한다.
	 * @param eqClfCd 장비 구분 코드
	 * @return EquipmentMonitoringDO 장비 정보 object
	 * @throws Exception 
	 */
	public List selectSDIngestServerList(String eqClfCd) throws Exception
	{

		String query = ExternalStatement.selectIngestServerQuery();

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######selectSDIngestServerList######## con : " + con);
			stmt = con.prepareStatement(query);
			int index = 0;			
			stmt.setString(++index, eqClfCd);

			rs = stmt.executeQuery();

			List resultList = new ArrayList();
			while(rs.next())
			{
				EquipmentMonitoringDO item = new EquipmentMonitoringDO();
				item.setDasEqId(rs.getInt("DAS_EQ_ID"));
				item.setDasEqNm((rs.getString("DAS_EQ_NM")));
				item.setDasEqClfCd(rs.getString("DAS_EQ_CLF_CD"));
				item.setDasEqSeq(rs.getInt("DAS_EQ_SEQ"));
				item.setEqUseIp(rs.getString("DAS_EQ_USE_IP"));
				item.setEqUsePort((rs.getString("DAS_EQ_USE_PORT")));				

				resultList.add(item);
			}

			return resultList;
		} 

		catch (Exception e) 
		{
			logger.error(query);

			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}

	}

	/**
	 * 테이프 정보를  조회한다.
	 * @param 	tapeId	테이프 ID 
	 * @return List    테이프 정보 List
	 * @throws Exception 
	 */
	public List selectSDIngestRefreshTapeInfo(String tapeId) throws Exception
	{

		StringBuffer buf = new StringBuffer();
		buf.append("\n SELECT ");
		buf.append("\n DAS.D_TAPE_TBL.RTG_DD, ");
		buf.append("\n DAS.D_TAPE_TBL.GATH_NO, ");
		buf.append("\n DAS.D_TAPE_TBL.GATH_NM, ");
		buf.append("\n DAS.D_TAPE_TBL.TAPE_KIND, ");
		buf.append("\n DAS.D_TAPE_TBL.TAPE_NUM ");
		buf.append("\n FROM DAS.D_TAPE_TBL "); 	 		
		buf.append("\n WHERE DAS.D_TAPE_TBL.TAPE_ID = ? ");	
		buf.append("\n WITH UR ");	 		

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			stmt = con.prepareStatement(buf.toString());

			int index = 0;			
			stmt.setString(++index, tapeId);

			rs = stmt.executeQuery();			

			List resultList = new ArrayList();
			while(rs.next())
			{
				TapeContentInfoDO item = new TapeContentInfoDO();
				item.setRtgDd(rs.getString("RTG_DD"));
				item.setGthNo(rs.getString("GATH_NO"));
				item.setGthNm(rs.getString("GATH_NM"));
				item.setTapeKind(rs.getString("TAPE_KIND"));
				item.setTapeNum(rs.getString("TAPE_NUM"));

				resultList.add(item);
			}

			return resultList;
		} 
		catch (Exception e) 
		{
			logger.error(buf.toString());

			throw e;
		} 

		finally
		{
			release(rs, stmt, con);
		}

	}

	/**
	 * 테이프 정보를  조회한다.
	 * @param 	tapeId	테이프 ID 
	 * @return String    테이프 아이템 상태 코드
	 * @throws Exception 
	 */
	public String selectSDIngestStatusInfo(String tapeItemId) throws Exception
	{

		StringBuffer buf = new StringBuffer();

		buf.append("\n SELECT ");
		buf.append("\n DAS.D_TAPEITEM_TBL.INGEST_STATUS ");
		buf.append("\n FROM DAS.D_TAPEITEM_TBL "); 	 		
		buf.append("\n WHERE DAS.D_TAPEITEM_TBL.TAPE_ITEM_ID = ? ");	
		buf.append("\n WITH UR ");		 	  

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			stmt = con.prepareStatement(buf.toString());

			int index = 0;			
			stmt.setString(++index, tapeItemId);

			rs = stmt.executeQuery();			

			String str = null;
			if(rs.next())
			{
				str = rs.getString("INGEST_STATUS");
				return str;				
			}
			else
				return str;
		} 
		catch (Exception e) 
		{
			logger.error(buf.toString());

			throw e;
		} 
		finally
		{
			release(rs, stmt, con);
		}

	}

	/**
	 * 테입 정보를 조회한다.
	 * @param 	reqNum 
	 * @param 	pgmNm   		프로그램 이름
	 * @param	IngestStatus	인제스트 상태
	 * @return List 조회한 테입 정보  List
	 * @throws Exception 
	 */
	public List selectSDTapeInfoList(String reqNum, String pgmNm, String IngestStatus, boolean OnAirDateSearch,String OnAirDateStart, String OnAirDateEnd ) throws Exception
	{

		String where = "";
		boolean first = true;
		int i = 0;
		int j = 0;
		String[] datas = null;

		if (reqNum.length() > 0)
		{
			where += (first ? " WHERE " : "");

			where += " ( ";

			//  datas = reqNum.split(' ', ',', ';');
			datas = reqNum.split(",");

			for (i = 0, j = 0; i < datas.length; i++)
			{
				if (datas[i].trim() == "")
					continue;

				where += ((j == 0 ? "" : " OR ") + " DAS.D_TAPEITEM_TBL.REQ_NO LIKE '%" + datas[i].trim().toUpperCase() + "%' ");
				j++;
			}

			where += " ) ";

			first = false;
		}

		if (pgmNm.length() > 0)
		{
			where += (first ? " WHERE " : " AND ");

			// datas = pgmNm.Split(' ', ',', ';');
			datas = pgmNm.split(",");

			where += " ( ";

			for (i = 0, j = 0; i < datas.length; i++)
			{
				if (datas[i].trim() == "")
					continue;

				where += ((j == 0 ? "" : " AND ") + " DAS.D_TAPEITEM_TBL.SCN_TTL LIKE '%" + datas[i].trim().toUpperCase() + "%' ");
				j++;
			}

			where += " ) ";

			first = false;
		}

		if (!StringUtils.isEmpty(IngestStatus))
		{
			if (IngestStatus.indexOf(",") != -1)
			{
				// datas = StringUtils.split(IngestStatus, "|");
				datas = IngestStatus.split(",");
				String subwhere = "";

				for (i = 0; i < datas.length; i++)
				{
					subwhere += (i == 0 ? " " : " OR ") + (" DAS.D_TAPEITEM_TBL.INGEST_STATUS='" + datas[i].trim() + "' ");
				}

				where += (first ? " WHERE " : " AND ") + " (" + subwhere + " OR " +
						"DAS.D_TAPEITEM_TBL.INGEST_STATUS IS NULL OR " +
						"DAS.D_TAPEITEM_TBL.INGEST_STATUS='' ) ";
				first = false;
			}
			else if (IngestStatus == "001")
			{
				where += (first ? " WHERE " : " AND ") + "( DAS.D_TAPEITEM_TBL.INGEST_STATUS='" + IngestStatus + "' OR " + 
						"DAS.D_TAPEITEM_TBL.INGEST_STATUS IS NULL OR " +
						"DAS.D_TAPEITEM_TBL.INGEST_STATUS='' ) ";
				first = false;
			}
			else
			{
				where += (first ? " WHERE " : " AND ") + " DAS.D_TAPEITEM_TBL.INGEST_STATUS='" + IngestStatus + "' ";
				first = false;
			}
		}

		if (OnAirDateSearch)
		{
			where += (first ? " WHERE " : " AND ") + " DAS.D_TAPEITEM_TBL.BRD_DD>='" + OnAirDateStart + "' AND " +
					" DAS.D_TAPEITEM_TBL.BRD_DD<='" + OnAirDateEnd + "' ";
		}


		StringBuffer buf = new StringBuffer();
		buf.append("\n SELECT ");
		buf.append("\n DAS.D_TAPEITEM_TBL.TAPE_ID, ");
		buf.append("\n DAS.D_TAPEITEM_TBL.SCN_TTL, ");
		buf.append("\n DAS.D_TAPEITEM_TBL.REQ_NO, "); 		
		buf.append("\n DAS.D_TAPEITEM_TBL.TAPE_ITEM_ID, ");
		buf.append("\n DAS.D_TAPEITEM_TBL.LEN, ");
		buf.append("\n value (DAS.D_TAPEITEM_TBL.EPIS_NO,0) as epis_no, ");
		buf.append("\n DAS.D_TAPEITEM_TBL.BRD_DD, ");
		buf.append("\n DAS.D_TAPEITEM_TBL.CMR_MAN, ");
		buf.append("\n DAS.D_TAPEITEM_TBL.CMR_PLACE, "); 		
		buf.append("\n DAS.D_TAPEITEM_TBL.CMR_DD, ");
		buf.append("\n DAS.D_TAPEITEM_TBL.KEY_WORDS, ");
		buf.append("\n DAS.D_TAPEITEM_TBL.WORK_SEQ, ");
		buf.append("\n DAS.D_TAPEITEM_TBL.COLOR_CD, "); 		
		buf.append("\n DAS.D_TAPEITEM_TBL.RECORD_TYPE_CD, ");
		buf.append("\n DAS.D_TAPEITEM_TBL.ME_CD, ");
		buf.append("\n DAS.D_TAPEITEM_TBL.SUB_TTL, ");
		buf.append("\n DAS.D_TAPEITEM_TBL.PRDTR, ");
		buf.append("\n DAS.D_TAPEITEM_TBL.INGEST_STATUS ");	 	
		buf.append("\n FROM DAS.D_TAPEITEM_TBL ");
		buf.append("\n " + where);
		buf.append("\n ORDER BY  ");
		buf.append("\n DAS.D_TAPEITEM_TBL.WORK_SEQ ASC,DAS.D_TAPEITEM_TBL.REQ_NO ASC,DAS.D_TAPEITEM_TBL.TAPE_ITEM_ID ASC ");
		buf.append("\n FETCH FIRST 100 ROWS ONLY ");
		buf.append("\n WITH UR ");			

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			stmt = con.prepareStatement(buf.toString());

			rs = stmt.executeQuery();

			List resultList = new ArrayList();
			while(rs.next())
			{

				TapeItemInfoDO item = new TapeItemInfoDO();
				item.setTapeId(rs.getString("TAPE_ID"));
				item.setReqNo(rs.getString("REQ_NO"));
				item.setTapeItemId(rs.getString("TAPE_ITEM_ID"));
				item.setScnTtl((rs.getString("SCN_TTL")));
				item.setLen(rs.getInt("LEN"));
				item.setEpisNo(rs.getInt("EPIS_NO"));
				item.setBrdDd(rs.getString("BRD_DD"));
				item.setCmrMan(rs.getString("CMR_MAN"));
				item.setCmrPlace(rs.getString("CMR_PLACE"));				
				item.setCmrDd(rs.getString("CMR_DD"));
				item.setKeyWord(rs.getString("KEY_WORDS"));
				item.setWorkSeq(rs.getString("WORK_SEQ"));
				item.setColorCd(rs.getString("COLOR_CD"));				
				item.setRecordTypeCd(rs.getString("RECORD_TYPE_CD"));
				item.setMeCd(rs.getString("ME_CD"));
				item.setIngestStatus(rs.getString("INGEST_STATUS"));
				item.setSubTtl(rs.getString("SUB_TTL"));
				item.setPrdtr(rs.getString("PRDTR"));

				resultList.add(item);				
				//scount++;


			}

			return resultList;
		} 
		catch (Exception e) 
		{
			logger.error(buf.toString());

			throw e;
		} 

		finally
		{
			release(rs, stmt, con);
		}

	}

	/**
	 * 파일 인제스트 감시 정보를 가져온다
	 * @return List 조회한 인제스트 정보 List
	 * @throws Exception 
	 */
	public List selectFlIngestLastCommandList() throws Exception
	{

		StringBuffer buf = new StringBuffer();
		buf.append("\n SELECT ");
		buf.append("\n DAS.FI_WATCH_TBL.DAS_EQ_SEQ, ");
		buf.append("\n DAS.FI_WATCH_TBL.REG_DT, ");
		buf.append("\n DAS.FI_WATCH_TBL.XML ");
		buf.append("\n FROM DAS.FI_WATCH_TB ");
		buf.append("\n ORDER BY DAS.FI_WATCH_TBL.REG_DT ");	
		buf.append("\n WITH UR ");	

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######selectFlIngestLastCommandList######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			rs = stmt.executeQuery();

			List resultList = new ArrayList();
			while(rs.next())
			{
				FIWatchInfoDO item = new FIWatchInfoDO();
				item.setDasEqSeq(rs.getInt("DAS_EQ_SEQ"));
				item.setRegDt(rs.getString("REG_DT"));
				item.setXml(rs.getString("XML"));


				resultList.add(item);
			}

			return resultList;
		} 
		catch (Exception e) 
		{
			logger.error(buf.toString());

			throw e;
		} 

		finally
		{
			release(rs, stmt, con);
		}

	}


	/**
	 * 파일 인제스트 감시 정보를 삭제한다
	 * @param eQseq DAS 장비 순번
	 * @param regDt 등록일시
	 * @throws Exception 
	 */
	public void deleteFLIngestRemoveCommand(int eQseq, String regDt) throws Exception
	{

		StringBuffer buf = new StringBuffer();
		buf.append("\n DELETE FROM DAS.FI_WATCH_TBL  ");
		buf.append("\n WHERE DAS.FI_WATCH_TBL.DAS_EQ_SEQ = ? ");
		buf.append("\n  AND DAS.FI_WATCH_TBL.REG_DT= ? ");		

		Connection con = null;
		PreparedStatement stmt = null;		
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######deleteFLIngestRemoveCommand######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;			
			stmt.setInt(++index, eQseq);
			stmt.setString(++index, regDt); 	

			stmt.executeUpdate();
		} 

		catch (Exception e) 
		{
			logger.error(buf.toString());

			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}

	/**
	 * 인제스트 상태 정보를 갱신한다
	 * @param itemId 테이프 아이템 ID
	 * @param ingestStatus 인제스트 상태
	 * @return Update count
	 * @throws DASException
	 */
	public int updateSDIngestStatus(String itemId, String ingestStatus) throws DASException
	{
		/*
			StringBuffer buf = new StringBuffer();
			buf.append("\n UPDATE DAS.ERP_D_TAPEITEM_TBL  SET");
			buf.append("\n DAS.ERP_D_TAPEITEM_TBL.INGEST_STATUS = ? ");
			if(ingestStatus.compareTo("004") == 0)
			{
				buf.append("\n DAS.ERP_D_TAPEITEM_TBL.INGEST_DD = ? ");
				buf.append("\n , DAS.ERP_D_TAPEITEM_TBL.INGEST_YN = 'Y' ");
			}
			buf.append("\n WHERE DAS.ERP_D_TAPEITEM_TBL.TAPE_ITEM_ID = ? ");
		 */
		/*
			Fw: [DAS] Encoding 결과 ERP에 update 를 못하고 있네요 
			버튼  "Geon Hak Kim"<ghkim@kr.ibm.com>     | 2009-01-07 (수) 20:15:36 [GMT +09:00 (서울)] 
			김과장님,

			우리쪽에 있는 table에 update하는것이 아니라 ERP쪽에 있는 테이블(DAT.D_TAPE_TBL)에 update하는 것이네요.
		 */
		if(ingestStatus.compareTo("004") != 0)
			return 0;

		StringBuffer buf = new StringBuffer();
		buf.append("\n UPDATE DAS.D_TAPEITEM_TBL  SET");
		buf.append("\n ENCODE_DD = ? ");
		buf.append("\n , ENCODE_YN = 'Y' ");
		buf.append("\n WHERE TAPE_ITEM_ID = ? ");	

		Connection con = null;
		PreparedStatement stmt = null;

		try 
		{
			con = DBService.getInstance().getConnection();
			stmt = con.prepareStatement(buf.toString());

			int index = 0;			
			stmt.setString(++index, CalendarUtil.getToday());
			stmt.setString(++index, itemId);

			int updateCount = stmt.executeUpdate();

			return updateCount;
		} 
		catch (Exception e) 
		{
			logger.error(buf.toString());
			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "updateSDIngestStatus 에서 에", e);
			throw exception;
		} 
		finally
		{
			release(null, stmt, con);
		}

	}
	/**
	 * 김건학 실장님 요청에 의해서 encode_dd , encode_yn  'null' 값으로 초기화 (dekim)
	 * @param itemId
	 * @param ingestStatus
	 * @return
	 * @throws DASException
	 */
	public int updateD_tapeitemNull(String req_no) throws DASException
	{

		StringBuffer buf = new StringBuffer();
		buf.append("\n UPDATE DAT.D_TAPEITEM_TBL  SET");
		buf.append("\n ENCODE_DD = '' ");
		buf.append("\n , ENCODE_YN = '' ");
		buf.append("\n WHERE TAPE_ITEM_ID = ? ");	

		Connection con = null;
		PreparedStatement stmt = null;

		try 
		{
			con = DBService.getInstance().getErpConnection();
			//logger.debug("######updateD_tapeitemNull######## con : " + con);

			stmt = con.prepareStatement(buf.toString());

			int index = 0;			
			stmt.setString(++index, req_no);

			int updateCount = stmt.executeUpdate();

			return updateCount;
		} 

		catch (Exception e) 
		{
			logger.error(buf.toString());
			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "updateSDIngestStatus 에서 에러", e);
			throw exception;
		}
		finally
		{
			release(null, stmt, con);
		}

	}

	/**
	 * 장비 정보를 조회한다.
	 * @param clfCd DAS 장비 작업 구분 코드
	 * @return List 조회한 장비 정보 List
	 * @throws Exception 
	 */
	public List selectIngestServerList(String clfCd) throws Exception
	{

		String query = ExternalStatement.selectIngestServerQuery();

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			stmt = con.prepareStatement(query);

			int index = 0;			
			stmt.setString(++index, clfCd);

			rs = stmt.executeQuery();


			List resultList = new ArrayList();
			while(rs.next())
			{
				EquipmentMonitoringDO item = new EquipmentMonitoringDO();
				item.setDasEqNm(rs.getString("DAS_EQ_NM"));
				item.setDasEqId(rs.getInt("DAS_EQ_ID"));
				item.setSerialNo(rs.getInt("DAS_EQ_SEQ"));
				item.setDasEqClfCd(rs.getString("DAS_EQ_CLF_CD"));
				item.setEqUseIp(rs.getString("DAS_EQ_USE_IP"));
				item.setEqUsePort(rs.getString("DAS_EQ_USE_PORT"));				

				resultList.add(item);
			}

			return resultList;
		} 
		catch (Exception e) 
		{
			logger.error(query);

			throw e;
		} 
		finally
		{
			release(rs, stmt, con);
		}

	}

	/**
	 * 장비 정보를 조회한다.
	 * @param clfCd DAS 장비 작업 구분 코드
	 * @param eQType   등록일시
	 * @return List 조회한 장비 정보 List
	 * @throws DASException
	 */
	/*
		public List selectSDIngestServerList(String clfCd) throws DASException
		{

			String query = ExternalStatement.selectIngestServerQuery();

			Connection con = null;
			PreparedStatement stmt = null;
			ResultSet rs = null;
			try 
			{
				con = DBService.getInstance().getConnection();

				stmt = con.prepareStatement(query);

				int index = 0;			
				stmt.setString(++index, clfCd);

				rs = stmt.executeQuery();

				List resultList = new ArrayList();
				while(rs.next())
				{
					EquipmentMonitoringDO item = new EquipmentMonitoringDO();
					item.setDasEqNm(rs.getString("DAS_EQ_NM"));
					item.setDasEqId(rs.getInt("DAS_EQ_ID"));
					item.setDasEqClfCd(rs.getString("DAS_EQ_CLF_CD"));
					item.setEqUseIp(rs.getString("DAS_EQ_USE_IP"));
					item.setEqUsePort(rs.getString("DAS_EQ_USE_PORT"));				

					resultList.add(item);
				}

				return resultList;
			} 
			catch (NamingException e) 
			{
				// TODO 자동 생성된 catch 블록
				logger.error(e);
		        DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "시스템 장애입니다.", e);
		        throw exception;
			} 
			catch (SQLException e) 
			{
				// TODO 자동 생성된 catch 블록
				logger.error(e);
		        DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "시스템 장애입니다.", e);
		        throw exception;
			}
			finally
			{
				release(rs, stmt, con);
			}

		}
	 */

	/**
	 * 코너정보를 조회한다.
	 * @param masterId 마스타ID
	 * @return List CornerInfoDO 를 포함하고 있는 List
	 * @throws Exception 
	 */
	public List selectCornerInfoList(long masterId, String keyWord) throws Exception
	{
		String query = ExternalStatement.selectCornerInfoListQuery();
		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			stmt = con.prepareStatement(query);

			int index = 0;
			stmt.setLong(++index, masterId);

			rs = stmt.executeQuery();

			List resultList = new ArrayList();
			String[] cnInfo = new String[2];
			String [] fileArray = null;

			while(rs.next())
			{
				CornerInfoDO item = new CornerInfoDO();

				item.setKfrmPath(rs.getString("KFRM_PATH"));
				item.setFlPath(rs.getString("FL_PATH"));
				item.setCtId(rs.getLong("CT_ID"));
				item.setKfrmPxCd(rs.getString("KFRM_PX_CD"));
				item.setVdQlty(rs.getString("VD_QLTY"));
				item.setAspRtoCd(rs.getString("ASP_RTO_CD"));
				//	item.setPgmId(          		rs.getLong(0));
				//	item.setPgmNm(          		rs.getString("0"));
				item.setCnId(rs.getLong("CN_ID"));
				item.setCnNm((rs.getString("CN_NM")));
				item.setSom(rs.getString("SOM"));
				item.setEom(rs.getString("EOM"));
				item.setCnTypeCd(rs.getString("CN_TYPE_CD"));
				item.setCnInfo(rs.getString("CN_INFO"));
				item.setDuration(rs.getLong("DURATION"));
				item.setCtSeq(rs.getInt("CT_SEQ"));
				item.setCtiId(rs.getLong("CTI_ID"));
				item.setSDuration(rs.getLong("S_DURATION"));
				item.setEDuration(rs.getLong("E_DURATION"));
				item.setRpimgKfrmSeq(rs.getInt("RPIMG_KFRM_SEQ"));
				item.setRpimgCtId(rs.getLong("RPIMG_CT_ID"));
				item.setTitle((rs.getString("TITLE")));
				item.setCtNm((rs.getString("CT_NM")));
				item.setCont((rs.getString("CONT")));


				/* 김문식이 제거. 파일묶는 부분에서 이와 관련된 처리를 다 해준다. CS 프로그램과 서버프로그램 모두에서 이 부분을 사용하는 것이 없는 것 확인하고 지움. 2008.10.09
					// 음.. 아래 부분 실행에 아주 적은 시간만 소요되고 있음. 전체적인 대세에 영향을 미치지 않을 정도임.
					String path = "/" + rs.getString("KFRM_PATH");
					//String path = "Y:\\" + StringUtils.replace(rs.getString("KFRM_PATH").substring(4),"/","\\");


					File file = new File(path);

	                if(file.exists()) 
	                {	
	                	fileArray = file.list();

	                	//long fileNum[] = new long[fileArray.length];
	                    //int leng;
	                    //String subStr = null
	                	String str = null;;

	                	// int i = 0;
	                	for(index = 0; index < fileArray.length; index++ )
	                	{
	                		if(str == null)
	            				str = fileArray[index];
	            			else
	            				str = str + "," + fileArray[index];
	                	}
	                	item.setKfrmFileNm(str);
	                } //end if
				 */              

				resultList.add(item);

			} // end while

			return resultList;
		} 
		catch (Exception e) 
		{
			logger.error(query);


			throw e;
		} 
		finally
		{
			release(rs, stmt, con);
		}

	}
	/**
	 * 코너정보검색
	 * @param keyWord 검색단어
	 * @param cornerID 코너id
	 * @throws RemoteException
	 */
	public String[] getCornerInfosearch(String keyWord, String cornerID){

		String[] cnInfo = new String[2];

		if (cornerID == null) return null;
		if (keyWord == null) return null;


		return cnInfo;
	}

	/**
	 * 키프레임 정보를 조회한다.
	 * @param ctId 콘텐츠ID
	 * @param fromSeq 키프레임일련번호(from)
	 * @param toSeq 키프레임일련번호(to)
	 * @return List KeyFrameInfoDO 를 포함하고 있는 List
	 * @throws Exception 
	 */
	public List selectKeyFrameInfoInfoList(long ctId, int fromSeq, int toSeq) throws Exception
	{
		String query = ExternalStatement.selectKeyFrameInfoInfoListQuery();

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			stmt = con.prepareStatement(query);

			int index = 0;
			stmt.setLong(++index, ctId);
			stmt.setInt(++index, fromSeq);
			stmt.setInt(++index, toSeq);

			rs = stmt.executeQuery();

			List resultList = new ArrayList();

			while(rs.next())
			{
				KeyFrameInfoDO item = new KeyFrameInfoDO();
				item.setKfrmSeq(        	rs.getInt("kfrm_seq"));
				item.setTimeCd(         	rs.getString("time_cd"));
				item.setVdQlty(         	rs.getString("VD_QLTY"));
				item.setAspRtoCd(		rs.getString("ASP_RTO_CD"));

				resultList.add(item);
			}

			return resultList;
		} 
		catch (Exception e) 
		{
			logger.error(query);


			throw e;
		} 
		finally
		{
			release(rs, stmt, con);
		}

	}

	/**
	 * 주석정보를 조회한다
	 * @param masterId 마스타ID
	 * @return List AnnotInfoDO를 포함하고 있는 List
	 * @throws Exception 
	 */
	public List selectAnnotInfoInfoList(long masterId) throws Exception
	{
		String query = ExternalStatement.selectAnnotInfoInfoListQuery();

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			stmt = con.prepareStatement(query);

			int index = 0;
			stmt.setLong(++index, masterId);

			rs = stmt.executeQuery();

			List resultList = new ArrayList();

			while(rs.next())
			{
				AnnotInfoDO item = new AnnotInfoDO();
				item.setCnId(           		rs.getLong("CN_ID"));
				item.setAnnotId(           		rs.getLong("ANNOT_ID"));
				item.setCtId(           		rs.getLong("CT_ID"));
				item.setAnnotClfCd(     	rs.getString("ANNOT_CLF_CD"));
				item.setAnnotClfCont(rs.getString("ANNOT_CLF_CONT"));
				item.setSom(            	rs.getString("SOM"));
				item.setEom(				rs.getString("EOM"));
				item.setGubun(				rs.getString("GUBUN"));
				item.setEntire_yn(     	rs.getString("ENTIRE_YN"));

				resultList.add(item);
			}

			return resultList;
		} 
		catch (Exception e) 
		{
			logger.error(query);


			throw e;
		} 
		finally
		{
			release(rs, stmt, con);
		}

	}

	/**
	 * 영상정보를 조회한다.
	 * @param masterId 마스타ID
	 * @return List ReflectionInfoDO를 포함하고 있는 List
	 * @throws Exception 
	 */
	public List selectReflectionInfoList(long masterId) throws Exception
	{
		String query = ExternalStatement.selectReflectionInfoListQuery();

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######selectReflectionInfoList######## con : " + con);
			stmt = con.prepareStatement(query);

			int index = 0;
			stmt.setLong(++index, masterId);

			rs = stmt.executeQuery();

			List resultList = new ArrayList();

			while(rs.next())
			{
				ReflectionInfoDO item = new ReflectionInfoDO();
				item.setPgmNm(                  		rs.getString("PGM_NM"));
				item.setTitle(                  			rs.getString("TITLE"));
				item.setBrdDd(                  		rs.getString("BRD_DD"));
				item.setFinalBrdYn(             		rs.getString("FINAL_BRD_YN"));
				item.setBrdBgnDd(               	rs.getString("BRD_BGN_DD"));
				item.setBrdEndDd(               	rs.getString("BRD_END_DD"));
				item.setTapeMediaClfCd(         	rs.getString("TAPE_MEDIA_CLF_CD"));
				item.setCtgrLCd(                		rs.getString("CTGR_L_CD"));
				item.setCtgrMCd(                		rs.getString("CTGR_M_CD"));
				item.setCtgrSCd(                		rs.getString("CTGR_S_CD"));
				item.setReqCd(                  		rs.getString("REQ_CD"));
				item.setCtId(                   			rs.getLong("CT_ID"));
				item.setAspRtoCd(               		rs.getString("ASP_RTO_CD"));
				item.setVdQlty(                 		rs.getString("VD_QLTY"));
				item.setEpisNo(                 		rs.getInt("EPIS_NO"));
				item.setCtLeng(                 		rs.getString("CT_LENG"));
				item.setKfrmPath(               		rs.getString("KFRM_PATH"));
				item.setFlPath(      					rs.getString("FL_PATH"));      

				resultList.add(item);
			}

			return resultList;
		} 
		catch (Exception e) 
		{
			logger.error(query);


			throw e;
		} 

		finally
		{
			release(rs, stmt, con);
		}

	}

	/**
	 * 내용 및 제작정보를 조회한다.
	 * @param masterId 마스타ID
	 * @return ContentsInfoDO 내용 및 제작정보를 포함하고 있는 DataObject
	 * @throws Exception 
	 */
	public ContentsInfoDO selectContentsInfo(long masterId) throws Exception
	{
		String query = ExternalStatement.selectContentsInfoQuery();

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			stmt = con.prepareStatement(query);

			int index = 0;
			stmt.setLong(++index, masterId);

			rs = stmt.executeQuery();

			if(rs.next())
			{
				ContentsInfoDO item = new ContentsInfoDO();

				item.setDrtNm((rs.getString("DRT_NM")));
				item.setProducerNm((rs.getString("PRODUCER_NM")));
				item.setWriterNm((rs.getString("WRITER_NM")));				
				item.setPrdtDeptNm((rs.getString("PRDT_DEPT_NM")));
				item.setOrgPrdrNm((rs.getString("ORG_PRDR_NM")));
				item.setCastNm((rs.getString("CAST_NM")));				
				item.setCmrDrtNm((rs.getString("CMR_DRT_NM")));
				item.setPrdtInOutsCd(rs.getString("PRDT_IN_OUTS_CD"));
				item.setSnps((rs.getString("SNPS")));
				item.setKeyWords(rs.getString("KEY_WORDS"));
				item.setSpcInfo((rs.getString("SPC_INFO")));


				return item;
			}
			else
			{
				return new ContentsInfoDO();
			}
		} 
		catch (Exception e) 
		{
			logger.error(query);


			throw e;
		} 

		finally
		{
			release(rs, stmt, con);
		}

	}

	/**
	 * 편성/심의 및 저작권/tape정보 조회
	 * @param masterId 마스타ID
	 * @return TapeInfoDO
	 * @throws Throwable 
	 */
	public TapeInfoDO selectTapeInfo(long masterId) throws Throwable
	{
		String query = ExternalStatement.selectTapeInfoQuery();

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			stmt = con.prepareStatement(query);

			int index = 0;
			stmt.setLong(++index, masterId);

			rs = stmt.executeQuery();

			if(rs.next())
			{
				TapeInfoDO item = new TapeInfoDO();
				item.setViewGrCd(       		rs.getString("VIEW_GR_CD"));
				item.setPgmRate(        		rs.getString("PGM_RATE"));
				item.setDlbrCd(         		rs.getString("DLBR_CD"));
				item.setCprtrNm(        		rs.getString("CPRTR_NM"));
				item.setCprtType(       		rs.getString("CPRT_TYPE"));
				item.setCprtTypeDsc(		rs.getString("CPRT_TYPE_DSC"));

				return item;
			}
			else
			{
				return new TapeInfoDO();
			}
		} 
		catch (Exception e) 
		{
			logger.error(query);


			throw e;
		} 
		finally
		{
			release(rs, stmt, con);
		}

	}
	/**
	 * ct_id의 eom를 조회한다
	 * @return ct_id 컨텐츠id
	 * @throws Exception 
	 * @throws RemoteException
	 */
	public String selectEomByCtId(long ct_id) throws Exception
	{
		String query = ExternalStatement.selectEomByCtId();

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			stmt = con.prepareStatement(query);

			int index = 0;
			stmt.setLong(++index, ct_id);

			rs = stmt.executeQuery();

			if(rs.next())
			{
				return rs.getString("CT_LENG");
			}
			else
			{
				return "";
			}
		} 

		catch (Exception e) 
		{
			logger.error(query);


			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}

	}

	/**
	 * ct_id의 화면비 코드를 조회한다
	 * @return ct_id 컨텐츠id
	 * @throws Exception 
	 * @throws RemoteException
	 */
	public String selectAspRtoCDByCtId(long ct_id) throws Exception
	{
		String query = ExternalStatement.selectAspRtoCdByCtId();

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			stmt = con.prepareStatement(query);

			int index = 0;
			stmt.setLong(++index, ct_id);

			rs = stmt.executeQuery();

			if(rs.next())
			{
				return rs.getString("ASP_RTO_CD");
			}
			else
			{
				return "";
			}
		} 

		catch (Exception e) 
		{
			logger.error(query);


			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}

	}

	/**
	 * ct_id의 Duration를 조회한다
	 * @return ct_id 컨텐츠id
	 * @throws Exception 
	 * @throws RemoteException
	 */
	public String selectDurationByCtId(long ct_id) throws Exception
	{
		String query = ExternalStatement.selectDurationByCtId();

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			stmt = con.prepareStatement(query);

			int index = 0;
			stmt.setLong(++index, ct_id);

			rs = stmt.executeQuery();

			if(rs.next())
			{
				return rs.getString("DURATION");
			}
			else
			{
				return "";
			}
		} 
		catch (Exception e) 
		{
			logger.error(query);


			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}

	}

	/**
	 * 미디어 정보를 조회한다.
	 * @param masterId 마스타ID
	 * @return MediaInfoDO
	 * @throws Exception 
	 */
	public MediaInfoDO selectMediaInfo(long masterId) throws Exception
	{
		String query = ExternalStatement.selectMediaInfoQuery();

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			stmt = con.prepareStatement(query);

			int index = 0;
			stmt.setLong(++index, masterId);

			rs = stmt.executeQuery();

			if(rs.next())
			{
				MediaInfoDO item = new MediaInfoDO();
				item.setAudioYn(        	rs.getString("AUDIO_YN"));
				item.setMeCd(           	rs.getString("ME_CD"));
				item.setColorCd(        	rs.getString("COLOR_CD"));
				item.setCtiFmt(         		rs.getString("CTI_FMT"));
				item.setRegDt(          	rs.getString("REG_DT"));
				item.setFlSz(           		rs.getLong("FL_SZ"));
				item.setFrmPerSec(     	rs.getString("FRM_PER_SEC"));
				item.setBitRt(          		rs.getString("BIT_RT"));
				item.setRecordTypeCd(   rs.getString("RECORD_TYPE_CD"));
				item.setAudioBdwt(      	rs.getString("AUDIO_BDWT"));
				item.setAudSampFrq(	rs.getString("AUD_SAMP_FRQ"));   

				return item;
			}
			else
			{
				return new MediaInfoDO();
			}
		} 
		catch (Exception e) 
		{
			logger.error(query);


			throw e;
		} 
		finally
		{
			release(rs, stmt, con);
		}

	}

	/**
	 * 수정자 ID, 상태 코드 조회를 한다.
	 * @param masterId 마스타ID
	 * @return MetadataMstInfoDO
	 * @throws Exception 
	 */
	public MetadataMstInfoDO selectModDatastatcd(long masterId) throws Exception
	{
		StringBuffer buf = new StringBuffer();
		buf.append("\n select modrid,data_stat_cd, lock_stat_cd, error_stat_cd from das.metadat_mst_tbl where master_id = ? ");
		buf.append("\n with ur ");

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setLong(++index, masterId);

			rs = stmt.executeQuery();

			if(rs.next())
			{
				MetadataMstInfoDO item = new MetadataMstInfoDO();
				item.setModrid(        	rs.getString("MODRID"));
				item.setDataStatCd(           	rs.getString("DATA_STAT_CD"));
				item.setLock_stat_cd(rs.getString("LOCK_STAT_CD"));
				item.setError_stat_cd(rs.getString("ERROR_STAT_CD"));
				return item;
			}
			else
			{
				return new MetadataMstInfoDO();
			}
		} 
		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		} 

		finally
		{
			release(rs, stmt, con);
		}

	}

	/**
	 * 프로그램 정보를 조회한다.(das 1.0 소스 현재 사용하지 않음)
	 * @param masterId 마스타ID
	 * @return VideoPageInfoDO
	 * @throws Exception 
	 */
	public VideoPageInfoDO selectVideoPageInfo(long masterId) throws Exception
	{
		String query = ExternalStatement.selectVideoPageInfoQuery();

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			stmt = con.prepareStatement(query);

			int index = 0;
			stmt.setLong(++index, masterId);

			rs = stmt.executeQuery();

			if(rs.next())
			{
				VideoPageInfoDO item = new VideoPageInfoDO();
				item.setPgmId(rs.getLong("pgm_id"));
				item.setPgmNm((rs.getString("pgm_nm")));
				item.setPgmNm(rs.getString("pgm_nm"));
				item.setBrdBgnDd(rs.getString("brd_bgn_dd"));
				item.setBrdEndDd(rs.getString("brd_end_dd"));
				item.setMediaCd(rs.getString("media_cd"));
				item.setPgmCD(rs.getString("pgm_cd"));

				return item;		

			}
			else
			{
				return new VideoPageInfoDO();
			}
		} 
		catch (Exception e) 
		{
			logger.error(query);

			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}

	}

	/**
	 * 비디오 메타 정보를 조회한다.
	 * @param masterId 마스타ID
	 * @return VideoPageInfoDO
	 * @throws Exception 
	 */
	public VideoPageMetaInfoDO selectVideoPageMetaInfo(long masterId) throws Exception
	{
		String query = ExternalStatement.selectVideoPageMetaInfoQuery();

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			stmt = con.prepareStatement(query);

			int index = 0;
			stmt.setLong(++index, masterId);

			rs = stmt.executeQuery();

			if(rs.next())
			{
				VideoPageMetaInfoDO item = new VideoPageMetaInfoDO();

				//item.setTitle(replace(rs.getString("TITLE")));
				item.setTitle(rs.getString("TITLE"));
				item.setBrdDd(rs.getString("BRD_DD"));
				item.setFinalBrdYn(rs.getString("FINAL_BRD_YN"));
				item.setCtgrCd(rs.getString("CTGR_L_CD"));
				item.setCtgrMCd(rs.getString("CTGR_M_CD"));
				item.setCtgrSCd(rs.getString("CTGR_S_CD"));
				item.setEpisNo(rs.getInt("EPIS_NO"));
				item.setReqCd(rs.getString("REQ_CD"));

				return item;		

			}
			else
			{
				return new VideoPageMetaInfoDO();
			}
		} 
		catch (Exception e) 
		{
			// TODO 자동 생성된 catch 블록
			logger.error(query);

			throw e;
		} 
		finally
		{
			release(rs, stmt, con);
		}

	}

	/**
	 * 프로그램 컨텐트 정보를 조회한다.
	 * @param masterId 마스타ID
	 * @return VideoPageContentInfoDO list
	 * @throws Exception 
	 */
	public List selectVideoPageContentInfoList(long masterId) throws Exception
	{
		String query = ExternalStatement.selectVideoPageContentInfoQuery();

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######selectVideoPageContentInfoList######## con : " + con);
			stmt = con.prepareStatement(query);

			int index = 0;
			stmt.setLong(++index, masterId);

			rs = stmt.executeQuery();

			List resultList  = new ArrayList();

			if(rs.next())
			{
				VideoPageContentInfoDO item = new VideoPageContentInfoDO();

				item.setCtId(        	rs.getLong("CT_ID"));
				item.setAspRtoCd(         	rs.getString("ASP_RTO_CD"));
				item.setVdQlty(        	rs.getString("VD_QLTY"));
				item.setctLeng(         		rs.getString("CT_LENG"));

				resultList.add(item);				
			}

			return resultList;

		} 
		catch (Exception e) 
		{
			// TODO 자동 생성된 catch 블록	
			logger.error(query);


			throw e;
		} 
		finally
		{
			release(rs, stmt, con);
		}

	}



	/**
	 * 관리 정보를 조회한다.
	 * @param masterId 마스타ID
	 * @return ManagementInfoDO
	 * @throws Exception 
	 */
	public ManagementInfoDO selectManagementInfo(long masterId) throws Exception
	{
		String query = ExternalStatement.selectManagementInfoQuery();

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######selectManagementInfo######## con : " + con);
			stmt = con.prepareStatement(query);

			int index = 0;
			stmt.setLong(++index, masterId);

			rs = stmt.executeQuery();

			if(rs.next())
			{
				ManagementInfoDO item = new ManagementInfoDO();
				item.setArrgEndDt(      	rs.getString("ARRG_END_DT"));
				item.setGathCoCd(       rs.getString("GATH_CO_CD"));
				item.setDataStatCd(     	rs.getString("DATA_STAT_CD"));
				item.setSecArchNm(    	rs.getString("SEC_ARCH_NM"));
				item.setArchRegDd(		rs.getString("ARCH_REG_DD")); 
				item.setRsvPrdCd(	rs.getString("RSV_PRD_CD"));
				return item;
			}
			else
			{
				return new ManagementInfoDO();
			}
		} 
		catch (Exception e) 
		{
			logger.error(query);


			throw e;
		} 

		finally
		{
			release(rs, stmt, con);
		}

	}

	/**
	 * 사진정보를 조회한다.
	 * @param masterId 마스타ID
	 * @return List PhotoInfoDO를 포함하고 있는 List
	 * @throws Exception 
	 */
	public List selectPhotoInfoList(long masterId) throws Exception
	{
		String query = ExternalStatement.selectPhotoInfoListQuery();

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######selectPhotoInfoList######## con : " + con);
			stmt = con.prepareStatement(query);

			int index = 0;
			stmt.setLong(++index, masterId);

			rs = stmt.executeQuery();

			List resultList  = new ArrayList();
			while(rs.next())
			{
				PhotoInfoDO item = new PhotoInfoDO();
				//	item.setFlPath(         			rs.getString("FL_PATH"));
				item.setGathCoCd(rs.getString("GATH_CO_CD"));
				item.setGathClfCd(rs.getString("GATH_CLF_CD"));
				item.setMediaColorInfo(rs.getString("MEDIA_COLOR_INFO").trim());
				item.setGathDd(rs.getString("GATH_DD"));
				item.setPhotRegId(rs.getLong("PHOT_REG_ID"));
				item.setCont((rs.getString("CONT")));
				item.setSpcInfo((rs.getString("SPC_INFO")));
				item.setPhotClfCd(rs.getString("PHOT_CLF_CD"));			
				item.setSeq(rs.getInt("SEQ"));
				//item.setSpcInfo(rs.getString("BGN_EPN"));
				item.setBgnEpn(rs.getInt("BGN_EPN"));
				item.setEndEpn(rs.getInt("END_EPN"));
				item.setPgmId(rs.getLong("PGM_ID"));
				//item.setPhotClfCd(rs.getString("BGN_EPN"));	
				resultList.add(item);
			}

			return resultList; 
		} 
		catch (Exception e) 
		{
			logger.error(query);


			throw e;
		} 

		finally
		{
			release(rs, stmt, con);
		}

	}

	/**
	 * 컨텐트 미리보기 정보를 조회한다.
	 * @param masterId	마스터 ID 
	 * @return List ContentsPrevInfoDO를 포함하고 있는 List
	 * @throws Exception 
	 */
	public List selectConentPreInfoList(long masterId) throws Exception
	{
		String query = ExternalStatement.selectContentsPreInfoQuery();

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			stmt = con.prepareStatement(query);

			int index = 0;
			stmt.setLong(++index, masterId);

			rs = stmt.executeQuery();

			List resultList  = new ArrayList();
			while(rs.next())
			{
				ContentsPrevInfoDO item = new ContentsPrevInfoDO();
				item.setCornerID(         	rs.getLong("CN_ID"));
				item.setContentID(       	rs.getLong("CT_ID"));
				item.setDuration(      		rs.getLong("DURATION"));
				//		item.setkfrmPath (			rs.getString("KFRM_PATH"));
				item.setContentSeq(      		rs.getInt("CT_SEQ"));	

				resultList.add(item);
			}

			return resultList; 
		} 
		catch (Exception e) 
		{
			logger.error(query);


			throw e;
		} 
		finally
		{
			release(rs, stmt, con);
		}
	}

	/**
	 * 첨부파일을 조회한다.
	 * @param mothrId 모자료 ID
	 * @return List AttachFileInfoDO를 포함하고 있는 List
	 * @throws Exception 
	 */
	public List selectAttachedFileInfoList(long mothrId) throws Exception
	{
		String query = ExternalStatement.selectAttachedFileQuery();

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			stmt = con.prepareStatement(query);

			int index = 0;
			stmt.setLong(++index, mothrId);

			rs = stmt.executeQuery();

			List resultList  = new ArrayList();
			while(rs.next())
			{
				AttachFileInfoDO item = new AttachFileInfoDO();
				item.setFileName(         	rs.getString("FL_NM"));
				item.setFileSize(       	rs.getLong("FL_SZ"));
				item.setFilePath(      		rs.getString("FL_PATH"));
				item.setDesc(      		rs.getString("DESC"));
				item.setSeq(      		rs.getInt("SEQ"));
				item.setAttcClfCd(		rs.getString("ATTC_CLF_CD"));
				item.setAttcFileTypeCd( rs.getString("ATTC_FILE_TYPE_CD"));
				item.setOrgFileNm(		rs.getString("ORG_FILE_NM"));

				resultList.add(item);
			}

			return resultList; 
		} 
		catch (Exception e) 
		{
			logger.error(query);


			throw e;
		} 
		finally
		{
			release(rs, stmt, con);
		}
	}

	/**
	 * 오류 내역을 조회한다.
	 * @param masterId 마스터 ID
	 * @return ErrorRegisterDO 오류정보를 포함하고 있는 DataObject 리스트
	 * @throws Exception 
	 */
	public List selectErrorInfoList(long masterId) throws Exception
	{
		String query = WorkStatement.selectErrorRegisterInfoQuery();

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			stmt = con.prepareStatement(query);

			int index = 0;
			stmt.setLong(++index, masterId);

			rs = stmt.executeQuery();

			List resultList  = new ArrayList();			
			while(rs.next())
			{
				ErrorRegisterDO item = new ErrorRegisterDO();

				item.setWrt((rs.getString("WRT")));
				item.setWorkClf(rs.getString("WORK_CLF")); 
				item.setCont((rs.getString("ER_CONT")));
				item.setWorkCmCont((rs.getString("REACT_CONT")));
				item.setWorkSeq(rs.getString("WORK_SEQ")); 								

				resultList.add(item);
			}
			return	resultList;

		} 
		catch (Exception e) 
		{
			logger.error(query);


			throw e;
		} 

		finally
		{
			release(rs, stmt, con);
		}
	}

	/**
	 * 코너 대표화면 정보를 조회한다.
	 * @param ctId 콘텐츠아이디
	 * @param cnId 코너아이디
	 * @return KeyFrameImgDO 대표화면 정보
	 * @throws Exception 
	 */
	public KeyFrameImgDO selectCornerHeaderImgInfo(long ctId, long cnId) throws Exception
	{
		String query = ExternalStatement.selectCornerHeaderImgInfoQuery();

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			stmt = con.prepareStatement(query);

			int index = 0;
			stmt.setLong(++index, ctId);
			stmt.setLong(++index, cnId);

			rs = stmt.executeQuery();

			if(rs.next())
			{
				KeyFrameImgDO item = new KeyFrameImgDO();
				item.setKfrmSeq(		rs.getInt("KFRM_SEQ"));
				item.setTimeCd(		rs.getString("TIME_CD"));

				return item;
			}
			else
			{
				return new KeyFrameImgDO();
			}
		} 
		catch (Exception e) 
		{
			logger.error(query);


			throw e;
		} 

		finally
		{
			release(rs, stmt, con);
		}

	}

	/**
	 * 클립 대표화면 정보를 조회한다.
	 * @param masterId 마스타아이디
	 * @return KeyFrameImgDO 대표화면 정보
	 * @throws Exception 
	 */
	public KeyFrameImgDO selectClipHeaderImgInfo(long masterId) throws Exception
	{
		String query = ExternalStatement.selectClipHeaderImgInfoQuery();

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			stmt = con.prepareStatement(query);

			int index = 0;
			stmt.setLong(++index, masterId);

			rs = stmt.executeQuery();

			if(rs.next())
			{
				KeyFrameImgDO item = new KeyFrameImgDO();
				//	item.setKfrmSeq(		rs.getInt("KFRM_SEQ"));
				item.setRpimgCtId(		rs.getLong("rpimg_ct_id"));
				item.setRpimgKfrmSeq(		rs.getInt("rpimg_kfrm_seq"));


				return item;
			}
			else
			{
				return new KeyFrameImgDO();
			}
		} 
		catch (Exception e) 
		{
			logger.error(query);


			throw e;
		} 
		finally
		{
			release(rs, stmt, con);
		}

	}

	/**
	 * DAS 장비의 로그 기록 주기를 조회한다.
	 * @param dasEqId DAS장비 ID
	 * @param dasEqPsCd DAS장비프로세스코드
	 * @return int 로그기록주
	 * @throws Exception 
	 */
	public int selectLogRcdPeriod(int dasEqId, String dasEqPsCd) throws Exception
	{
		String query = "select LOG_RCD_PERIOD from DAS.DAS_EQUIPMENT_TBL where DAS_EQ_ID = ? and DAS_EQ_PS_CD = ? WITH UR ";

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			stmt = con.prepareStatement(query);

			int index = 0;
			stmt.setInt(++index, 			dasEqId);
			stmt.setString(++index, dasEqPsCd);

			rs = stmt.executeQuery();

			if(rs.next())
			{
				return rs.getInt("LOG_RCD_PERIOD");
			}
			else
			{
				return 0;
			}
		} 
		catch (Exception e) 
		{
			logger.error(query);


			throw e;
		} 
		finally
		{
			release(rs, stmt, con);
		}
	}

	/**
	 * 주석정보를 저장한다.
	 * @param masterId 마스터 ID	
	 * @param annotInfoDO 주석 정보 리스트	
	 * @return annotInfoDO 주석 정보 리스트	
	 * @throws Exception 
	 */
	public List insertAnnotinfo(long masterId, List annotInfoList) throws Exception
	{


		Connection con = null;
		PreparedStatement stmt = null;
		StringBuffer buf = new StringBuffer();

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######insertAnnotinfo######## con : " + con);
			con.setAutoCommit(false);


			//	주석테이블 삭제
			buf.append("\n delete from das.ANNOT_INFO_TBL where master_id = ? ");

			stmt = con.prepareStatement(buf.toString());

			int index = 0;

			stmt.setLong(++index, masterId);
			stmt.executeUpdate();

			long annoId;
			List resultList = new ArrayList();
			Iterator _iter = annotInfoList.iterator();
			while (_iter.hasNext()) 
			{					
				AnnotInfoDO	annotInfoDO = (AnnotInfoDO)_iter.next();

				// 만약 annotID가 -1이면 전체를 삭제하고 나가면 된다. annot를 전체 삭제한 경우에만(annot가 하나 있었는데 그걸 삭제한 경우 처리를 위해) annotID가 -1이다.
				if (-1 == annotInfoDO.getAnnotId())
				{
					break;	// 위에서 삭제를 했으니까 결국은 전체 삭제가 된거다. 
				}

				/*if(annotInfoDO.getAnnotId() > 0)
							annoId = annotInfoDO.getAnnotId();
						else
						{	*/
				// 주석 번호를 채번한다
				annoId = Long.parseLong(getNextSquence(con, "seq_annot_id"));
				annotInfoDO.setAnnotId(annoId);
				//}

				String query = ExternalStatement.insertAnnotinfoQuery();
				stmt = con.prepareStatement(query);

				index = 0;
				stmt.setLong(++index, annoId); 
				stmt.setLong(++index, annotInfoDO.getCnId()); 
				stmt.setLong(++index, annotInfoDO.getCtId());
				stmt.setString(++index, annotInfoDO.getAnnotClfCd()); 
				stmt.setString(++index, annotInfoDO.getAnnotClfCont());
				stmt.setLong(++index, annotInfoDO.getMasterId()); 
				stmt.setString(++index, annotInfoDO.getSom()); 
				stmt.setString(++index, annotInfoDO.getEom());
				stmt.setString(++index, annotInfoDO.getRegrId());
				stmt.setString(++index, annotInfoDO.getRegDt());
				stmt.setLong(++index, annotInfoDO.getDuration());
				stmt.setLong(++index, annotInfoDO.getSFrame());
				stmt.setString(++index, annotInfoDO.getGubun());
				stmt.setString(++index, annotInfoDO.getEntire_yn());
				stmt.executeUpdate();
				if(annotInfoDO.getEntire_yn().equals("Y")){
					updateEntireInfo(annotInfoDO);
				}
				resultList.add(annotInfoDO);

			}

			con.commit();		

			return resultList;

		} 

		catch (Exception e) 
		{
			logger.error(buf.toString());
			if(con != null)
			{
				try {
					con.rollback();					
				} catch (SQLException e1) {
					// TODO 자동 생성된 catch 블록
					e1.printStackTrace();
				}
			}

			throw e;
		}
		finally
		{
			//try { 	if (stmt != null)  stmt.close();	} catch (SQLException e) {}
			try {
				con.setAutoCommit(true);
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				logger.error(e);
			}
			release(null, stmt, con);
		}

	}

	/**
	 * 테이프 정보를 저장한다.
	 * @param masterId 마스터 ID	
	 * @param annotInfoDO 주석 정보 리스트	
	 * @return annotInfoDO 주석 정보 리스트	
	 * @throws Exception 
	 */
	public String insertTapeinfo(long masterId, String IDhead, String userId, String year) throws Exception
	{


		Connection con = null;
		PreparedStatement stmt = null;

		try 
		{
			con = DBService.getInstance().getErpConnection();

			con.setAutoCommit(false);

			//테이프 ID 채번한다 - ERP Sequence 확인
			String tapeId = getErpNextSquence(con, "D_TAPE_SEQ");  


			//청구번호를 채번한다
			String reqNo = IDhead+year+"-"+Integer.toString(getNextReqNo(con,IDhead, year));

			/*
				//마스터 테이블 정보를 가져온다
				List medaDatList = selectMetadataInfo(masterId);
				Iterator _iter = medaDatList.iterator();
				if(_iter.hasNext()) 
				{
					MetadataMstInfoDO	metadataDO = (MetadataMstInfoDO)_iter.next();	
				}

				int index = 0;

				// 테이프 정보를 등록한다 (TO_DO)
				// INSERT INTO DAT.D_TAPE_TBL


				//청구 번호 이력을 등록한다
				String query = ExternalStatement.insertReqNoHistoryQuery();
				stmt = con.prepareStatement(query);		

				index = 0;
				stmt.setString(++index, reqNo);
				stmt.setString(++index, CalendarUtil.getDateTime("YYYYMMDDHHmmss"));
				stmt.setString(++index, "99991231235959");
				stmt.setString(++index, "001");
				stmt.setString(++index, tapeId);
				stmt.setString(++index, CalendarUtil.getDateTime("YYYYMMDDHHmmss"));
				stmt.setString(++index, userId);
				stmt.executeUpdate();


				//테이프 아이템 ID 를 생성한다  - ERP Sequence 확인
				String tapeItemId = getErpNextSquence(con, "D_TAPEITEM_SEQ");			

				// 테이프 아이탬 정보를 등록한다 (TO_DO)
				//INSERT INTO DAT.D_TAPEITEM_TBL
			 */
			con.commit();

			return "";

		} 

		catch (Exception e) 
		{
			logger.error(masterId);
			logger.error(IDhead);
			logger.error(userId);
			logger.error(year);

			if(con != null)
			{
				try {
					con.rollback();
				} catch (SQLException e1) {
					// TODO 자동 생성된 catch 블록
					e1.printStackTrace();
				}
			}

			throw e;
		}
		finally
		{
			//try { 	if (stmt != null)  stmt.close();	} catch (SQLException e) {}
			try {
				con.setAutoCommit(true);
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				logger.error(e);
			}
			release(null, stmt, con);
		}

	}

	/**
	 * 2015.11.13 신규추가
	 * 첨부파일 단일건 등록
	 * file_path 정보나 파일의 이동등은 외부에서 선처리를 하고 메타정보만 전달하도록 한다.
	 * @param attachFileInfoDO
	 * @throws Exception
	 */
	public void insertAttachFile(AttachFileInfoDO	attachFileInfoDO) throws Exception {
		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		StringBuffer buf = new StringBuffer();
		String query = new String();

		try 
		{
			con = DBService.getInstance().getConnection();
			con.setAutoCommit(false);

			int index = 0;	
			long nAttachID = 0;		// 파일명으로 사용할 시퀀스. 새로운 파일이 들어올 때마다 시퀀스에서 하나씩 가져와서 그 숫자를 파일명으로 사용.
			int seq;

			// 순번을  채번한다
			buf.append("\n select max(seq) as sequence from das.ATTCH_TBL where MOTHR_DATA_ID = " + attachFileInfoDO.getMothrDataId() +" with ur ");
			stmt = con.prepareStatement(buf.toString());
			rs = stmt.executeQuery();
			rs.next();
			seq = rs.getInt("sequence") + 1;
			attachFileInfoDO.setSeq(seq);

			/*
			 * 2015.11.13
			 * 원본 파일명을 임의의 파일명으로 변경을 해야할지 아직 판단하지 못하겠음. 최근 작업한 Caption의 경우 원본파일명만 저장하고
			 * 변경 파일명은 저장하지 않고 있음. 그대로 되는지 모르겠음.
			 */
			
/*
			buf.setLength(0);
			// Attach 순번을 가져와서 서버에 저장할 파일 이름으로 사용한다.
			buf.append("\n select (nextval for das.seq_attach_id) as SEQ from sysibm.sysdummy1 with ur");
			stmt = con.prepareStatement(buf.toString());
			rs = stmt.executeQuery();
			rs.next();
			nAttachID = rs.getLong("SEQ");

			String strServerFilename = attachFileInfoDO.getFileName();

			// 확장자를 가져온다.
			int nLastIndex = attachFileInfoDO.getFileName().lastIndexOf(".");
			if (nLastIndex > 0) {
				strServerFilename = nAttachID + attachFileInfoDO.getFileName().substring(nLastIndex);
			}

			// 기존 이름을 rename한다.
			String strOldFilePath = dasHandler.getProperty("MP4")+"/attach/" + attachFileInfoDO.getAttcFileTypeCd() 
					+ "/" + attachFileInfoDO.getAttcClfCd() + "/" + attachFileInfoDO.getFileName().trim();

			String strNewFilePath = dasHandler.getProperty("MP4")+"/attach/" + attachFileInfoDO.getAttcFileTypeCd() 
					+ "/" + attachFileInfoDO.getAttcClfCd() + "/" + strServerFilename.trim();

			File file = new File(strOldFilePath);
			File dest = new File(strNewFilePath);
			File dir = new File(strOldFilePath);

			if (!dir.exists()) {
				dir.mkdirs();
			}
			file.renameTo(dest);
*/
			// 첨부파일 테이블에 저장하기 위한 SQL을 만든다.
			query = ExternalStatement.insertAttachFileQuery();
			stmt = con.prepareStatement(query);

			index = 0;
			stmt.setLong(++index, attachFileInfoDO.getMothrDataId()); 
			stmt.setInt(++index, seq); 
			stmt.setString(++index, attachFileInfoDO.getAttcFileTypeCd());				
			stmt.setString(++index, ""); // strServerFilename
			stmt.setLong(++index, attachFileInfoDO.getFileSize()); 
			stmt.setString(++index, attachFileInfoDO.getFilePath()); 
			stmt.setString(++index, attachFileInfoDO.getRegDt());
			stmt.setString(++index, attachFileInfoDO.getRegrid());
			stmt.setString(++index, attachFileInfoDO.getAttcClfCd());
			stmt.setString(++index, attachFileInfoDO.getOrgFileNm());

			stmt.executeUpdate();

			con.commit();	
		} catch (Exception e) {
			if(con != null) {
				try {
					con.rollback();				
				} catch (SQLException e1) {}
			}
			throw e;
		} finally {
			try {
				con.setAutoCommit(true);
			} catch (SQLException e) {}
			release(rs, stmt, con);
		}
	}

	/**
	 * 첨부 파일 정보를 저장한다.
	 * @param attachFileInfo 첨부파일  정보 리스트	
	 * @return attachFileInfo 첨부파일 정보 리스트	
	 * @throws Exception 
	 */
	public List insertAttachFile(List attachFileInfo) throws Exception
	{
		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		StringBuffer buf = new StringBuffer();
		StringBuffer buf2 = new StringBuffer();
		String query = new String();

		try 
		{
			con = DBService.getInstance().getConnection();
			con.setAutoCommit(false);

			int index = 0;	
			long nAttachID = 0;		// 파일명으로 사용할 시퀀스. 새로운 파일이 들어올 때마다 시퀀스에서 하나씩 가져와서 그 숫자를 파일명으로 사용.
			int seq;
			List resultList = new ArrayList();
			Iterator _iter = attachFileInfo.iterator();
			while (_iter.hasNext()) {

				AttachFileInfoDO	attachFileInfoDO = (AttachFileInfoDO)_iter.next();				

				// 순번을  채번한다

				buf.append("\n select max(seq) as sequence from das.ATTCH_TBL where MOTHR_DATA_ID = " + attachFileInfoDO.getMothrDataId() +" with ur ");
				stmt = con.prepareStatement(buf.toString());
				rs = stmt.executeQuery();
				rs.next();
				seq = rs.getInt("sequence") + 1;
				attachFileInfoDO.setSeq(seq);

				// Attach 순번을 가져와서 서버에 저장할 파일 이름으로 사용한다.

				buf2.append("\n select (nextval for das.seq_attach_id) as SEQ from sysibm.sysdummy1 with ur");
				stmt = con.prepareStatement(buf2.toString());
				rs = stmt.executeQuery();
				rs.next();
				nAttachID = rs.getLong("SEQ");

				String strServerFilename = attachFileInfoDO.getFileName();

				// 확장자를 가져온다.
				int nLastIndex = attachFileInfoDO.getFileName().lastIndexOf(".");
				if (nLastIndex > 0)
				{
					strServerFilename = nAttachID + 
							attachFileInfoDO.getFileName().substring(nLastIndex, attachFileInfoDO.getFileName().length());
				}

				// 기존 이름을 rename한다.
				String strOldFilePath = dasHandler.getProperty("MP4")+"/attach/" + attachFileInfoDO.getAttcFileTypeCd() 
						+ "/" + attachFileInfoDO.getAttcClfCd() + "/" + attachFileInfoDO.getFileName().trim();

				String strNewFilePath = dasHandler.getProperty("MP4")+"/attach/" + attachFileInfoDO.getAttcFileTypeCd() 
						+ "/" + attachFileInfoDO.getAttcClfCd() + "/" + strServerFilename.trim();

				File file = new File(strOldFilePath);
				File dest = new File(strNewFilePath);
				File dir = new File(strOldFilePath);

				if (!dir.exists()) {
					dir.mkdirs();
				}
				file.renameTo(dest);

				// 첨부파일 테이블에 저장하기 위한 SQL을 만든다.
				query = ExternalStatement.insertAttachFileQuery();
				stmt = con.prepareStatement(query);

				index = 0;
				stmt.setLong(++index, attachFileInfoDO.getMothrDataId()); 
				stmt.setInt(++index, seq); 
				stmt.setString(++index, attachFileInfoDO.getAttcFileTypeCd());				
				stmt.setString(++index, strServerFilename);
				stmt.setLong(++index, attachFileInfoDO.getFileSize()); 
				stmt.setString(++index, attachFileInfoDO.getFilePath()); 
				stmt.setString(++index, attachFileInfoDO.getRegDt());
				stmt.setString(++index, attachFileInfoDO.getRegrid());
				stmt.setString(++index, attachFileInfoDO.getAttcClfCd());
				stmt.setString(++index, attachFileInfoDO.getFileName());

				stmt.executeUpdate();

				resultList.add(attachFileInfoDO);
			}

			con.commit();	

			return resultList;

		} 
		catch (Exception e) 
		{

			logger.error(buf.toString());
			logger.error(buf2.toString());
			logger.error(query);

			if(con != null)
			{
				try {
					con.rollback();				
				} catch (SQLException e1) {
					// TODO 자동 생성된 catch 블록
					logger.error(e1);
				}
			}


			throw e;
		} 

		finally
		{
			//try { 	if (stmt != null)  stmt.close();	} catch (SQLException e) {}
			//release(null, stmt, con);
			try {
				con.setAutoCommit(true);
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				logger.error(e);
			}
			release(rs, stmt, con);	// panboy check. 왜 이건 rs를 해제하지 않았을까.

		}

	}


	/**
	 * 사진 정보를 저장한다.
	 * @param photoInfoDO 사진 정보 리스트	
	 * @return 	PhotoInfoDO object 리스트 
	 * @throws Exception 
	 */
	public String insertPhotoinfo(List photoInfoDOList ) throws Exception
	{
		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		String query = new String();
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######insertPhotoinfo######## con : " + con);
			con.setAutoCommit(false);


			//int index = 0;	
			// 파일명으로 사용할 시퀀스. 새로운 파일이 들어올 때마다 시퀀스에서 하나씩 가져와서 그 숫자를 파일명으로 사용.

			String photoId = null, photoSeq = null;
			List resultList = new ArrayList();
			Iterator _iter = photoInfoDOList.iterator();
			while (_iter.hasNext()) {


				PhotoInfoDO	photoInfoDO = (PhotoInfoDO)_iter.next();
				long photRegID = photoInfoDO.getPhotRegId(); 


				// 순번을  채번한다
				//StringBuffer buf = new StringBuffer();
				//buf.append(" select max(seq) as sequence from das.ATTCH_TBL where MOTHR_DATA_ID = " + attachFileInfoDO.getMothrDataId() +" with ur ");
				//stmt = con.prepareStatement(buf.toString());
				//rs = stmt.executeQuery();
				//rs.next();
				//seq = rs.getInt("sequence") + 1;
				//attachFileInfoDO.setSeq(seq);



				int index = 0;
				// 만약 이미 있는 자료이면 update, 새로운 자료면 insert 한다.
				/*if(photRegID > 0)		// update 하는 경우
					{
						StringBuffer buf = new StringBuffer();
						buf.append("\n update das.phot_tbl ");
						buf.append("\n 	  set fl_path = ?,  ");
						buf.append("\n 	  cont = ?,  ");
						buf.append("\n 	  resolution = ?,  ");
						buf.append("\n 	  length = ?,  ");
						buf.append("\n 	  down_yn = ?  ");

						buf.append("\n where phot_reg_id = ? ");

						stmt = con.prepareStatement(buf.toString());
						stmt.setString(++index, photoInfoDO.getFlPath());
						stmt.setString(++index, photoInfoDO.getCont());
						stmt.setString(++index, photoInfoDO.getResoultion());
						stmt.setString(++index, photoInfoDO.getLength());
						stmt.setString(++index, photoInfoDO.getDown_yn());

						stmt.setLong(++index, photoInfoDO.getPhotRegId());

					}
					else		// 새로운 자료니까 Insert 한다.
					{		*/
				//StringBuffer buf = new StringBuffer();
				query = ExternalStatement.insertPhotoInfoQuery();
				stmt = con.prepareStatement(query);			

				// 사진 ID를 채번한다
				photoId = getNextSquence(con, "seq_photo_id");


				photoInfoDO.setPhotRegId(Long.parseLong(photoId));




				// phot_reg_id를 가져와서 서버에 저장할 파일 이름으로 사용한다.	
				String strServerFilename = photoInfoDO.getOrg_fl_nm();

				// 확장자를 가져온다.
				int nLastIndex = photoInfoDO.getOrg_fl_nm().lastIndexOf(".");
				if (nLastIndex > 0)
				{
					strServerFilename = photoId + 
							photoInfoDO.getOrg_fl_nm().substring(nLastIndex, photoInfoDO.getOrg_fl_nm().length());
				}

				// 기존 이름을 rename한다.
				String strOldFilePath = dasHandler.getProperty("MP4")+"/photo/999/" + photoInfoDO.getOrg_fl_nm();

				String strNewFilePath = dasHandler.getProperty("MP4")+"/photo/999/" + strServerFilename.trim();

				File file = new File(strOldFilePath);
				File dest = new File(strNewFilePath);
				file.renameTo(dest);
				stmt.setLong(++index, Long.parseLong(photoId));			
				stmt.setString(++index, photoInfoDO.getFlPath()); 
				stmt.setString(++index, photoInfoDO.getOrg_fl_nm());
				stmt.setString(++index, strServerFilename.trim());
				stmt.setString(++index, photoInfoDO.getCont());					;
				stmt.setString(++index, photoInfoDO.getResoultion()); 
				stmt.setString(++index, photoInfoDO.getCprtr_nm());
				stmt.setString(++index, photoInfoDO.getDown_yn());


				stmt.executeUpdate();

				//PGM관련 사진 정보를 저장한다
				index = 0;


				/*if(photRegID > 0)		// update 하는 경우
					{

						buf.append("\n update das.pgm_phot_info_tbl ");
						buf.append("\n set  ");
						buf.append("\n master_id = ? ");
						buf.append("\n where pgm_id = ? ");
						buf.append("\n and phot_id = ? ");

						stmt = con.prepareStatement(buf.toString());
						stmt.setInt(++index, photoInfoDO.getBgnEpn()); 
						stmt.setInt(++index, photoInfoDO.getEndEpn());
						stmt.setLong(++index, photoInfoDO.getPgmId());
						stmt.setLong(++index, photRegID);					
					}
					else		// insert 하는 경우
					{ */
				query = ExternalStatement.insertPgmPhotoInfoQuery();
				stmt = con.prepareStatement(query);

				//순번을  채번한다
				photoSeq = getNextSquence(con, "seq_photo_seq");
				stmt.setInt(++index, Integer.parseInt(photoSeq)); 

				photoInfoDO.setSeq(Integer.parseInt(photoSeq));

				stmt.setLong(++index, photoInfoDO.getMaster_id()); 
				//stmt.setLong(++index, photoInfoDO.getPhotId());
				stmt.setLong(++index, Long.parseLong(photoId));

				stmt.setString(++index,  CalendarUtil.getDateTime("yyyyMMddHHmmss")); 


				stmt.executeUpdate();			
				resultList.add(photoInfoDO);
			} //end while

			con.commit();

			return "1";


		} 

		catch (Exception e) 
		{
			logger.error(query);
			if(con != null)
			{
				try {
					con.rollback();					
				} catch (SQLException e1) {
					// TODO 자동 생성된 catch 블록
					logger.error(e1);
				}
			}


			throw e;
		}
		finally
		{
			//try { 	if (stmt != null)  stmt.close();	} catch (SQLException e) {}
			try {
				con.setAutoCommit(true);
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				logger.error(e);
			}
			release(rs, stmt, con);
		}

	}







	/**
	 * 사진 정보를 저장한다.
	 * @param photoInfoDO 사진 정보 리스트	
	 * @return 	PhotoInfoDO object 리스트 
	 * @throws Exception 
	 */
	public int insertPotoinfo(PhotoInfoDO photoInfoDO) throws Exception
	{
		Connection con = null;
		PreparedStatement stmt = null;
		PreparedStatement stmt2 = null;
		ResultSet rs = null;
		String query = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			con.setAutoCommit(false);

			int updatecount1=0;
			int updatecount2=0;
			// 파일명으로 사용할 시퀀스. 새로운 파일이 들어올 때마다 시퀀스에서 하나씩 가져와서 그 숫자를 파일명으로 사용.

			String photoId = null, photoSeq = null;
			List resultList = new ArrayList();

			long photRegID = photoInfoDO.getPhotRegId(); 

			int index = 0;

			query = ExternalStatement.insertPhotoInfoQuery();
			stmt = con.prepareStatement(query);			

			// 사진 ID를 채번한다
			photoId = getNextSquence(con, "seq_photo_id");


			photoInfoDO.setPhotRegId(Long.parseLong(photoId));




			// phot_reg_id를 가져와서 서버에 저장할 파일 이름으로 사용한다.	
			String strServerFilename = photoInfoDO.getOrg_fl_nm();

			// 확장자를 가져온다.
			int nLastIndex = photoInfoDO.getOrg_fl_nm().lastIndexOf(".");
			if (nLastIndex > 0)
			{
				strServerFilename = photoId + 
						photoInfoDO.getOrg_fl_nm().substring(nLastIndex, photoInfoDO.getOrg_fl_nm().length());
			}

			// 기존 이름을 rename한다.
			String strOldFilePath = "/mp4/photo/999/" + photoInfoDO.getOrg_fl_nm();

			String strNewFilePath = "/mp4/photo/999/" + strServerFilename.trim();

			File file = new File(strOldFilePath);
			File dest = new File(strNewFilePath);
			file.renameTo(dest);

			stmt.setLong(++index, Long.parseLong(photoId));			
			stmt.setString(++index, photoInfoDO.getFlPath()); 
			stmt.setString(++index, photoInfoDO.getOrg_fl_nm());
			stmt.setString(++index, photoInfoDO.getOrg_fl_nm());
			stmt.setString(++index, photoInfoDO.getCont());					
			stmt.setString(++index, photoInfoDO.getResoultion()); 
			stmt.setString(++index, photoInfoDO.getCprtr_nm());
			stmt.setString(++index, photoInfoDO.getDown_yn());
			stmt.setLong(++index, Long.parseLong(photoInfoDO.getFl_sz()));
			stmt.setString(++index, photoInfoDO.getReg_id());		
			stmt.setString(++index, photoInfoDO.getTitle());
			updatecount1 = stmt.executeUpdate();

			//PGM관련 사진 정보를 저장한다


			query = ExternalStatement.insertPgmPhotoInfoQuery();

			String[] photList = photoInfoDO.getMaster_ids().split(",");
			for(int i = 0; i<photList.length; i++){
				index = 0;
				String masted_id = photList[i];


				stmt2 = con.prepareStatement(query);

				//순번을  채번한다
				photoSeq = getNextSquence(con, "seq_photo_seq");
				stmt2.setInt(++index, Integer.parseInt(photoSeq)); 

				photoInfoDO.setSeq(Integer.parseInt(photoSeq));

				stmt2.setLong(++index, Long.parseLong(masted_id)); 
				//stmt.setLong(++index, photoInfoDO.getPhotId());
				stmt2.setLong(++index, Long.parseLong(photoId));

				stmt2.setString(++index,  CalendarUtil.getDateTime("yyyyMMddHHmmss")); 
				stmt2.setString(++index, photoInfoDO.getReg_id());		
				stmt2.setString(++index, photoInfoDO.getTitle());
				stmt2.setString(++index, "N");
				updatecount2 = stmt2.executeUpdate();

			}

			con.commit();

			return updatecount2;


		} 
		catch (Exception e) 
		{
			logger.error(query);
			if(con != null)
			{
				try {
					con.rollback();					
				} catch (SQLException e1) {
					// TODO 자동 생성된 catch 블록
					logger.error(e1);
				}
			}			

			throw e;
		} 
		finally
		{
			try {
				con.setAutoCommit(true);
			} catch (SQLException e) {
				// TODO Auto-generated catch block

			}
			release(rs, stmt, con);
			release(null, stmt2, null);
		}

	}
	/**
	 * 코너 정보를 저장한다.
	 * @param masterId 마스터 ID	
	 * @param cornerInfoDO 코너 정보 리스트
	 * @return CornerInfoDO object 리스트
	 * @throws Exception 
	 */
	public List insertCornerinfo(long masterId, List cornerInfoDOList) throws Exception
	{


		Connection con = null;
		PreparedStatement stmt = null;
		StringBuffer buf = new StringBuffer();

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######insertCornerinfo######## con : " + con);
			con.setAutoCommit(false);

			//코너 테이블을 삭제한다.		     

			buf.append("\n delete from das.CORNER_TBL where master_id= ? ");

			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setLong(++index, masterId);
			stmt.executeUpdate();

			//          코너 정보를 추가 한다.
			List resultList = new ArrayList();
			Iterator _iter = cornerInfoDOList.iterator();
			while (_iter.hasNext()) {	

				CornerInfoDO	cornerInfoDO = (CornerInfoDO)_iter.next();	

				String query = ExternalStatement.insertCornerinfoQuery();
				stmt = con.prepareStatement(query);

				index = 0;
				String str = null;

				if(cornerInfoDO.getCnId() > 0)
					stmt.setLong(++index, cornerInfoDO.getCnId()); 
				else
				{
					// 코너 ID를 채번한다
					str = getNextSquence(con, "seq_cn_id");
					stmt.setLong(++index, Long.parseLong(str));
					cornerInfoDO.setCnId(Long.parseLong(str));
				}			

				stmt.setLong(++index, cornerInfoDO.getMasterId()); 
				stmt.setString(++index, cornerInfoDO.getCnNm());
				stmt.setString(++index, cornerInfoDO.getCnTypeCd()); 
				stmt.setString(++index, cornerInfoDO.getSom());
				stmt.setString(++index, cornerInfoDO.getEom()); 
				stmt.setString(++index, cornerInfoDO.getCnInfo()); 
				stmt.setString(++index, cornerInfoDO.getRegDt());
				stmt.setString(++index, cornerInfoDO.getRegrid());
				stmt.setLong(++index, cornerInfoDO.getRpimgCtId());
				stmt.setLong(++index, cornerInfoDO.getRpimgKfrmSeq());				
				stmt.setLong(++index,cornerInfoDO.getDuration());
				stmt.setLong(++index, cornerInfoDO.getSFrame());

				stmt.executeUpdate();				

				resultList.add(cornerInfoDO);

			} //end while

			con.commit();			

			return resultList;

		} 

		catch (Exception e) 
		{
			logger.error(buf.toString());
			if(con != null)
			{
				try {
					con.rollback();	        	
				} catch (SQLException e1) {
					// TODO 자동 생성된 catch 블록
					logger.error(e1);
				}
			}


			throw e;
		}
		finally
		{
			//try { 	if (stmt != null)  stmt.close();	} catch (SQLException e) {}
			try {
				con.setAutoCommit(true);
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				logger.error(e);
			}
			release(null, stmt, con);
		}

	}

	/**
	 * 코너 정보를 저장한다.
	 * @param masterId 마스터 ID	
	 * @param cornerInfoDO 코너 정보 리스트
	 * @return CornerInfoDO object 리스트
	 * @throws Exception 
	 */
	public List insertCornerinfoByBatch(long masterId, List cornerInfoDOList) throws Exception
	{

		Connection con = null;
		PreparedStatement stmt = null;
		StringBuffer buf = new StringBuffer();

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######insertCornerinfoByBatch######## con : " + con);
			con.setAutoCommit(false);

			//코너 테이블을 삭제한다.		     

			buf.append("\n delete from das.CORNER_TBL where master_id= ? ");

			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setLong(++index, masterId);
			stmt.executeUpdate();

			if(cornerInfoDOList.size()>0){
				String query = ExternalStatement.insertCornerinfoQuery();
				stmt = con.prepareStatement(query);

			}
			List resultList = new ArrayList();
			Iterator _iter = cornerInfoDOList.iterator();
			long ma =0L;
			while (_iter.hasNext()) {
				index = 0;
				String str ="";
				CornerInfoDO	cornerInfoDO = (CornerInfoDO)_iter.next();

				/*  	if(cornerInfoDO.getCnId() > 0)
						stmt.setLong(++index, cornerInfoDO.getCnId()); 
					else
					{*/
				// 코너 ID를 채번한다
				str = getNextSquence(con, "seq_cn_id");
				cornerInfoDO.setCnId(0);
				cornerInfoDO.setCnId(Long.parseLong(str));

				stmt.setLong(++index, cornerInfoDO.getCnId());
				//}			
				ma = cornerInfoDO.getMasterId();
				stmt.setLong(++index, cornerInfoDO.getMasterId()); 
				stmt.setString(++index, cornerInfoDO.getCnNm());
				stmt.setString(++index, cornerInfoDO.getCnTypeCd()); 
				stmt.setString(++index, cornerInfoDO.getSom());
				stmt.setString(++index, cornerInfoDO.getEom()); 
				stmt.setString(++index, cornerInfoDO.getCnInfo()); 
				stmt.setString(++index, cornerInfoDO.getRegDt());
				stmt.setString(++index, cornerInfoDO.getRegrid());
				stmt.setLong(++index, cornerInfoDO.getRpimgCtId());
				stmt.setLong(++index, cornerInfoDO.getRpimgKfrmSeq());				
				stmt.setLong(++index,cornerInfoDO.getDuration());
				stmt.setLong(++index, cornerInfoDO.getSFrame());

				//stmt.addBatch();

				resultList.add(cornerInfoDO);
				stmt.executeUpdate();
			}
			int[] rInt = null;
			// if(cornerInfoDOList.size()>0)rInt = stmt.executeBatch();

			con.commit();			
			String tmp = String.valueOf(ma);
			int master = Integer.parseInt(tmp);
			//프로시져 호출 함수
			//s//ystemManageDAO.insertCornerInfoForProceduer(master);
			return resultList;

		} 

		catch (Exception e) 
		{
			logger.error(buf.toString());
			if(con != null)
			{
				try {
					con.rollback();	        	
				} catch (SQLException e1) {
					// TODO 자동 생성된 catch 블록
					logger.error(e1);					
					e = e1.getNextException();

				}
			}


			throw e;
		}
		finally
		{
			//try { 	if (stmt != null)  stmt.close();	} catch (SQLException e) {}
			try {
				con.setAutoCommit(true);
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				logger.error(e);
			}
			release(null, stmt, con);
		}


	}
	/**
	 * 콘텐트 멥 정보를 저장한다.
	 * @param masterId 마스터 ID	
	 * @param contentMappInfoDO 정보	list
	 * @return count	입력된 갯수 count
	 * @throws Exception 
	 */
	public int insertContentsMappinfo(long masterId, List contentMappInfoDOList ) throws Exception
	{
		//ContentMappInfoDO contentMappInfoDO

		Connection con = null;
		PreparedStatement stmt = null;
		String query = null;

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######insertContentsMappinfo######## con : " + con);
			con.setAutoCommit(false);
			ContentMappInfoDO dels = selectMapDeldd(masterId);
			String[] del_dds= dels.getDel_dds().split(",");
			String[] ct_ids = dels.getCt_ids().split(",");
			// mapp 테이블을 삭제한다
			StringBuffer buf1 = new StringBuffer();
			buf1.append("\n delete from das.CONTENTS_MAPP_TBL where master_id= ? ");

			stmt = con.prepareStatement(buf1.toString());

			int index = 0;
			stmt.setLong(++index, masterId);
			int count = stmt.executeUpdate();

			int result =0;


			// mapp 데이터를 추가 한다
			if(contentMappInfoDOList.size()>0){
				query = ExternalStatement.insertContentsMappinfoQuery();
				stmt = con.prepareStatement(query);
			}
			Iterator _iter = contentMappInfoDOList.iterator();
			while (_iter.hasNext()) 
			{				
				ContentMappInfoDO	contentMappInfoDO = (ContentMappInfoDO)_iter.next();
				result+=1;				
				index = 0;
				stmt.setLong(++index, contentMappInfoDO.getCtId()); 
				stmt.setLong(++index, contentMappInfoDO.getMasterId()); 
				stmt.setLong(++index, contentMappInfoDO.getCnId());
				stmt.setLong(++index, contentMappInfoDO.getPgmId()); 
				stmt.setString(++index, contentMappInfoDO.getRegDt());
				stmt.setString(++index, contentMappInfoDO.getRegrid());
				stmt.setLong(++index, contentMappInfoDO.getSDuration());
				stmt.setLong(++index, contentMappInfoDO.getEDuration());
				stmt.setInt(++index, contentMappInfoDO.getCnSeq());
				stmt.setInt(++index, contentMappInfoDO.getCtSeq()); 
				//stmt.setString(++index, "");
				for(int i = 0; i<ct_ids.length;i++){

					if(String.valueOf((contentMappInfoDO.getCtId())).equals(ct_ids[i].trim())){
						stmt.setString(11, del_dds[i]);
					}
				}

				stmt.executeUpdate();
			}// end while


			con.commit();

			return result;

		} 
		catch (Exception e) 
		{
			logger.error(query);
			if(con != null)
			{
				try {
					con.rollback();					
				} catch (SQLException e1) {
					// TODO 자동 생성된 catch 블록
					logger.error(e1);
				}
			}


			throw e;
		} 
		finally
		{
			//try { 	if (stmt != null)  stmt.close();	} catch (SQLException e) {}
			try {
				con.setAutoCommit(true);
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				logger.error(e);
			}
			release(null, stmt, con);
		}

	}

	/**
	 * 메타타이타 정보를 갱신한다.
	 * @param metadataMstInfoDO  메타데이타 정보를 포함하는 object
	 * @return Update count
	 * @throws Exception 
	 */
	public int updateMetadat(MetadataMstInfoDO metadataMstInfoDO) throws Exception
	{

		StringBuffer buf = new StringBuffer();
		buf.append(ExternalStatement.updateMetadatQuery(metadataMstInfoDO.getCtgrLCd(),metadataMstInfoDO.getTapeId(), metadataMstInfoDO.getTapeItemId()));

		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateMetadat######## con : " + con);
			con.setAutoCommit(false);
			stmt = con.prepareStatement(buf.toString());
			int index = 0;
			if(metadataMstInfoDO.getCtgrLCd().equals("200")){				
				stmt.setString(++index, metadataMstInfoDO.getBrdDd());//BRD_DD
				stmt.setString(++index, metadataMstInfoDO.getPgmNm());//TITLE
			}else{				
				stmt.setString(++index, metadataMstInfoDO.getFmDt());//FM_DT
				stmt.setString(++index, metadataMstInfoDO.getTitle());//TITLE
			}
			stmt.setString(++index, metadataMstInfoDO.getSubTtl());//SUB_TTL

			stmt.setString(++index, metadataMstInfoDO.getRerun());	//	RERUN
			stmt.setString(++index, metadataMstInfoDO.getFinalBrdYn());//FINAL_BRD_YN
			stmt.setString(++index, metadataMstInfoDO.getCtgrLCd());//CTGR_L_CD
			stmt.setString(++index, metadataMstInfoDO.getCtgrMCd());//CTGR_M_CD
			stmt.setString(++index, metadataMstInfoDO.getCtgrSCd());//CTGR_S_CD
			stmt.setInt(++index, metadataMstInfoDO.getEpisNo());//EPIS_NO
			stmt.setString(++index, metadataMstInfoDO.getPgmCd());//PGM_CD
			stmt.setLong(++index, metadataMstInfoDO.getPgmId());//PGM_ID
			stmt.setString(++index, metadataMstInfoDO.getProducerNm());//PRODUCER_NM
			stmt.setString(++index, metadataMstInfoDO.getWriterNm());//WRITER_NM
			stmt.setString(++index, metadataMstInfoDO.getDrtNm());//DRT_NM
			stmt.setString(++index, metadataMstInfoDO.getCmrDrtNm());//CMR_DRT_NM
			stmt.setString(++index, metadataMstInfoDO.getPrdtDeptNm());//PRDT_DEPT_NM
			stmt.setString(++index, metadataMstInfoDO.getPrdtDeptCd());//PRDT_DEPT_cd
			stmt.setString(++index, metadataMstInfoDO.getPrdtInOutsCd());//PRDT_IN_OUTS_CD
			stmt.setString(++index, metadataMstInfoDO.getOrgPrdrNm());//ORG_PRDR_NM
			stmt.setString(++index, metadataMstInfoDO.getMcNm());//MC_NM
			stmt.setString(++index, metadataMstInfoDO.getCastNm());//CAST_NM
			stmt.setString(++index, metadataMstInfoDO.getCmrPlace());	//		CMR_PLACE
			//String music = metadataMstInfoDO.getMusicInfo().replace("'", "`");
			//String music = metadataMstInfoDO.getMusicInfo().replace("'", "`");
			stmt.setString(++index, metadataMstInfoDO.getMusicInfo());//MUSIC_INFO
			stmt.setString(++index, metadataMstInfoDO.getSnps());//SNPS
			stmt.setString(++index, metadataMstInfoDO.getKeyWords());//KEY_WORDS
			stmt.setString(++index, metadataMstInfoDO.getSpcInfo());//SPC_INFO
			stmt.setString(++index, metadataMstInfoDO.getViewGrCd());//VIEW_GR_CD
			stmt.setString(++index, metadataMstInfoDO.getPgmRate());//PGM_RATE
			stmt.setString(++index, metadataMstInfoDO.getDlbrCd());//DLBR_CD
			stmt.setString(++index, metadataMstInfoDO.getCprtType());//CPRT_TYPE
			stmt.setString(++index, metadataMstInfoDO.getCprtrNm());//CPRTR_NM
			stmt.setString(++index, metadataMstInfoDO.getCprtTypeDsc());//CPRT_TYPE_DSC
			stmt.setString(++index, metadataMstInfoDO.getAwardHstr());//AWARD_HSTR
			stmt.setString(++index, metadataMstInfoDO.getTapeMediaClfCd());//TAPE_MEDIA_CLF_CD
			stmt.setString(++index, metadataMstInfoDO.getGathCoCd());//GATH_CO_CD
			stmt.setString(++index, metadataMstInfoDO.getRsvPrdCd());//RSV_PRD_CD
			stmt.setString(++index, metadataMstInfoDO.getRsvPrdEndDd());//RSV_PRD_END_DD
			stmt.setInt(++index, metadataMstInfoDO.getRpimgKfrmSeq());//RPIMG_KFRM_SEQ
			stmt.setLong(++index, metadataMstInfoDO.getRpimgCtId());//	RPIMG_CT_ID
			stmt.setString(++index, metadataMstInfoDO.getArrange_nm());//ARRANGE_NM
			stmt.setString(++index, metadataMstInfoDO.getReqCd());//REQ_CD

			String riskClfCd = getRiskClfCd(metadataMstInfoDO.getMasterId());

			//추가수정분(10.11.18)
			stmt.setString(++index, riskClfCd);	//		RIST_CLF_CD	
			//	stmt.setString(++index, metadataMstInfoDO.getBrdBgnHms());//	BRD_BGN_HMS
			//	stmt.setString(++index, metadataMstInfoDO.getBrdEndHms());	//BRD_END_HMS
			//	stmt.setString(++index, metadataMstInfoDO.getSecArchNm());//SEC_ARCH_NM
			//	stmt.setString(++index, metadataMstInfoDO.getSecArchId());//SEC_ARCH_ID
			stmt.setString(++index, metadataMstInfoDO.getGathClfCd());//GATH_CLF_CD
			//stmt.setString(++index, metadataMstInfoDO.getArchRegDd());//ARCH_REG_DD
			//stmt.setString(++index, metadataMstInfoDO.getArrgEndDt());//ARRG_END_DT
			stmt.setString(++index, metadataMstInfoDO.getWorkPrioCd());	//	WORK_PRIO_CD	
			stmt.setString(++index, metadataMstInfoDO.getDelDd());//DEL_DD
			//	stmt.setString(++index, "Y");//USE_YN
			stmt.setString(++index, metadataMstInfoDO.getGathDeptCd());//GATH_DEPT_CD
			//	stmt.setString(++index, metadataMstInfoDO.getMcuid());//MCUID
			//stmt.setString(++index, metadataMstInfoDO.getDataStatCd());	//DATA_STAT_CD
			//stmt.setString(++index, metadataMstInfoDO.getIngRegDd());//ING_REG_DD
			stmt.setString(++index, metadataMstInfoDO.getCopyKeep());//COPY_KEEP
			stmt.setString(++index, metadataMstInfoDO.getCleanKeep());//CLEAN_KEEP
			stmt.setString(++index, metadataMstInfoDO.getRstCont());	//	RST_CONT
			//	stmt.setString(++index, metadataMstInfoDO.getAcceptorId());//ACCEPTOR_ID
			stmt.setString(++index, metadataMstInfoDO.getPds_cms_id());	//	pds_cms_pgm_id

			stmt.setString(++index, metadataMstInfoDO.getBrdLeng());//BrdLeng
			stmt.setString(++index, metadataMstInfoDO.getArtist());//ARTIST
			stmt.setString(++index, metadataMstInfoDO.getCountry_cd());//COUNTRY_CD
			if(!metadataMstInfoDO.getChennel_cd().equals("")){
				//stmt.setString(++index, metadataMstInfoDO.getChennel_cd());//CHENNEL_CD
			}
			if (metadataMstInfoDO.getTapeId().trim().length() > 0){
				stmt.setString(++index, metadataMstInfoDO.getTapeId());//
			}

			if (metadataMstInfoDO.getTapeItemId().trim().length() > 0){
				stmt.setString(++index, metadataMstInfoDO.getTapeItemId());//
			}



			stmt.setLong(++index, metadataMstInfoDO.getMasterId());//





			//미디어정보수정
			/*if(!metadataMstInfoDO.getMe_cd().equals("")){
				String[] hresol = metadataMstInfoDO.getHresol().split(",");*/
			UpdateContentMedia(metadataMstInfoDO.getMasterId(),metadataMstInfoDO.getAud_type_cd(),metadataMstInfoDO.getRecord_type_cd(),metadataMstInfoDO.getMe_cd(),metadataMstInfoDO.getColor_cd(),
					metadataMstInfoDO.getFrm_per_sec(),metadataMstInfoDO.getAudio_bdwt(),metadataMstInfoDO.getBit_rate(),metadataMstInfoDO.getAud_samp_frq());
			//화면비수정
			updateVd_qlty(metadataMstInfoDO.getMasterId(),metadataMstInfoDO.getVd_qlty(),metadataMstInfoDO.getAsp_rto_cd(),metadataMstInfoDO.getCt_cla());
			/*if(!metadataMstInfoDO.getCt_id().equals("")){
				//String[] ct_id = metadataMstInfoDO.getCt_id().split(",");
		//			for(int i =0;i<ct_id.length;i++){

				int ct_id = Integer.parseInt(metadataMstInfoDO.getCt_id());
					updateVd_qlty(ct_id,metadataMstInfoDO.getVd_qlty(),metadataMstInfoDO.getAsp_rto_cd());

				//	}
				}*/
			//관련영상 수정
			//	updateRelation(metadataMstInfoDO.getRel_masterId(),metadataMstInfoDO.getRel_brd_dd(),metadataMstInfoDO.getRel_req_dd(),metadataMstInfoDO.getRel_brd_leng(),metadataMstInfoDO.getRel_sub_ttl());

			/*List list = (List)selectRelCtid(metadataMstInfoDO.getRel_masterId());
				if(list!=null&&list.size()!=0){
					Iterator _iter = list.iterator();
					while(_iter.hasNext()){
						logger.debug("##"+list.size());
						MetadataMstInfoDO item = new MetadataMstInfoDO();
						item = (MetadataMstInfoDO)_iter.next();
						updateASP_RTO( metadataMstInfoDO.getRel_asp_rto_cd(),item.getRel_ct_id());
						updateContentsInfo(item.getRel_ct_id(),metadataMstInfoDO.getTot_fram(),metadataMstInfoDO.getCt_cla(),metadataMstInfoDO.getCt_typ());
					}
				} */
			//프로그램정보수정
			/*	if(metadataMstInfoDO.getCtgrLCd().equals("200")){	
				if(metadataMstInfoDO.getPgmId()!=0){
				updatePGMinfo(metadataMstInfoDO.getPgmNm(),metadataMstInfoDO.getPgmCd(),metadataMstInfoDO.getBrdBgnDd(),metadataMstInfoDO.getBrdEndDd(),metadataMstInfoDO.getmediaCd(),metadataMstInfoDO.getChan_cd(),metadataMstInfoDO.getPilot_yn(),metadataMstInfoDO.getPgmId());
				}
				}*/
			int updateCount = stmt.executeUpdate();

			con.commit();
			return updateCount;
		}

		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			//try { 	if (stmt != null)  stmt.close();	} catch (SQLException e) {}
			try {
				con.setAutoCommit(true);
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				logger.error(e);
			}
			release(null, stmt, con);
		}

	}

	/**
	 * 메타데이타 마스터의 클립 정보를 갱신한다.
	 * @param RpimgKfrmSeq  대표화면 키프레임 일련 번호
	 * @param rpimgCtId  대표화면 콘텐트 ID
	 * @param masterId  마스터 ID
	 * @return Update count
	 * @throws Exception 
	 */
	public int updateClipRepinfo(int rpimgKfrmSeq, long rpimgCtId, long masterId) throws Exception
	{
		String query = ExternalStatement.updateClipRepinfoQuery();

		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateClipRepinfo######## con : " + con);
			stmt = con.prepareStatement(query);

			int index = 0;
			stmt.setInt(++index, rpimgKfrmSeq);
			stmt.setLong(++index, rpimgCtId);
			stmt.setLong(++index, masterId);			

			int updateCount = stmt.executeUpdate();
			return updateCount;
		}

		catch (Exception e) 
		{
			logger.error(query);


			throw e;
		}
		finally
		{
			//try { 	if (stmt != null)  stmt.close();	} catch (SQLException e) {}
			release(null, stmt, con);
		}

	}


	/**
	 * 코너 테이블의 대표화면 정보를 갱신한다.
	 * @param RpimgKfrmSeq  대표화면 키프레임 일련 번호
	 * @param rpimgCtId  대표화면 콘텐트 ID
	 * @param masterId  마스터 ID
	 * @return Update count
	 * @throws Exception 
	 */
	public int updateCornerRepinfo(int rpimgKfrmSeq, long rpimgCtId, long cnId) throws Exception
	{
		String query = ExternalStatement.updateCornerRepinfoQuery();

		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateCornerRepinfo######## con : " + con);
			stmt = con.prepareStatement(query);

			int index = 0;
			stmt.setInt(++index, rpimgKfrmSeq);
			stmt.setLong(++index, rpimgCtId);
			stmt.setLong(++index, cnId);			

			int updateCount = stmt.executeUpdate();

			return updateCount;
		}

		catch (Exception e) 
		{
			logger.error(query);


			throw e;
		}
		finally
		{
			//try { 	if (stmt != null)  stmt.close();	} catch (SQLException e) {}
			release(null, stmt, con);
		}

	}


	/**
	 * 콘텐트 멥테이블의 시작/종료 duraiton을 갱신한다.
	 * @param contentMappInfoDO  content mapp object
	 * @return Update count
	 * @throws Exception 
	 */
	public int updateCornerDuration(ContentMappInfoDO contentMappInfoDO) throws Exception
	{
		String query = ExternalStatement.updateCornerDurationQuery();

		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateCornerDuration######## con : " + con);
			stmt = con.prepareStatement(query);

			int index = 0;
			stmt.setLong(++index, contentMappInfoDO.getSDuration());
			stmt.setLong(++index, contentMappInfoDO.getEDuration());
			stmt.setLong(++index, contentMappInfoDO.getMasterId());
			stmt.setLong(++index, contentMappInfoDO.getCnId());
			stmt.setLong(++index, contentMappInfoDO.getCtId());			

			int updateCount = stmt.executeUpdate();

			return updateCount;
		}

		catch (Exception e) 
		{
			logger.error(query);


			throw e;
		}
		finally
		{
			//try { 	if (stmt != null)  stmt.close();	} catch (SQLException e) {}
			release(null, stmt, con);
		}

	}


	/**
	 * 검색어를 포함하는 프로그램 이름을 모두 가져온다
	 * @param pgmNm    프로그램 이름 검색어
	 * @return List		ProgramInfoDO 리스트
	 * @throws Exception 
	 */
	public List selectProgramInfo(String pgmNm) throws Exception
	{
		String query = ExternalStatement.selectProgramInfoQuery(pgmNm);

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			stmt = con.prepareStatement(query);

			String str = null;		
			rs = stmt.executeQuery();
			List resultList  = new ArrayList();
			while(rs.next())
			{
				ProgramInfoDO item = new ProgramInfoDO();
				item.setPgmId(       		rs.getLong("PGM_ID"));
				item.setMasterId(       		rs.getLong("MASTER_ID"));

				str = rs.getString("PGM_NM");
				str = StringUtils.replace(str, "<", " ");
				str = StringUtils.replace(str, ">", " ");
				item.setPgmNm(str);

				//str = rs.getString("PGM_EPIS");
				str = rs.getString("EPIS_NO");
				str = StringUtils.replace(str, "<", " ");
				str = StringUtils.replace(str, ">", " ");
				item.setPgmEpis(str);

				resultList.add(item);		
			}		

			return resultList;

		} 
		catch (Exception e) 
		{
			logger.error(query);

			throw e;
		} 

		finally
		{
			release(rs, stmt, con);
		}
	}

	/**
	 * 프로그램이름을 포함하는 프로그램 정보을 모두 가져온다
	 * @param programInfoDO   검색할 정보를 가지고있는 beans
	 * @return List		ProgramInfoDO 리스트
	 * @throws Exception 
	 */
	public List selectPgmInfoFromName(ProgramInfoDO programInfoDO) throws Exception
	{

		String query = ExternalStatement.selectPgmInfoFromNameQuery3(programInfoDO);

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			if(logger.isDebugEnabled()) {
				logger.debug("pgm_nm : "+programInfoDO.getPgmNm());
			}
			con = DBService.getInstance().getConnection();
			stmt = con.prepareStatement(query);
			stmt.setString(1, "%"+programInfoDO.getPgmNm()+"%");

			String str = null;		
			rs = stmt.executeQuery();
			List resultList  = new ArrayList();

			while(rs.next())
			{
				ProgramInfoDO item = new ProgramInfoDO();

				item.setPgmId(  rs.getLong("PGM_ID"));
				item.setPgmCd(  rs.getString("PGM_CD"));
				//item.setMasterId(  rs.getLong("master_id"));
				item.setBrdBgnDd( rs.getString("BRD_BGN_DD"));
				item.setBrdEndDd( rs.getString("BRD_END_DD"));
				item.setCtgrLCd( rs.getString("CTGR_L_CD"));
				item.setCtgrMCd( rs.getString("CTGR_M_CD"));
				item.setCtgrSCd( rs.getString("CTGR_S_CD"));
				item.setMediaCd( rs.getString("MEDIA_CD"));
				item.setChanCd( rs.getString("CHAN_CD"));
				item.setPrd_Dept_Nm(rs.getString("PRD_DEPT_NM"));
				item.setSchd_Pgm_Nm(rs.getString("SCHD_PGM_NM"));
				item.setParents_cd(rs.getString("PARENTS_CD"));
				//	item.setSub_ttl(rs.getString("SUB_TTL"));
				str = rs.getString("PGM_NM");
				str = StringUtils.replace(str, "<", " ");
				str = StringUtils.replace(str, ">", " ");
				item.setPgmNm(str);
				resultList.add(item);
			}		

			return resultList;

		} 
		catch (Exception e) 
		{
			logger.error(query);

			throw e;
		} 

		finally
		{
			release(rs, stmt, con);
		}
	}
	/**
	 * 대본정보를 조회한다.
	 * @param masterId
	 * @return list 대본 정보 조회
	 * @throws Exception 
	 */
	public List selectScenario(long masterid ) throws Exception
	{

		String query = ExternalStatement.selectScenarioQuery();

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			stmt = con.prepareStatement(query);
			stmt.setLong(1, masterid);
			rs = stmt.executeQuery();
			List resultList  = new ArrayList();
			int cnt = 0;
			while(rs.next())
			{
				ScenarioDO item = new ScenarioDO();

				item.setMasterId(rs.getLong("MASTER_ID"));
				item.setTitle((rs.getString("TITLE")));	
				item.setDesc(rs.getString("note"));
				item.setRegdt(rs.getString("REGDT"));

				resultList.add(item);
			}		

			return resultList;

		} 
		catch (Exception e) 
		{
			logger.error(query);

			throw e;
		} 
		finally
		{
			release(rs, stmt, con);
		}
	}

	/**
	 * 대본정보를 조회한다.
	 * @param masterId
	 * @return list 대본 정보 조회
	 * @throws Exception 
	 */
	public ScenarioDO selectScenario2(ScenarioDO scenarioDO) throws Exception
	{

		String query = ExternalStatement.selectScenarioQuery2();

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			stmt = con.prepareStatement(query);
			stmt.setLong(1, scenarioDO.getMasterId());
			if(scenarioDO.getSeq() !=1){
				stmt.setLong(2, scenarioDO.getSeq());
			}else {
				stmt.setLong(2, 1);	
			}
			rs = stmt.executeQuery();


			ScenarioDO item = new ScenarioDO();

			if(rs.next())
			{

				item.setMasterId(rs.getLong("MASTER_ID"));
				item.setTitle((rs.getString("TITLE")));
				item.setDesc(rs.getString("note"));
				item.setRegdt(rs.getString("REGDT"));
				item.setTotalcount(countScenario(scenarioDO.getMasterId()));

			}		

			return item;

		} 
		catch (Exception e) 
		{
			logger.error(query);

			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}

	/**
	 * 대본정보 총 갯수를 조회한다.
	 * @param masterId
	 * @return list 대본 정보 조회
	 * @throws Exception 
	 */
	public int countScenario(long master_id) throws Exception
	{

		String query = ExternalStatement.countScenario();

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######countScenario######## con : " + con);
			stmt = con.prepareStatement(query);
			stmt.setLong(1, master_id);

			rs = stmt.executeQuery();
			List resultList  = new ArrayList();
			int cnt = 0;

			while(rs.next())
			{
				cnt= rs.getInt("cnt");
			}		

			return cnt;

		} 

		catch (Exception e) 
		{
			logger.error(query);

			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}

	/**
	 * 관련영상 존재를 조회한다
	 * @param master_id
	 * @return
	 * @throws Exception 
	 * @throws RemoteException
	 */
	public String selectRelationMaster(long masterid ) throws Exception
	{

		String query = ExternalStatement.selectRelationQuery();

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		String child_master_id = "";
		try 
		{
			con = DBService.getInstance().getConnection();
			stmt = con.prepareStatement(query);
			stmt.setLong(1, masterid);
			rs = stmt.executeQuery();
			while(rs.next()){
				child_master_id = String.valueOf(rs.getLong("CHILD_MASTER_ID"));
			}
			if(child_master_id.equals("")){
				return String.valueOf(masterid);
			} else {
				return child_master_id;
			}

		} 
		catch (Exception e) 
		{
			logger.error(query);

			throw e;
		} 
		finally
		{
			release(rs, stmt, con);
		}
	}

	/**
	 * 관련영상으로 맺어져있는 지 유무를 파악한다
	 * @param masterid 마스터id 
	 * @return boolean
	 * @throws Exception 
	 */
	public boolean isThereRelation(long masterid ) throws Exception
	{

		String query = ExternalStatement.selectRelationQuery();

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		boolean child_master_id=false;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######isThereRelation######## con : " + con);
			stmt = con.prepareStatement(query);
			int totalCount  = getTotalCount(con, query.toString());

			if(totalCount > 0)
			{
				return true;
			}
			else
			{
				return false;
			}

		} 

		catch (Exception e) 
		{
			logger.error(query);

			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}


	/*	public String selectRelationTotaly(long masterid ) throws DASException
		{

			String query = ExternalStatement.selectRelationQuery();

			Connection con = null;
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String child_master_id = "";
			try 
			{
				con = DBService.getInstance().getConnection();

				stmt = con.prepareStatement(query);
				stmt.setLong(1, masterid);
				rs = stmt.executeQuery();
				while(rs.next()){
					child_master_id = rs.getLong("CHILD_MASTER_ID")+"";
				}

				return child_master_id;

			} 
			catch (NamingException e) 
			{
				// TODO 자동 생성된 catch 블록
				logger.error(e);
		        DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "시스템 장애입니다.", e);
		        throw exception;
			} 
			catch (SQLException e) 
			{
				// TODO 자동 생성된 catch 블록
				logger.error(e);
		        DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "시스템 장애입니다.", e);
		        throw exception;
			}
			finally
			{
				release(rs, stmt, con);
			}
		}*/




	/**
	 * 관련영상 정보 조회
	 * @param programInfoDO 정보조회를 위해 필요한 beans
	 * @return List 결과정보
	 * @throws Exception 
	 * @throws RemoteException
	 */
	public List selectSearchRelationInfolist(ProgramInfoDO	programInfoDO) throws Exception
	{

		String query = ExternalStatement.selectSearchRelationInfoQuery(programInfoDO);
		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			stmt = con.prepareStatement(query);
			rs = stmt.executeQuery();
			List resultList  = new ArrayList();

			while(rs.next())
			{
				ProgramInfoDO item = new ProgramInfoDO();
				//				
				item.setPgmId(  rs.getLong("PGM_ID"));
				item.setPgmNm(  (rs.getString("title")));
				item.setBrdBgnDd( rs.getString("BRD_DD"));
				item.setMasterId( rs.getLong("MASTER_ID"));
				item.setCt_cla_nm( rs.getString("ct_cla_nm"));
				item.setCtgr_l_nm( rs.getString("ctgr_l_nm"));
				item.setVd_qlty_nm( rs.getString("vd_qlty_nm"));
				item.setBrd_leng( rs.getString("brd_leng"));
				if(rs.getString("EPIS_NO").equals("0")){
					item.setEpis_No("");
				}else{
					item.setEpis_No( rs.getString("EPIS_NO"));
				}
				item.setPgmCd(rs.getString("PGM_CD"));

				resultList.add(item);
			}		

			return resultList;

		} 
		catch (Exception e) 
		{
			logger.error(query);

			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}

	/**
	 * 프로그램이름을 포함하는 프로그램 정보을 모두 가져온다
	 *  @param programInfoDO    검색조건을 가진beans
	 * @return List		ProgramInfoDO 리스트
	 * @throws Exception 
	 */
	public List selectLastPgmInfolist(ProgramInfoDO	programInfoDO) throws Exception
	{

		String query = ExternalStatement.selectLastPgmInfolistQuery(programInfoDO);
		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######selectLastPgmInfolist######## con : " + con);
			stmt = con.prepareStatement(query);
			rs = stmt.executeQuery();
			List resultList  = new ArrayList();

			while(rs.next())
			{
				ProgramInfoDO item = new ProgramInfoDO();			
				item.setPgmId(  rs.getLong("PGM_ID"));
				item.setPgmNm(  (rs.getString("PGM_NM")));
				item.setBrd_dd( rs.getString("BRD_DD"));
				item.setMasterId( rs.getLong("MASTER_ID"));
				item.setEpisNo( rs.getInt("EPIS_NO"));
				item.setPgmCd(rs.getString("PGM_CD"));
				item.setCtgrLCd(  rs.getString("CTGR_L_CD"));
				item.setCtgr_l_nm(  rs.getString("CTGR_L_NM"));
				item.setData_stat_cd(  (rs.getString("DATA_STAT_CD")));
				item.setData_stat_nm(  (rs.getString("DATA_STAT_NM")));
				item.setReg_dt( rs.getString("REG_DT"));
				item.setReg_id( rs.getString("REGRID"));
				item.setMedia_id( rs.getString("MEDIA_ID"));


				resultList.add(item);
			}		

			return resultList;

		} 
		catch (Exception e) 
		{
			logger.error(query);

			throw e;
		} 

		finally
		{
			release(rs, stmt, con);
		}
	}


	/**
	 * 프로그램이름을 포함하는 프로그램 정보을 모두 가져온다
	 * @param pgmNm    프로그램 이름 검색어
	 * @return List		ProgramInfoDO 리스트
	 * @throws Exception 
	 */
	public List selectLastPgmInfolist(String	pgmNm) throws Exception
	{
		String query = ExternalStatement.selectLastPgmInfolistQuery(pgmNm);

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######selectLastPgmInfolist######## con : " + con);
			stmt = con.prepareStatement(query);

			String str = null;		
			rs = stmt.executeQuery();
			List resultList  = new ArrayList();
			while(rs.next())
			{
				ProgramInfoDO item = new ProgramInfoDO();
				item.setPgmId(  rs.getLong("PGM_ID"));
				item.setPgmNm(  (rs.getString("PGM_NM")));
				item.setBrdBgnDd( rs.getString("BRD_DD"));
				item.setMasterId( rs.getLong("MASTER_ID"));
				String ep = rs.getString("EPIS_NO");
				if(ep.trim().equals("0")){
					item.setEpis_No("");
				}else{
					item.setEpis_No( rs.getString("EPIS_NO"));	
				}
				item.setPgmCd(rs.getString("PGM_CD"));

				resultList.add(item);		
			}		

			return resultList;

		} 
		catch (Exception e) 
		{
			logger.equals(query);

			throw e;
		} 

		finally
		{
			release(rs, stmt, con);
		}
	}


	/**
	 * 프로그램 ID에 해당하는 프로그램 정보를 모두 가져온다
	 * @param pgmId    프로그램 ID
	 * @return List		ProgramInfoDO 리스트
	 * @throws Exception 
	 */
	public List selectLastPgmInfolistByPgmId(long pgmId) throws Exception
	{
		String query = ExternalStatement.selectLastPgmInfolistByPgmIdQuery();

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();

			stmt = con.prepareStatement(query);

			int index = 0;
			//stmt.setLong(++index, pgmId);

			String str = null;		
			rs = stmt.executeQuery();
			List resultList  = new ArrayList();
			while(rs.next())
			{
				ProgramInfoDO item = new ProgramInfoDO();
				item.setPgmId(  rs.getLong("PGM_ID"));
				item.setPgmCd(  rs.getString("pgm_cd"));
				item.setPgmNm(  (rs.getString("PGM_NM")));
				item.setBrdBgnDd( rs.getString("BRD_DD"));
				item.setMasterId( rs.getLong("MASTER_ID"));
				item.setEpisNo( rs.getInt("EPIS_NO"));

				resultList.add(item);	
			}		

			return resultList;
		} 
		catch (Exception e) 
		{
			logger.error(query);

			throw e;
		} 

		finally
		{
			release(rs, stmt, con);
		}
	}
	/**
	 * 프로그램 ID에 대항하는 프로그램 정보를 가져온다
	 * @param pgmID 프로그램 ID
	 * @param brd_dd 방송일
	 * @return List 
	 * @throws Exception 
	 */
	public List selectLastPgmInfolistByPgmId2(long pgmId, String brd_dd) throws Exception
	{
		String query = ExternalStatement.selectLastPgmInfolistByPgmIdQuery2(pgmId,brd_dd);

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();	
			stmt = con.prepareStatement(query);

			int index = 0;
			//stmt.setLong(++index, pgmId);

			String str = null;		
			rs = stmt.executeQuery();
			List resultList  = new ArrayList();
			while(rs.next())
			{
				ProgramInfoDO item = new ProgramInfoDO();
				item.setPgmId(  rs.getLong("PGM_ID"));
				item.setPgmCd(  rs.getString("pgm_cd"));
				item.setPgmNm(  rs.getString("PGM_NM"));
				item.setBrdBgnDd( rs.getString("BRD_DD"));
				item.setMasterId( rs.getLong("MASTER_ID"));
				String epis_no = String.valueOf(rs.getLong("EPIS_NO"));
				if(epis_no.trim().equals("0")){
					item.setEpis_No("");
				}else{
					item.setEpis_No( rs.getString("EPIS_NO"));
				}		
				resultList.add(item);	
			}		

			return resultList;
		} 
		catch (Exception e) 
		{
			logger.error(query);

			throw e;
		} 

		finally
		{
			release(rs, stmt, con);
		}
	}


	/**
	 * 마스터 ID를 가지는 프로그램 정보를 가져온다
	 * @param episNo    에피소드 #. 만약 -1이 넘어오면 뒤에 오는 값은 pgmId가 아니라 MasterID다.
	 * @param pgmId    프로그램 ID
	 * @return List		ProgramInfoDO 리스트
	 * @throws Exception 
	 */
	public List selectPgmInfoFromMasterid(int episNo, long pgmId ) throws Exception
	{
		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		String query = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//에피소드번호와 프로그램ID에 따른 마스터 ID를 가져온다
			long masterId = 0;

			//** 서호태 과장님 요청으로 수정 하였음..  20090903

			// 만약 episNo가 -1이면 뒤에 pgmId 변수로 넘어온 값은 MasterID이다.
			//			if (-1 == episNo)
			masterId = pgmId;
			//			else
			//				masterId = getMasterId(con,episNo, pgmId );

			//마스터 ID에 따른 프로그램 정보를 가져온다
			query = ExternalStatement.selectPgmInfoFromMasteridQuery();

			stmt = con.prepareStatement(query);

			int index = 0;
			stmt.setLong(++index, masterId);

			String str = null;		
			rs = stmt.executeQuery();
			List resultList  = new ArrayList();
			while(rs.next())
			{
				MetadataMstInfoDO item = new MetadataMstInfoDO();

				item.setPgmId(  rs.getLong("PGM_ID"));
				item.setPgmCd( rs.getString("PGM_CD"));
				item.setBrdBgnDd( rs.getString("BRD_BGN_DD"));
				item.setBrdEndDd( rs.getString("BRD_END_DD"));
				item.setMediaCd( rs.getString("MEDIA_CD"));							
				item.setPgmNm((rs.getString("PGM_NM")));	
				item.setTitle((rs.getString("TITLE")));
				item.setBrdDd(rs.getString("BRD_DD"));
				item.setFinalBrdYn(rs.getString("FINAL_BRD_YN"));
				item.setCtgrLCd(rs.getString("CTGR_L_CD"));
				item.setCtgrMCd(rs.getString("CTGR_M_CD"));
				item.setCtgrSCd(rs.getString("CTGR_S_CD"));
				item.setEpis_no(rs.getString("EPIS_NO"));
				item.setDrtNm((rs.getString("DRT_NM")));
				item.setProducerNm((rs.getString("PRODUCER_NM")));
				item.setWriterNm((rs.getString("WRITER_NM")));		
				item.setCmrDrtNm((rs.getString("CMR_DRT_NM")));
				item.setPrdtDeptNm((rs.getString("PRDT_DEPT_NM")));
				item.setPrdtInOutsCd(rs.getString("PRDT_IN_OUTS_CD"));
				item.setOrgPrdrNm((rs.getString("ORG_PRDR_NM")));
				item.setMcNm((rs.getString("MC_NM")));
				item.setCastNm((rs.getString("CAST_NM")));
				item.setCmrPlace((rs.getString("CMR_PLACE")));
				item.setKeyWords(rs.getString("KEY_WORDS"));
				item.setSnps((rs.getString("SNPS")));				
				item.setSpcInfo((rs.getString("SPC_INFO")));
				item.setViewGrCd(rs.getString("VIEW_GR_CD"));
				item.setPgmRate(rs.getString("PGM_RATE"));
				item.setCprtType(rs.getString("CPRT_TYPE"));
				item.setCprtrNm((rs.getString("CPRTR_NM")));
				item.setCprtTypeDsc((rs.getString("CPRT_TYPE_DSC")));
				item.setAwardHstr((rs.getString("AWARD_HSTR")));	
				item.setDlbrCd(rs.getString("DLBR_CD"));
				item.setTapeMediaClfCd(rs.getString("TAPE_MEDIA_CLF_CD"));
				item.setMusicInfo((rs.getString("MUSIC_INFO")));
				item.setRerun((rs.getString("RERUN")));
				item.setArrange_nm((rs.getString("ARRANGE_NM")));
				item.setRecord_type_cd(rs.getString("RECORD_TYPE_CD"));

				resultList.add(item);		
			}		

			return resultList;

		} 
		catch (Exception e) 
		{
			logger.error(query);

			throw e;
		} 
		finally
		{
			release(rs, stmt, con);
		}
	}


	/**
	 * 프로그램에 포함된 콘텐트 정보를 읽어온다
	 * @param masterId    마스터 ID
	 * @return List 	PgmContensInfoDO 리스트
	 * @throws Exception 
	 */
	public List selectPgmContentsInfo(long masterId) throws Exception
	{

		String query = ExternalStatement.selectPgmContentsInfoQuery();

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			stmt = con.prepareStatement(query);

			int index = 0;
			stmt.setLong(++index, masterId);

			rs = stmt.executeQuery();

			List resultList  = new ArrayList();
			while(rs.next())
			{
				PgmContensInfoDO item = new PgmContensInfoDO();
				item.setCtId(rs.getLong("CT_ID"));
				item.setCtiId(rs.getLong("CTI_ID"));
				item.setMasterId(rs.getLong("MASTER_ID"));
				item.setCtNm((rs.getString("CT_NM")));
				item.setFlPath(rs.getString("FL_PATH"));

				resultList.add(item);

			}			
			return resultList;

		} 
		catch (Exception e) 
		{
			logger.error(query);

			throw e;
		} 

		finally
		{
			release(rs, stmt, con);
		}
	}

	/**
	 * 메타데이타 마스터 테이블 사용 정보이력을 갱신한다
	 * @param masterId    마스터 ID
	 * @param userId    사용자 ID
	 * @return updateCount 	
	 * @throws Exception 
	 */
	public int updateModUserid(long masterId, String userId) throws Exception
	{

		PreparedStatement stmt = null;
		Connection con = null;	
		ResultSet rs = null;

		StringBuffer buf2 = new StringBuffer();
		StringBuffer buf3 = new StringBuffer();
		StringBuffer buf4 = new StringBuffer();

		try 
		{
			con = DBService.getInstance().getConnection();
			con.setAutoCommit(false);	

			/*
				//메타테이타 마스터 테이블에서 상태정보를 읽어온다
				StringBuffer buf1 = new StringBuffer();
				buf1.append("\n select modrid,data_stat_cd from das.metadat_mst_tbl where master_id= ? ");
				buf1.append("\n with ur ");

				stmt = con.prepareStatement(buf1.toString());
				int index = 0;
				stmt.setLong(++index, masterId);

				rs = stmt.executeQuery();
				rs.next();

				if(rs.getString("DATA_STAT_CD").equals("002"))
					return DASBusinessConstants.YesNo.NO;
			 */

			//메타테이타 마스터 테이블 정보를 갱신한다 .

			buf2.append("\n update das.metadat_mst_tbl set modrid= ?, lock_stat_cd = 'Y' where master_id = ?");

			stmt = con.prepareStatement(buf2.toString());
			int index = 0;
			stmt.setString(++index, userId);
			stmt.setLong(++index, masterId);
			int updateCount = stmt.executeUpdate();

			if(updateCount > 0)
			{
				//마스터 수정 정보 테이블에서 최근 순번을 가져온다 .

				buf3.append("\n select max(seq) as sequence from das.mst_mod_info_tbl with ur ");

				stmt = con.prepareStatement(buf3.toString());
				rs = stmt.executeQuery();
				rs.next();
				int seq = rs.getInt("sequence");

				//메타테이타 마스터 테이블 정보를 갱신한다 .

				buf4.append("\n insert into das.mst_mod_info_tbl(master_id,seq,mod_dt,modrid) values (?,?,?,?) ");

				stmt = con.prepareStatement(buf4.toString());
				index = 0;
				stmt.setLong(++index, masterId);
				stmt.setInt(++index, seq + 1);
				stmt.setString(++index, CalendarUtil.getDateTime("yyyyMMddHHmmss"));
				stmt.setString(++index, userId);
				stmt.executeUpdate();				
			}

			con.commit();

			return updateCount;				

		}
		catch (Exception e) 
		{
			logger.error("buf2 : " + buf2);
			logger.error("buf3 : " + buf3);
			logger.error("buf4 : " + buf4);

			if(con != null)
			{
				try {
					con.rollback();
				} catch (SQLException e1) {
					// TODO 자동 생성된 catch 블록
					logger.error(e1);
				}
			}


			throw e;
		} 

		finally
		{
			try {
				con.setAutoCommit(true);
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				logger.error(e);
			}
			release(rs, stmt, con);		// panboy check.이것도 왜 rs가 있는데 null로 처리하지 않았을까.
		}

	}


	/**
	 * 조회된 콘텐트 삭제파일 리스트를 가져온다.
	 * @param days 오늘로 부터 며칠전 파일
	 * @return String 	파일 리스트
	 * @throws Exception 
	 */
	public String deleteContentFiles(int days) throws Exception
	{
		Connection con = null;
		try 
		{
			String strList = null ;
			con = DBService.getInstance().getConnection();
			con.setAutoCommit(false);			

			strList = deleteContentFileItem(con, days);		

			con.commit();

			return strList;
		} 

		catch (Exception e) 
		{

			logger.error(days);

			if(con != null)
			{
				try {
					con.rollback();
				} catch (SQLException e1) {
					// TODO 자동 생성된 catch 블록
					logger.error(e1);
				}
			}


			throw e;
		}
		finally
		{
			try {
				con.setAutoCommit(true);
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				logger.error(e);
			}
			release(null, null, con);
		}

	}


	/**
	 * Photo 파일 항목을 삭제한다.
	 * @param fileName 파일 이름
	 * @param regId 오늘로 부터 며칠전 파일
	 * @param seq 순번
	 * @return 삭제 여부
	 * @throws Exception 
	 */
	public String deletePhotoFiles(List photoInfoList) throws Exception
	{
		Connection con = null;
		PreparedStatement stmt = null;
		StringBuffer buf = new StringBuffer();
		StringBuffer buf1 = new StringBuffer();
		try 
		{
			String str = null ;
			con = DBService.getInstance().getConnection();
			//l/ogger.debug("######deletePhotoFiles######## con : " + con);
			con.setAutoCommit(false);			

			Iterator _iter = photoInfoList.iterator();
			while (_iter.hasNext()) {

				PhotoInfoDO	photoInfoDO = (PhotoInfoDO)_iter.next();	

				// PHOT_TBL 항목을  삭제한다.		     

				buf.append("\n delete from das.PHOT_TBL where phot_reg_id = " + photoInfoDO.getPhotRegId() );
				stmt = con.prepareStatement(buf.toString());
				stmt.executeUpdate();

				// PGM_PHOT_INFO_TBL 항목을  삭제한다.		     

				buf1.append("\n delete from das.PGM_PHOT_INFO_TBL where phot_id = " + photoInfoDO.getSeq() );
				stmt = con.prepareStatement(buf1.toString());
				stmt.executeUpdate();	

				// 스토리지에서 해당 파일을 삭제한다.	
				File file = new File(photoInfoDO.getFlPath());
				if(file.exists())
				{
					if(file.delete()){
						if(str == null)
							str =	photoInfoDO.getFlPath()+":"+"DELETED";
						else
							str =	str + "," +photoInfoDO.getFlPath()+":"+"DELETED";
					}
					else{
						if(str == null)
							str =	photoInfoDO.getFlPath()+":"+"NOT DELETED";
						else
							str =	str + "," + photoInfoDO.getFlPath()+":"+"NOT DELETED";						
					}
				}
				else{
					if(str == null)
						str = photoInfoDO.getFlPath()+":"+"NOT EXIST";
					else
						str = str + "," +photoInfoDO.getFlPath()+":"+"NOT EXIST";
				}

			}

			con.commit();

			return str;
		} 

		catch (Exception e) 
		{
			logger.error(buf.toString());
			logger.error(buf1.toString());

			if(con != null)
			{
				try {
					con.rollback();
				} catch (SQLException e1) {
					// TODO 자동 생성된 catch 블록
					logger.error(e1);
				}
			}


			throw e;
		}
		finally
		{
			try {
				con.setAutoCommit(true);
			} catch (SQLException e) {
				logger.error(e);
			}
			release(null, stmt, con);
		}

	}


	/**
	 * Photo 파일 항목을 삭제한다.
	 * @param photoInfoDO 삭제할 정보가 들어있는 beans	 
	 * @throws Throwable 
	 */
	public String deletePhoto(PhotoInfoDO photoInfoDO) throws Throwable
	{
		StringBuffer buf = new StringBuffer();
		buf.append("\n update  das.PGM_PHOT_INFO_TBL set del_yn = 'Y' ");
		buf.append("\n ,mod_dt = ?");
		buf.append("\n WHERE phot_id = ?");
		buf.append("\n and  master_id  = ?");

		Connection con = null;
		PreparedStatement stmt = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			con.setAutoCommit(false);

			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			String[] delList= photoInfoDO.getPhotRegIdS().split(",");
			String[] delmaster= photoInfoDO.getMaster_ids().split(",");

			for(int i=0; i<delList.length;i++){
				index = 0;
				String date =  CalendarUtil.getDateTime("yyyyMMdd");
				stmt.setString(++index, date); 
				stmt.setLong(++index, Long.parseLong(delList[i])); 
				stmt.setLong(++index, Long.parseLong(delmaster[i])); 
				stmt.executeUpdate();


			}

			con.commit();


			return "1";
		} 
		catch (Exception e) 
		{
			logger.error(buf.toString());

			if(con != null)
			{
				try {
					con.rollback();
				} catch (SQLException e1) {
					// TODO 자동 생성된 catch 블록
					logger.error(e1);
				}
			}


			throw e;

		} 
		finally
		{
			try {
				con.setAutoCommit(true);
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				logger.error(e);
			}
			release(null, stmt, con);
		}

	}

	/**
	 * Photo del_dd 를 업데이트한다(단. 마지막 삭제인경우만 적용).
	 * @param photoInfoDO 삭제할 정보가 들어있는 beans	 
	 * @throws Exception 
	 */
	public String deletePhotoInfo(long pgm_id ) throws Exception
	{
		StringBuffer buf = new StringBuffer();
		buf.append("\n update  das.PHOT_TBL set ");
		buf.append("\n del_dd = ?");
		buf.append("\n WHERE phot_REG_id = ?");

		Connection con = null;
		PreparedStatement stmt = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			con.setAutoCommit(false);

			stmt = con.prepareStatement(buf.toString());

			int index = 0;


			index = 0;
			String date =  CalendarUtil.getDateTime("yyyyMMdd");
			stmt.setString(++index, date); 
			stmt.setLong(++index, pgm_id); 

			stmt.executeUpdate();




			con.commit();


			return "1";
		} 
		catch (Exception e) 
		{
			logger.error(buf.toString());

			if(con != null)
			{
				try {
					con.rollback();
				} catch (SQLException e1) {
					// TODO 자동 생성된 catch 블록
					logger.error(e1);
				}
			}


			throw e;

		} 

		finally
		{
			try {
				con.setAutoCommit(true);
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				logger.error(e);
			}
			release(null, stmt, con);
		}

	}
	/*public String deletePhoto(PhotoInfoDO photoInfoDO) throws DASException
		{
			Connection con = null;
			PreparedStatement stmt = null;
			try 
			{

				con = DBService.getInstance().getConnection();
				con.setAutoCommit(false);			
				logger.debug("photoInfoDO.getPhotRegIdS()  "+photoInfoDO.getPhotRegIdS());
				String[] delList= photoInfoDO.getPhotRegIdS().split(",");
				String[] delmaster= photoInfoDO.getMaster_ids().split(",");
				int updatecnt=0;

				int index=0;
				for(int i =0;i<delList.length; i++){
					int delnum = Integer.parseInt(delList[i]);
					int master = Integer.parseInt(delmaster[i]);
					logger.debug("delnum    +  "   + delnum);

					// PGM_PHOT_INFO_TBL 항목을  삭제한다.		     
					StringBuffer buf1 = new StringBuffer();
					buf1.append("\n update  das.PGM_PHOT_INFO_TBL set del_yn = 'Y'");
					buf1.append("\n ,mod_dt = ?");
					buf1.append("\n WHERE phot_id = "+delnum);
					buf1.append("\n and  master_id  = "+master);
					index=0;
					stmt.setString(++index,  CalendarUtil.getDateTime("yyyyMMddhhmmss"));

					stmt = con.prepareStatement(buf1.toString());


					updatecnt =stmt.executeUpdate();	


					logger.debug("updatecnt  " + updatecnt);

				}
				con.commit();


				String UpdateResult = String.valueOf(updatecnt);
				return UpdateResult;


			} 
			catch (NamingException e) 
			{
				// TODO 자동 생성된 catch 블록
				logger.error(e);

		        if (logger.isDebugEnabled()) 
		        {
		                logger.debug("[NamingException]" + e);
		        }
		        if(con != null)
		        {
		        	try {
						con.rollback();
					} catch (SQLException e1) {
						// TODO 자동 생성된 catch 블록
						logger.error(e1);
					}
		        }


		        DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "시스템 장애입니다.", e);
		        throw exception;

			} 
			catch (SQLException e) 
			{
				// TODO 자동 생성된 catch 블록
				logger.error(e);

		        if (logger.isDebugEnabled()) 
		        {
		                logger.debug("[NamingException]" + e);
		        }
		        if(con != null)
		        {
		        	try {
						con.rollback();
					} catch (SQLException e1) {
						// TODO 자동 생성된 catch 블록
						logger.error(e1);
					}
		        }

		        DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "시스템 장애입니다.", e);
		        throw exception;

			}
			finally
			{
				//try { 	if (con != null)  con.close();	} catch (SQLException e) {}
				release(null, stmt, con);

			}


		}*/
	/**
	 * 에러등록 테이블에서 해당 마스터 ID의 error정보가 등록되어 있는지 확인한다.
	 * @param masterId  마스터 ID
	 * @return int 카운트
	 * @throws Exception 
	 */
	private int selectErrorCount(String masterId) throws Exception
	{
		String query = "select count(master_id) as count from das.error_rgst_tbl where master_id= ? WITH UR ";

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######selectErrorCount######## con : " + con);
			stmt = con.prepareStatement(query);

			int index = 0;
			stmt.setLong(++index, Long.parseLong(masterId));


			rs = stmt.executeQuery();

			if(rs.next())
			{
				return rs.getInt(1);
			}
			else
			{
				return 0;
			}
		} 
		catch (Exception e) 
		{
			// TODO 자동 생성된 catch 블록
			logger.error(query);

			throw e;
		} 
		finally
		{
			release(rs, stmt, con);
		}
	}
	/**
	 * 에러정보를 등록한다
	 * @param con 커넥션
	 * @param errorRegisterDO 정보가담겨있는 beans

	 * @throws DASException
	 */
	private void insertErrorRegInfo(Connection con, ErrorRegisterDO errorRegisterDO) throws SQLException
	{
		String query = ExternalStatement.insertErrorRegInfoQuery();

		PreparedStatement stmt = null;
		try 
		{

			stmt = con.prepareStatement(query);

			int index = 0;
			stmt.setLong(++index, Long.parseLong(errorRegisterDO.getMasterId())); 
			stmt.setString(++index, errorRegisterDO.getWrt()); 
			stmt.setString(++index, errorRegisterDO.getWorkClf()); 
			stmt.setString(++index, errorRegisterDO.getCont()); 
			stmt.setString(++index, errorRegisterDO.getWorkCmCont()); 
			stmt.setString(++index, errorRegisterDO.getWorkSeq()); 
			stmt.setString(++index, errorRegisterDO.getRegrId()); 
			stmt.setString(++index, errorRegisterDO.getRegDt());	

			stmt.executeUpdate();
		} 
		catch (SQLException e) 
		{
			// TODO 자동 생성된 catch 블록
			logger.error(e);

			throw e;
		}
		finally
		{
			try { 	if (stmt != null)  stmt.close();	} catch (SQLException e) {}
			// panboy. 이런 식으로 그냥 일관성없이 처리해도 될런지 
		}

	}	

	private void updateErrorInfo(Connection con, ErrorRegisterDO errorRegisterDO) throws Exception
	{
		StringBuffer buf = new StringBuffer();
		buf.append("\n update DAS.ERROR_RGST_TBL set ");
		buf.append("\n 	WRT = ?, ");
		buf.append("\n 	WORK_CLF = ?, ");
		buf.append("\n 	ER_CONT = ?, ");
		buf.append("\n 	REACT_CONT = ?, ");
		buf.append("\n 	WORK_SEQ = ?, ");
		buf.append("\n 	MODRID = ?, ");
		buf.append("\n 	MOD_DT = ? ");
		buf.append("\n where MASTER_ID = ? ");		

		PreparedStatement stmt = null;				
		try 
		{
			stmt = con.prepareStatement(buf.toString());

			int index = 0;

			stmt.setString(++index, errorRegisterDO.getWrt()); 
			stmt.setString(++index, errorRegisterDO.getWorkClf()); 
			stmt.setString(++index, errorRegisterDO.getCont()); 
			stmt.setString(++index, errorRegisterDO.getWorkCmCont()); 
			stmt.setString(++index, errorRegisterDO.getWorkSeq()); 
			stmt.setString(++index, errorRegisterDO.getModrId()); 
			stmt.setString(++index, errorRegisterDO.getModDt());
			stmt.setLong(++index, Long.parseLong(errorRegisterDO.getMasterId())); 

			stmt.executeUpdate();
		}

		catch (Exception e) 
		{
			//			 TODO 자동 생성된 catch 블록
			logger.error(buf.toString());

			throw e;
		}
		finally
		{
			try { 	if (stmt != null)  stmt.close();	} catch (SQLException e) {}
			// panboy. 이 처리도 나중에 문제가 생기면 확인
		}

	}

	private int updateStatusCd(Connection con, long masterId, String statCd, String modrid, 
			String moddt, String lock_stat_cd, String error_stat_cd) throws Exception
			{
		StringBuffer buf = new StringBuffer();
		buf.append("\n update DAS.METADAT_MST_TBL set ");

		if (statCd.trim().length() > 0)
			buf.append("\n 	DATA_STAT_CD = ? ,");
		buf.append("\n 	MODRID = ? ");
		//	buf.append("\n 	MOD_DT = ? ");	

		if (lock_stat_cd.trim().length() > 0)
			buf.append("\n 	,LOCK_STAT_CD = ? ");

		if (error_stat_cd.trim().length() > 0)
			buf.append("\n 	,ERROR_STAT_CD = ? ");

		buf.append("\n where MASTER_ID = ? ");		

		PreparedStatement stmt = null;				
		try 
		{
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			if (statCd.trim().length() > 0)
				stmt.setString(++index, statCd); 
			stmt.setString(++index, modrid); 
			//	stmt.setString(++index, moddt); 

			if (lock_stat_cd.trim().length() > 0)
				stmt.setString(++index, lock_stat_cd);

			if (error_stat_cd.trim().length() > 0)
				stmt.setString(++index, error_stat_cd);

			stmt.setLong(++index, masterId); 
			return stmt.executeUpdate();
		}

		catch (Exception e) 
		{
			//			 TODO 자동 생성된 catch 블록
			logger.error(buf.toString());

			throw e;
		}
		finally
		{
			try { 	if (stmt != null)  stmt.close();	} catch (SQLException e) {}
			// panboy. 이 처리도 나중에 문제가 생기면 확인
		}

			}

	/*
	 * 오류가 등록되면 ERP에도 오류가 발생했다고 등록해 줘야 한다.
	 */
	private int updateERP_ErrorData(Connection con, long masterId) throws DASException
	{
		StringBuffer buf = new StringBuffer();		
		buf.append("\n update das.d_tapeitem_tbl set INGEST_STATUS = '005' where REQ_NO in ");
		buf.append("\n (SELECT REQ_CD FROM DAS.METADAT_MST_TBL where master_id= ? ) ");

		PreparedStatement stmt = null;				
		try 
		{
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setLong(++index, masterId); 

			return stmt.executeUpdate();
		}

		catch (Exception e) 
		{
			logger.error(buf.toString());
			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "updateERP_ErrorData 실행 중 에러 발생", e);
			throw exception;
		}
		finally
		{
			try 
			{ 	
				if (stmt != null)  

					stmt.close();	
			} 
			catch (SQLException e) {}

		}
	}




	private String getRiskClfCd(CartContDO cartContDO) throws Exception
	{
		StringBuffer buf = new StringBuffer();
		buf.append("\n select ");
		buf.append("\n 	ANNOT_CLF_CD ");
		buf.append("\n from DAS.ANNOT_INFO_TBL ");
		buf.append("\n where CT_ID = ? ");
		//buf.append("\n and ? >= SOM");
		//buf.append("\n and EOM >= ?");
		if(!cartContDO.getSom().equals("")&&!cartContDO.getEom().equals("")){
			buf.append("\n and (   ");
			buf.append("\n (SOM <= ? and ? <= EOM )");
			buf.append("\n or (? >= SOM and ? <= EOM )");
			buf.append("\n or (? <= SOM and ? >= EOM )");
			buf.append("\n )");
		}
		buf.append("\n  and not ANNOT_CLF_CD = ? ");
		buf.append("\n  and GUBUN='L' ");
		buf.append("\n ORDER BY ANNOT_CLF_CD asc	 ");
		buf.append("\n FETCH FIRST 1 ROWS ONLY	");
		buf.append("\n WITH UR	 ");

		String riskClfCd = CodeConstants.RiskCode.UNLIMIT;

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		//확인 후 사용
		boolean isConfirm = false;
		//사용금지
		boolean isNotUse = false;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######getRiskClfCd######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setLong(++index, cartContDO.getCtId());
			if(!cartContDO.getSom().equals("")&&!cartContDO.getEom().equals("")){
				stmt.setString(++index, cartContDO.getEom());
				stmt.setString(++index, cartContDO.getEom());
				stmt.setString(++index, cartContDO.getSom());
				stmt.setString(++index, cartContDO.getSom());
				stmt.setString(++index, cartContDO.getSom());
				stmt.setString(++index, cartContDO.getEom());
			}
			stmt.setString(++index, CodeConstants.AnnotCode.GOOD_SC);

			rs = stmt.executeQuery();

			int nPrior = 0;
			int nOldPrior = 0;
			String annotClfCd = "";
			riskClfCd = "";

			while(rs.next())
			{
				annotClfCd = rs.getString("ANNOT_CLF_CD");



				if (annotClfCd.equals(CodeConstants.AnnotCode.NOT_USE))
					nPrior = 6;
				else if (annotClfCd.equals(CodeConstants.AnnotCode.USE_LIMITED))
					nPrior = 5;
				else if (annotClfCd.equals(CodeConstants.AnnotCode.CHECK_BY_PD))
					nPrior = 4;
				else if (annotClfCd.equals(CodeConstants.AnnotCode.LIMITED_BY_BROADCASTCENTER))
					nPrior = 3;
				else if (annotClfCd.equals(CodeConstants.AnnotCode.CHECK_BY_COMPANY))
					nPrior = 2;
				else if (annotClfCd.equals(CodeConstants.AnnotCode.UNLIMITED))
					nPrior = 1;

				// 제일 센 놈을 찾아낸다.
				if (nOldPrior < nPrior)
					nOldPrior = nPrior;	
			}
			if(annotClfCd.equals("")){
				nOldPrior = 1;
			}

			if (nOldPrior == 6)
				riskClfCd = CodeConstants.AnnotCode.NOT_USE;
			else if (nOldPrior == 5)
				riskClfCd = CodeConstants.AnnotCode.USE_LIMITED;
			else if (nOldPrior == 4)
				riskClfCd = CodeConstants.AnnotCode.CHECK_BY_PD;
			else if (nOldPrior == 3)
				riskClfCd = CodeConstants.AnnotCode.LIMITED_BY_BROADCASTCENTER;
			else if (nOldPrior == 2)
				riskClfCd = CodeConstants.AnnotCode.CHECK_BY_COMPANY;
			else if (nOldPrior == 1)
				riskClfCd = CodeConstants.AnnotCode.UNLIMITED;


			return riskClfCd;
		} 
		catch (Exception e) 
		{
			logger.error(buf.toString());

			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}





	private String getRiskClfCd(long master_id) throws Exception
	{
		StringBuffer buf = new StringBuffer();
		buf.append("\n select ");
		buf.append("\n 	ANNOT_CLF_CD ");
		buf.append("\n from DAS.ANNOT_INFO_TBL ");
		buf.append("\n where master_id = ? ");

		buf.append("\n  and gubun = 'L' ");
		buf.append("\n ORDER BY ANNOT_CLF_CD asc	 ");
		buf.append("\n FETCH FIRST 1 ROWS ONLY	");
		buf.append("\n WITH UR	 ");

		String riskClfCd = CodeConstants.RiskCode.UNLIMIT;

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		//확인 후 사용
		boolean isConfirm = false;
		//사용금지
		boolean isNotUse = false;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######getRiskClfCd######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setLong(++index, master_id);

			rs = stmt.executeQuery();

			int nPrior = 0;
			int nOldPrior = 0;
			String annotClfCd = "";
			riskClfCd = "";

			while(rs.next())
			{
				annotClfCd = rs.getString("ANNOT_CLF_CD");



				if (annotClfCd.equals(CodeConstants.AnnotCode.NOT_USE))
					nPrior = 6;
				else if (annotClfCd.equals(CodeConstants.AnnotCode.USE_LIMITED))
					nPrior = 5;
				else if (annotClfCd.equals(CodeConstants.AnnotCode.CHECK_BY_PD))
					nPrior = 4;
				else if (annotClfCd.equals(CodeConstants.AnnotCode.LIMITED_BY_BROADCASTCENTER))
					nPrior = 3;
				else if (annotClfCd.equals(CodeConstants.AnnotCode.CHECK_BY_COMPANY))
					nPrior = 2;
				else if (annotClfCd.equals(CodeConstants.AnnotCode.UNLIMITED))
					nPrior = 1;

				// 제일 센 놈을 찾아낸다.
				if (nOldPrior < nPrior)
					nOldPrior = nPrior;	
			}
			if(annotClfCd.equals("")){
				nOldPrior = 1;
			}

			if (nOldPrior == 6)
				riskClfCd = CodeConstants.AnnotCode.NOT_USE;
			else if (nOldPrior == 5)
				riskClfCd = CodeConstants.AnnotCode.USE_LIMITED;
			else if (nOldPrior == 4)
				riskClfCd = CodeConstants.AnnotCode.CHECK_BY_PD;
			else if (nOldPrior == 3)
				riskClfCd = CodeConstants.AnnotCode.LIMITED_BY_BROADCASTCENTER;
			else if (nOldPrior == 2)
				riskClfCd = CodeConstants.AnnotCode.CHECK_BY_COMPANY;
			else if (nOldPrior == 1)
				riskClfCd = CodeConstants.AnnotCode.UNLIMITED;



			return riskClfCd;
		} 
		catch (Exception e) 
		{
			logger.error(buf.toString());

			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}
	private void insertCartContInfo(Connection con, CartContDO cartContDO, String dateTime, String riskClfCd) throws SQLException
	{
		StringBuffer buf = new StringBuffer();
		buf.append("\n Insert into DAS.CART_CONT_TBL( ");
		buf.append("\n 	CART_NO,  ");
		buf.append("\n 	CART_SEQ,  ");
		buf.append("\n 	RIST_CLF_CD,  ");
		buf.append("\n 	CT_ID,  ");
		buf.append("\n 	CTI_ID,  ");

		buf.append("\n 	SOM,  ");
		buf.append("\n 	EOM,  ");
		buf.append("\n 	DURATION,  ");
		buf.append("\n 	REG_DT,  ");
		buf.append("\n 	REGRID,  ");

		buf.append("\n 	MOD_DT,  ");
		buf.append("\n 	MODRID,  ");
		buf.append("\n 	CTGR_L_CD,  ");
		buf.append("\n 	CTGR_M_CD,  ");
		buf.append("\n 	CTGR_S_CD,  ");

		buf.append("\n 	CT_CONT,  ");
		buf.append("\n 	CT_NM, ");
		buf.append("\n 	S_FRAME, ");
		buf.append("\n 	MASTER_ID, ");
		buf.append("\n  ASP_RTO_CD, ");

		buf.append("\n  VD_QLTY, ");
		buf.append("\n  DOWN_STAT, ");
		buf.append("\n  DOWN_TYP, ");
		buf.append("\n  OUTSOURCING_YN, ");
		buf.append("\n  MEDIA_ID, ");
		buf.append("\n  RIST_YN, ");
		buf.append("\n  LOGICAL_TREE, ");
		buf.append("\n  PHYICAL_TREE, ");
		buf.append("\n  COCD, ");
		buf.append("\n  CHENNEL ,");
		buf.append("\n  TARGET_CMS_ID, ");
		buf.append("\n  TRANSACTION_ID  ");
		// TODO. 여기에 REQ_CD를 추가해야 한다. DB에도 필드를 추가해야 한다. 
		buf.append("\n ) ");
		buf.append("\n values(?, ?, ?, ?, ?, " +
				" ?, ?, ?, ?, ?, " +
				" ?, ?, ?, ?, ?, " +
				" ?, ?, ?, ?, ?, " +
				" ?, ?, ?, ?, ?, ?, ? , ?, ? ,? , ?, ?) ");

		String strNow = CalendarUtil.getDateTime("yyyyMMddHHmmss");
		PreparedStatement stmt = null;
		try 
		{
			stmt = con.prepareStatement(buf.toString());

			int index = 0;


			stmt.setLong(++index, cartContDO.getCartNo()); //CART_NO
			stmt.setInt(++index, cartContDO.getCartSeq());  //CART_SEQ
			stmt.setString(++index, riskClfCd);			//RIST_CLF_CD
			stmt.setLong(++index, cartContDO.getCtId()); //CT_ID
			stmt.setLong(++index, cartContDO.getCtiId());  //CTI_ID
			if(!cartContDO.getSom().equals("")){ //
				stmt.setString(++index, cartContDO.getSom());  //SOM
			}else {
				stmt.setString(++index, "00:00:00:00");	 	 //SOM
			}


			stmt.setString(++index, cartContDO.getEom()); //EOM

			stmt.setLong(++index, cartContDO.getDuration());  //DURATION
			stmt.setString(++index, strNow);//REG_DT
			stmt.setString(++index, cartContDO.getRegrId()); //REGRID

			stmt.setString(++index, strNow); //MOD_DT
			stmt.setString(++index, cartContDO.getRegrId());  //MODRID
			stmt.setString(++index, cartContDO.getCtgrLCd());  //CTGR_L_CD
			stmt.setString(++index, cartContDO.getCtgrMCd());  //CTGR_m_CD
			stmt.setString(++index, cartContDO.getCtgrSCd());  //CTGR_s_CD

			stmt.setString(++index, cartContDO.getCtCont());  //CT_CONT
			stmt.setString(++index, cartContDO.getCtNm()); //CT_NM
			stmt.setLong(++index, 0); //S_FRAME
			stmt.setLong(++index, cartContDO.getMasterId()); //MASTER_ID
			stmt.setString(++index, cartContDO.getAsp_rto_cd()); //ASP_RTO_CD

			stmt.setString(++index, cartContDO.getVd_qlty()); //VD_QLTY
			stmt.setString(++index, cartContDO.getDown_stat()); //DOWN_STAT
			stmt.setString(++index, cartContDO.getDown_typ()); //DOWN_TYP
			if(isDownloadOutsourcing2(cartContDO.getRegrId()))
			{		
				stmt.setString(++index, "Y"); //OUTSOURCING_YN
			}else{
				stmt.setString(++index, "N"); //OUTSOURCING_YN
			}
			String media_id =codeInfoDAO.getMediaId();
			stmt.setString(++index, media_id); //MEDIA_ID
			stmt.setString(++index, "N"); //RIST_YN


			stmt.setString(++index, cartContDO.getLogical_tree()); //Logical_tree
			stmt.setString(++index, cartContDO.getPhysical_tree()); //Physical_tree


			//2012.4.27
			String cocd = selectCOCDForChannel(cartContDO.getRegrId().substring(0,1));

			if(cocd.equals("S")||cartContDO.getRegrId().equals("D080009")){
				stmt.setString(++index, "S"); //COCD

				stmt.setString(++index, "S"); //CHENNEL
			}else{
				stmt.setString(++index, cocd); //COCD

				stmt.setString(++index, cartContDO.getRegrId().substring(0,1)); //CHENNEL	
			}
			stmt.setString(++index, cartContDO.getTarget_cms_id()); //TARGET_CMS_ID
			stmt.setString(++index, cartContDO.getTranscation_id()); //TRANSACTION_ID
			cartContDO.setMedia_id(media_id);
			stmt.executeUpdate();

		} 
		catch (Exception e) {
			logger.error(buf.toString());
		}
		finally
		{
			release(null, stmt, null);		// panboy. 이 함수를 호출한 함수에서 다시 이 con을 사용하고 있음.
		}

	}

	private int deleteAllCartContInfo(Connection con, long cartNo) throws SQLException
	{
		StringBuffer buf = new StringBuffer();
		buf.append("\n delete from DAS.CART_CONT_TBL where CART_NO = ? ");

		PreparedStatement stmt = null;
		try 
		{

			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setLong(++index, cartNo); 

			int result = stmt.executeUpdate();
			return result;
		} 
		catch (SQLException e) 
		{
			logger.error(buf.toString());

			throw e;
		}
		finally
		{
			release(null, stmt, null);		// panboy. 이것도 인자로 받은 con을 해제하고 있음
		}

	}

	private void deleteCartContInfo(Connection con, long cartNo, int cartSeq) throws SQLException
	{
		StringBuffer buf = new StringBuffer();
		if(cartSeq == 0)
			buf.append("\n delete from DAS.CART_CONT_TBL where CART_NO = ?  ");
		else
			buf.append("\n delete from DAS.CART_CONT_TBL where CART_NO = ? and CART_SEQ = ? ");

		PreparedStatement stmt = null;
		try 
		{

			stmt = con.prepareStatement(buf.toString());

			int index = 0;

			if(cartSeq == 0)
				stmt.setLong(++index, cartNo);
			else {				
				stmt.setLong(++index, cartNo); 
				stmt.setInt(++index, cartSeq);
			}

			stmt.executeUpdate();
		} 
		catch (SQLException e) 
		{
			logger.error(buf.toString());
			throw e;
		}
		finally
		{
			// panboy. 이 처리도 나중에 문제가 생기면 확인
			try { 	if (stmt != null)  stmt.close();	} catch (SQLException e) {}
		}

	}

	private int selectCartContMaxSeq(long cartNo) throws Exception
	{
		StringBuffer buf = new StringBuffer();

		buf.append("\n select value(max(CART_SEQ), 0) FROM  DAS.CART_CONT_TBL where CART_NO = "+cartNo + " \n");

		Connection con = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######selectCartContMaxSeq######## con : " + con);
			int maxSeq  = getTotalCount(con, buf.toString());

			return maxSeq;
		} 
		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(null, null, con);
		}
	}

	private void updateRiskYn(Connection con, long cartNo, String riskYn) throws SQLException
	{
		StringBuffer buf = new StringBuffer();
		buf.append("\n update DAS.DOWN_CART_TBL set ");
		buf.append("\n 	RIST_YN = ?, ");
		buf.append("\n 	MOD_DT = ?  ");
		buf.append("\n where CART_NO = ? ");

		PreparedStatement stmt = null;
		try 
		{
			String toDateTime = CalendarUtil.getDateTime("yyyyMMddHHmmss");

			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setString(++index, riskYn);
			stmt.setString(++index, toDateTime);
			stmt.setLong(++index, cartNo); 


			stmt.executeUpdate();
		} 
		catch (SQLException e) 
		{
			logger.error(buf.toString());

			throw e;
		}
		finally
		{
			release(null, stmt, null);
		}

	}




	private void updateRiskYn (Connection con, long cartNo, long cartSEQ, String riskYn) throws SQLException
	{
		StringBuffer buf = new StringBuffer();
		buf.append("\n update DAS.CART_CONT_TBL set ");
		buf.append("\n 	RIST_YN = ?, ");
		buf.append("\n 	MOD_DT = ?  ");
		buf.append("\n where CART_NO = ? AND CART_SEQ=?" );

		PreparedStatement stmt = null;
		try 
		{
			String toDateTime = CalendarUtil.getDateTime("yyyyMMddHHmmss");

			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setString(++index, riskYn);
			stmt.setString(++index, toDateTime);
			stmt.setLong(++index, cartNo); 
			stmt.setLong(++index, cartSEQ); 

			stmt.executeUpdate();
		} 
		catch (SQLException e) 
		{
			logger.error(buf.toString());

			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}


	private void updateRiskYn2 (Connection con, long cartNo, long cartSEQ, String riskYn) throws SQLException
	{
		StringBuffer buf = new StringBuffer();
		buf.append("\n update DAS.down_cart_tbl set ");
		buf.append("\n 	RIST_YN = ?, ");
		buf.append("\n 	MOD_DT = ?  ");
		buf.append("\n where CART_NO = ? AND CART_SEQ=?" );

		PreparedStatement stmt = null;
		try 
		{
			String toDateTime = CalendarUtil.getDateTime("yyyyMMddHHmmss");

			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setString(++index, riskYn);
			stmt.setString(++index, toDateTime);
			stmt.setLong(++index, cartNo); 
			stmt.setLong(++index, cartSEQ); 

			stmt.executeUpdate();
		} 
		catch (SQLException e) 
		{
			logger.error(buf.toString());

			throw e;
		}
		finally
		{
			//			 panboy. 이 처리도 나중에 문제가 생기면 확인
			try { 	if (stmt != null)  stmt.close();	} catch (SQLException e) {}
		}

	}
	// 현재 카트의 요구자 아이디를 가져온다.
	private String getReqUsrID(long cartNo) throws Exception
	{
		StringBuffer buf = new StringBuffer();		
		buf.append("\n select REQ_USRID FROM  DAS.DOWN_CART_TBL where CART_NO = "+cartNo + " with ur \n");

		Connection con = null;
		PreparedStatement psmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();	
			//logger.debug("######getReqUsrID######## con : " + con);

			try
			{
				psmt = con.prepareStatement(buf.toString());
				rs = psmt.executeQuery();
				if(rs.next()){
					return rs.getString("REQ_USRID");
				}else{
					return "";
				}

			}
			catch (SQLException ex)
			{
				throw ex;
			}

		} 

		catch (Exception e) 
		{
			logger.error(buf.toString());

			throw e;
		}
		finally
		{
			release(rs, psmt, con);
		}
	}

	/**
	 * 스토리지에 존재하는 클립에 대한 위치정보
	 * @param cartNo
	 * @return
	 * @throws Exception 
	 */
	public CartContDO getStLocClip(long ct_id) throws Exception
	{
		StringBuffer buf = new StringBuffer();		
		buf.append("\n  SELECT CT.CT_ID ,FL_PATH                                                              ");
		buf.append("\n  FROM CONTENTS_MAPP_TBL CMT                                                            ");
		buf.append("\n   INNER JOIN CONTENTS_TBL CT ON CT.CT_ID = CMT.CT_ID            ");
		buf.append("\n   INNER JOIN CONTENTS_INST_TBL CIT ON CIT.CT_ID = CT.CT_ID AND CIT.CTI_FMT LIKE '1%'  ");
		buf.append("\n WHERE CMT.ct_id = ?                                                          ");
		buf.append("\n ORDER BY CT_ID DESC                                                                   ");
		buf.append("\n FETCH FIRST 1 ROWS ONLY                                                               ");

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();		
			//logger.debug("######getStLocClip######## con : " + con);
			try
			{
				int index = 0;
				stmt = con.prepareStatement(buf.toString());
				stmt.setLong(++index, ct_id);
				rs = stmt.executeQuery();

				CartContDO cartContDO = new CartContDO();
				if(rs.next()){
					cartContDO.setCtId(rs.getLong("CT_ID"));
					cartContDO.setFl_path(rs.getString("FL_PATH"));
				}
				return cartContDO;

			}
			catch (SQLException ex)
			{
				throw ex;
			}

		} 
		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}


	/**
	 * 스토리지에 해당영상이  스토리지에 있는 것을다운요청한것인지 확인한다
	 * @param cartNo 카트 넘버
	 * @return boolean
	 * @throws Exception 
	 * @throws RemoteException
	 */
	public boolean getStorage_yn(long cartNo) throws Exception
	{
		StringBuffer buf = new StringBuffer();		
		buf.append("\n SELECT STORAGE_YN                                                              ");
		buf.append("\n FROM DOWN_CART_TBL                                                     ");
		buf.append("\n WHERE CART_NO = ?     AND   STORAGE_YN='Y'                              ");

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();	
			//logger.debug("######getStorage_yn######## con : " + con);
			try
			{
				int index = 0;
				stmt = con.prepareStatement(buf.toString());
				stmt.setLong(++index, cartNo);
				rs = stmt.executeQuery();

				if(rs.next()){
					return true;
				}
				return false;

			}
			catch (SQLException ex)
			{
				throw ex;
			}

		} 
		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}

	/**
	 * 상태 코드를  변경한다
	 * @param cartNo 카트번호
	 * @param cartState 카트상태코드
	 * @param title 다운로드 명
	 * @throws Exception 
	 */	
	public int updateDownCartState(long cartNo, String cartState, String title) throws Exception
	{		
		StringBuffer buf = new StringBuffer();
		StringBuffer buf2 = new StringBuffer();
		buf.append("\n update DAS.DOWN_CART_TBL set ");
		buf.append("\n 	CART_STAT = ? ");
		buf.append("\n	, DOWN_SUBJ = ? ");
		buf.append("\n where CART_NO = ? ");

		PreparedStatement stmt = null;
		PreparedStatement stmt2 = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			stmt = con.prepareStatement(buf.toString());

			int updateCount;

			// 다운로드 카트의 사용 제한 여부를 확인한다.
			if(isDownloadRistrict(cartNo))
			{
				// RIST_YN 이 Y 이면 상태코드를 승인 요청으로 변경한다.
				int index = 0;
				stmt.setString(++index, cartState);
				stmt.setString(++index, title);
				stmt.setLong(++index, cartNo);				

				updateCount = stmt.executeUpdate();
			}
			else
			{
				// 상태 코드를 다운로드 승인  "004" 으로 변경한다
				int index = 0;
				stmt.setString(++index, CodeConstants.CartStatus.APPROVE);
				stmt.setString(++index, title);
				stmt.setLong(++index, cartNo);				

				updateCount = stmt.executeUpdate();


				// CMS에서 하던 DB작업은 여기서 한다.
				String strReqUsrID = getReqUsrID(cartNo);
				String _strg_loc = dasHandler.getProperty("WINMP2")+"/restore/" + strReqUsrID + "/" + cartNo;
				_strg_loc = _strg_loc.substring(0, _strg_loc.length());


				buf2.append("update DAS.DOWN_CART_TBL set STRG_LOC = ? where CART_NO = ? ");

				stmt2= con.prepareStatement(buf2.toString());
				index = 0;
				stmt2.setString(++index, _strg_loc);
				stmt2.setLong(++index, cartNo);
				stmt2.executeUpdate();

			}

			if(updateCount == 0){
				DASException exception = new DASException(ErrorConstants.NO_MACHING_FILED, "UPDATE 또는 DELETE에 대한 행이 없습니다.");
				throw exception;
			}

			//con.commit();

			return updateCount;
		}
		catch (Exception e) 
		{
			logger.error(buf.toString());
			logger.error(buf2.toString());


			throw e;
		}		
		finally
		{
			//try { 	if (stmt != null)  stmt.close();	} catch (SQLException e) {}
			release(null, stmt, con);
			release(null, stmt2, null);
		}

	}

	/**
	 * 다운로드 요청 DAS2.0
	 * @param cartNo
	 * @param cartState
	 * @param title
	 * @return
	 * @throws Exception 
	 */
	public int updateDownCart(DownCartDO downCartDO) throws Exception
	{		
		StringBuffer buf = new StringBuffer();
		StringBuffer buf2 = new StringBuffer();
		StringBuffer buf3 = new StringBuffer();
		buf.append("\n update DAS.DOWN_CART_TBL set ");
		buf.append("\n 	CART_STAT = ? ");
		buf.append("\n	 ,DOWN_SUBJ = ? ");
		buf.append("\n  , OUT_STRG_LOC = ? ");
		buf.append("\n  , DOWN_GUBUN = ? ");
		buf.append("\n  , file_path = ? ");
		buf.append("\n  , category = ? ");
		buf.append("\n  , storagename = ? ");
		buf.append("\n  , storage_yn = ? ");
		buf.append("\n where CART_NO = ? ");


		buf3.append("\n update DAS.cart_cont_tbl set ");
		buf3.append("\n DOWN_STAT = ? ");
		buf3.append("\n ,REQ_CONT = ? ");
		buf3.append("\n ,logical_tree = ? ");
		buf3.append("\n ,phyical_tree = ? ");
		//buf3.append("\n ,cocd = ? ");
		//buf3.append("\n ,chennel = ? ");
		if(downCartDO.getUrl().equals("")){

		}else{
			buf3.append("\n ,url = ? ");	
		}
		buf3.append("\n where CART_NO = ? ");
		buf3.append("\n and cart_seq = ? ");
		PreparedStatement stmt = null;
		PreparedStatement stmt2 = null;
		PreparedStatement stmt3 = null;
		Connection con = null;		
		BufferedWriter bw = null;
		FileWriter fw = null;

		try 
		{
			con = DBService.getInstance().getConnection();
			stmt = con.prepareStatement(buf.toString());
			stmt3 = con.prepareStatement(buf3.toString());

			int updateCount=0;
			int index = 0;
			/**
			 * 사용제한 건에 대한 승인을 정리 할때 
			 * 구현 할 것 (박차장님께 의견 제시 20110310 사용제한 중복건에 대해서 승인을 하려 할때 어떤식으로 진행해야 하는 것인지?
			 */
			String title="";

			//다운로드구분이ifcms라면 다운로드명을 프로그램명으로 정해준다.
			if(downCartDO.getDown_gubun().equals("007")){
				title=getTitleForCartNo(downCartDO.getCartNo());

				// 특수문자를 제거 후 저장
				title = org.apache.commons.lang.StringUtils.replaceChars(title, "+=!@#$%^&*|\\;:'\"<>,.?/~` ","");

				downCartDO.setDownSubj(title);
			}


			long count = getCountCartSeq(downCartDO.getCartNo());
			String[] down = getCartSeq(downCartDO.getCartNo()).split(",");
			//스토리지 다운여부 판단.
			String Storage_yn="";
			String _strg_loc="";
			for(int l=0;l<count;l++ ){

				ContentsInfoDO getContDO = getFl_path(downCartDO.getCartNo(),Long.parseLong(down[l]));
				if(getContDO!=null&&!CommonUtl.isEmptyString(getContDO.getFl_path())){
					if(Storage_yn.equals("")){
						Storage_yn="Y";
					}else{
						Storage_yn=Storage_yn+","+"Y";
					}
					downCartDO.setStorage_yn("Y");
					_strg_loc = getContDO.getFl_path();
				}else{
					if(Storage_yn.equals("")){
						Storage_yn="N";
					}else{
						Storage_yn=Storage_yn+","+"N";
					}
					downCartDO.setStorage_yn("N");
					_strg_loc = whichLoc(downCartDO);
				}
				// 다운로드 카트의 사용 제한 여부를 확인한다.
				if(isDownloadRistrict1(downCartDO.getCartNo(),Long.parseLong(down[l])))
				{
					//				// RIST_YN 이 Y 이면 상태코드를 승인 요청으로 변경한다.
					if(l+1==1){
						stmt.setString(++index, CodeConstants.CartStatus2.REQ);
						stmt.setString(++index, downCartDO.getDownSubj());
						stmt.setString(++index, downCartDO.getOut_strg_loc());
						stmt.setString(++index, downCartDO.getDown_gubun());
						stmt.setString(++index, downCartDO.getFl_path());
						stmt.setString(++index, downCartDO.getCategory());
						if(downCartDO.getDown_gubun().equals("005")){
							stmt.setString(++index,getSubsidary(downCartDO.getCartNo()));
						}else{
							stmt.setString(++index, downCartDO.getStoragename());
						}
						stmt.setString(++index, downCartDO.getStorage_yn());
						stmt.setLong(++index, downCartDO.getCartNo());				
						updateCount = stmt.executeUpdate();
					}
					index = 0;
					//logger.debug("33333333333");
					if(!isDownloadOutsourcing(downCartDO.getCartNo(),Long.parseLong(down[l]))){
						stmt3.setString(++index, CodeConstants.CartStatus2.FIRSTAPP);
					}else{
						stmt3.setString(++index, CodeConstants.CartStatus2.SECONDAPP);
					}
					stmt3.setString(++index, downCartDO.getReg_cont());	
					stmt3.setString(++index, downCartDO.getLogicaltree());	
					stmt3.setString(++index, downCartDO.getPhysicaltree());			
					// stmt3.setString(++index, downCartDO.getCo_cd());	
					// stmt3.setString(++index, downCartDO.getChennel());			
					if(downCartDO.getUrl().equals("")){

					}else{
						stmt3.setString(++index, downCartDO.getUrl());			
					}				
					stmt3.setLong(++index, downCartDO.getCartNo());			
					stmt3.setLong(++index, Long.parseLong(down[l]));	
					updateCount = stmt3.executeUpdate();



				}
				else
				{
					// 상태 코드를 다운로드 승인  "002" 으로 변경한다
					//updateCount = updateDownCartState(downCartDO.getCartNo(), CodeConstants.CartStatus2.APPROVE,downCartDO.getDownSubj());
					if(l+1==1){
						stmt.setString(++index, CodeConstants.CartStatus2.APPROVE);
						stmt.setString(++index, downCartDO.getDownSubj());
						stmt.setString(++index, downCartDO.getOut_strg_loc());
						stmt.setString(++index, downCartDO.getDown_gubun());
						stmt.setString(++index, downCartDO.getFl_path());
						stmt.setString(++index, downCartDO.getCategory());
						// 계열사 다운로드 요청시에 요청자의 회사코드 값을 트랜스퍼에게 셀네임으로 전달할 것.
						if(downCartDO.getDown_gubun().equals("005")){
							stmt.setString(++index,getSubsidary(downCartDO.getCartNo()));
						}else{
							stmt.setString(++index, downCartDO.getStoragename());
						}
						stmt.setString(++index, downCartDO.getStorage_yn());
						stmt.setLong(++index, downCartDO.getCartNo());				
						updateCount = stmt.executeUpdate();
					}			   	
					index = 0;

					//외주 제작팀이라면 1차 승인대기로 그이외에는 다운로드로 변환한다
					if(!isDownloadOutsourcing(downCartDO.getCartNo(),Long.parseLong(down[l]))){
						stmt3.setString(++index, CodeConstants.CartStatus2.FIRSTAPP);
					}else{
						if(downCartDO.getStorage_yn().equals("N")||downCartDO.getStorage_yn().equals("")){
							stmt3.setString(++index, CodeConstants.CartStatus2.DOWNLOAD);
						}else{
							stmt3.setString(++index, CodeConstants.CartStatus2.DOWNLOAD_COMPLET);
						}
					}
					stmt3.setString(++index, downCartDO.getReg_cont());
					stmt3.setString(++index, downCartDO.getLogicaltree());	
					stmt3.setString(++index, downCartDO.getPhysicaltree());			
					// stmt3.setString(++index, downCartDO.getCo_cd());	
					// stmt3.setString(++index, downCartDO.getChennel());			
					if(downCartDO.getUrl().equals("")){

					}else{
						stmt3.setString(++index, downCartDO.getUrl());			
					}					
					stmt3.setLong(++index, downCartDO.getCartNo());			
					stmt3.setLong(++index, Long.parseLong(down[l]));	
					updateCount = stmt3.executeUpdate();
				}

			}



			// 다운로드 경로에 대한 값을 얻어온다.
			//String _strg_loc = whichLoc(downCartDO);


			buf2.append("update DAS.DOWN_CART_TBL set STRG_LOC = ? where CART_NO = ? ");

			stmt2= con.prepareStatement(buf2.toString());
			index = 0;
			stmt2.setString(++index, _strg_loc);
			stmt2.setLong(++index, downCartDO.getCartNo());
			stmt2.executeUpdate();

			//con.setAutoCommit(true);

			String[] storage = Storage_yn.split(",");

			//20121107 파셜 다운로드시 list.txt 파일을 생성한다.
			File f = new File("/nearline/"+whichStLocForNew(downCartDO));
			if(!f.exists()) f.mkdirs();
			try {
				fw = new FileWriter(f.getAbsolutePath()+"/list.txt", true);
				bw = new BufferedWriter(fw);
			} catch (Exception e) {
				logger.error("list.txt new file create error - "+e.getMessage());
			}

			// 다운로드 카트의 사용 제한 여부를 확인하고 
			if(true != isDownloadRistrict(downCartDO.getCartNo()))
			{


				for(int k=0;k<count;k++ ){

					/**
					 *  클립이 스토리지에 존재 한다면 DAS-TM에 전송 요청  시작
					 */
					// DTL 이관 전 클립 & 스토리지에 존재 분기시작.
					// 외주직원 다운로드 건 이라면 로직을 패스한다.

					if(isDownloadOutsourcing(downCartDO.getCartNo(),Long.parseLong(down[k]))){

						downCartDO.setCartSeq(Long.parseLong(down[k]));
						CartContDO tmpCartContDO = getStLocClip(selectCartContInfo(downCartDO.getCartNo(), Long.parseLong(down[k])).getCtId());

						if(!isDownloadRistrict1(downCartDO.getCartNo(),Long.parseLong(down[k])))
						{
							ContentsInfoDO getContDO = getFl_path(downCartDO.getCartNo(),Long.parseLong(down[k]));
							if(!CommonUtl.isEmptyString(tmpCartContDO.getFl_path())&&storage[k].equals("Y")){


								/**
								 * PDS,NDS,계열사 해당하는 다운로드 요청만 DAS-TM 전송요청을 하게 됨(20110512:dekim)
								 * -다운로드 경로에 구분없이 모두 다운로드 가능하다록 수정 - 20121113 asura
								 */
								if(getUsedDasTmYnByCartNoForAll(downCartDO.getCartNo())){
									/**
									 *  스토리지 전송건에 대하여 다운로드 상태값( CodeConstants.CartStatus2.DOWNLOAD_COMPLET) SET
									 */

									updateCartContTbl(downCartDO);
									String getMessage = "";



									downCartDO.setFl_path(whichStLocForNew(downCartDO));


									downCartDO.setCartSeq(Long.parseLong(down[k]));
									downCartDO.setCti_id(getContDO.getCti_id());
									if(getContDO.getDown_typ().equals("F")){
										downCartDO.setFile_nm(getContDO.getCti_id()+".mxf");
									}else if(getContDO.getDown_typ().equals("P")){
										downCartDO.setFile_nm(down[k]+"_"+getContDO.getCti_id()+".mxf");	

										if(bw != null) {
											try {
												logger.error("##########write info     ----------       "+getContDO.getCti_id() + "," + getContDO.getSom() + "," + getContDO.getEom());
												bw.write(getContDO.getCti_id() + "," + getContDO.getSom() + "," + getContDO.getEom());
												bw.newLine();
											} catch (IOException e) {
												logger.error("list.txt new file write error - "+e.getMessage());
											}
										}
									}

									InsertContentsDownTbl(downCartDO);

									getMessage =  addTaskByStorageClip(downCartDO.getCartNo(),downCartDO.getCartSeq());

									if(logger.isDebugEnabled()){
										logger.debug("return Message : "+getMessage);
									}
									TransferDOXML _doXML = new TransferDOXML();
									if(!getMessage.equals("")){
										TransferDO _do = (TransferDO) _doXML.setDO(getMessage);
										_do.setCart_no(Integer.parseInt(downCartDO.getCartNo()+""));
										_do.setCart_seq(Integer.parseInt(downCartDO.getCartSeq()+""));
										insertAddTaskRes(_do);
									}else{
										return 0;
									}
									//								return "sucess";
								}}else{

									//다운로드 제한 여부가 No이 웹 서비스를 호출하여 다운로드 카트를 승인 없이  다운로드 한다
									//cart_cont_tbl의 rist_yn이 N인 값만 던진다
									downCartDO.setCartSeq(Long.parseLong(down[k]));
									String xml = getXmlInfo(downCartDO);//<- 카트번호를 받아 소속 seq list로 보냄

									if(!"".equals(xml)){
										NevigatorProxy port = new NevigatorProxy();
										String _result = port.downloadService(xml); 

									}

								}
						}


					}



				}





				//2012.07.10 다스2.0 데이터
				/*
							if (logger.isDebugEnabled()) 
							{
								logger.debug("[Start : WebService Call To WAS for DownloadCart : CartNo = " + downCartDO.getCartNo() + "]");
							}
							if(downCartDO.getUser_id().equals("")){
								downCartDO.setRegrId("D080009"); 
							}

							//다운로드 제한 여부가 No이 웹 서비스를 호출하여 다운로드 카트를 승인 없이  다운로드 한다
							//cart_cont_tbl의 rist_yn이 N인 값만 던진다
							String xml = getNewDownloadXml(downCartDO);//<- 카트번호를 받아 소속 seq list로 보냄
							logger.debug("xml   = "+xml);
							if(!"".equals(xml)){
								NevigatorProxy port = new NevigatorProxy();
								String _result = port.downloadService(xml); 
								logger.debug("_result   " + _result + "]");
							}

							if (logger.isDebugEnabled()) 
					        {
					                logger.debug("[End : WebService Call To WAS for DownloadCart : CartNo = " + downCartDO.getCartNo() + "]");
					        }

				 */

				/*if(updateCount == 0){
							DASException exception = new DASException(ErrorConstants.NO_MACHING_FILED, "UPDATE 또는 DELETE에 대한 행이 없습니다.");
							throw exception;
						}*/

			}




			return updateCount;
		}
		catch (Exception e) 
		{
			logger.error(buf.toString());
			logger.error(buf2.toString());
			logger.error(buf3.toString());


			throw e;
		}		
		finally
		{
			//try { 	if (stmt != null)  stmt.close();	} catch (SQLException e) {}
			try {
				con.setAutoCommit(true);
			} catch (SQLException e1) {
				// TODO Auto-generated catch block
				logger.error(e1);
			}
			release(null, stmt, con);
			release(null, stmt2, null);
			release(null, stmt3, null);
			/*	if(fw != null) {
					try {
						fw.flush();
						fw.close();
					} catch (IOException e) {
						logger.error("list.txt new file close error - "+e.getMessage());
					}
				}*/
			if(bw != null) {
				try {
					bw.flush();
					bw.close();
				} catch (IOException e) {
					logger.error("list.txt new file close error - "+e.getMessage());
				}
			}
		}

	}


	/**
	 * 스토리지에 있는 클립에 대한 전송 요청을 받을 수 있는 풀다운로드 요청 DAS2.0
	 * @param cartNo
	 * @param cartState
	 * @param title
	 * @return
	 * @throws Exception 
	 */
	public int updateStDownCart(DownCartDO downCartDO,CartContDO cartContDO) throws Exception
	{		
		StringBuffer buf = new StringBuffer();
		StringBuffer buf2 = new StringBuffer();
		StringBuffer buf3 = new StringBuffer();

		buf.append("\n update DAS.DOWN_CART_TBL set ");
		buf.append("\n 	CART_STAT = ? ");
		buf.append("\n	 ,DOWN_SUBJ = ? ");
		buf.append("\n  , OUT_STRG_LOC = ? ");
		buf.append("\n  , DOWN_GUBUN = ? ");
		buf.append("\n  , file_path = ? ");
		buf.append("\n  , category = ? ");
		buf.append("\n  , storagename = ? ");
		buf.append("\n  , storage_yn =? ");

		buf.append("\n where CART_NO = ? ");


		buf3.append("\n update DAS.cart_cont_tbl set ");
		buf3.append("\n DOWN_STAT = ? ");
		buf3.append("\n ,REQ_CONT = ? ");
		buf3.append("\n ,logical_tree = ? ");
		buf3.append("\n ,phyical_tree = ? ");
		buf3.append("\n ,cocd = ? ");
		buf3.append("\n ,chennel = ? ");
		buf3.append("\n where CART_NO = ? ");
		buf3.append("\n and cart_seq = ? ");
		PreparedStatement stmt = null;
		PreparedStatement stmt2 = null;
		PreparedStatement stmt3 = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateStDownCart######## con : " + con);
			//con.setAutoCommit(false);	

			stmt = con.prepareStatement(buf.toString());
			stmt3 = con.prepareStatement(buf3.toString());

			int updateCount=0;
			int index = 0;
			String _strg_loc="";
			/**
			 * 사용제한 건에 대한 승인을 정리 할때 
			 * 구현 할 것 (박차장님께 의견 제시 20110310 사용제한 중복건에 대해서 승인을 하려 할때 어떤식으로 진행해야 하는 것인지?
			 */

			long count = getCountCartSeq(downCartDO.getCartNo());
			ContentsInfoDO getContDO = getFl_path(cartContDO.getCartNo(),cartContDO.getCartSeq());
			if(getContDO!=null&&!CommonUtl.isEmptyString(getContDO.getFl_path())){
				downCartDO.setStorage_yn("Y");
				_strg_loc = getContDO.getFl_path();
			}else{
				downCartDO.setStorage_yn("N");
				_strg_loc = whichLoc(downCartDO);
			}

			for(int l=0;l<count;l++ ){
				// 다운로드 카트의 사용 제한 여부를 확인한다.
				if(isDownloadRistrict1(downCartDO.getCartNo(),l+1))
				{
					//				// RIST_YN 이 Y 이면 상태코드를 승인 요청으로 변경한다.
					stmt.setString(++index, CodeConstants.CartStatus2.REQ);
					if(l+1==1){
						stmt.setString(++index, downCartDO.getDownSubj());
						stmt.setString(++index, downCartDO.getOut_strg_loc());
						stmt.setString(++index, downCartDO.getDown_gubun());
						stmt.setString(++index, downCartDO.getFl_path());
						stmt.setString(++index, downCartDO.getCategory());
						if(downCartDO.getDown_gubun().equals("005")){
							stmt.setString(++index,getSubsidary(downCartDO.getCartNo()));
						}else{
							stmt.setString(++index, downCartDO.getStoragename());
						}

						stmt.setString(++index,downCartDO.getStorage_yn());
						stmt.setLong(++index, downCartDO.getCartNo());			

						updateCount = stmt.executeUpdate();
					}
					index = 0;
					if(!isDownloadOutsourcing(downCartDO.getCartNo(),l+1)){
						stmt3.setString(++index, CodeConstants.CartStatus2.FIRSTAPP);
					}else{
						stmt3.setString(++index, CodeConstants.CartStatus2.SECONDAPP);
					}
					stmt3.setString(++index, cartContDO.getReq_cont());
					stmt3.setString(++index, downCartDO.getLogicaltree());	
					stmt3.setString(++index, downCartDO.getPhysicaltree());			
					stmt3.setString(++index, downCartDO.getCo_cd());	
					stmt3.setString(++index, downCartDO.getChennel());
					stmt3.setLong(++index, downCartDO.getCartNo());			
					stmt3.setLong(++index, l+1);	
					updateCount = stmt3.executeUpdate();
				}
				else
				{
					// 상태 코드를 다운로드 승인  "002" 으로 변경한다
					stmt.setString(++index, CodeConstants.CartStatus2.APPROVE);
					if(l+1==1){
						stmt.setString(++index, downCartDO.getDownSubj());
						stmt.setString(++index, downCartDO.getOut_strg_loc());
						stmt.setString(++index, downCartDO.getDown_gubun());
						stmt.setString(++index, downCartDO.getFl_path());
						stmt.setString(++index, downCartDO.getCategory());
						// 계열사 다운로드 요청시에 요청자의 회사코드 값을 트랜스퍼에게 셀네임으로 전달할 것.
						if(downCartDO.getDown_gubun().equals("005")){
							stmt.setString(++index,getSubsidary(downCartDO.getCartNo()));
						}else{
							stmt.setString(++index, downCartDO.getStoragename());
						}
						stmt.setString(++index,downCartDO.getStorage_yn());
						stmt.setLong(++index, downCartDO.getCartNo());				
						updateCount = stmt.executeUpdate();
					}				
					index = 0;

					//외주 제작팀이라면 1차 승인대기로 그이외에는 다운로드로 변환한다
					if(!isDownloadOutsourcing(downCartDO.getCartNo(),l+1)){
						stmt3.setString(++index, CodeConstants.CartStatus2.FIRSTAPP);
					}else{
						stmt3.setString(++index, CodeConstants.CartStatus2.DOWNLOAD);
					}
					stmt3.setString(++index, cartContDO.getReq_cont());
					stmt3.setString(++index, downCartDO.getLogicaltree());	
					stmt3.setString(++index, downCartDO.getPhysicaltree());			
					stmt3.setString(++index, downCartDO.getCo_cd());	
					stmt3.setString(++index, downCartDO.getChennel());
					stmt3.setLong(++index, downCartDO.getCartNo());			
					stmt3.setLong(++index, l+1);	
					updateCount = stmt3.executeUpdate();
				}

			}

			// 다운로드 경로에 대한 값을 얻어온다.
			// 스토리지에 있는 풀다운로드에 대한 경로에 있는 것을 요청하기 때문에 



			buf2.append("update DAS.DOWN_CART_TBL set STRG_LOC = ? where CART_NO = ? ");

			stmt2= con.prepareStatement(buf2.toString());
			index = 0;
			stmt2.setString(++index, _strg_loc);
			stmt2.setLong(++index, downCartDO.getCartNo());
			stmt2.executeUpdate();



			// 다운로드 카트의 사용 제한 여부를 확인하고 
			if(true != isDownloadRistrict1(downCartDO.getCartNo(),downCartDO.getCartSeq()))
			{
				//외주직원이면 통과
				if(isDownloadOutsourcing(downCartDO.getCartNo(),downCartDO.getCartSeq())){

					/**
					 *  클립이 스토리지에 존재 한다면 DAS-TM에 전송 요청  시작
					 */
					// DTL 이관 전 클립 & 스토리지에 존재 분기시작.
					CartContDO tmpCartContDO = getStLocClip(selectCartContInfo(downCartDO.getCartNo(), downCartDO.getCartSeq()).getCtId());


					if(!CommonUtl.isEmptyString(tmpCartContDO.getFl_path())&&downCartDO.getStorage_yn().equals("Y")){


						/**
						 * PDS,NDS,계열사 해당하는 다운로드 요청만 DAS-TM 전송요청을 하게 됨(20110512:dekim)
						 */
						if(getUsedDasTmYnByCartNo(downCartDO.getCartNo())){
							/**
							 *  스토리지 전송건에 대하여 다운로드 상태값( CodeConstants.CartStatus2.DOWNLOAD_COMPLET) SET
							 */
							updateCartContTbl(cartContDO);

							ContentsInfoDO contDo = getFl_path(downCartDO.getCartNo(),Long.parseLong(String.valueOf(downCartDO.getCartSeq())));


							//스토리지  다운로드인경우도ㅓCONTENTS_DOWN_TBL 에 값을 넣는다.

							//DownCartDO downCartDO = new DownCartDO();
							downCartDO.setFile_nm(contDo.getWrk_file_nm());

							downCartDO.setFl_path(whichLoc(downCartDO));
							downCartDO.setCti_id(contDo.getCti_id());


							if(contDo.getDown_typ().equals("P")){
								downCartDO.setFile_nm(contDo.getCti_id()+".mxf");
							}else if(contDo.getDown_typ().equals("F")){
								downCartDO.setFile_nm(downCartDO.getCartSeq()+"_"+contDo.getCti_id()+".mxf");	
							}


							InsertContentsDownTbl(downCartDO);


							String getMessage =  addTaskByStorageClip(downCartDO.getCartNo(),downCartDO.getCartSeq());

							if(logger.isDebugEnabled()){
								logger.debug("return message : "+getMessage);
							}

							TransferDOXML _doXML = new TransferDOXML();
							TransferDO _do = (TransferDO) _doXML.setDO(getMessage);
							_do.setCart_no(Integer.parseInt(downCartDO.getCartNo()+""));
							_do.setCart_seq(Integer.parseInt(downCartDO.getCartSeq()+""));
							insertAddTaskRes(_do);
						}

					}else{

						//다운로드 제한 여부가 No이 웹 서비스를 호출하여 다운로드 카트를 승인 없이  다운로드 한다
						String xml = getNewDownloadXml(downCartDO);//<- 카트번호를 받아 소속 seq list로 보냄

						if(!"".equals(xml)){
							NevigatorProxy port = new NevigatorProxy();
							String _result = port.downloadService(xml); 

						}
					}

					/**
					 *  클립이 스토리지에 존재 한다면 DAS-TM에 전송 요청  시작
					 */


				}else{

					return 1;
				}
			}


			return updateCount;
		}

		catch (Exception e) 
		{
			logger.error(buf.toString());
			logger.error(buf2.toString());
			logger.error(buf3.toString());


			throw e;
		}		
		finally
		{
			//try { 	if (stmt != null)  stmt.close();	} catch (SQLException e) {}
			try {
				con.setAutoCommit(true);
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				logger.error(e);
			}
			release(null, stmt, con);
			release(null, stmt2, null);
			release(null, stmt3, null);
		}

	}


	/**
	 * DTL 이관전 클립 TM용 데이타 수집
	 * @param cartNo
	 * @param cartSeq
	 * @return
	 * @throws Exception 
	 */
	public String addTaskByStorageClip(long cartNo,long cartSeq)throws Exception{
		String xml="";
		String rtnValue="";
		xml = selectAddTaskForXmlByStorageClip(cartNo,cartSeq);

		String tmURL = dasHandler.getProperty("DAS_TM_URL");

		for(int i=0; i<3; i++) {
			try {

				Tansfer transfer = new TansferLocator();
				TansferPortType  port = transfer.getTansferPort(new URL(tmURL));
				rtnValue = port.addTaskPFR(xml);

				break;
			} catch (Exception e) {
				logger.error("addTaskByStorageClip retry ("+i+")", e);
				continue;
			}
		}

		/*
		try {
			TansferPortTypeProxy port = new TansferPortTypeProxy();
			rtnValue = port.addTaskPFR(xml);
			return 		(rtnValue);
			// TODO Auto-generated catch block

		} catch (RemoteException e) {
			try {
				errorcount =1;
				TansferPortTypeProxy port = new TansferPortTypeProxy();
				rtnValue = port.addTaskPFR(xml);
				return 		(rtnValue);
			} catch (RemoteException e1) {
				try {
					errorcount =2;
					TansferPortTypeProxy port = new TansferPortTypeProxy();
					rtnValue = port.addTaskPFR(xml);
					return 		(rtnValue);
				} catch (RemoteException e2) {
					// TODO Auto-generated catch block
					e2.printStackTrace();
				}
			}

			return 		rtnValue;
		} catch (Exception e) {
			logger.error(cartNo);
			logger.error(cartSeq);
		}
		 */
		return rtnValue;
	}
	/**
	 * task_id 기준으로 상태를 업테이트 한다
	 * @param transfer 정보를 가지고있는 beans
	 * @throws Exception 
	 */

	public int insertAddTaskRes(TransferDO transfer) throws Exception{
		if(isThereTaskid(transfer.getTaskID()))
		{
			return updateTaskid(transfer.getTaskID(),transfer.getStatus());
		}
		return insertAddTaskinfo(transfer);
	}

	/**
	 * 카트 다운로드 요청자를 조회하여 해당 회사코드를 검색한다.
	 * @param cart_no
	 * @return
	 * @throws DASException
	 */
	public String getSubsidary(long cart_no) throws DASException{

		StringBuffer buf = new StringBuffer();
		Connection con = null;		
		PreparedStatement psmt = null;		
		ResultSet rs = null;

		buf.append(" SELECT COCD FROM USER_INFO_TBL WHERE SBS_USER_ID =(                 ");
		buf.append("     SELECT DCT.REQ_USRID FROM DOWN_CART_TBL DCT WHERE DCT.CART_NO = ?  )                            ");

		try {
			con = DBService.getInstance().getConnection();
			//logger.debug("######getSubsidary######## con : " + con);
			psmt = con.prepareStatement(buf.toString());    
			int index = 0;			
			psmt.setLong(++index, cart_no);
			rs = psmt.executeQuery();	
			ArchiveReqDO item = new ArchiveReqDO();
			if(rs.next())
			{
				return rs.getString("COCD");
			}

			return "";
		}
		catch (Exception ex)
		{
			logger.error(buf.toString());

			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "selectTcJon 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, con);
		}
	}

	/**
	 * WorkflowService 다운로드 요청시 XML 생성
	 * @param downcartDO
	 * @return
	 * @throws Exception 
	 */
	public String getDownloadXml(DownCartDO downcartDO) throws Exception{

		StringBuffer buf = new StringBuffer();
		PreparedStatement stmt = null;
		Connection con = null;
		ResultSet rs = null;

		buf.append(" SELECT CCT.CART_SEQ FROM DAS.CART_CONT_TBL CCT     ");
		buf.append(" WHERE CCT.CART_NO =? AND                        ");
		buf.append(" CCT.CART_SEQ NOT IN (                              ");
		buf.append(" SELECT CDT.CART_SEQ                                ");
		buf.append(" FROM DAS.CONTENTS_DOWN_TBL CDT                     ");
		buf.append(" WHERE CDT.CART_NO = ? AND CDT.JOB_STATUS <>  'E' ");
		buf.append(" )                                                  ");
		buf.append("  and cct.RIST_YN ='N'  AND CCT.OUTSOURCING_YN='N'                                           ");
		buf.append("\n WITH UR	 ");
		try{
			int index = 0;	
			con = DBService.getInstance().getConnection();
			stmt = con.prepareStatement(buf.toString());
			stmt.setLong(++index	, downcartDO.getCartNo());
			stmt.setLong(++index	, downcartDO.getCartNo());

			rs = stmt.executeQuery();
			String sResult = "";

			while(rs.next()){
				sResult = sResult + rs.getString("CART_SEQ")+",";
			}

			if(sResult.length() > 0 && sResult.endsWith(",")) {
				sResult.substring(0, sResult.lastIndexOf(",")-1);
			}
			if(sResult.length()>0){
				return getDownloadXmlFormat(downcartDO, sResult);
			}else{
				return sResult;
			}

		}
		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}		
		finally
		{
			release(rs, stmt, con);
		}
	}






	/**
	 * WorkflowService 다운로드 요청시 XML 생성
	 * @param downcartDO
	 * @return
	 * @throws Exception 
	 */
	public String getDownloadXml(CartContDO cartContDO) throws Exception{

		StringBuffer buf = new StringBuffer();
		PreparedStatement stmt = null;
		Connection con = null;
		ResultSet rs = null;

		buf.append(" SELECT CCT.CART_SEQ FROM DAS.CART_CONT_TBL CCT     ");
		buf.append(" WHERE CCT.CART_NO =? AND                        ");
		buf.append(" CCT.CART_SEQ NOT IN (                              ");
		buf.append(" SELECT CDT.CART_SEQ                                ");
		buf.append(" FROM DAS.CONTENTS_DOWN_TBL CDT                     ");
		buf.append(" WHERE CDT.CART_NO = ? AND CDT.JOB_STATUS <> 'E' ");
		buf.append(" )                                                  ");
		buf.append("  and cct.RIST_YN ='N'                                             ");
		try{
			int index = 0;	
			con = DBService.getInstance().getConnection();
			stmt = con.prepareStatement(buf.toString());
			stmt.setLong(++index	, cartContDO.getCartNo());
			stmt.setLong(++index	, cartContDO.getCartNo());

			rs = stmt.executeQuery();
			String sResult = "";

			while(rs.next()){
				sResult = sResult + rs.getString("CART_SEQ")+",";
			}
			if(sResult.length() > 0 && sResult.endsWith(",")) {
				sResult.substring(0, sResult.lastIndexOf(",")-1);
			}
			if(sResult.length()>0){
				return getDownloadXmlFormat(cartContDO, sResult);
			}else{
				return sResult;
			}

		}
		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}		
		finally
		{
			release(rs, stmt, con);
		}
	}



	/**
	 * WorkflowService 다운로드 요청시 XML 생성
	 * @param downcartDO
	 * @return
	 * @throws DASException
	 */
	public String getDownloadXmlFormat(DownCartDO downcartDO,String cart_seq_list) throws DASException{
		StringBuffer buf = new StringBuffer();

		buf.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n");
		buf.append("<das>\n");
		buf.append("<info>\n");
		buf.append("<cart_no>"+downcartDO.getCartNo()+"</cart_no>");
		buf.append("<cart_seq>"+cart_seq_list+"</cart_seq>");
		buf.append("<regrid>"+downcartDO.getUser_id()+"</regrid>");
		buf.append("<req_id>"+downcartDO.getReqUsrid()+"</req_id>");
		buf.append("</info>\n");
		buf.append("</das>\n");

		return buf.toString();
	}
	/**
	 * WorkflowService 다운로드 요청시 XML 생성
	 * @param downcartDO
	 * @return
	 * @throws DASException
	 */
	public String getDownloadXmlFormat(CartContDO CartContDO,String cart_seq_list) throws DASException{
		StringBuffer buf = new StringBuffer();

		buf.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n");
		buf.append("<das>\n");
		buf.append("<info>\n");
		buf.append("<cart_no>"+CartContDO.getCartNo()+"</cart_no>");
		buf.append("<cart_seq>"+cart_seq_list+"</cart_seq>");
		buf.append("<regrid>"+CartContDO.getRegrId()+"</regrid>");
		buf.append("<req_id>"+CartContDO.getRegrId()+"</req_id>");
		buf.append("</info>\n");
		buf.append("</das>\n");

		return buf.toString();
	}
	/**
	 * WorkflowService 다운로드 요청시 XML 생성
	 * @param downcartDO
	 * @return
	 * @throws DASException
	 */
	public String getDownloadXmlFormat(CartContDO cartContDO) throws DASException{
		StringBuffer buf = new StringBuffer();

		buf.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n");
		buf.append("<das>\n");
		buf.append("<info>\n");
		buf.append("<cart_no>"+cartContDO.getCartNo()+"</cart_no>");
		buf.append("<cart_seq>"+cartContDO.getCartSeq()+"</cart_seq>");
		buf.append("<regrid>"+cartContDO.getRegrId()+"</regrid>");
		buf.append("<req_id>"+cartContDO.getRegrId()+"</req_id>");
		buf.append("</info>\n");
		buf.append("</das>\n");

		return buf.toString();
	}
	/**
	 * WorkflowService 다운로드 요청시 XML 생성
	 * @param downcartDO
	 * @return
	 * @throws DASException
	 */
	public String getDownloadXmlFormat(DownCartDO downcartDO) throws DASException{
		StringBuffer buf = new StringBuffer();

		buf.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n");
		buf.append("<das>\n");
		buf.append("<info>\n");
		buf.append("<cart_no>"+downcartDO.getCartNo()+"</cart_no>");
		buf.append("<cart_seq>"+downcartDO.getCartSeq()+"</cart_seq>");
		buf.append("<regrid>"+downcartDO.getRegrId()+"</regrid>");
		buf.append("<req_id>"+downcartDO.getReqUsrid()+"</req_id>");
		buf.append("</info>\n");
		buf.append("</das>\n");

		return buf.toString();
	}

	/**
	 * 카트 아이템에 대한 정보 수정
	 * @param cartContDO 카트에 대한 내용 정리
	 * @return Update count
	 * @throws Exception 
	 * @throws RemoteException
	 */
	public int[] updateCartContInfo(List cartContDOs) throws Exception
	{		
		StringBuffer buf = new StringBuffer();
		PreparedStatement stmt = null;
		Connection con = null;		
		buf.append("\n update DAS.CART_CONT_TBL set ");
		buf.append("\n 	REQ_CONT = ? ");
		buf.append("\n where CART_NO = ? AND CART_SEQ =? ");

		try 
		{
			int updateCount;
			int index;
			con = DBService.getInstance().getConnection();
			con.setAutoCommit(false);	

			if(cartContDOs.size()>0)stmt = con.prepareStatement(buf.toString());
			for(int i=0;i<cartContDOs.size();i++){
				index = 0;
				CartContDO cartContDO = (CartContDO)cartContDOs.get(i);	

				stmt.setString(++index, cartContDO.getReq_cont());
				stmt.setLong(++index, cartContDO.getCartNo());
				stmt.setInt(++index, cartContDO.getCartSeq());

				stmt.addBatch();
			}
			// 사용요청 사유를 입력한다.
			int[] rInt = null;
			if(cartContDOs.size()>0)rInt =stmt.executeBatch();

			con.commit();
			return rInt;

		}
		catch (Exception e) 
		{
			logger.error(buf.toString());

			throw e;
		}		
		finally
		{
			con.setAutoCommit(true);
			release(null, stmt, con);
		}

	}
	/**
	 * 카트 아이템에 대한 정보 수정
	 * @param cartContDO 카트에 대한 내용 정리
	 * @return Update count
	 * @throws Exception 
	 * @throws RemoteException
	 */
	public int updateCartContInfo(CartContDO cartContDO) throws Exception
	{		
		StringBuffer buf = new StringBuffer();
		PreparedStatement stmt = null;
		Connection con = null;		
		buf.append("\n update DAS.CART_CONT_TBL set ");
		buf.append("\n 	REQ_CONT = ? ");
		buf.append("\n where CART_NO = ? AND CART_SEQ =? ");

		try 
		{
			int updateCount;
			int index;
			con = DBService.getInstance().getConnection();

			stmt = con.prepareStatement(buf.toString());
			index = 0;

			stmt.setString(++index, cartContDO.getReq_cont());
			stmt.setLong(++index, cartContDO.getCartNo());
			stmt.setInt(++index, cartContDO.getCartSeq());


			updateCount = stmt.executeUpdate();

			return updateCount;

		}
		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}

	/**
	 * 마스터 테이블 상태코드를 갱신한다.
	 * @param masterID 		마스터 ID
	 * @param secArchId		2차 아카이브 ID
	 * @param secArchNm		2차 아카이브 이름                                       
	 * @return        Update count
	 * @throws Exception 
	 */
	public int updateDatastatCd(long masterID, String secArchId, String secArchNm) throws Exception
	{
		StringBuffer buf = new StringBuffer();				
		if(StringUtils.isEmpty(secArchNm))
		{
			buf.append("\n update das.metadat_mst_tbl set ");
			buf.append("\n 	data_stat_cd = '007', ");
			buf.append("\n 	use_yn = 'Y', ");
			buf.append("\n 	accept_end_dd = ? ,");
			buf.append("\n 	acceptor_id = ? ");
			buf.append("\n where master_id = ? ");
		}
		else
		{
			buf.append("\n update das.metadat_mst_tbl set ");
			buf.append("\n 	ARRG_END_DT = ?, ");
			buf.append("\n 	data_stat_cd = '003', ");
			buf.append("\n 	use_yn = 'Y', ");		// 정리완료일 때도 적어준다.
			buf.append("\n 	sec_arch_id = ?, ");
			buf.append("\n 	sec_arch_nm = ? ");
			buf.append("\n where master_id = ? ");
		}

		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateDatastatCd######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			if(StringUtils.isEmpty(secArchNm))
			{
				stmt.setString(++index, CalendarUtil.getDateTime("yyyyMMddHHmmss"));
				stmt.setString(++index, secArchId);
				stmt.setLong(++index, masterID);	
			}
			else
			{
				stmt.setString(++index, CalendarUtil.getDateTime("yyyyMMddHHmmss"));
				stmt.setString(++index, secArchId);
				stmt.setString(++index, secArchNm);
				stmt.setLong(++index, masterID);
			}


			int updateCount = stmt.executeUpdate();

			return updateCount;
		}
		catch (Exception e) 
		{
			logger.error(buf.toString());

			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}

	/**
	 * das.contents_tbl의 값을 수정
	 * @param master_id 마스터id
	 * @param vd_qlty 화질 코드
	 * @param asp_rto_cd 화면비 코드
	 * @return updatecount
	 * @throws Exception 
	 */
	public int updateVd_qlty(long master_id, String vd_qlty,String asp_rto_cd,String ct_cla) throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.contents_tbl set ");
		buf.append("\n 	vd_qlty = ?,ASP_RTO_CD=? ");
		if(!ct_cla.equals("")){
			buf.append("\n 	,ct_cla = '"+ct_cla+"'");	
		}
		buf.append("\n where ct_id in (select CT_ID from DAS.CONTENTS_MAPP_TBL  where MASTER_ID = ?) ");

		PreparedStatement stmt = null; 
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setString(++index, vd_qlty);
			stmt.setString(++index, asp_rto_cd);
			stmt.setLong(++index, master_id);

			int updateCount = stmt.executeUpdate();

			return updateCount;
		}
		catch (Exception e) 
		{
			logger.error(buf.toString());

			throw e;
		} 
		finally
		{
			release(null, stmt, con);
		}

	}


	/**
	 * das.contents_tbl의 값을 수정
	 * @param master_id 마스터id
	 * @param vd_qlty 화질 코드
	 * @param asp_rto_cd 화면비 코드
	 * @return updatecount
	 * @throws Exception 
	 */
	public int updateVd_qlty(long master_id, String vd_qlty,String asp_rto_cd) throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.contents_tbl set ");
		buf.append("\n 	vd_qlty = ?,ASP_RTO_CD=? ");

		buf.append("\n where ct_id in (select CT_ID from DAS.CONTENTS_MAPP_TBL  where MASTER_ID = ?) ");

		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateVd_qlty######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setString(++index, vd_qlty);
			stmt.setString(++index, asp_rto_cd);
			stmt.setLong(++index, master_id);

			int updateCount = stmt.executeUpdate();

			return updateCount;
		}
		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}


	private String deleteContentFileItem(Connection con, int days) throws Exception
	{
		List resultList = new ArrayList();
		FileDeleteInfoDO fileDeleteInfoDO = null;
		long ctiId;
		String flPath, flList = null;

		// select contents info in specified period
		StringBuffer buf = new StringBuffer();
		StringBuffer buf1 = new StringBuffer();
		StringBuffer buf2 = new StringBuffer();
		buf.append("\n select   ");
		buf.append("\n inst.CT_ID,   ");
		buf.append("\n inst.CTI_ID,   ");
		buf.append("\n inst.FL_PATH,   ");
		buf.append("\n inst.WRK_FILE_NM,   ");
		buf.append("\n substr(inst.REG_DT, 1, 8) AS REG_DT   ");
		buf.append("\n from DAS.CONTENTS_TBL cont,  DAS.CONTENTS_INST_TBL inst");
		buf.append("\n where inst.CT_ID = cont.CT_ID ");
		buf.append("\n 	   	  and inst.ARCH_STE_YN = 'Y' ");
		buf.append("\n 	   	  and SUBSTR(inst.CTI_FMT, 1,1) = '1' ");
		buf.append("\n 	   	  and inst.FL_PATH is not null ");
		buf.append("\n 	   	  and inst.FL_PATH <> '' ");
		buf.append("\n 	   	  and substr(inst.REG_DT, 1, 8) < ? ");
		buf.append("\n WITH UR	 ");	

		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			stmt = con.prepareStatement(buf.toString());
			String str = CalendarUtil.beforeSpecDay(CalendarUtil.getToday(), days);

			int index = 0;
			stmt.setString(++index, str);		

			rs = stmt.executeQuery();

			String updateQuery = null;
			int updateCount;
			while(rs.next())
			{
				FileDeleteInfoDO item = new FileDeleteInfoDO();
				item.setCtId(rs.getLong("CT_ID"));
				item.setCtiId(rs.getLong("CTI_ID"));
				item.setFlPath(rs.getString("FL_PATH"));
				item.setFlNm(rs.getString("WRK_FILE_NM"));
				item.setRegDt(rs.getString("REG_DT"));

				resultList.add(item);					
			}

			// 삭제될 파일 이므로 콘텐트 인스탄스 테이블의 파일 경로를 null으로 설정한다.	

			buf1.append("\n update DAS.CONTENTS_INST_TBL set FL_PATH = ?   ");
			buf1.append("\n 	   	  where   ARCH_STE_YN = 'Y' ");
			buf1.append("\n 	   	  	  and SUBSTR(CTI_FMT, 1,1) = '1' ");
			buf1.append("\n 	   	  and FL_PATH is not null ");
			buf1.append("\n 	   	  and FL_PATH <> '' ");
			buf1.append("\n 	   	  and substr(REG_DT, 1, 8) < ? ");
			buf1.append("\n WITH UR	 ");	

			stmt = con.prepareStatement(buf1.toString());

			index = 0;
			stmt.setString(++index, "");
			stmt.setString(++index, str);
			updateCount = stmt.executeUpdate();

			if(updateCount <= 0) {

				DASException updateException = new DASException(ErrorConstants.NO_MACHING_FILED, "UPDATE 또는 DELETE에 대한 행이 없습니다.");
				throw updateException;					    	
			}	

			// for all content ids 
			//  from content_instance table delete files located in storage using content ID
			index = 0;
			for(Iterator i = resultList.iterator(); i.hasNext();)
			{
				fileDeleteInfoDO = (FileDeleteInfoDO)i.next();

				ctiId = 	fileDeleteInfoDO.getCtiId();
				flPath = fileDeleteInfoDO.getFlPath();

				if(flPath.contains(dasHandler.getProperty("MP2")))
				{
					flPath  = "/"+flPath + "/" + Long.toString(ctiId) + "." + "mxf";				

					if(index == 0)
						flList = flPath;
					else
						flList = flList + "," + flPath;	
				}

				index++;			

			}		

			// 다운로드 완료된 폴더 선택

			buf2.append("\n SELECT STRG_LOC FROM DAS.DOWN_CART_TBL   ");
			buf2.append("\n where DOWN_DT is not null   ");
			buf2.append("\n 		 and DOWN_DT <> '' ");
			buf2.append("\n       and DOWN_YN = 'Y'   ");
			buf2.append("\n       and substr(DOWN_DT, 1, 8) < ? ");
			buf2.append("\n WITH UR	 ");

			stmt = con.prepareStatement(buf2.toString());

			index = 0;
			stmt.setString(++index, str);
			rs = stmt.executeQuery();

			while(rs.next())
			{
				flList = flList + "," + rs.getString("STRG_LOC");	
			}

			return flList;


		} 
		catch (Exception e) 
		{
			logger.error(buf2.toString());
			logger.error(buf1.toString());
			logger.error(buf.toString());


			throw e;		

		}

		finally
		{
			release(rs, stmt, null);
		}




	}


	private boolean isThereRiskClfCd(long cartNo, int seq) throws Exception
	{

		StringBuffer buf = new StringBuffer();
		buf.append("\n select ");
		buf.append("\n 	count(1) ");
		buf.append("\n from DAS.CART_CONT_TBL ");
		buf.append("\n where CART_NO = ? ");
		buf.append("\n  and not (RIST_CLF_CD = ? or RIST_CLF_CD = '')");
		buf.append("\n 	and not CART_SEQ = ? ");
		buf.append("\n WITH UR	 ");

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######isThereRiskClfCd######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setLong(++index, cartNo);
			stmt.setString(++index, CodeConstants.RiskCode.UNLIMIT);
			stmt.setInt(++index, seq);

			rs = stmt.executeQuery();

			rs.next();

			int totalCount = rs.getInt(1);

			if(totalCount > 0)
			{
				return true;
			}
			else
			{
				return false;
			}
		} 

		catch (Exception e) 
		{
			logger.error(buf.toString());

			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}		

	}

	/*private boolean isDownloadRistrict(long cartNo) throws DASException
		{

			StringBuffer buf = new StringBuffer();
			buf.append("\n select ");
			buf.append("\n 	RIST_YN ");
			buf.append("\n from DAS.DOWN_CART_TBL ");
			buf.append("\n where CART_NO = ? ");		
			buf.append("\n WITH UR	 ");

			Connection con = null;
			PreparedStatement stmt = null;
			ResultSet rs = null;
			try 
			{
				con = DBService.getInstance().getConnection();

				stmt = con.prepareStatement(buf.toString());

				int index = 0;
				stmt.setLong(++index, cartNo);
				rs = stmt.executeQuery();

				while(rs.next()){;
					if(rs.getString("RIST_YN").equals(DASBusinessConstants.YesNo.YES))
					{
						return true;
					}
					else
					{
						return false;
					}
				}
				return false;
			} 
			catch (NamingException e) 
			{
				// TODO 자동 생성된 catch 블록
				logger.error(e);
		        DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "시스템 장애입니다.", e);
		        throw exception;
			} 
			catch (SQLException e) 
			{
				// TODO 자동 생성된 catch 블록
				logger.error(e);
		        DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "시스템 장애입니다.", e);
		        throw exception;
			}
			finally
			{
				if (logger.isDebugEnabled()) 
		        {
		                logger.debug("[isDownloadRistrict Released : CartNo = " + cartNo + "]");
		        }
				release(rs, stmt, con);
			}		

		}
	 */


	private boolean isDownloadRistrict(long cartNo) throws Exception
	{

		StringBuffer buf = new StringBuffer();
		buf.append("\n select ");
		buf.append("\n 	RIST_YN ");
		buf.append("\n from DAS.DOWN_CART_TBL ");
		buf.append("\n where CART_NO = ? ");		
		buf.append("\n WITH UR	 ");

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######isDownloadRistrict######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setLong(++index, cartNo);
			rs = stmt.executeQuery();

			while(rs.next()){;
			if(rs.getString("RIST_YN").equals(DASBusinessConstants.YesNo.YES))
			{
				return true;
			}
			else
			{
				return false;
			}
			}
			return false;
		} 

		catch (Exception e) 
		{
			logger.error(buf.toString());

			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}		

	}



	private boolean isDownloadRistrict1(long cartNo, long cartSeq) throws Exception
	{

		StringBuffer buf = new StringBuffer();
		buf.append("\n select ");
		buf.append("\n 	RIST_YN ");
		buf.append("\n from DAS.cart_cont_tbl ");
		buf.append("\n where CART_NO = ? ");	
		buf.append("\n and CART_seq = ? ");	
		buf.append("\n WITH UR	 ");



		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######isDownloadRistrict1######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setLong(++index, cartNo);
			stmt.setLong(++index, cartSeq);
			rs = stmt.executeQuery();

			while(rs.next()){;
			if(rs.getString("RIST_YN").equals(DASBusinessConstants.YesNo.YES))
			{
				return true;
			}
			else
			{
				return false;
			}
			}
			return false;
		} 

		catch (Exception e) 
		{
			logger.error(buf.toString());

			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}		

	}

	private long getMasterId(Connection con, int episNo, long pgmNm) throws SQLException
	{
		StringBuffer buf = new StringBuffer();
		buf.append("\n select ");
		buf.append("\n 	MASTER_ID ");
		buf.append("\n from das.metadat_mst_tbl ");
		buf.append("\n where epis_no = ? ");
		buf.append("\n   and pgm_id = ? ");
		buf.append("\n WITH UR	 ");

		PreparedStatement psmt = null;
		ResultSet rs = null;
		try
		{
			psmt = con.prepareStatement(buf.toString());

			int index = 0;
			psmt.setInt(++index, episNo);
			psmt.setLong(++index, pgmNm);

			rs = psmt.executeQuery();

			if(rs.next())
				return rs.getLong("MASTER_ID");
			else 
				return 0;
		}
		catch (SQLException ex)
		{
			logger.error(buf.toString());
			throw ex;
		}
		finally
		{
			release(rs, psmt, null);
		}
	}

	/**
	 * 입력받은 시퀀스명에 해당하는 시퀀스를 채번한다.
	 * @param con Connection 객체
	 * @param seqName 시퀀스명
	 * @return String 채번한 시퀀
	 * @throws SQLException
	 */
	private long getNextSquence(Connection con) throws SQLException
	{
		StringBuffer buf = new StringBuffer();
		/*
	    	buf.append("\n SELECT (NEXTVAL FOR DAS."+seqName+") AS SEQUENCE  ");
	    	buf.append("\n FROM SYSIBM.SYSDUMMY1												");
		 */		
		buf.append("\n select value(max(CART_NO), 0) FROM  DAS.DOWN_CART_TBL  with ur \n");

		PreparedStatement psmt = null;
		ResultSet rs = null;
		try
		{
			psmt = con.prepareStatement(buf.toString());
			rs = psmt.executeQuery();
			rs.next();

			return rs.getLong(1)+1;
		}
		catch (SQLException ex)
		{
			logger.error(buf.toString());
			throw ex;
		}
		finally
		{
			release(rs, psmt, null);
		}
	}

	/**
	 * 입력받은 시퀀스명에 해당하는 시퀀스를 채번한다.
	 * @param header 청구번호 hearer 표시자
	 * @param year 청구번호 연도
	 * @return 채번한 청구 번호
	 * @throws SQLException
	 */
	private int getNextReqNo(Connection con, String header, String year) throws SQLException
	{
		StringBuffer buf = new StringBuffer();

		buf.append("\n select COALESCE(INT(MAX(SUBSTR(REQ_NO, 6) )),0) + 1 ");
		buf.append("\n FROM    DAS.D_TAPE_TBL");
		buf.append("\n WHERE   REQ_NO LIKE '" + header + year + "-" +  "%'" );
		buf.append("\n with ur");

		PreparedStatement psmt = null;
		ResultSet rs = null;
		try
		{
			psmt = con.prepareStatement(buf.toString());
			rs = psmt.executeQuery();
			rs.next();

			return rs.getInt(1);
		}
		catch (SQLException ex)
		{
			logger.error(buf.toString());
			throw ex;
		}
		finally
		{
			release(rs, psmt, null);
		}
	}

	/**
	 * 주석 ID를 채번한다.
	 * @param con Connection 객체
	 * @return long 주석 ID
	 * @throws SQLException
	 */
	private long getLatestAnnotId(Connection con) throws SQLException
	{
		StringBuffer buf = new StringBuffer();
		buf.append("\n select (nextval for das.seq_annot_id) as sequence from sysibm.sysdummy1  with ur \n");

		PreparedStatement psmt = null;
		ResultSet rs = null;
		try
		{
			psmt = con.prepareStatement(buf.toString());
			rs = psmt.executeQuery();
			rs.next();

			return rs.getLong(1);
		}
		catch (SQLException ex)
		{
			logger.error(buf.toString());
			throw ex;
		}
		finally
		{
			release(rs, psmt, null);
		}
	}

	private String replace(String str){
		str = StringUtils.replace(str, "&", "&amp;");
		str = StringUtils.replace(str, "<", "&lt;");
		str = StringUtils.replace(str, ">", "&gt;");
		str = StringUtils.replace(str, "'", "&apos;");
		str = convertTag(str);
		return str;
	}

	/**
	 * 특수문자 처리를 char 단위로 처리를 하겠습니다 김동은 20090731
	 * resource 문제가 있습니다.
	 */
	public static String convertTag(String name) {

		if(name!=null){
			CharBuffer cb = CharBuffer.wrap(name);
			String xmlString = "";
			while ( cb.hasRemaining() ) {
				char tempChar = cb.get();
				if (tempChar < 0x20 && !((tempChar == 0x9) ||(tempChar == 0xA) || (tempChar == 0xD))){

					xmlString += " ";


					//  	  	}else if(tempChar ==0x1c){   // 화살표모양의 특수 문자  '->' 유사함.
					//  	    	xmlString += " ";
					//  	    }else if(tempChar ==0x1a){
					//  	    	xmlString += "";
					//  	    }else if((tempChar == 0x9) ||
					//                (tempChar == 0xA) ||
					//                (tempChar == 0xD) ||
					//                ((tempChar >= 0x20) && (tempChar <= 0xD7FF))){
					//                ((tempChar >= 0xE000) && (tempChar <= 0xFFFD)) ||
					//                ((tempChar >= 0x10000) && (tempChar <= 0x1FFFFF))){
					//  	    	xmlString +="";
				}else {
					xmlString +=tempChar;
				}
			}
			return xmlString;
		}
		return name;
	}

	/**
	 * CTI의 정보중 미디어 관련 정보를 가져온다.
	 * @param CTI_ID CTI의 ID
	 * @return 결과 XML
	 * @throws DASException
	 */
	public String getPlayMediaInfo(long CTI_ID) throws DASException	
	{	
		// 필요한 변수들
		StringBuffer buf = new StringBuffer();
		StringBuffer strResultBuffer = new StringBuffer();

		// SQL 구성		
		buf.append(" select AUD_TYPE_CD, RECORD_TYPE_CD, ME_CD, COLOR_CD");
		buf.append(" from DAS.CONTENTS_INST_TBL");
		buf.append(" where CTI_ID = ? ");
		buf.append(" with ur");

		Connection con = null;
		PreparedStatement psmt = null;
		ResultSet rs = null;        

		try
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######getPlayMediaInfo######## con : " + con);
			psmt = con.prepareStatement(buf.toString());

			int index = 0;			
			psmt.setLong(++index, CTI_ID);
			rs = psmt.executeQuery();

			if (rs.next())
			{
				strResultBuffer.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n");
				strResultBuffer.append("<DAS>\n");            	

				strResultBuffer.append("	<AUD_TYPE_CD>");
				strResultBuffer.append(rs.getString("AUD_TYPE_CD"));
				strResultBuffer.append("</AUD_TYPE_CD>\n");

				strResultBuffer.append("	<RECORD_TYPE_CD>");
				strResultBuffer.append(rs.getString("RECORD_TYPE_CD"));
				strResultBuffer.append("</RECORD_TYPE_CD>\n");

				strResultBuffer.append("	<ME_CD>");
				strResultBuffer.append(rs.getString("ME_CD"));
				strResultBuffer.append("</ME_CD>\n");

				strResultBuffer.append("	<COLOR_CD>");
				strResultBuffer.append(rs.getString("COLOR_CD"));            	
				strResultBuffer.append("</COLOR_CD>\n");

				strResultBuffer.append("</DAS>");
			}
		}
		catch (Exception ex) 
		{
			logger.error(buf.toString());
			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "getPlayMediaInfo 에러 : " + buf.toString(), ex);
			throw exception;
		}

		finally
		{
			release(rs, psmt, con);
		}

		return strResultBuffer.toString();
	}

	/**
	 * CTI의 정보중 미디어 관련 정보를 가져온다.
	 * @param CTI_ID CTI의 ID
	 * @return 결과 XML
	 * @throws DASException
	 */
	public String getPlayContentInfo(long MasterID) throws DASException	
	{
		//		 필요한 변수들
		StringBuffer buf = new StringBuffer();
		StringBuffer strResultBuffer = new StringBuffer();

		/*select CT.CT_ID, CT.CT_NM, CT.REG_DT, CTI.CTI_FMT, CTI.FL_SZ 
			from DAS.CONTENTS_TBL CT, DAS.CONTENTS_INST_TBL CTI, DAS.CONTENTS_MAPP_TBL MAP, DAS.METADAT_MST_TBL META
			where CT.CT_ID = CTI.CT_ID and META.MASTER_ID = MAP.MASTER_ID and MAP.CT_ID = CTI.CT_ID and META.MASTER_ID = 100
			order by CTI.CT_ID
			with ur;*/

		// SQL 구성		
		buf.append(" select distinct(CT.CT_ID), CTI.CTI_ID, CT.CT_NM, CT.REG_DT, CTI.CTI_FMT, CTI.FL_SZ, CTI.INGEST_EQ_ID, CT.CT_LENG, CTI.FL_PATH, CTI.WRK_FILE_NM");
		buf.append(" from DAS.CONTENTS_TBL CT, DAS.CONTENTS_INST_TBL CTI, DAS.CONTENTS_MAPP_TBL MAP, DAS.METADAT_MST_TBL META");
		buf.append(" where CT.CT_ID = CTI.CT_ID and META.MASTER_ID = MAP.MASTER_ID + 0 and MAP.CT_ID = CTI.CT_ID and META.MASTER_ID = ? ");
		buf.append("\n  and (MAP.del_dd is null or MAP.del_dd = '') ");
		buf.append(" order by CT.CT_ID");
		buf.append(" with ur");

		Connection con = null;
		PreparedStatement psmt = null;
		ResultSet rs = null;        

		try
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######getPlayContentInfo######## con : " + con);
			psmt = con.prepareStatement(buf.toString());

			int index = 0;			
			psmt.setLong(++index, MasterID);
			rs = psmt.executeQuery();

			strResultBuffer.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n");
			strResultBuffer.append("<DAS>\n");            	

			while (rs.next())
			{            	
				strResultBuffer.append("	<DATA>\n");

				strResultBuffer.append("		<CT_ID>");
				strResultBuffer.append(rs.getLong("CT_ID"));
				strResultBuffer.append("</CT_ID>\n");

				strResultBuffer.append("		<CT_NM>");
				strResultBuffer.append(rs.getString("CT_NM"));
				strResultBuffer.append("</CT_NM>\n");

				strResultBuffer.append("		<REG_DT>");
				strResultBuffer.append(rs.getString("REG_DT"));
				strResultBuffer.append("</REG_DT>\n");

				strResultBuffer.append("		<CTI_FMT>");
				strResultBuffer.append(rs.getString("CTI_FMT"));
				strResultBuffer.append("</CTI_FMT>\n");

				strResultBuffer.append("		<FL_SZ>");
				strResultBuffer.append(rs.getLong("FL_SZ"));
				strResultBuffer.append("</FL_SZ>\n");

				strResultBuffer.append("		<INGEST_EQ_ID>");
				strResultBuffer.append(rs.getInt("INGEST_EQ_ID"));
				strResultBuffer.append("</INGEST_EQ_ID>\n");

				strResultBuffer.append("		<CTI_ID>");
				strResultBuffer.append(rs.getLong("CTI_ID"));
				strResultBuffer.append("</CTI_ID>\n");

				strResultBuffer.append("		<CT_LENG>");
				strResultBuffer.append(rs.getString("CT_LENG"));
				strResultBuffer.append("</CT_LENG>\n");

				strResultBuffer.append("		<FL_PATH>");
				strResultBuffer.append(rs.getString("FL_PATH"));
				strResultBuffer.append("</FL_PATH>\n");

				strResultBuffer.append("		<WRK_FILE_NM>");
				strResultBuffer.append(rs.getString("WRK_FILE_NM"));
				strResultBuffer.append("</WRK_FILE_NM>\n");

				strResultBuffer.append("	</DATA>\n");
			}
			strResultBuffer.append("</DAS>");
		}
		catch (Exception ex) 
		{
			logger.error(buf.toString());
			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "getPlayContentInfo 에러 : " + buf.toString(), ex);
			throw exception;
		} 

		finally
		{
			release(rs, psmt, con);
		}

		return strResultBuffer.toString();
	}


	/**
	 * 검색어로 검색된 메타테이블 목록
	 * @param searchColumn, searchKey  검색할 컬럼, 검색어
	 * @return ArrayList 목록리스트
	 * @throws Exception 
	 * @throws DASException
	 */
	public ArrayList getMetaList(String column, String searchKey) throws Exception
	{
		Connection con = null;

		StringBuffer buf = new StringBuffer();
		buf.append("\n SELECT ");
		buf.append("\n			MASTER_ID, TITLE, EPIS_NO ");
		buf.append("\n FROM DAS.METADAT_MST_TBL ");
		buf.append("\n WHERE DATA_STAT_CD <> '002'  AND LOCK_STAT_CD <> 'Y' ");
		if("MASTER_ID".equals(column)) {
			buf.append("\n			AND " + column + " = " + searchKey);
		} else {
			buf.append("\n			AND " + column + " LIKE '%" + searchKey + "%' ");
		}
		buf.append("\n WITH UR	 ");


		PreparedStatement psmt = null;
		ResultSet rs = null;
		ArrayList list = new ArrayList();

		try
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######getMetaList######## con : " + con);
			psmt = con.prepareStatement(buf.toString());

			int index = 0;

			rs = psmt.executeQuery();

			while(rs.next()) {
				index++;
				MetadataMstInfoDO metadataMstInfoDO = new MetadataMstInfoDO();

				metadataMstInfoDO.setMasterId(rs.getLong("MASTER_ID"));
				metadataMstInfoDO.setTitle(rs.getString("TITLE"));
				metadataMstInfoDO.setEpisNo(rs.getInt("EPIS_NO"));

				list.add(metadataMstInfoDO);
			}
		}
		catch (Exception ex)
		{
			logger.error(buf.toString());
			throw ex;
		}
		finally
		{
			release(rs, psmt, con);
		}
		return list;  
	}


	/**
	 * 맵핑 테이블 목록을 조회한다.
	 * @param master_id
	 * @return ArrayList 목록리스트
	 * @throws DASException
	 */
	public ArrayList getMappingList(String master_id) throws DASException
	{
		Connection con = null;

		StringBuffer buf = new StringBuffer();
		buf.append("\n SELECT A.CT_ID, A.PGM_ID, A.MASTER_ID, A.CN_ID, A.CT_SEQ,  ");
		buf.append("\n			A.S_DURATION, A.E_DURATION, B.REG_DT, A.REGRID, A.MODRID, ");
		buf.append("\n			A.MOD_DT, A.CN_SEQ, B.CT_NM, C.CN_NM ");
		buf.append("\n FROM DAS.CONTENTS_MAPP_TBL A ");
		buf.append("\n INNER JOIN DAS.CONTENTS_TBL B ON B.CT_ID = A.CT_ID ");
		buf.append("\n INNER JOIN DAS.CORNER_TBL C ON C.CN_ID = A.CN_ID ");
		buf.append("\n WHERE A.MASTER_ID = " + master_id);
		buf.append("\n  and (A.del_dd is null or A.del_dd = '') ");
		buf.append("\n ORDER BY A.CT_SEQ, A.S_DURATION ");
		buf.append("\n WITH UR	 ");

		PreparedStatement psmt = null;
		ResultSet rs = null;
		ArrayList list = new ArrayList();
		try
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######getMappingList######## con : " + con);
			psmt = con.prepareStatement(buf.toString());

			rs = psmt.executeQuery();

			while(rs.next()) {
				MappingDO mappingDO = new MappingDO();

				mappingDO.setCt_id(rs.getString("CT_ID"));
				mappingDO.setPgm_id(rs.getString("PGM_ID"));
				mappingDO.setMaster_id(rs.getString("MASTER_ID"));
				mappingDO.setCn_id(rs.getString("CN_ID"));
				mappingDO.setCt_seq(rs.getString("CT_SEQ"));
				mappingDO.setS_duration(rs.getString("S_DURATION"));
				mappingDO.setE_duration(rs.getString("E_DURATION"));
				mappingDO.setReg_dt(rs.getString("REG_DT"));
				mappingDO.setRegrid(rs.getString("REGRID"));
				mappingDO.setModrid(rs.getString("MODRID"));
				mappingDO.setMod_dt(rs.getString("MOD_DT"));
				mappingDO.setCn_seq(rs.getString("CN_SEQ"));
				mappingDO.setCt_nm(rs.getString("CT_NM"));
				mappingDO.setCn_nm(rs.getString("CN_NM"));

				list.add(mappingDO);
			}
		}
		catch (Exception ex)
		{
			logger.error(buf.toString());

			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "getMappingList11 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, con);
		}
		return list;
	}

	/**
	 * 콘텐트 멥 정보를 저장한다.
	 * @param beans 저장할 목록
	 * @param commonDO
	 * @return count	삭제 count
	 * @throws Exception 
	 */
	public int insertMappinfo(String master_id, String cn_id, String ct_id, ArrayList beans, DASCommonDO commonDO) throws Exception
	{

		Connection con = null;
		PreparedStatement stmt = null;
		PreparedStatement stmt1 = null;
		PreparedStatement stmt2 = null;
		PreparedStatement stmt3 = null;
		PreparedStatement stmt4 = null;
		PreparedStatement stmt5 = null;
		ResultSet rs = null;

		StringBuffer buf10 = new StringBuffer();
		StringBuffer buf1 = new StringBuffer();
		StringBuffer buf4 = new StringBuffer();
		StringBuffer buf = new StringBuffer();
		StringBuffer buf2 = new StringBuffer();

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######insertMappinfo######## con : " + con);
			con.setAutoCommit(false);
			List cn_idd = new ArrayList();

			if (cn_id != null && !cn_id.equals("")) {
				StringTokenizer st = new StringTokenizer(cn_id);

				while(st.hasMoreElements()){
					cn_idd.add(st.nextToken(",").trim());
				}
			}

			for (int i = 0; i < cn_idd.size(); i++) {
				// mapp 테이블을 삭제한다

				buf10.append("\n select count(*) as cnt from das.CONTENTS_MAPP_TBL where cn_id = " + cn_idd.get(i).toString() + " and master_id != " + master_id) ;
				buf10.append("\n and (del_dd is null or del_dd = '')");

				stmt5 = con.prepareStatement(buf10.toString());

				rs = stmt5.executeQuery();
				int cnt = 0;

				if(rs.next()) {
					cnt = rs.getInt("cnt");
				}

				if (cnt != 0) {
					if (!"".equals(cn_id)) {
						//코너 테이블을 삭제 한다.

						buf.append("\n delete from das.CORNER_TBL where cn_id = " + cn_idd.get(i).toString());

						stmt = con.prepareStatement(buf.toString());

						int count1 = stmt.executeUpdate();
					}
				}
			}

			// mapp 테이블을 삭제한다

			buf1.append("\n delete from das.CONTENTS_MAPP_TBL where master_id= " + master_id);

			stmt1 = con.prepareStatement(buf1.toString());

			int index = 0;
			int count = stmt1.executeUpdate();

			if (!"".equals(ct_id)) {
				// ERP_D_TAPEITEM_TBL 테이블의 인제스트 상태를 빈공간 3개를 준다.

				buf2.append("\n update DAS.D_TAPEITEM_TBL A SET A.INGEST_STATUS = '   ' ");
				buf2.append("\n WHERE A.TAPE_ITEM_ID = (SELECT B.TAPE_ITEM_ID FROM DAS.METADAT_MST_TBL B WHERE B.MASTER_ID = " + master_id + ") ");

				stmt3 = con.prepareStatement(buf2.toString());

				int count2 = stmt3.executeUpdate();
			}

			// mapp 데이터를 추가 한다
			for (int i=0; i<beans.size(); i++) {
				MappingDO mappingDO = (MappingDO)beans.get(i);

				String query = ExternalStatement.insertMappinfoQuery();
				stmt2 = con.prepareStatement(query);

				index= 0;
				//				for (int j=0; j<beans.size(); j++) {
				//					MappingDO mappingDO2 = (MappingDO)beans.get(j);
				//					if (Integer.parseInt(mappingDO.getCt_seq()) > Integer.parseInt(mappingDO2.getCt_seq()) && !mappingDO.getCt_id().equals(mappingDO2.getCt_id())) {
				//						idx++;
				//					}
				//				}
				stmt2.setInt(++index, Integer.parseInt(mappingDO.getCt_seq()));
				stmt2.setString(++index, mappingDO.getReg_dt());
				stmt2.setString(++index, CalendarUtil.getDateTime("yyyyMMddHHmmss"));  
				stmt2.setLong(++index, Long.parseLong(mappingDO.getS_duration())); 
				stmt2.setLong(++index, Long.parseLong(mappingDO.getE_duration()));
				stmt2.setLong(++index, Long.parseLong(mappingDO.getMaster_id()));
				stmt2.setLong(++index, Long.parseLong(mappingDO.getCt_id()));
				stmt2.setLong(++index, Long.parseLong(mappingDO.getPgm_id()));
				stmt2.setLong(++index, Long.parseLong(mappingDO.getCn_id()));
				stmt2.setString(++index, mappingDO.getRegrid());
				stmt2.setString(++index, commonDO.getUserId());
				stmt2.setInt(++index, Integer.parseInt(mappingDO.getCn_seq()));

				stmt2.executeUpdate();


				buf4.append("\n update DAS.CONTENTS_TBL A SET A.CT_SEQ = " + mappingDO.getCt_seq());
				buf4.append("\n WHERE A.CT_ID = " + mappingDO.getCt_id());

				stmt4 = con.prepareStatement(buf4.toString());

				int count4 = stmt4.executeUpdate();

				release(null, stmt4, null);
				release(null, stmt2, null);
			}

			if (!"".equals(ct_id)) {
				StringTokenizer st = new StringTokenizer(ct_id);
				while(st.hasMoreElements()) {
					String xml = st.nextToken(",").trim() + "," + commonDO.getUserId();
					String str = "";
					boolean _result = false;
					//					ServiceNevigatorIF port = new ServiceNevigatorService_Impl().getServiceNevigatorIFPort();
					//str = port.downloadService(xml);
					//str = port.archiveService(xml);
					//str = port.archiveSchedulerService(xml);
					//str = port.fileIngestService(xml);
					//					str = port.deleteContentService(xml);
				}
			}

			con.commit();

			return count;

		} 


		catch (Exception e) 
		{
			logger.error(buf2.toString());
			logger.error(buf.toString());
			logger.error(buf1.toString());
			logger.error(buf4.toString());
			logger.error(buf10.toString());

			if(con != null)
			{
				try {
					con.rollback();
				} catch (SQLException e1) {
					// TODO 자동 생성된 catch 블록
					logger.error(e1);
				}
			}


			throw e;
		}
		finally
		{
			try {
				con.setAutoCommit(true);
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				logger.error(e);
			}
			release(null, stmt, null);
			release(null, stmt1, null);
			release(null, stmt2, null);
			release(null, stmt3, null);
			release(null, stmt4, null);
			release(rs, stmt5, con);
		}

	}

	/**
	 * 첨부파일을 삭제한다.
	 * @param attachFilename 삭제할 파일 이름	
	 * @param file_type 파일 타입
	 * @return clf_cd	구분
	 * @throws DASException
	 */
	public int deleteAttachFile(String attachFilename, String file_type, String clf_cd) throws DASException
	{	
		//		 필요한 변수들
		StringBuffer buf = new StringBuffer();
		StringBuffer strResultBuffer = new StringBuffer();

		//		서버에 실제로 저장된 이름을 가져온다.
		StringBuffer buf2 = new StringBuffer();
		buf2.append("\n select ORG_FILE_NM,REGRID, reg_dt ,fl_path from DAS.ATTCH_TBL ");
		buf2.append("\n where ATTC_FILE_TYPE_CD= ? and ATTC_CLF_CD = ? and ORG_FILE_NM = ?"); 

		// SQL 구성		
		buf.append("\n delete from DAS.ATTCH_TBL");
		buf.append("\n where ATTC_FILE_TYPE_CD= ? and ATTC_CLF_CD = ? and ORG_FILE_NM = ?"); 

		Connection con = null;
		PreparedStatement psmt = null;
		ResultSet rs = null;
		try
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######deleteAttachFile######## con : " + con);
			//con.setAutoCommit(false);

			// 서버에 저장된 파일명을 가져온다.
			psmt = con.prepareStatement(buf2.toString());
			int index = 0;		

			psmt.setString(++index, file_type);
			psmt.setString(++index, clf_cd);
			psmt.setString(++index, attachFilename);
			rs = psmt.executeQuery();
			rs.next();
			String fl_nm = rs.getString("ORG_FILE_NM");
			String reg_id = rs.getString("REGRID");
			String reg_dt = rs.getString("REG_DT");
			String fl_path = rs.getString("fl_path");
			psmt = con.prepareStatement(buf.toString());
			index = 0;		

			psmt.setString(++index, file_type);
			psmt.setString(++index, clf_cd);
			psmt.setString(++index, attachFilename);
			psmt.executeUpdate();

			// 파일 삭제(DB에서 삭제에 성공했을 때만)
			//String strDeleteFilePath = "/was/jeus5/webhome/app_home/DAS/mp4/attach/" + file_type.trim() + "/" + clf_cd.trim() + "/" + attachFilename.trim();
			//String strDeleteFilePath = "/mp4/attach/" + file_type.trim() + "/" + clf_cd.trim() + "/" + attachFilename.trim();
			//  String strDeleteFilePath = "/mp4/attach/" + file_type.trim() + "/" + clf_cd.trim() + "/" + fl_nm.trim();
			String strDeleteFile = "";
			String strDeleteFilePath = "";


			if(fl_path.equals("")){
				strDeleteFile = "/"+dasHandler.getProperty("WINMP4")+"/attach/"  + clf_cd.trim() + "/"+reg_id + "/"+reg_dt ;
				strDeleteFilePath=  "/"+dasHandler.getProperty("WINMP4")+"/attach/"  + clf_cd.trim() + "/"+reg_id + "/"+reg_dt  + "/"+ fl_nm.trim();
			}else{
				strDeleteFile =fl_path;
				strDeleteFilePath =fl_path+fl_nm;
			}

			if(!strDeleteFilePath.startsWith("/")) strDeleteFilePath = "/"+strDeleteFilePath;

			File file = new File(strDeleteFilePath);
			//	File folder = new File(strDeleteFile);
			boolean bFileExist = false;			
			try
			{
				bFileExist = file.exists();

			}
			catch (SecurityException e)
			{            
				con.rollback();

				return 0;
			}

			if (true == bFileExist)
			{
				try {
					Thread.sleep(1000);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					logger.error(e);
				}

				//logger.debug("file.delete() " +file.delete());
				if (file.delete())  
				{
					//	folder.delete();
					con.commit();

					//logger.debug("정상 삭제된 폴더 : " +strDeleteFile );

					return 1;
				}            		
				else
				{
					con.rollback();            	
					return 0;
				}            	
			}
			else
			{
				con.rollback();            	
				//logger.debug("존재하지 않아 롤백된폴더 : " + strDeleteFile);
				return 0;
			}

		}
		catch (Exception ex) 
		{
			logger.error(buf2.toString());
			logger.error(buf.toString());
			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "deleteAttachFile 에러 : " + buf.toString(), ex);
			throw exception;
		} 

		finally
		{
			try {
				con.setAutoCommit(true);
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				logger.error(e);
			}
			release(rs, psmt, con);
		}
	}



	/**
	 * 사진을 다운로드했다는 기록을 남긴다.(통계를 위해서) 
	 * @param Phot_ID			사진 ID
	 * @param REQ_ID			요청자 ID
	 * @param PGM_ID			프로그램 ID
	 * @param check				1 : 다운로드, 2 : 삭제 
	 * @return 입력한 데이터 수
	 */
	public int InsertPhotoDownloadInfo(long Phot_ID, String REQ_ID, long PGM_ID) throws DASException
	{		
		// 필요한 변수들
		StringBuffer buf1 = new StringBuffer();
		StringBuffer buf2 = new StringBuffer();
		StringBuffer buf3 = new StringBuffer();
		boolean bResult = false;

		String SUBJ = "";			// 사진 제목
		String L_CD = "";			// PGM의 대분류
		String M_CD = "";			// PGM의 중분류
		String S_CD = "";			// PGM의 소분류		

		Connection con = null;
		PreparedStatement psmt1 = null;
		PreparedStatement psmt2 = null;
		PreparedStatement psmt3 = null;
		ResultSet rs = null;        

		//      포토정보 가져오기
		//        try
		//        {
		//        	con = DBService.getInstance().getConnection();
		//        	      
		//        	// SQL 구성		
		//    		buf1.append(" select SUBJ");
		//    		buf1.append(" from DAS.PHOT_TBL");
		//    		buf1.append(" where PHOT_REG_ID = ? ");
		//    		buf1.append(" with ur");
		//            psmt1 = con.prepareStatement(buf1.toString());
		//            
		//            int index = 0;			
		//			psmt1.setLong(++index, Phot_ID);
		//            rs = psmt1.executeQuery();
		//            
		//            if (rs.next())
		//            {
		//            	SUBJ = rs.getString("SUBJ"); 
		//            	bResult = true;
		//            }
		//            
		//            if (false == bResult)
		//            	return 0;
		//        }
		//        catch (NamingException ex) 
		//		{
		//			// TODO 자동 생성된 catch 블록
		//			ex.printStackTrace();
		//	        DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "InsertPhotoDownloadInfo 에러 : " + buf1.toString(), ex);
		//	        throw exception;
		//		} 
		//        catch (SQLException ex)
		//        {
		//        	ex.printStackTrace();
		//			
		//	        DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "InsertPhotoDownloadInfo 에러 : " + buf1.toString(), ex);
		//	        throw exception;
		//        }
		//        finally
		//        {
		//            release(null, psmt1, null);
		//        }
		//        
		//        // 프로그램 정보 가져오기
		//        try
		//        {         
		//        	// SQL 구성		
		//        	buf2.append(" select CTGR_L_CD, CTGR_M_CD, CTGR_S_CD");
		//    		buf2.append(" from DAS.PGM_INFO_TBL");
		//    		buf2.append(" where PGM_ID = ? ");
		//    		buf2.append(" with ur");
		//            psmt2 = con.prepareStatement(buf2.toString());
		//            
		//            int index = 0;			
		//			psmt2.setLong(++index, PGM_ID);
		//            rs = psmt2.executeQuery();
		//            
		//            if (rs.next())
		//            {
		//            	L_CD = rs.getString("CTGR_L_CD"); 
		//            	M_CD = rs.getString("CTGR_M_CD");
		//            	S_CD = rs.getString("CTGR_S_CD");
		//            	bResult = true;
		//            }
		//            
		//            if (false == bResult)
		//            	return 0;
		//        }      
		//        catch (SQLException ex)
		//        {
		//        	ex.printStackTrace();
		//			
		//	        DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "InsertPhotoDownloadInfo 에러 : " + buf2.toString(), ex);
		//	        throw exception;	        
		//        }
		//        finally
		//        {
		//            release(rs, psmt2, null);
		//        }
		//        
		// 이제 드디어 Insert
		try
		{         
			con = DBService.getInstance().getConnection();
			//logger.debug("######InsertPhotoDownloadInfo######## con : " + con);

			/*	// SQL 구성		
	        	buf3.append(" insert into DAS.PHOT_DOWN_TBL ");
	    		buf3.append(" (PHOT_ID, REQ_ID, REQ_DT, SUBJ, PGM_ID, CTGR_L_CD, CTGR_M_CD, CTGR_S_CD, CHECK)");
	    		buf3.append(" values ( ?, ?, ?, ?, ?, ?, ?, ?, ?) ");
			 */

			String seq = getNextSquence(con, "SEQ_PHOTO_DOWN_SEQ");
			buf3.append("\n insert into DAS.PHOT_DOWN_TBL ");
			buf3.append("\n (seq, PHOT_ID, REQ_ID, REQ_DT)");
			buf3.append("\n values ( ?, ?, ?,?) ");
			//    		
			int num = Integer.parseInt(seq);

			psmt3 = con.prepareStatement(buf3.toString());

			//          현재 시간을 받아온다.
			String REQ_DT = CalendarUtil.getDateTime("yyyyMMdd");

			int index = 0;
			psmt3.setInt(++index, num);
			psmt3.setLong(++index, Phot_ID);
			psmt3.setString(++index, REQ_ID);
			psmt3.setString(++index, REQ_DT);

			int count = psmt3.executeUpdate();
			return count;
		}      
		catch (Exception ex) 
		{
			logger.error(buf1.toString());
			logger.error(buf2.toString());
			logger.error(buf3.toString());
			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "InsertPhotoDownloadInfo 에러 : " + buf1.toString(), ex);
			throw exception;
		} 

		finally
		{
			release(null, psmt1, null);
			release(null, psmt2, null);
			release(rs, psmt3, con);
		}


	}

	/**
	 * CONTENTS_INST_TBL 수정한다
	 * @param Master_ID			마스터 ID
	 * @param aud_type_cd			오디오 타입 코드
	 * @param record_type_cd	     녹음 방식 코드
	 * @param me_cd				me 분리 코드
	 * @param color_cd			색상코드
	 * @return updatecount
	 */
	public int UpdateContentMediaInfo(long Master_ID, String aud_type_cd, 
			String record_type_cd, String me_cd, String color_cd) throws DASException
			{	
		// 필요한 변수들
		StringBuffer buf = new StringBuffer();
		StringBuffer strResultBuffer = new StringBuffer();

		// SQL 구성		
		buf.append("\n update DAS.CONTENTS_INST_TBL set AUD_TYPE_CD = ?, ");
		buf.append("\n RECORD_TYPE_CD = ?, ME_CD = ?, COLOR_CD = ?");

		buf.append("\n where CT_ID in (select CT_ID from DAS.CONTENTS_MAPP_TBL ");
		buf.append("\n where MASTER_ID = ?)");

		Connection con = null;
		PreparedStatement psmt = null;
		ResultSet rs = null;        

		try
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######UpdateContentMediaInfo######## con : " + con);
			psmt = con.prepareStatement(buf.toString());

			int index = 0;			
			psmt.setString(++index, aud_type_cd);
			psmt.setString(++index, record_type_cd);
			psmt.setString(++index, me_cd);
			psmt.setString(++index, color_cd);

			psmt.setLong(++index, Master_ID);

			int cApplied = psmt.executeUpdate();
			return cApplied;            
		}
		catch (Exception ex) 
		{
			logger.error(buf.toString());
			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "UpdateContentMediaInfo 에러 : " + buf.toString(), ex);
			throw exception;
		} 

		finally
		{
			release(rs, psmt, con);
		}
			}


	/**
	 * CONTENTS_INST_TBL 수정한다
	 * @param Master_ID			마스터 ID
	 * @param aud_type_cd			오디오 타입 코드
	 * @param record_type_cd	     녹음 방식 코드
	 * @param me_cd				me 분리 코드
	 * @param color_cd			색상코드
	 * @param frm_per_Sec			초당프레임
	 * @param audio_bdwt			오디오대역폭
	 * @param bit_rate			비트당 전송률
	 * @param aud_samp_frq			오디오 샘플코드
	 * @return updatecount
	 */
	public int UpdateContentMedia(long Master_ID, String aud_type_cd, 
			String record_type_cd, String me_cd, String color_cd,String frm_per_Sec,
			String audio_bdwt, String bit_rate, String aud_samp_frq) throws DASException
			{	
		// 필요한 변수들
		StringBuffer buf = new StringBuffer();
		StringBuffer strResultBuffer = new StringBuffer();

		// SQL 구성		
		buf.append("\n update DAS.CONTENTS_INST_TBL set AUD_TYPE_CD = ?, ");
		buf.append("\n RECORD_TYPE_CD = ?, ME_CD = ?, COLOR_CD = ?");
		buf.append("\n ,FRM_PER_SEC=?,AUDIO_BDWT=?,BIT_RT=?, AUD_SAMP_FRQ=?");

		buf.append("\n where CT_ID in (select CT_ID from DAS.CONTENTS_MAPP_TBL ");
		buf.append("\n where MASTER_ID = ?)");

		Connection con = null;
		PreparedStatement psmt = null;
		ResultSet rs = null;        

		try
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######UpdateContentMedia######## con : " + con);
			psmt = con.prepareStatement(buf.toString());

			int index = 0;			
			psmt.setString(++index, aud_type_cd);
			psmt.setString(++index, record_type_cd);
			psmt.setString(++index, me_cd);
			psmt.setString(++index, color_cd);
			psmt.setString(++index, frm_per_Sec);
			psmt.setString(++index, audio_bdwt);
			psmt.setString(++index, bit_rate);
			psmt.setString(++index, aud_samp_frq);
			psmt.setLong(++index, Master_ID);

			int cApplied = psmt.executeUpdate();
			return cApplied;            
		}
		catch (Exception ex)
		{
			logger.error(buf.toString());

			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "UpdateContentMediaInfo 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, con);
		}
			}



	protected Document getDocument(String pXMLContents) {
		Document doc = null;
		try {
			DocumentBuilderFactory mDocBuilderFactory = DocumentBuilderFactory
					.newInstance();
			DocumentBuilder mDocBuilder = mDocBuilderFactory
					.newDocumentBuilder();
			if (pXMLContents == null) {
				doc = mDocBuilder.newDocument();
			} else {
				InputStream _is = new ByteArrayInputStream(pXMLContents.getBytes("utf-8"));
				doc = mDocBuilder.parse(_is);
			}
		} catch (Exception e) {
			logger.error(pXMLContents);
		}
		return doc;		
	}
	/**
	 * XML로 각 MasterID별 상태를 받아서 업데이트한다.	 *
	 * @param strXML
	 * @return updaetcount
	 * @throws RemoteException
	 */
	public int UpdateDatacdWithMasterid_XML(String strXML) throws DASException
	{
		/*		 
			 <DATA>
			 	<MASTER_DATA>
			 		<MASTER_ID>2005</MASTER_ID>
			 		<DATA_STAT_CD>003</DATA_STAT_CD>
			 		<LOCK>L</LOCK>		L : Locked.   U : Unlocked.
			 	</MASTER_DATA>
			 	<MASTER_DATA>		 
			 		<MASTER_ID>2006</MASTER_ID>
			 		<DATA_STAT_CD></DATA_STAT_CD>	<- 만약 DATA_STAT_CD가 빈칸이면 Lock 설정만 한다. 
			 		<LOCK>U</LOCK>		L : Locked.   U : Unlocked.
			 	</MASTER_DATA>
			 </DATA>
		 */

		Document document = getDocument(strXML);
		Element _rootElement = document.getDocumentElement();
		NodeList _nodeList = _rootElement.getChildNodes();

		Connection con = null;
		PreparedStatement psmt = null;
		StringBuffer buf = new StringBuffer();
		StringBuffer strResultBuffer = new StringBuffer();

		try
		{        	
			con = DBService.getInstance().getConnection();
			///logger.debug("######UpdateDatacdWithMasterid_XML######## con : " + con);
			//con.setAutoCommit(false);

			int _length = _nodeList.getLength();
			for(int i = 0; i < _length; i++) 
			{       	
				long nMaster_ID = 0;
				String strDATA_STAT_CD = "";

				Node MasterDataNode = _nodeList.item(i);
				NodeList nodes = MasterDataNode.getChildNodes();			
				for (int j=0; j < nodes.getLength(); j++)
				{
					Node datanode = nodes.item(j);

					String _nodeName = datanode.getNodeName() ;
					if(_nodeName.equals("MASTER_ID"))
						nMaster_ID = Long.parseLong(datanode.getNodeValue());

					else if(_nodeName.equals("DATA_STAT_CD"))
						strDATA_STAT_CD = datanode.getNodeValue();				
				}



				// SQL 구성		
				buf.append("\n update das.metadat_mst_tbl set DATA_STAT_CD = ? where MASTER_ID = ? ");			



				psmt = con.prepareStatement(buf.toString());

				int index = 0;
				psmt.setString(++index, strDATA_STAT_CD);
				psmt.setLong(++index, nMaster_ID);

				int cApplied = psmt.executeUpdate();
				return cApplied;
			}	// for
		}
		catch (Exception ex) 
		{
			logger.error(buf.toString());
			if(con != null)
			{
				try 
				{
					con.rollback();
				} catch (SQLException e1) 
				{				
					logger.error(e1);
				}
			}
			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "UpdateDatacdWithMasterid_XML 에러 : " + strXML, ex);
			throw exception;
		} 

		finally
		{
			try {
				con.setAutoCommit(true);
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				logger.error(e);
			}
			release(null, psmt, con);
		}

		if(con != null)
		{
			try 
			{
				con.commit();
			} catch (SQLException e1) 
			{				
				logger.error(e1);
			}
		}

		return 0;
	}

	// ERP에 넣기 위해 새로운 TapeID를 가져온다.
	private String GetERPNewTapeID() throws DASException
	{
		Connection con = null;
		PreparedStatement psmt = null;
		ResultSet rs = null;

		String strNewTapeID = "";		// TapeID        
		StringBuffer buf = new StringBuffer();

		// SQL 구성		
		buf.append("\n select (nextval for DAT.D_TAPE_SEQ) as NEW_TAPE_ID ");
		buf.append("\n from SYSIBM.SYSDUMMY1 with ur");

		try
		{
			con = DBService.getInstance().getErpConnection();
			//logger.debug("######GetERPNewTapeID######## con : " + con);

			psmt = con.prepareStatement(buf.toString());
			rs = psmt.executeQuery();

			if (rs.next())
			{            	
				strNewTapeID = rs.getLong("NEW_TAPE_ID") + "";


				int nTapeIDLength = strNewTapeID.length();
				switch (nTapeIDLength)
				{
				case 0 : strNewTapeID = "000000"; break;
				case 1 : strNewTapeID = "00000" + strNewTapeID; break;
				case 2 : strNewTapeID = "0000" + strNewTapeID; break;
				case 3 : strNewTapeID = "000" + strNewTapeID; break;
				case 4 : strNewTapeID = "00" + strNewTapeID; break;
				case 5 : strNewTapeID = "0" + strNewTapeID; break;
				}

				// 앞에 년도를 붙여야 한다.(정일영씨)
				String strCurDate = CalendarUtil.getDateTime("yyyyMM");            
				return strCurDate + strNewTapeID; 
			}
			else
			{

				return "";
			}
		}

		catch (Exception ex)
		{
			logger.error(buf.toString());

			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "GetERPNewTapeID 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, con);
		}		
	}


	// ERP에 넣기 위해 새로운 TapeItemID를 가져온다.
	private String GetERPNewTapeItemID() throws DASException
	{
		Connection con = null;
		PreparedStatement psmt = null;
		ResultSet rs = null;

		String strNewTapeItemID = "";		// TapeItemID
		StringBuffer buf = new StringBuffer();

		// SQL 구성		
		buf.append("\n select (nextval for DAT.D_TAPEITEM_SEQ) as NEW_TAPEITEM_ID ");
		buf.append("\n from SYSIBM.SYSDUMMY1 with ur");

		try
		{
			con = DBService.getInstance().getErpConnection();
			//logger.debug("######GetERPNewTapeItemID######## con : " + con);

			psmt = con.prepareStatement(buf.toString());
			rs = psmt.executeQuery();

			if (rs.next())
			{            	
				strNewTapeItemID = rs.getLong("NEW_TAPEITEM_ID") + "";


				int nTapeIDLength = strNewTapeItemID.length();
				switch (nTapeIDLength)
				{
				case 0 : strNewTapeItemID = "000000"; break;
				case 1 : strNewTapeItemID = "00000" + strNewTapeItemID; break;
				case 2 : strNewTapeItemID = "0000" + strNewTapeItemID; break;
				case 3 : strNewTapeItemID = "000" + strNewTapeItemID; break;
				case 4 : strNewTapeItemID = "00" + strNewTapeItemID; break;
				case 5 : strNewTapeItemID = "0" + strNewTapeItemID; break;
				}

				// 앞에 년도를 붙여야 한다.(정일영씨)
				String strCurDate = CalendarUtil.getDateTime("yyyyMM");            
				return strCurDate + strNewTapeItemID; 
			}
			else
			{

				return "";
			}
		}

		catch (Exception ex)
		{
			logger.error(buf.toString());

			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "GetERPNewTapeItemID 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, con);
		}		
	}

	//	 ERP에 넣기 위해 새로운 청구번호를 가져온다.
	private String GetERPNewREQNO(String strYear) throws DASException
	{
		Connection con = null;
		PreparedStatement psmt = null;
		ResultSet rs = null;

		// 파라미터 검사
		if (strYear.trim().length() == 0)
		{

			return "";
		}
		String strNewREQNO = "";		// 청구번호                
		StringBuffer buf = new StringBuffer();

		// SQL 구성		
		buf.append("\n select COALESCE(int(max(substr(req_no, 6))), 0) + 1 as NEW_REQ_NO");
		buf.append("\n from DAT.D_TAPE_TBL ");
		//buf.append(" where left(CRTE_DD, 4)= ? ");
		buf.append("\n where left(REQ_NO, 4) = ? ");
		buf.append("\n with ur ");

		try 
		{
			con = DBService.getInstance().getErpConnection();        	
			//logger.debug("######GetERPNewREQNO######## con : " + con);

			psmt = con.prepareStatement(buf.toString());
			int nIndex = 0;

			//psmt.setString(++nIndex, strYear);
			psmt.setString(++nIndex, "DA" + strYear.substring(2));
			rs = psmt.executeQuery();

			if (rs.next())
			{            	
				strNewREQNO = rs.getLong("NEW_REQ_NO") + "";

				if (strNewREQNO.length() == 1)
					strNewREQNO = "000" + strNewREQNO;
				else if (strNewREQNO.length() == 2)
					strNewREQNO = "00" + strNewREQNO;
				else if (strNewREQNO.length() == 3)
					strNewREQNO = "0" + strNewREQNO;


				return "DA" + strYear.substring(2) + "-" + strNewREQNO; 
			}
			else
			{

				return "";
			}
		}

		catch (Exception ex)
		{
			logger.error(buf.toString());

			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "GetERPNewTapeID 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, con);
		}		
	}

	//	 XML노드의 value를 HashMap에 추가한다.
	private static void SetERPTapeInfoData(HashMap hm, String strKeyname, Node node)
	{
		if (null == node)
		{
			hm.put(strKeyname, "");

			return;
		}

		if (null == node.getChildNodes())
		{
			hm.put(strKeyname, "");

			return;
		}

		if (null == node.getChildNodes().item(0))
		{
			hm.put(strKeyname, "");        

			return;
		}

		if (null != node.getChildNodes().item(0).getNodeValue())
			hm.put(strKeyname, node.getChildNodes().item(0).getNodeValue());
	}


	// XML 문자열을 파싱한다.
	private static HashMap parseERPTapeInfoXML(String _xml)
	{
		Document document = null;
		DocumentBuilderFactory mDocBuilderFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder builder;

		HashMap hm = new HashMap();

		try
		{
			DocumentBuilder mDocBuilder = mDocBuilderFactory.newDocumentBuilder();
			InputStream is = new ByteArrayInputStream(_xml.getBytes("utf-8"));
			document = mDocBuilder.parse(is); 
			Element rootElement = document.getDocumentElement();
			NodeList nodeList = rootElement.getChildNodes();

			// 데이터 갯수만큼 루프를 돈다.
			int nLength = nodeList.getLength();
			for (int i=0; i < nLength; i++)
			{
				Node node = nodeList.item(i);
				if ( (node != null) && (node.getNodeName().equals("year")) )
					SetERPTapeInfoData(hm, "year", node);                    
				else if ( (node != null) && (node.getNodeName().equals("TAPE_MEDIA_CLF_CD")) )                    
					SetERPTapeInfoData(hm, "TAPE_MEDIA_CLF_CD", node);                    
				else if ( (node != null) && (node.getNodeName().equals("Username")) )
					SetERPTapeInfoData(hm, "Username", node);
				else if ( (node != null) && (node.getNodeName().equals("TAPE_CLF")) )
					SetERPTapeInfoData(hm, "TAPE_CLF", node);
				else if ( (node != null) && (node.getNodeName().equals("d1")) )
					SetERPTapeInfoData(hm, "d1", node);
				else if ( (node != null) && (node.getNodeName().equals("UserID")) )
					SetERPTapeInfoData(hm, "UserID", node);

			}
			return hm;
		}
		catch(Exception e)
		{
			return null;
		}        
	}


	/**
	 * XML로 테이프 정보를 받아서 ERP에 tape정보, tape item 정보를 추가한다.	 *
	 * @param strXML
	 * @return
	 * @throws Exception 
	 * @throws RemoteException
	 */
	public String insertERPTapeInfo(Das das) throws Exception
	{
		String strNewTapeID = "";		// TapeID		
		String strNewReqNO = "";		// 청구번호
		String strNewTapeItemID = "";	// Tape Item ID
		String strYear = das.getYear();			// 사용자가 선택한 년도
		String strTape_Media_clf_cd = das.getTapeMediaClfCd();
		String strUsername = das.getUserName();		// 버튼을 누른 사용자 이름
		String strTapeClf = das.getTapeClf();			// TAPE_CLF
		String strUserID = das.getUserId();

		logger.debug("strTape_Media_clf_cd  " + strTape_Media_clf_cd);
		logger.debug("strUsername  " + strUsername);
		logger.debug("strTapeClf  "+ strTapeClf);
		logger.debug("strUserID  "+ strUserID);
		///--- 0. XML을 분석해서 필요한 값을 가져온다. ---///

		if (strTape_Media_clf_cd.length() <= 0)
		{

			return "";
		}        

		if (strYear.length() <= 0)
		{

			return "";
		}

		if (strUsername.length() <= 0)
		{

			return "";
		}

		if (strUsername.length() <= 0)
		{
			logger.debug("[insertERPTapeInfo] TAPE_CLF 값이 없습니다.");
			return "";
		}

		if (strUserID.length() <= 0)
		{
			logger.debug("[insertERPTapeInfo] UserID 값이 없습니다.");
			return "";
		}
		///--- 0. 끝. XML을 분석해서 필요한 값을 가져온다. ---///


		// 1. TapeID를 가져온다.
		strNewTapeID = GetERPNewTapeID();
		if (strNewTapeID.length() <= 0)
		{
			logger.debug("[insertERPTapeInfo] TapeID값 가져오기 실패");
			return "";
		}	

		// 2. 청구번호를 취득한다.
		strNewReqNO = GetERPNewREQNO(strYear);
		if (strNewReqNO.length() <= 0)
		{
			logger.debug("[insertERPTapeInfo] 청구번호 취득 실패");
			return "";
		}

		// 1-2. TapeItemID를 가져온다.
		strNewTapeItemID = GetERPNewTapeItemID();
		if (strNewTapeItemID.length() <= 0)
		{
			logger.debug("[insertERPTapeInfo] TapeItemID값 가져오기 실패");
			return "";
		}	

		Connection con = null;

		PreparedStatement stmt = null;
		PreparedStatement stmt2 = null;
		PreparedStatement stmt3 = null;

		ResultSet rs = null;

		StringBuffer buf1 = new StringBuffer();
		StringBuffer buf2 = new StringBuffer();

		try 
		{        	 
			String strCurDate = CalendarUtil.getDateTime("yyyyMMdd");
			String strCurMonth = CalendarUtil.getDateTime("yyyyMM");

			con = DBService.getInstance().getErpConnection();

			con.setAutoCommit(false);

			///--- 3. 테이프 정보 등록 ---///

			buf1.append("insert into DAT.D_TAPE_TBL ");
			buf1.append(" \n (TAPE_ID, TAPE_KIND, CRTE_DD, REQ_NO, RTG_DD, REG_STAT, GATH_TYPE, GATH_DD, KEEP_DEPT, COPY_KEEP) \n values ");
			buf1.append(" \n ( ");
			buf1.append(" ?, ?, ?, ?, ? , '001', '001', ?, '001', '' ");
			buf1.append(" ) ");

			stmt = con.prepareStatement(buf1.toString());

			int index = 0;
			stmt.setString(++index, strNewTapeID); 
			stmt.setString(++index, strTape_Media_clf_cd);
			stmt.setString(++index, strCurDate);
			stmt.setString(++index, strNewReqNO);
			stmt.setString(++index, strCurDate);
			stmt.setString(++index, strCurDate);

			stmt.executeUpdate();
			///--- 3. 끝. 테이프 정보 등록  ---///

			///--- 5. 테이프 Item ID 생성 ---///

			buf2.append("insert into DAT.D_TAPEITEM_TBL ");
			buf2.append(" \n (TAPE_ITEM_ID, TAPE_ID, REQ_NO, REG_DD, REGR, DATA_STAT_CD, TAPE_CLF, ARCHIVE_DD,ENCODE_YN,ENCODE_DD ) \n values ");
			buf2.append(" \n ( ");
			buf2.append(" ?, ?, ?, ?, ?, '002', ?, ?,'Y',CHAR(BIGINT(CURRENT DATE)) ");
			buf2.append(" ) ");

			stmt2 = con.prepareStatement(buf2.toString());
			index = 0;
			stmt2.setString(++index, strNewTapeItemID);
			stmt2.setString(++index, strNewTapeID);						
			stmt2.setString(++index, strNewReqNO);
			stmt2.setString(++index, strCurDate);
			stmt2.setString(++index, strUsername);
			stmt2.setString(++index, strTapeClf);
			stmt2.setString(++index, strCurDate);
			stmt2.executeUpdate();
			///--- 5. 끝. 테이프 Item ID 생성 ---///

			///--- 6. 이력관리 테이블에 넣는다. ---///
			/*StringBuffer buf3 = new StringBuffer();
				buf3.append("insert into DAS.D_REQNOHIS_TBL ");
				buf3.append(" \n (REQ_NO, BGN_DT, END_DT, REQ_CLF, TAPE_ID, REG_DT, REGR) \n values ");
				buf3.append(" \n (?, HEX(CURRENT DATE) || HEX(CURRENT TIME), '99991231235959', '001'  ");			
				buf3.append(" \n , ?, HEX(CURRENT DATE) || HEX(CURRENT TIME), ? ");
				buf3.append(" ) ");

				stmt3 = con.prepareStatement(buf3.toString());

				index = 0;
				stmt3.setString(++index, strNewReqNO);
				stmt3.setString(++index, strNewTapeID);
				stmt3.setString(++index, strUserID);

			//	stmt3.executeUpdate();
			 *///			/--- 6. 끝. 이력관리 테이블에 넣는다. ---///

			con.commit();
		} 

		catch (Exception e) 
		{
			logger.error(buf1.toString());
			logger.error(buf2.toString());


			if(con != null)
			{
				try {
					con.rollback();
				} catch (SQLException e1) {
					// TODO 자동 생성된 catch 블록
					logger.error(e1);
				}
			}


			throw e;
		}
		finally
		{
			try {
				con.setAutoCommit(true);
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				logger.error(e);
			}
			release(null, stmt, null);
			release(null, stmt2, null);
			release(null, stmt3, con);
		}

		// 6. 테이프 Item 테이블에 Insert
		return strNewReqNO + "|" + strNewTapeID + "|" + strNewTapeItemID;		// 청구번호를 리턴한다.
	}



	/**
	 * XML로 테이프 정보를 받아서 ERP에 tape item 정보를 업데이트한다
	 * @param xml
	 * @return
	 * @throws Exception 
	 * @throws RemoteException
	 */
	public String updateERPTapeInfo(String xml) throws Exception
	{    
		///--- 0. XML을 분석해서 필요한 값을 가져온다. ---///
		Document document = null;
		DocumentBuilderFactory mDocBuilderFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder builder;

		HashMap hm = new HashMap();

		try
		{
			DocumentBuilder mDocBuilder = mDocBuilderFactory.newDocumentBuilder();
			InputStream is = new ByteArrayInputStream(xml.getBytes("utf-8"));
			document = mDocBuilder.parse(is); 
			Element rootElement = document.getDocumentElement();
			NodeList nodeList = rootElement.getChildNodes();

			// 데이터 갯수만큼 루프를 돈다. 아래 방식의 문제는 만약 아예 없는 태그인 경우 null pointer exception 에러가 난다는 것이다.
			int nLength = nodeList.getLength();
			for (int i=0; i < nLength; i++)
			{
				Node node = nodeList.item(i);
				if ( (node != null) && (node.getNodeName().equals("REQ_NO")) )
					SetERPTapeInfoData(hm, "REQ_NO", node);                    
				else if ( (node != null) && (node.getNodeName().equals("SCN_TTL")) )                    
					SetERPTapeInfoData(hm, "SCN_TTL", node);                    
				else if ( (node != null) && (node.getNodeName().equals("CMR_MAN")) )
					SetERPTapeInfoData(hm, "CMR_MAN", node);
				else if ( (node != null) && (node.getNodeName().equals("CMR_PLACE")) )
					SetERPTapeInfoData(hm, "CMR_PLACE", node);
				else if ( (node != null) && (node.getNodeName().equals("CMR_DD")) )
					SetERPTapeInfoData(hm, "CMR_DD", node);
				else if ( (node != null) && (node.getNodeName().equals("LEN")) )
					SetERPTapeInfoData(hm, "LEN", node);
				else if ( (node != null) && (node.getNodeName().equals("CASTING")) )
					SetERPTapeInfoData(hm, "CASTING", node);
				else if ( (node != null) && (node.getNodeName().equals("PRDT_CO_NM")) )
					SetERPTapeInfoData(hm, "PRDT_CO_NM", node);
				else if ( (node != null) && (node.getNodeName().equals("PRDTR")) )
					SetERPTapeInfoData(hm, "PRDTR", node);
				else if ( (node != null) && (node.getNodeName().equals("SRIS_NO")) )
					SetERPTapeInfoData(hm, "SRIS_NO", node);
				else if ( (node != null) && (node.getNodeName().equals("BRD_DD")) )
					SetERPTapeInfoData(hm, "BRD_DD", node);
				else if ( (node != null) && (node.getNodeName().equals("KEY_WORDS")) )
					SetERPTapeInfoData(hm, "KEY_WORDS", node);
				else if ( (node != null) && (node.getNodeName().equals("SNPS")) )
					SetERPTapeInfoData(hm, "SNPS", node);
				else if ( (node != null) && (node.getNodeName().equals("CPRTR")) )
					SetERPTapeInfoData(hm, "CPRTR", node);
				else if ( (node != null) && (node.getNodeName().equals("AWARD_INFO")) )
					SetERPTapeInfoData(hm, "AWARD_INFO", node);
				else if ( (node != null) && (node.getNodeName().equals("DLBR_GR")) )
					SetERPTapeInfoData(hm, "DLBR_GR", node);
				else if ( (node != null) && (node.getNodeName().equals("MC")) )
					SetERPTapeInfoData(hm, "MC", node);
				else if ( (node != null) && (node.getNodeName().equals("AUTHOR")) )
					SetERPTapeInfoData(hm, "AUTHOR", node);
				else if ( (node != null) && (node.getNodeName().equals("ORG_PRDR")) )
					SetERPTapeInfoData(hm, "ORG_PRDR", node);
				else if ( (node != null) && (node.getNodeName().equals("BGN_TIME")) )
					SetERPTapeInfoData(hm, "BGN_TIME", node);
				else if ( (node != null) && (node.getNodeName().equals("END_TIME")) )
					SetERPTapeInfoData(hm, "END_TIME", node);
				else if ( (node != null) && (node.getNodeName().equals("PGM_CD")) )
					SetERPTapeInfoData(hm, "PGM_CD", node);
				else if ( (node != null) && (node.getNodeName().equals("MUSIC_INFO")) )
					SetERPTapeInfoData(hm, "MUSIC_INFO", node);
				else if ( (node != null) && (node.getNodeName().equals("USE_GRADE_CD")) )
					SetERPTapeInfoData(hm, "USE_GRADE_CD", node);
				else if ( (node != null) && (node.getNodeName().equals("RST_CONT")) )
					SetERPTapeInfoData(hm, "RST_CONT", node);
				else if ( (node != null) && (node.getNodeName().equals("SCN_CONT")) )
					SetERPTapeInfoData(hm, "SCN_CONT", node);
				else if ( (node != null) && (node.getNodeName().equals("DEPT_CD")) )
					SetERPTapeInfoData(hm, "DEPT_CD", node);
				else if ( (node != null) && (node.getNodeName().equals("ME_CD")) )
					SetERPTapeInfoData(hm, "ME_CD", node);

				else if ( (node != null) && (node.getNodeName().equals("PRDT_TYPE_CD")) )
					SetERPTapeInfoData(hm, "PRDT_TYPE_CD", node);
				else if ( (node != null) && (node.getNodeName().equals("ORG_PRDR")) )
					SetERPTapeInfoData(hm, "ORG_PRDR", node);
				else if ( (node != null) && (node.getNodeName().equals("COLOR_CD")) )
					SetERPTapeInfoData(hm, "COLOR_CD", node);
				else if ( (node != null) && (node.getNodeName().equals("AUDIO_CD")) )
					SetERPTapeInfoData(hm, "AUDIO_CD", node);
				else if ( (node != null) && (node.getNodeName().equals("RECORD_TYPE_CD")) )
					SetERPTapeInfoData(hm, "RECORD_TYPE_CD", node);
				else if ( (node != null) && (node.getNodeName().equals("REVIEW")) )
					SetERPTapeInfoData(hm, "REVIEW", node);
				else if ( (node != null) && (node.getNodeName().equals("DATA_KIND")) )
					SetERPTapeInfoData(hm, "DATA_KIND", node);
				else if ( (node != null) && (node.getNodeName().equals("CPRT_TYPE")) )
					SetERPTapeInfoData(hm, "CPRT_TYPE", node);
				else if ( (node != null) && (node.getNodeName().equals("SUB_TTL")) )
					SetERPTapeInfoData(hm, "SUB_TTL", node);
				else if ( (node != null) && (node.getNodeName().equals("HD_YN")) )
					SetERPTapeInfoData(hm, "HD_YN", node);

				//ERP UPDATE건 추가 2011-11-11 
				else if ( (node != null) && (node.getNodeName().equals("TAPE_KIND")) )
					SetERPTapeInfoData(hm, "TAPE_KIND", node);
				else if ( (node != null) && (node.getNodeName().equals("GATH_DD")) )
					SetERPTapeInfoData(hm, "GATH_DD", node);
				else if ( (node != null) && (node.getNodeName().equals("DATA_STAT_CD")) )
					SetERPTapeInfoData(hm, "DATA_STAT_CD", node);
				else if ( (node != null) && (node.getNodeName().equals("REGR")) )
					SetERPTapeInfoData(hm, "REGR", node);
				else if ( (node != null) && (node.getNodeName().equals("ARCHIVE_DD")) )
					SetERPTapeInfoData(hm, "ARCHIVE_DD", node);
			}            
		}
		catch(Exception e)
		{
			logger.error(xml);
			return "";
		}
		///--- 0. 끝. XML을 분석해서 필요한 값을 가져온다. ---///

		Connection con = null;        
		PreparedStatement stmt = null;
		PreparedStatement stmt2 = null;
		StringBuffer buf1 = new StringBuffer();
		StringBuffer buf2 = new StringBuffer();

		try 
		{        	 
			con = DBService.getInstance().getErpConnection();
			//logger.debug("######updateERPTapeInfo######## con : " + con);
			con.setAutoCommit(false);


			buf1.append(" update DAT.D_TAPEITEM_TBL ");
			buf1.append(" \n Set SCN_TTL = ? ");
			buf1.append(" \n , CMR_MAN = ? ");
			buf1.append(" \n , CMR_PLACE = ? ");
			buf1.append(" \n , CMR_DD = ? ");
			buf1.append(" \n , LEN = ? ");
			buf1.append(" \n , CASTING = ? ");
			buf1.append(" \n , PRDT_CO_NM = ? ");
			buf1.append(" \n , PRDTR = ? ");
			buf1.append(" \n , SRIS_NO = ? ");
			buf1.append(" \n , BRD_DD = ? ");
			buf1.append(" \n , KEY_WORDS = ? ");
			buf1.append(" \n , SNPS = ? ");
			buf1.append(" \n , CPRTR = ? ");
			buf1.append(" \n , AWARD_INFO = ? ");
			buf1.append(" \n , MC = ? ");
			buf1.append(" \n , AUTHOR = ? ");
			buf1.append(" \n , ORG_PRDR = ? ");
			buf1.append(" \n , BGN_TIME = ? ");
			buf1.append(" \n , END_TIME = ? ");
			buf1.append(" \n , PGM_CD = ? ");
			buf1.append(" \n , MUSIC_INFO = ? ");
			buf1.append(" \n , USE_GRADE_CD = ? ");
			buf1.append(" \n , RST_CONT = ? ");
			buf1.append(" \n , SCN_CONT = ? ");
			buf1.append(" \n , DEPT_CD = ? ");
			buf1.append(" \n , ME_CD = ? ");

			buf1.append(" \n , PRDT_TYPE_CD = ? ");
			buf1.append(" \n , COLOR_CD = ? ");
			buf1.append(" \n , AUDIO_CD = ? ");
			buf1.append(" \n , RECORD_TYPE_CD = ? ");
			buf1.append(" \n , DLBR_GR = ? ");
			buf1.append(" \n , REVIEW = ? ");
			buf1.append(" \n , DATA_KIND = ? ");
			buf1.append(" \n , CPRT_TYPE = ? ");
			buf1.append(" \n , SUB_TTL = ? ");		

			//추가 저장건 2011-11-11 문서기준 추가 네건
			buf1.append(" \n , DATA_STAT_CD = ? ");
			buf1.append(" \n , REGR = ? ");
			buf1.append(" \n , ARCHIVE_DD = ? ");	


			buf1.append(" \n , INGEST_YN = 'Y' ");
			buf1.append(" \n , KEEP_PRT_CD = '001' ");			

			buf1.append(" \n where REQ_NO=?");

			stmt = con.prepareStatement(buf1.toString());

			String PGM_CD = hm.get("PGM_CD").toString();

			int index = 0;
			stmt.setString(++index, StringUtils.stringCut(hm.get("SCN_TTL").toString(), 80));
			stmt.setString(++index, StringUtils.stringCut(hm.get("CMR_MAN").toString(), 50));
			stmt.setString(++index, StringUtils.stringCut(hm.get("CMR_PLACE").toString(), 200));
			stmt.setString(++index, hm.get("CMR_DD").toString());
			stmt.setInt(++index, Integer.parseInt(hm.get("LEN").toString()));		// LEN은 frame인것으로 보인다.
			stmt.setString(++index, StringUtils.stringCut(hm.get("CASTING").toString(), 700));
			stmt.setString(++index, hm.get("PRDT_CO_NM").toString());
			stmt.setString(++index, StringUtils.stringCut(hm.get("PRDTR").toString(), 100));
			stmt.setInt(++index, Integer.parseInt(hm.get("SRIS_NO").toString()));
			stmt.setString(++index, hm.get("BRD_DD").toString());
			stmt.setString(++index, StringUtils.stringCut(hm.get("KEY_WORDS").toString(), 1800));
			stmt.setString(++index, StringUtils.stringCut(hm.get("SNPS").toString(), 3500));
			stmt.setString(++index, hm.get("CPRTR").toString());
			stmt.setString(++index, StringUtils.stringCut(hm.get("AWARD_INFO").toString(), 440));
			stmt.setString(++index, StringUtils.stringCut(hm.get("MC").toString(), 170));
			stmt.setString(++index, hm.get("AUTHOR").toString());
			stmt.setString(++index, StringUtils.stringCut(hm.get("ORG_PRDR").toString(), 80));
			stmt.setString(++index, hm.get("BGN_TIME").toString());
			stmt.setString(++index, hm.get("END_TIME").toString());
			stmt.setString(++index, PGM_CD.substring(2, 8));
			stmt.setString(++index, hm.get("MUSIC_INFO").toString());
			stmt.setString(++index, hm.get("USE_GRADE_CD").toString());
			stmt.setString(++index, hm.get("RST_CONT").toString());
			stmt.setString(++index, hm.get("SCN_CONT").toString());
			stmt.setString(++index, hm.get("DEPT_CD").toString());
			stmt.setString(++index, hm.get("ME_CD").toString());

			stmt.setString(++index, hm.get("PRDT_TYPE_CD").toString());
			stmt.setString(++index, hm.get("COLOR_CD").toString());
			stmt.setString(++index, hm.get("AUDIO_CD").toString());
			stmt.setString(++index, hm.get("RECORD_TYPE_CD").toString());
			stmt.setString(++index, hm.get("DLBR_GR").toString());
			stmt.setString(++index, StringUtils.stringCut(hm.get("REVIEW").toString(), 225));
			stmt.setString(++index, hm.get("DATA_KIND").toString());
			stmt.setString(++index, hm.get("CPRT_TYPE").toString());
			stmt.setString(++index, StringUtils.stringCut(hm.get("SUB_TTL").toString(), 180));



			stmt.setString(++index, hm.get("DATA_STAT_CD").toString());
			stmt.setString(++index, hm.get("REGR").toString());
			stmt.setString(++index, hm.get("ARCHIVE_DD").toString());

			stmt.setString(++index, hm.get("REQ_NO").toString());

			stmt.executeUpdate();

			// tape도 업데이트한다.

			buf2.append(" update DAT.D_TAPE_TBL ");			
			buf2.append(" \n set HD_YN = ? ");
			buf2.append(" \n ,TAPE_KIND = ? ");
			// buf2.append(" \n ,GATH_DD = ? ");
			buf2.append(" \n where REQ_NO=?");

			index = 0;
			stmt2 = con.prepareStatement(buf2.toString());
			stmt2.setString(++index, hm.get("HD_YN").toString());
			stmt2.setString(++index, hm.get("TAPE_KIND").toString());
			//stmt2.setString(++index, hm.get("GATH_DD").toString());
			stmt2.setString(++index, hm.get("REQ_NO").toString());
			stmt2.executeUpdate();

			con.commit();
		} 

		catch (Exception e) 
		{
			logger.error(buf2.toString());
			logger.error(buf1.toString());

			if(con != null)
			{
				try {
					con.rollback();
				} catch (SQLException e1) {
					// TODO 자동 생성된 catch 블록
					logger.error(e1);
				}
			}


			throw e;
		}
		finally
		{
			try {
				con.setAutoCommit(true);
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				logger.error(e);
			}
			release(null, stmt, null);
			release(null, stmt2, con);
		}		

		return "1";
	}


	/*
	 * 사용자가 사용할 수 있는 권한을 가져온다.
	 */
	protected String getOuterAuthCD(String UserID) throws DASException
	{
		//		 필요한 변수들
		StringBuffer buf = new StringBuffer();
		StringBuffer strResultBuffer = new StringBuffer();

		// SQL 구성		
		buf.append("\n select AUTH_CD from DAS.ROLE_TBL role, DAS.OUTSIDER_INFO_TBL outsider  ");
		buf.append("\n where outsider.role = role.role_cd ");
		buf.append("\n and outsider.Out_User_ID = ? ");
		buf.append("\n and role.OK_YN = 'Y' ");		

		Connection con = null;
		PreparedStatement psmt = null;
		ResultSet rs = null;        

		try
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######getOuterAuthCD######## con : " + con);
			psmt = con.prepareStatement(buf.toString());

			int index = 0;			
			psmt.setString(++index, UserID);

			rs = psmt.executeQuery();

			String strResult = "";

			while (rs.next())
			{
				strResult = strResult + rs.getString("AUTH_CD") + "|";
			}
			return strResult;
		}

		catch (Exception ex)
		{
			logger.error(buf.toString());

			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "getOuterAuthCD 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, con);
		}
	}

	/**
	 * 사용자가 사용할 수 있는 권한을 가져온다.
	 * @param UserID 사용자id
	 */

	public String getUserAuthCD(String UserID) throws DASException
	{
		//		 필요한 변수들
		StringBuffer buf = new StringBuffer();
		StringBuffer strResultBuffer = new StringBuffer();

		// SQL 구성		
		buf.append("\n select AUTH_CD from DAS.ROLE_TBL role, DAS.REGULAR_AUTH_TBL auth  ");
		buf.append("\n where auth.role = role.role_cd ");
		buf.append("\n and auth.User_ID = ? ");
		buf.append("\n and role.OK_YN = 'Y' ");		

		Connection con = null;
		PreparedStatement psmt = null;
		ResultSet rs = null;        

		try
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######getUserAuthCD######## con : " + con);
			psmt = con.prepareStatement(buf.toString());

			int index = 0;			
			psmt.setString(++index, UserID);

			rs = psmt.executeQuery();

			String strResult = "";

			while (rs.next())
			{
				strResult = strResult + rs.getString("AUTH_CD") + "|";
			}

			// 만약 결과가 없다면 아마도 외부인일 것이다.  
			if (strResult.length() <= 0)
				return getOuterAuthCD(UserID);	// 외부인 테이블에서 찾아본다.
			else
				return strResult;
		}
		catch (Exception ex) 
		{
			logger.error(buf.toString());
			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "getUserAuthCD 에러 : " + buf.toString(), ex);
			throw exception;
		} 

		finally
		{
			release(rs, psmt, con);
		}
	}

	/**
	 * 다운로드카트 리스트의 정보조회
	 * @param ReqUsrID 등록id
	 * @param DateStart 시작일
	 * @param DateEnd  종료일
	 * @param down_nm 다운로드제목
	 * @return
	 * @throws RemoteException
	 */
	public String getDownCartList(String Req_UsrID, String DateStart, String DateEnd, String down_nm) throws DASException
	{
		//필요한 변수들
		StringBuffer buf = new StringBuffer();
		StringBuffer strResultBuffer = new StringBuffer();

		// where 절 만들기
		String strWhereClause = "";		
		if (Req_UsrID !=null && Req_UsrID.trim().length() > 0 )
			strWhereClause = strWhereClause + "	and REQ_USRID = '" + Req_UsrID + "'\n";

		if (DateStart !=null && DateStart.trim().length() > 0 )
		{
			strWhereClause = strWhereClause +  " and ('" + DateStart.trim() + "' <= substr(DOWN.REQ_DT, 1, 8)";
			strWhereClause = strWhereClause +  " and substr(DOWN.REQ_DT, 1, 8) <= '" + DateEnd.trim() + "') \n ";
		}

		if (down_nm !=null && down_nm.trim().length() > 0 )
		{
			strWhereClause = strWhereClause + "	and DOWN_SUBJ like '%" + down_nm.trim() + "%'\n";
		}

		// SQL 구성		
		buf.append(" SELECT  \n"); 
		buf.append(" 	distinct \n"); 
		buf.append(" 	down.CART_NO, \n");
		buf.append(" 	cart.CART_SEQ, \n");
		buf.append(" 	down.DOWN_SUBJ, \n");
		buf.append(" 	master.TITLE, \n");
		buf.append(" 	master.EPIS_NO, \n");
		buf.append(" 	master.REQ_CD, \n");
		buf.append("	master.BRD_DD, \n");
		buf.append(" 	contents.CT_NM, \n");
		buf.append(" 	down.REQ_USRID, \n");
		buf.append(" 	down.REQ_DT, \n");
		buf.append(" 	down.DOWN_DT, \n");
		buf.append(" 	cart.DURATION, \n");
		buf.append(" 	down.STRG_LOC,	 \n");
		buf.append("    down.DOWN_GUBUN,   \n");
		buf.append(" 	cart.CT_ID \n");
		buf.append(" 	,cart.CTI_ID	 \n");
		buf.append(" FROM  \n");
		buf.append(" 	DAS.DOWN_CART_TBL down, DAS.CART_CONT_TBL cart, DAS.METADAT_MST_TBL master, \n");
		buf.append(" 	DAS.CONTENTS_TBL contents, DAS.CONTENTS_MAPP_TBL map \n");
		buf.append(" where  \n");
		buf.append(" 	down.CART_NO = cart.CART_NO \n");
		buf.append(" 	and cart.MASTER_ID = master.MASTER_ID \n");
		buf.append(" 	and cart.CT_ID = contents.CT_ID \n");
		buf.append(" 	and contents.CT_ID = map.CT_ID \n");
		buf.append(" 	and master.MASTER_ID = map.MASTER_ID \n");
		buf.append(" 	and down.ASP_RTO_CD='002' AND down.VD_QLTY='002' \n"); 
		buf.append(" 	and CART_STAT < '008' \n");
		buf.append("    and (map.del_dd is null or map.del_dd = '') \n");
		buf.append(strWhereClause);
		buf.append(" ORDER BY down.REQ_DT DESC , cart_seq asc \n");
		buf.append(" WITH UR	 \n");

		Connection con = null;
		PreparedStatement psmt = null;
		ResultSet rs = null;        
		List resultList = new ArrayList();
		try
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######getDownCartList######## con : " + con);
			psmt = con.prepareStatement(buf.toString());

			rs = psmt.executeQuery();

			while (rs.next())
			{               	
				strResultBuffer.append("	<DATA>\n");

				strResultBuffer.append("		<CART_NO>");
				strResultBuffer.append(rs.getLong("CART_NO"));
				strResultBuffer.append("</CART_NO>\n");

				strResultBuffer.append("		<CART_SEQ>");
				strResultBuffer.append(rs.getInt("CART_SEQ"));
				strResultBuffer.append("</CART_SEQ>\n");

				strResultBuffer.append("		<DOWN_SUBJ>");
				strResultBuffer.append(rs.getString("DOWN_SUBJ"));
				strResultBuffer.append("</DOWN_SUBJ>\n");

				strResultBuffer.append("		<TITLE>");
				strResultBuffer.append(rs.getString("TITLE"));
				strResultBuffer.append("</TITLE>\n");

				strResultBuffer.append("		<EPIS_NO>");
				strResultBuffer.append("" + rs.getInt("EPIS_NO"));
				strResultBuffer.append("</EPIS_NO>\n");

				strResultBuffer.append("		<REQ_CD>");
				strResultBuffer.append(rs.getString("REQ_CD"));
				strResultBuffer.append("</REQ_CD>\n");

				strResultBuffer.append("		<BRD_DD>");
				strResultBuffer.append(rs.getString("BRD_DD"));
				strResultBuffer.append("</BRD_DD>\n");

				strResultBuffer.append("		<CT_NM>");
				strResultBuffer.append(rs.getString("CT_NM"));
				strResultBuffer.append("</CT_NM>\n");

				strResultBuffer.append("		<REQ_USRID>");
				strResultBuffer.append(rs.getString("REQ_USRID"));
				strResultBuffer.append("</REQ_USRID>\n");

				strResultBuffer.append("		<REQ_DT>");
				strResultBuffer.append(rs.getString("REQ_DT"));
				strResultBuffer.append("</REQ_DT>\n");

				strResultBuffer.append("		<DOWN_DT>");
				strResultBuffer.append(rs.getString("DOWN_DT"));
				strResultBuffer.append("</DOWN_DT>\n");

				strResultBuffer.append("		<DURATION>");
				strResultBuffer.append(rs.getLong("DURATION"));
				strResultBuffer.append("</DURATION>\n");

				strResultBuffer.append("		<STRG_LOC>");
				strResultBuffer.append(rs.getString("STRG_LOC"));
				strResultBuffer.append("</STRG_LOC>\n");

				strResultBuffer.append("		<CT_ID>");
				strResultBuffer.append(rs.getLong("CT_ID"));
				strResultBuffer.append("</CT_ID>\n");

				strResultBuffer.append("		<CTI_ID>");
				strResultBuffer.append(rs.getLong("CTI_ID"));
				strResultBuffer.append("</CTI_ID>\n");

				strResultBuffer.append("		<DOWN_GUBUN>");
				strResultBuffer.append(rs.getString("DOWN_GUBUN"));
				strResultBuffer.append("</DOWN_GUBUN>\n");

				strResultBuffer.append("	</DATA>\n");
			}

			strResultBuffer.append("</DAS>");

			return strResultBuffer.toString();
		}
		catch (Exception ex)
		{
			logger.error(buf.toString());
			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "getDownCartList 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, con);
		}
	}



	/**
	 * CT ID로 KFRM 위치를 가져온다.
	 * @param strCTID 컨텐츠인스턴스id
	 */
	public String getKeyframepathByCTID(String strCTID) throws DASException
	{
		//		 필요한 변수들
		StringBuffer buf = new StringBuffer();
		StringBuffer strResultBuffer = new StringBuffer();

		// SQL 구성		
		buf.append("\n select KFRM_PATH from DAS.contents_tbl where CT_ID = ");
		buf.append(strCTID);
		buf.append("\n with ur");

		Connection con = null;
		PreparedStatement psmt = null;
		ResultSet rs = null;        

		try
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######getKeyframepathByCTID######## con : " + con);
			psmt = con.prepareStatement(buf.toString());

			rs = psmt.executeQuery();

			String strResult = "";

			if (rs.next())
			{
				strResult = rs.getString("KFRM_PATH");
			}

			return strResult;
		}

		catch (Exception ex)
		{
			logger.error(buf.toString());

			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "getKeyframepathByCTID 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, con);
		}
	}


	/**
	 * 2차 아카이브 mp4에 저장된 키프레임 파일을 삭제한다
	 * @param krfmFileList 파일 리스트
	 * @return String 	삭제 로그
	 * @throws DASException
	 */
	public String deleteKfrmFiles(String krfmFileList) throws DASException
	{
		String [] fileArray = null;
		String str = null;


		String strOldKfrmPath = "";
		String strKfrmPath = "";
		String strOldCTID = "";

		fileArray = krfmFileList.split(",");

		if (logger.isDebugEnabled()) 
		{
			logger.debug("kfrmFileList = " + krfmFileList + ", count = " + fileArray.length);
		}

		for(int index = 0; index < fileArray.length; index++ )
		{
			String strFileData = fileArray[index]; 
			String [] arData = null;
			arData = strFileData.split(":");
			String strCTID = arData[0];
			String strFrameNumber = arData[1];

			if (logger.isDebugEnabled()) 
			{
				logger.debug("fileData = " + strFileData + ", CTID = " + strCTID + ", FrameNumber = " + strFrameNumber);
			}

			strKfrmPath = strOldKfrmPath;
			if (strOldCTID.compareToIgnoreCase(strCTID) != 0 )
			{
				// CTID의 키프레임을 가져온다.
				strKfrmPath = getKeyframepathByCTID(strCTID);
			}

			//					  /    mp4/200810/17/98075/KFRM  /	  1111              .jpg
			String strFilepath = "/" + strKfrmPath 		      + "/" + strFrameNumber + ".jpg";

			File file = new File(strFilepath);

			if(file.exists()) 
			{
				if(file.delete()){
					if(str == null)
						str =	fileArray[index]+":"+"DELETED";
					else
						str =	str + "," +fileArray[index]+":"+"DELETED";
				}
				else{
					if(str == null)
						str =	fileArray[index]+" : '" + strFilepath + "' NOT DELETED";
					else
						str =	str + "," + fileArray[index]+" : '" + strFilepath + "' NOT DELETED";						
				}

			}
			else{
				if(str == null)
					str =	fileArray[index]+" : '" + strFilepath + "' NOT EXIST";
				else
					str =	str + "," + fileArray[index]+" : '" + strFilepath + "' NOT EXIST";
			}

			strOldKfrmPath = strKfrmPath;
			strOldCTID = strCTID;
		}	// for

		return str;	
	}


	/**
	 * 검색영상재생시 기초정보 조회
	 * @param masterId
	 * @return
	 * @throws RemoteException
	 */
	public String getBasicPageInfo(long masterId) throws DASException
	{	
		return "";
	}


	/**
	 * WMV  요청한다.
	 * @param cti_id 콘텐츠 인스턴스 아이디
	 * 
	 * @return String
	 * @throws Exception 
	 */
	public String recreateWMV(long cti_id) throws Exception
	{
		String strData = null;
		try
		{
			strData = "RETRY," + cti_id;
			//			ServiceNevigatorIF port = new ServiceNevigatorService_Impl().getServiceNevigatorIFPort();
			//			port.archiveService(strData);
		}
		catch (Exception e) 
		{
			logger.error(strData);


			throw e;		    
		}

		return "SUCCESS";
	}

	/**
	 * 김건삭 실장님 요청 사항 20090903 dekim
	 * WMV 재생성 요청한다.
	 * @param tcbean 정보를 가지고있는 beans
	 * @param user_id 유저id
	 * @param tc_inter_path tc경로
	 * @return
	 * @throws Exception 
	 */
	public String recreateWMV(TcBeanDO tcbean,String user_id,String tc_inter_path) throws Exception
	{
		try
		{
			String strData = "RETRY," + tcbean.getCt_id()+","+user_id;
			if (logger.isDebugEnabled()) 
			{
				logger.debug("[archiveService로 전송 : ]" + strData);
			}

			TcBeanDO tc= (TcBeanDO)selectTcBeanTbl(tcbean);
			tc.setInput_hr_nm(tcbean.getInput_hr_nm());
			tc.setCart_no(tcbean.getCart_no());
			tc.setCt_id(tcbean.getCt_id());
			String cocd = selectCocdbyCt_id(tcbean.getCt_id());
			tc.setCocd(cocd);
			tc.setCart_no(tcbean.getCart_no());
			tc.setReq_id(tcbean.getReq_id());
			TcBeanDO _do2 = inserWmv_nm(tc);
			updateWMVdate(tcbean.getCt_id());
			/**
			 * BackendTC WMV & KFRM 생성 요청 하는곳.
			 */
			/*TcBeanDO jobTcBeanDO = selectTcJob();   // 작업이 있는지 확인하는 곳.
				TcBeanDO stateTcBeanDO = selectTcAllocationState(); // IDLE 인 TC 확인하는곳.

				if(jobTcBeanDO!=null&&stateTcBeanDO!=null)
					getTCJob(jobTcBeanDO,stateTcBeanDO, dasHandler.getProperty("TC_DIR_INTERFACE"));
			 */
			return "1";

		}
		catch (Exception e) 
		{
			logger.error(tcbean);
			logger.error(user_id);
			logger.error(tc_inter_path);


			throw e;		    
		}
	}
	/**
	 * WMV 및 KFRM 재신청 요청한다.
	 * @param cti_id 콘텐츠 인스턴스 아이디
	 * @param user_nm 요청자 명
	 * @return
	 * @throws Exception 
	 */
	public String recreateWMV_KFRM(TcBeanDO tcbean,String user_nm,String tc_inter_path)throws Exception{

		try {
			if(logger.isDebugEnabled()){
				logger.debug("recreateWMV_KFRM [input ct_id,user_nm]"+tcbean.getCt_id()+","+user_nm);
			}


			//restore

			TcBeanDO tc = new TcBeanDO();
			tc= (TcBeanDO)selectTcBeanTbl(tcbean);
			tc.setCocd(this.selectCocdbyCt_id(tcbean.getCt_id()));
			if(tc.getCt_id()==0){
				insertConInstInfoForLow(tcbean);
				tc= (TcBeanDO)selectTcBeanTbl(tcbean);
				String cocd = selectCocdbyCt_id(tcbean.getCt_id());
				tc.setCocd(cocd);
			}
			TcBeanDOXML _doXML = new TcBeanDOXML();
			TcBeanDO _do = (TcBeanDO)_doXML.setDO(tc);
			tc.setInput_hr_nm(tcbean.getInput_hr_nm());
			_do.setCart_no(tcbean.getCart_no());
			_do.setReq_id(tcbean.getReq_id());
			TcBeanDO _do2 = inserWmv_KFRM(_do);
			updateWMVdate(tcbean.getCt_id());

			/**
			 * BackendTC WMV & KFRM 생성 요청 하는곳.
			 */
			/*	TcBeanDO jobTcBeanDO = selectTcJob();   // 작업이 있는지 확인하는 곳.
				TcBeanDO stateTcBeanDO = selectTcAllocationState(); // IDLE 인 TC 확인하는곳.

				logger.debug("[jobTcBeanDO value]"+jobTcBeanDO);
				logger.debug("[stateTcBeanDO value]"+stateTcBeanDO);

				if(jobTcBeanDO!=null&&stateTcBeanDO!=null){
					logger.debug("#######[recreateWMV_KFRM] TC_Job allocate Success!!");
					getTCJob(jobTcBeanDO,stateTcBeanDO, dasHandler.getProperty("TC_DIR_INTERFACE"));
				}*/
			return "1";
		} catch (Exception e) {
			logger.error(tcbean);
			logger.error(user_nm);
			logger.error(tc_inter_path);


			throw e;
		}

	}
	/**
	 * 키프레인 재신청 요청 한다
	 * @param tcbean 정보를 가지고있는  beans
	 * @param user_nm 사용자 이름
	 * @param tc_inter_path tc유형
	 * @return updatecount
	 * @throws Exception 
	 * @throws RemoteException
	 */
	public String recreateKFRM(TcBeanDO tcbean,String user_nm,String tc_inter_path)throws Exception{

		try {
			if(logger.isDebugEnabled()){
				logger.debug("recreateKFRM [input ct_id,user_nm]"+tcbean.getCt_id()+","+user_nm);
			}
			TcBeanDO tc= (TcBeanDO)selectTcBeanTbl(tcbean);
			TcBeanDOXML _doXML = new TcBeanDOXML();
			TcBeanDO _do = (TcBeanDO)_doXML.setDO(tc);
			String cocd = selectCocdbyCt_id(tcbean.getCt_id());
			_do.setCocd(cocd);
			_do.setCart_no(tcbean.getCart_no());
			_do.setReq_id(tcbean.getReq_id());
			TcBeanDO tc1 = inserKFRM(_do);


			/**
			 * BackendTC WMV & KFRM 생성 요청 하는곳.
			 */
			/*	TcBeanDO jobTcBeanDO = selectTcJob();   // 작업이 있는지 확인하는 곳.
				TcBeanDO stateTcBeanDO = selectTcAllocationState(); // IDLE 인 TC 확인하는곳.

				if(jobTcBeanDO!=null&&stateTcBeanDO!=null)
					getTCJob(jobTcBeanDO,stateTcBeanDO, dasHandler.getProperty("TC_DIR_INTERFACE"));
			 */
			return "1";
		} catch (Exception e) {
			logger.error(tcbean);
			logger.error(user_nm);
			logger.error(tc_inter_path);


			throw e;
		}

	}


	/**
	 * 키프레임 생성(클라이언트 신청시)
	 * @param ct_id 콘텐츠id 
	 * @param user_nm 사용자 이름
	 * @param tc_inter_path tc유형
	 * @return updatecount
	 * @throws Exception 
	 * @throws RemoteException
	 */
	public String recreateKFRM(long ct_id,String user_nm,String tc_inter_path)throws Exception{

		try {

			TcBeanDO tc= (TcBeanDO)selectTcBeanTbl(ct_id);
			TcBeanDOXML _doXML = new TcBeanDOXML();
			TcBeanDO _do = (TcBeanDO)_doXML.setDO(tc);
			_do.setReq_id(user_nm);
			String cocd = selectCocdbyCt_id(ct_id);
			tc.setCocd(cocd);
			TcBeanDO tc1 = inserKFRM(_do);
			updateCTYN(ct_id,user_nm);

			/**
			 * BackendTC WMV & KFRM 생성 요청 하는곳.
			 */
			/*	TcBeanDO jobTcBeanDO = selectTcJob();   // 작업이 있는지 확인하는 곳.
				TcBeanDO stateTcBeanDO = selectTcAllocationState(); // IDLE 인 TC 확인하는곳.

				if(jobTcBeanDO!=null&&stateTcBeanDO!=null)
					getTCJob(jobTcBeanDO,stateTcBeanDO, dasHandler.getProperty("TC_DIR_INTERFACE"));
			 */
			return "1";
		} catch (Exception e) {
			logger.error(ct_id);
			logger.error(user_nm);
			logger.error(tc_inter_path);


			throw e;
		}

	}


	/**
	 * 사용자의 락을 모두 풀어버린다.
	 * @param strUserID 사용자id 
	 * 
	 * @return updatecount
	 * @throws RemoteException
	 */
	public int UnlockByUserID(String strUserID) throws DASException
	{
		StringBuffer buf = new StringBuffer();

		// SQL 구성		
		buf.append("\n update DAS.Metadat_Mst_tbl set LOCK_STAT_CD = 'N' where MODRID = ?  ");

		Connection con = null;
		PreparedStatement psmt = null;
		int cData = 0;

		try
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######UnlockByUserID######## con : " + con);
			psmt = con.prepareStatement(buf.toString());

			int index = 0;			
			psmt.setString(++index, strUserID);

			cData = psmt.executeUpdate();
			return cData;
		}
		catch (Exception ex)
		{
			logger.error(buf.toString());

			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "getUserAuthCD 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(null, psmt, con);
		}
	}
	/**
	 * masterId 기준 영상 길이의 합을 구함다
	 * @param masterId 마스터id 
	 * 
	 * @return String
	 * @throws RemoteException
	 */
	public String selectSumCt_leng (Long masterId) throws DASException
	{
		StringBuffer buf = new StringBuffer();
		buf.append("\n select left(ct_leng,8) as ct_leng ,ct_id from das.contents_tbl ");
		buf.append("\n where ct_id in (select distinct ct_id from das.contents_mapp_tbl where master_id= ?) ");

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		int sumTime = 0;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######selectSumCt_leng######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setLong(++index, masterId);

			rs = stmt.executeQuery();
			while(rs.next())
			{
				sumTime=sumTime+DateTime.stimeConvert(rs.getString(1));
			}

			return DateTime.sconvertTime(sumTime);
		}

		catch (Exception ex)
		{
			logger.error(buf.toString());
			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "MultiLockUnlock 에러 : " + buf.toString(), ex);
			throw exception;
		}

		finally
		{
			release(rs, stmt, con);
		}

	}



	/**
	 * masterId 기준 영상 길이의 합을 구함다
	 * @param masterId 마스터id 
	 * 
	 * @return String
	 * @throws RemoteException
	 */
	public long getbrd_leng (long masterId) throws DASException
	{
		StringBuffer buf = new StringBuffer();
		buf.append("\n select ct_leng from contents_tbl where ct_id in ( select ct_id from contents_mapp_tbl where master_id = ? group by ct_id) and (ct_typ ='003') ");

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		long sumTime = 0L;
		CommonUtl commonUtl = new CommonUtl();
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######getbrd_leng######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setLong(++index, masterId);

			rs = stmt.executeQuery();
			while(rs.next())
			{
				sumTime= commonUtl.changeTime(rs.getString("ct_leng"));
			}

			return sumTime;
		}

		catch (Exception ex)
		{
			logger.error(buf.toString());
			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "MultiLockUnlock 에러 : " + buf.toString(), ex);
			throw exception;
		}

		finally
		{
			release(rs, stmt, con);
		}

	}

	/**
	 * 전타 후타 영상 길이의 합을 구함다
	 * @param masterId 마스터id 
	 * 
	 * @return String
	 * @throws RemoteException
	 */
	public long getct_leng (long masterId) throws DASException
	{
		StringBuffer buf = new StringBuffer();
		buf.append("\n  select ct_leng from contents_tbl where ct_id in ( select ct_id from contents_mapp_tbl where master_id = ? group by ct_id) and (ct_typ <> '003') ");

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		long sumTime = 0L;
		CommonUtl commonUtl = new CommonUtl();
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######getct_leng######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setLong(++index, masterId);

			rs = stmt.executeQuery();
			while(rs.next())
			{
				if(sumTime==0){
					sumTime= commonUtl.changeTime(rs.getString("ct_leng"));
				}else{
					sumTime= sumTime + commonUtl.changeTime(rs.getString("ct_leng"));
				}
			}

			return sumTime;
		}

		catch (Exception ex)
		{
			logger.error(buf.toString());
			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "MultiLockUnlock 에러 : " + buf.toString(), ex);
			throw exception;
		}

		finally
		{
			release(rs, stmt, con);
		}

	}


	/**
	 * masterId 기준 영상 길이의 합을 구함다
	 * @param masterId 마스터id 
	 * 
	 * @return String
	 * @throws RemoteException
	 */
	public String isEntireRistcd (long masterId) throws DASException
	{
		StringBuffer buf = new StringBuffer();
		buf.append("\n select b.ANNOT_CLF_CD, sum(duration) as duration ");
		buf.append("\n from ");
		buf.append("\n  ( select annot_clf_cd ,duration  ");
		buf.append("\n from annot_info_Tbl where master_id = ? ");
		buf.append("\n group by annot_clf_cd ,duration ) a, ");
		buf.append("\n ( select distinct annot_clf_cd ");
		buf.append("\n  from annot_info_Tbl ");
		buf.append("\n where master_id =  ? ");
		buf.append("\n ) b ");
		buf.append("\n where a.annot_clf_cd = b.ANNOT_CLF_CD ");
		buf.append("\n 	group by b.annot_clf_cd ");

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		String annot_clf_cd="";
		String new_annot_clf_cd="";
		String old_annot_clf_cd="";
		long  new_duratioin =0L;
		long  old_duratioin =0L;
		CommonUtl commonUtl = new CommonUtl();
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######isEntireRistcd######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setLong(++index, masterId);
			stmt.setLong(++index, masterId);

			rs = stmt.executeQuery();
			while(rs.next())
			{
				new_annot_clf_cd=rs.getString("ANNOT_CLF_CD");
				new_duratioin=rs.getLong("duration");
				long totalbrd_leng = getbrd_leng(masterId);

				if((totalbrd_leng-30<=new_duratioin && new_duratioin <=totalbrd_leng+5)|| totalbrd_leng==new_duratioin ){
					annot_clf_cd=new_annot_clf_cd;
				}

			}
			return annot_clf_cd;
		}

		catch (Exception ex)
		{
			logger.error(buf.toString());
			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "MultiLockUnlock 에러 : " + buf.toString(), ex);
			throw exception;
		}

		finally
		{
			release(rs, stmt, con);
		}

	}

	/**
	 * 마스터의 해당 .mer 파일정보 조회
	 * @param master_id
	 * @return
	 * @throws RemoteException
	 */
	public String getMergedFilenames(long master_id) throws DASException
	{
		StringBuffer buf = new StringBuffer();

		// SQL 구성		
		buf.append("\n select KFRM_PATH, cont.CT_ID ");
		buf.append("\n from DAS.METADAT_MST_TBL meta, DAS.CONTENTS_MAPP_TBL mapp, DAS.CONTENTS_TBL cont");
		buf.append(" \n where meta.MASTER_ID = mapp.MASTER_ID and cont.CT_ID = mapp.CT_ID + 0 and meta.MASTER_ID = ? ");
		buf.append("\n  and (mapp.del_dd is null or mapp.del_dd = '') ");
		buf.append("\n with ur ");

		Connection con = null;
		PreparedStatement psmt = null;
		ResultSet rs = null;

		try
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######getMergedFilenames######## con : " + con);
			psmt = con.prepareStatement(buf.toString());

			int index = 0;			
			psmt.setLong(++index, master_id);

			rs = psmt.executeQuery();

			StringBuffer strResultBuffer = new StringBuffer();
			strResultBuffer.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n");
			strResultBuffer.append("<DAS>\n");

			while (rs.next())
			{
				strResultBuffer.append("\t<data>\n");
				strResultBuffer.append("<KFRM_PATH>");
				strResultBuffer.append(rs.getString("KFRM_PATH"));
				strResultBuffer.append("</KFRM_PATH>\n");

				strResultBuffer.append("<CT_ID>");
				strResultBuffer.append(rs.getLong("CT_ID") + "");
				strResultBuffer.append("</CT_ID>\n");
				strResultBuffer.append("\t</data>\n");        		
			}
			strResultBuffer.append("</DAS>");

			return strResultBuffer.toString();

		}
		catch (Exception ex) 
		{
			logger.error(buf.toString());
			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "getMergedFilenames 에러 : " + buf.toString(), ex);
			throw exception;
		} 
		finally
		{
			release(rs, psmt, con);
		}
	}


	// XML 문자열을 파싱해서 Y형 N형 락의 master id를 찾아온다..
	private String parseLockXML(String xml, boolean bLock)
	{
		Document document = null;
		DocumentBuilderFactory mDocBuilderFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder builder;

		HashMap hm = new HashMap();

		try
		{
			DocumentBuilder mDocBuilder = mDocBuilderFactory.newDocumentBuilder();
			InputStream is = new ByteArrayInputStream(xml.getBytes("utf-8"));
			document = mDocBuilder.parse(is); 
			Element rootElement = document.getDocumentElement();
			NodeList nodeList = rootElement.getChildNodes();

			// 데이터 갯수만큼 루프를 돈다.
			String strResult = "";            
			int nLength = nodeList.getLength();
			for (int i=0; i < nLength; i++)
			{            	
				boolean bFound = false;
				Node node = nodeList.item(i);
				if ( (node != null) && (node.getNodeName().equals("lock")) )
				{
					if ( ( (node.getNodeValue().equalsIgnoreCase("Y")) && (true == bLock) )
							&&
							( (node.getNodeValue().equalsIgnoreCase("N")) && (false == bLock) ) )
						bFound = true;                		
				}	                   
				else if ( (node != null) && (node.getNodeName().equals("master_id")) )
				{
					if (true == bFound)
					{
						strResult += node.getNodeValue();
						strResult += ",";
					}
				}
			}

			return strResult.substring(0, strResult.length() - 1);	// 맨끝 , 는 떼어낸다.
		}
		catch(Exception e)
		{
			logger.error(xml);
			logger.error(bLock);

			return null;
		}        
	}



	/**
	 * multi로 MasterID에 대해 Lock Unlock을 한다.
	 * <data><master_id>1111</master_id><lock>[Y|N]</lock></data>
	 * @param xml
	 * @return
	 * @throws RemoteException
	 */
	public int MultiLockUnlock(String xml) throws DASException
	{
		StringBuffer buf1 = new StringBuffer();
		StringBuffer buf2 = new StringBuffer();
		String strLockMasterIDs = "";
		String strUnlockMasterIDs = "";

		// 락을 걸어주는 녀석들부터 찾는다.
		strLockMasterIDs = parseLockXML(xml, true);
		buf1.append("\n update DAS.METADAT_MST_TBL set Lock_Stat_CD = 'Y' where master_id in ( ");
		buf1.append(strLockMasterIDs);
		buf1.append(" )");

		// 락을 풀어주는 녀석들을 찾는다.
		strUnlockMasterIDs = parseLockXML(xml, false);
		buf2.append("\n update DAS.METADAT_MST_TBL set Lock_Stat_CD = 'N' where master_id in ( ");
		buf2.append(strUnlockMasterIDs);
		buf2.append(" )");

		Connection con = null;
		PreparedStatement psmt1 = null;
		PreparedStatement psmt2 = null;

		try
		{
			con = DBService.getInstance().getConnection();
			psmt1 = con.prepareStatement(buf1.toString());            
			int cAffected = psmt1.executeUpdate();

			psmt2 = con.prepareStatement(buf1.toString());            
			cAffected += psmt2.executeUpdate();

			return cAffected;			
		}
		catch (Exception ex) 
		{
			logger.error(buf1.toString());
			logger.error(buf2.toString());
			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "MultiLockUnlock 에러 : " + buf1.toString(), ex);
			throw exception;
		} 

		finally
		{
			release(null, psmt1, null);
			release(null, psmt2, con);
		}
	}


	//	 XML 문자열을 파싱해서  master id를 찾아온다.
	private long getMasterIDfromXML(String xml)
	{
		Document document = null;
		DocumentBuilderFactory mDocBuilderFactory = DocumentBuilderFactory.newInstance();
		try
		{
			DocumentBuilder mDocBuilder = mDocBuilderFactory.newDocumentBuilder();
			InputStream is = new ByteArrayInputStream(xml.getBytes("utf-8"));
			document = mDocBuilder.parse(is); 
			Element rootElement = document.getDocumentElement();
			NodeList nodeList = rootElement.getChildNodes();

			// 데이터 갯수만큼 루프를 돈다.
			int nLength = nodeList.getLength();
			for (int i=0; i < nLength; i++)
			{            	

				Node node = nodeList.item(i);   

				if ( (node != null) && (node.getNodeName().equals("master_id")) )
				{	

					if (logger.isDebugEnabled()){

						//	logger.debug("[master_id in getMasterIDfromXML] " + node.getTextContent());
					}

					//return (Long.parseLong(node.getTextContent()));
				}
			}

			return -1;
		}
		catch(Exception e)
		{
			logger.error(xml);
			return 0;
		}        
	}


	// 코너 정보를 가져온다.
	private String getCornerResultXML(long nMasterID) throws DASException
	{
		StringBuffer buf = new StringBuffer();
		StringBuffer strResult = new StringBuffer();

		buf.append("\n select ");
		buf.append("\n 	value(CN.CN_ID, '')as cn_id ");	
		buf.append("\n 	,case when cn.cn_nm <>'' then CN.CN_NM ");	
		buf.append("\n 	 when cn.CN_NM is null or cn.CN_NM=''  and ct_typ<>'003'  then ct.CT_NM ");	
		buf.append("\n 	 else cn.CN_NM ");	
		buf.append("\n 	 end as CN_NM ");	
		buf.append("\n 	,value(CN.RPIMG_KFRM_SEQ, 0) as RPIMG_KFRM_SEQ, value(CN.SOM, '') as SOM, value(CN.EOM, '') as EOM, '' as CN_TYPE_CD, value(CN.RPIMG_CT_ID, '')as RPIMG_CT_ID, value(CN.CN_INFO, '')as CN_INFO");	

		buf.append("\n 	, value(CT.CT_ID, '')as CT_ID, value(CODE.DESC, '')as CT_NM, value(CT.REG_DT, '')as REG_DT, value(CT.CT_LENG, '')as CT_LENG, value(CT.DURATION, 0)as DURATION, value(CT.CT_SEQ, 0)as CT_SEQ, value(CT.KFRM_PATH, '')as KFRM_PATH");
		buf.append("\n 	, value(CT.KFRM_PX_CD, '')as KFRM_PX_CD, value(CT.VD_QLTY, '')as VD_QLTY, value(CT.ASP_RTO_CD, '')as ASP_RTO_CD, value(CT.CONT, '')as CONT ,value(CT.CT_CLA, '')as CT_CLA,value(CT.TOT_KFRM_NUMS, 0)as TOT_KFRM_NUMS,value(CT.MEDIA_ID, '')as MEDIA_ID");
		buf.append(" \n	, value(CTI.INGEST_EQ_ID, 0)as INGEST_EQ_ID, value(CTI.FL_PATH, '')as FL_PATH, value(CTI.WRK_FILE_NM, '')as WRK_FILE_NM, value(CTI.CTI_FMT, '')as CTI_FMT, value(CTI.FL_SZ, '')as FL_SZ, value(CTI.CTI_ID, '')as CTI_ID ");
		buf.append(" \n	,  value(CTI.ARCH_STE_YN, '')as ARCH_STE_YN, value(CTI.VD_HRESOL, 0)as VD_HRESOL, value(CTI.VD_VRESOL, 0)as VD_VRESOL, value(CTI.BIT_RT, '')as BIT_RT, value(CTI.FRM_PER_SEC, '')as FRM_PER_SEC, value(CTI.AUD_SAMP_FRQ, '')as AUD_SAMP_FRQ ");
		buf.append("\n 	,  value(CTI.AUDIO_BDWT, '')as AUDIO_BDWT ");
		buf.append("\n	, MAP.S_DURATION, MAP.E_DURATION ");
		buf.append("\n , meta.rpimg_ct_id as meta_rpimg_ct_id , meta.rpimg_kfrm_seq as meta_rpimg_kfrm_seq ");



		buf.append("\n from DAS.CONTENTS_TBL CT, DAS.CONTENTS_MAPP_TBL MAP, CONTENTS_INST_TBL CTI, ");
		buf.append("\n 	DAS.METADAT_MST_TBL META, DAS.CORNER_TBL CN , das.code_tbl code");


		buf.append("\n where  ");
		buf.append(" \n	CT.CT_ID = CTI.CT_ID and META.MASTER_ID = MAP.MASTER_ID ");
		buf.append(" \n	and CN.CN_ID = MAP.CN_ID ");
		buf.append("\n 	and MAP.CT_ID = CTI.CT_ID and META.MASTER_ID = ? ");
		//buf.append("\n 	and (MAP.del_dd is null or MAP.del_dd = '')   ");
		buf.append("\n 	and map.CT_ID = cti.CT_ID   ");
		buf.append("\n 	 AND CODE.SCL_CD = CT.CT_TYP     ");
		buf.append("\n  AND CODE.CLF_CD='P016'     ");
		buf.append("\n 	and cti.cti_fmt like '30%'  ");
		buf.append("\n   and  map.del_yn <>'Y'   ");
		buf.append("\n  order by code.rmk_2 asc,ct.ct_id asc, ct.ct_seq asc, cn.som asc ,CT.CT_LENG ASC ");
		buf.append("\n with ur");

		Connection con = null;

		PreparedStatement psmt = null;
		PreparedStatement psmt_annot = null;

		ResultSet rs = null;
		ResultSet rs_annot = null;


		try
		{
			strResult.append("\n  <corner>");

			long nOldCN_ID = 0;        	

			con = DBService.getInstance().getConnection();
			//logger.debug("######getCornerResultXML######## con : " + con);
			psmt = con.prepareStatement(buf.toString());    
			int index = 0;			
			psmt.setLong(++index, nMasterID);
			rs = psmt.executeQuery();	
			String gubun="";
			long gcn_id =0L;
			while(rs.next())
			{		
				long nCN_ID = rs.getLong("CN_ID");
				strResult.append("\n    <item>");

				this.AddToResultXMLBuffer(strResult, "CN_ID", "      ", nCN_ID + "");
				this.AddToResultXMLBuffer(strResult, "CN_NM", "      ", rs.getString("CN_NM"));
				//2009.08.05 CT_NM ----->CN_NM  CHANGE 
				this.AddToResultXMLBuffer(strResult, "RPIMG_KFRM_SEQ", "      ", rs.getLong("RPIMG_KFRM_SEQ") + "");
				this.AddToResultXMLBuffer(strResult, "SOM", "      ", rs.getString("SOM"));
				this.AddToResultXMLBuffer(strResult, "EOM", "      ", rs.getString("EOM"));
				this.AddToResultXMLBuffer(strResult, "CN_TYPE_CD", "      ", rs.getString("CN_TYPE_CD"));
				this.AddToResultXMLBuffer(strResult, "RPIMG_CT_ID", "      ", rs.getLong("RPIMG_CT_ID") + "");

				this.AddToResultXMLBuffer(strResult, "META_RPIMG_KFRM_SEQ", "      ", rs.getLong("META_RPIMG_KFRM_SEQ")+ "");
				this.AddToResultXMLBuffer(strResult, "META_RPIMG_CT_ID", "      ", rs.getLong("META_RPIMG_CT_ID") + "");

				/**
				 * 문제의 특수문자있는 곳 김동은 20090731 청구번호 BS92-0550 으로 조회시에....
				 */
				this.AddToResultXMLBuffer(strResult, "CN_INFO", "      ", rs.getString("CN_INFO"));

				// CT 관련 자료
				this.AddToResultXMLBuffer(strResult, "CT_ID", "      ", rs.getLong("CT_ID") + "");

				this.AddToResultXMLBuffer(strResult, "CT_NM", "      ", rs.getString("CT_NM"));
				this.AddToResultXMLBuffer(strResult, "REG_DT", "      ", rs.getString("REG_DT"));
				this.AddToResultXMLBuffer(strResult, "CT_LENG", "      ", rs.getString("CT_LENG"));
				this.AddToResultXMLBuffer(strResult, "DURATION", "      ", rs.getLong("DURATION") + "");
				this.AddToResultXMLBuffer(strResult, "CT_SEQ", "      ", rs.getLong("CT_SEQ") + "");


				this.AddToResultXMLBuffer(strResult, "KFRM_PATH", "      ", rs.getString("KFRM_PATH"));
				this.AddToResultXMLBuffer(strResult, "KFRM_PX_CD", "      ", rs.getString("KFRM_PX_CD"));
				this.AddToResultXMLBuffer(strResult, "VD_QLTY", "      ", rs.getString("VD_QLTY"));
				this.AddToResultXMLBuffer(strResult, "ASP_RTO_CD", "      ", rs.getString("ASP_RTO_CD"));
				this.AddToResultXMLBuffer(strResult, "CT_CLA", "      ", rs.getString("CT_CLA"));
				this.AddToResultXMLBuffer(strResult, "TOT_KFRM_NUMS", "      ", rs.getString("TOT_KFRM_NUMS"));
				this.AddToResultXMLBuffer(strResult, "MEDIA_ID", "      ", rs.getString("MEDIA_ID"));
				/**
				 * 문제의 특수문자가 있는 cont
				 */
				this.AddToResultXMLBuffer(strResult, "CONT", "      ", rs.getString("CONT"));

				// CTI 관련 자료
				this.AddToResultXMLBuffer(strResult, "CTI_ID", "      ", rs.getLong("CTI_ID") + "");
				this.AddToResultXMLBuffer(strResult, "INGEST_EQ_ID", "      ", rs.getLong("INGEST_EQ_ID") + "");


				String hr = rs.getString("FL_PATH");
				if(hr.matches(".*net_mp4.*")){

					this.AddToResultXMLBuffer(strResult, "FL_PATH", "      ", "cs_net_mp4/"+rs.getString("FL_PATH"));


				}else if(hr.matches(".*mp4.*")){
					this.AddToResultXMLBuffer(strResult, "FL_PATH", "      ", "cs_mp4/"+rs.getString("FL_PATH"));

				}else{
					this.AddToResultXMLBuffer(strResult, "FL_PATH", "      ", rs.getString("FL_PATH"));

				}
				this.AddToResultXMLBuffer(strResult, "WRK_FILE_NM", "      ", rs.getString("WRK_FILE_NM"));
				this.AddToResultXMLBuffer(strResult, "CTI_FMT", "      ", rs.getString("CTI_FMT"));
				this.AddToResultXMLBuffer(strResult, "FL_SZ", "      ", rs.getLong("FL_SZ") + "");
				this.AddToResultXMLBuffer(strResult, "ARCH_STE_YN", "      ", rs.getString("ARCH_STE_YN"));
				this.AddToResultXMLBuffer(strResult, "VD_HRESOL", "      ", rs.getString("VD_HRESOL"));
				this.AddToResultXMLBuffer(strResult, "VD_VRESOL", "      ", rs.getString("VD_VRESOL") + "");
				this.AddToResultXMLBuffer(strResult, "BIT_RT", "      ", rs.getString("BIT_RT") + "");
				this.AddToResultXMLBuffer(strResult, "FRM_PER_SEC", "      ", rs.getString("FRM_PER_SEC"));
				this.AddToResultXMLBuffer(strResult, "AUD_SAMP_FRQ", "      ", rs.getString("AUD_SAMP_FRQ") + "");
				this.AddToResultXMLBuffer(strResult, "AUDIO_BDWT", "      ", rs.getString("AUDIO_BDWT") + "");


				// MAP 관련 자료
				this.AddToResultXMLBuffer(strResult, "S_DURATION", "      ", rs.getLong("S_DURATION") + "");
				this.AddToResultXMLBuffer(strResult, "E_DURATION", "      ", rs.getLong("E_DURATION") + "");



				// annot 관련 자료
				strResult.append("\n      <Annot>");

				if (nCN_ID != nOldCN_ID)		// 각 코너마다 한번씩만 쿼리.
				{            	            	
					StringBuffer buf_annot = new StringBuffer();
					buf_annot.append("\n select anot.CN_ID, anot.ANNOT_ID, anot.CT_ID, anot.ANNOT_CLF_CD");
					buf_annot.append("\n ,anot.ANNOT_CLF_CONT, anot.SOM, anot.EOM,anot.GUBUN ");
					buf_annot.append("\n from DAS.corner_tbl cn ");
					buf_annot.append("\n inner join DAS.ANNOT_INFO_TBL anot on cn.cn_id = anot.cn_id ");
					buf_annot.append("\n inner join  DAS.CONTENTS_MAPP_TBL mapp on mapp.CN_ID = anot.CN_ID ");
					buf_annot.append("\n where ");
					buf_annot.append("\n (mapp.del_dd is null or mapp.del_dd = '') ");
					buf_annot.append("\n  and mapp.cn_id= ? order by anot.cn_id asc with ur");

					psmt_annot = con.prepareStatement(buf_annot.toString());
					int index_annot = 0;			
					psmt_annot.setLong(++index_annot, nCN_ID);


					rs_annot = psmt_annot.executeQuery();	
					while(rs_annot.next())
					{                	
						strResult.append("\n        <Annot_item>");
						gcn_id=rs_annot.getLong("ANNOT_ID");
						this.AddToResultXMLBuffer(strResult, "ANNOT_ID", "      ", rs_annot.getLong("ANNOT_ID") + "");
						this.AddToResultXMLBuffer(strResult, "CT_ID", "      ", rs_annot.getLong("CT_ID") + "");
						this.AddToResultXMLBuffer(strResult, "ANNOT_CLF_CD", "      ", rs_annot.getString("ANNOT_CLF_CD"));
						/**
						 * 특수문자가 있는 annot_clf_conf
						 */
						this.AddToResultXMLBuffer(strResult, "ANNOT_CLF_CONT", "      ", rs_annot.getString("ANNOT_CLF_CONT"));
						this.AddToResultXMLBuffer(strResult, "SOM", "      ", rs_annot.getString("SOM"));
						this.AddToResultXMLBuffer(strResult, "EOM", "      ", rs_annot.getString("EOM"));
						this.AddToResultXMLBuffer(strResult, "GUBUN", "      ", rs_annot.getString("GUBUN"));
						String yn = isEntireRistcd(nMasterID);
						if(yn.equals("")){
							this.AddToResultXMLBuffer(strResult, "ENTIRE_YN", "      ","N" );	
						}else if(!yn.equals("")){
							if(yn.equals(rs_annot.getString("ANNOT_CLF_CD"))){
								this.AddToResultXMLBuffer(strResult, "ENTIRE_YN", "      ","Y" );
							}else {
								this.AddToResultXMLBuffer(strResult, "ENTIRE_YN", "      ","N" );		
							}
						}

						strResult.append("\n        </Annot_item>");      


					}	// while annot

				}                

				strResult.append("\n      </Annot>");
				strResult.append("\n    </item>");            	

				nOldCN_ID = nCN_ID;
			}	// while rs.next

			strResult.append("  </corner>");

		}

		catch (Exception ex)
		{
			logger.error(buf.toString());

			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "getCornerResultXML 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, null);
			release(rs_annot, psmt_annot, con);
		}        
		return strResult.toString();
	}


	// xml을 위한 StringBuffer에 넣어준다.
	// 자바에서 이렇게 하면 속도가 너무 느리지 않을까?
	private void AddToResultXMLBuffer(StringBuffer buf, String strTagname, String strPrefix, String strValue)
	{
		buf.append("\n");
		buf.append(strPrefix);		// identation을 맞춘다.
		buf.append("<");
		buf.append(strTagname);
		buf.append(">");
		buf.append(replace(strValue));
		buf.append("</");
		buf.append(strTagname);
		buf.append(">");
	}


	// Meta 의 photo 정보를 가져온다.
	private String getPhotoResultXML(long nMasterID) throws DASException
	{
		StringBuffer buf = new StringBuffer();
		StringBuffer strResult = new StringBuffer();

		buf.append("\n select  ");
		buf.append("\n phot.GATH_CO_CD,  ");
		buf.append("\n phot.GATH_CLF_CD,  ");
		buf.append("\n phot.MEDIA_COLOR_INFO,  ");
		buf.append("\n phot.GATH_DD,  ");
		buf.append("\n phot.PHOT_REG_ID,  ");
		buf.append("\n phot.CONT,  ");
		buf.append("\n phot.SPC_INFO, ");
		buf.append("\n phot.PHOT_CLF_CD, ");
		buf.append("\n pgmphot.SEQ,  ");
		buf.append("\n pgmphot.BGN_EPN, ");
		buf.append("\n pgmphot.END_EPN, ");
		buf.append("\n pgmphot.MASTER_ID ");
		buf.append("\n from  ");
		buf.append("\n DAS.PGM_PHOT_INFO_TBL pgmphot, DAS.PHOT_TBL phot  ");
		buf.append("\n where  ");
		buf.append("\n pgmphot.MASTER_ID = (select MASTER_ID from DAS.METADAT_MST_TBL where master_id = ?) ");
		buf.append("\n and phot.phot_reg_id = pgmphot.phot_id  ");
		buf.append("\n with ur ");

		Connection con = null;

		PreparedStatement psmt = null;

		ResultSet rs = null;

		try
		{	
			con = DBService.getInstance().getConnection();
			//logger.debug("######getPhotoResultXML######## con : " + con);
			psmt = con.prepareStatement(buf.toString());    
			int index = 0;			
			psmt.setLong(++index, nMasterID);
			rs = psmt.executeQuery();	
			while (rs.next())
			{
				strResult.append("\n  <Photo_item>");

				long nCurPhotoID = rs.getLong("PHOT_REG_ID");

				this.AddToResultXMLBuffer(strResult, "PHOT_REG_ID", "      ", nCurPhotoID + "");
				this.AddToResultXMLBuffer(strResult, "GATH_CO_CD", "      ", rs.getString("GATH_CO_CD"));
				this.AddToResultXMLBuffer(strResult, "GATH_CLF_CD", "      ", rs.getString("GATH_CLF_CD"));
				this.AddToResultXMLBuffer(strResult, "MEDIA_COLOR_INFO", "      ", rs.getString("MEDIA_COLOR_INFO"));
				this.AddToResultXMLBuffer(strResult, "GATH_DD", "      ", rs.getString("GATH_DD"));
				this.AddToResultXMLBuffer(strResult, "CONT", "      ", rs.getString("CONT"));
				this.AddToResultXMLBuffer(strResult, "SPC_INFO", "      ", rs.getString("SPC_INFO"));
				this.AddToResultXMLBuffer(strResult, "PHOT_CLF_CD", "      ", rs.getString("PHOT_CLF_CD"));
				this.AddToResultXMLBuffer(strResult, "SEQ", "      ", rs.getInt("SEQ") + "");
				this.AddToResultXMLBuffer(strResult, "BGN_EPN", "      ", rs.getInt("BGN_EPN") + "");
				this.AddToResultXMLBuffer(strResult, "END_EPN", "      ", rs.getInt("END_EPN") + "");
				this.AddToResultXMLBuffer(strResult, "MASTER_ID", "      ", rs.getLong("MASTER_ID") + "");

				strResult.append("\n  </Photo_item>");
			}	//while (rs.next()) 

			return strResult.toString();
		}

		catch (Exception ex)
		{
			logger.error(buf.toString());

			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "getPhotoResultXML 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, con);
		}        
	}




	/**
	 * getbaseinfo 조회시 첨부파일 정보를 조회한다.
	 * @param master_id
	 * @return
	 * @throws RemoteException
	 */
	public String getAttachResultXML(long nMasterID) throws DASException
	{
		StringBuffer buf = new StringBuffer();
		StringBuffer strResult = new StringBuffer();

		buf.append("\n select  ");
		buf.append("\n attch.FL_NM,  ");
		buf.append("\n code.DESC,  ");
		buf.append("\n attch.FL_SZ,  ");
		buf.append("\n attch.FL_PATH,  ");
		buf.append("\n attch.SEQ,  ");
		buf.append("\n attch.ATTC_FILE_TYPE_CD,  ");
		buf.append("\n attch.ATTC_CLF_CD,  ");
		buf.append("\n attch.ORG_FILE_NM,  ");
		buf.append("\n  value(code2.desc,'') as CAPTION_TYPE_NM , ");
		buf.append("\n attch.CAPTION_TYPE   ");
		buf.append("\n from das.ATTCH_TBL attch ");
		buf.append("\n LEFT OUTER JOIN das.CODE_TBL code  ON  code.CLF_CD='P015' and code.SCL_CD=attch.ATTC_FILE_TYPE_CD    ");
		buf.append("\n LEFT OUTER JOIN das.CODE_TBL code2  ON  code2.CLF_CD='A056' and code2.SCL_CD=attch.CAPTION_TYPE  ");
		buf.append("\n where attch.MOTHR_DATA_ID= ?  ");

		buf.append("\n order by attch.SEQ asc with ur ");

		Connection con = null;
		PreparedStatement psmt = null;
		ResultSet rs = null;

		try
		{	
			con = DBService.getInstance().getConnection();
			//logger.debug("######getAttachResultXML######## con : " + con);
			psmt = con.prepareStatement(buf.toString());    
			int index = 0;			
			psmt.setLong(++index, nMasterID);
			rs = psmt.executeQuery();	
			while (rs.next())
			{
				strResult.append("\n  <Attach_item>");

				this.AddToResultXMLBuffer(strResult, "FL_NM", "      ", rs.getString("FL_NM"));
				this.AddToResultXMLBuffer(strResult, "DESC", "      ", rs.getString("DESC"));
				this.AddToResultXMLBuffer(strResult, "FL_SZ", "      ", rs.getLong("FL_SZ") + "");
				this.AddToResultXMLBuffer(strResult, "FL_PATH", "      ", rs.getString("FL_PATH"));
				this.AddToResultXMLBuffer(strResult, "SEQ", "      ", rs.getInt("SEQ") + "");
				this.AddToResultXMLBuffer(strResult, "ATTC_FILE_TYPE_CD", "      ", rs.getString("ATTC_FILE_TYPE_CD"));
				this.AddToResultXMLBuffer(strResult, "ATTC_CLF_CD", "      ", rs.getString("ATTC_CLF_CD"));
				this.AddToResultXMLBuffer(strResult, "ORG_FILE_NM", "      ", rs.getString("ORG_FILE_NM"));
				this.AddToResultXMLBuffer(strResult, "CAPTION_TYPE_NM", "      ", rs.getString("CAPTION_TYPE_NM"));
				this.AddToResultXMLBuffer(strResult, "CAPTION_TYPE", "      ", rs.getString("CAPTION_TYPE"));

				strResult.append("\n  </Attach_item>");
			}	//while (rs.next()) 

			return strResult.toString();
		}

		catch (Exception ex)
		{
			logger.error(buf.toString());
			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "getAttachResultXML 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, con);
		}        
	}


	// Meta 정보를 가져온다.
	private String getMetaResultXML(long nMasterID) throws DASException
	{
		StringBuffer buf = new StringBuffer();
		StringBuffer strResult = new StringBuffer();

		buf.append("\n SELECT ");
		buf.append("\n   meta.master_ID as META_MASTER_ID  ");
		buf.append("\n   , meta.PGM_ID as META_PGM_ID  ");
		buf.append("\n   , PGM.PGM_CD as PGM_PGM_CD ");
		buf.append("\n   , pgm.PGM_NM as PGM_PGM_NM ");
		buf.append("\n   , pgm.BRD_BGN_DD as PGM_BRD_BGN_DD ");
		buf.append("\n   , pgm.BRD_END_DD as PGM_BRD_END_DD ");
		buf.append("\n   , pgm.MEDIA_CD as PGM_MEDIA_CD ");
		buf.append("\n   , meta.EPIS_NO as META_EPIS_NO  ");
		buf.append("\n   , pgm.CHAN_CD as PGM_CHAN_CD ");
		buf.append("\n   , pgm.PILOT_YN as PGM_PILOT_YN  ");
		buf.append("\n    , CASE WHEN  meta.CTGR_L_CD ='100'  THEN Meta.SUB_TTL  ");
		buf.append("\n    WHEN  META.CTGR_L_CD ='200'  THEN  META.TITLE ");
		buf.append("\n   ELSE ''  ");
		buf.append("\n   END AS TITLE  ");

		buf.append("\n   , meta.CTGR_L_CD as META_CTGR_L_CD  ");
		buf.append("\n   , meta.CTGR_M_CD as META_CTGR_M_CD  ");
		buf.append("\n   , meta.CTGR_S_CD as META_CTGR_S_CD  ");
		buf.append("\n    , CASE WHEN  meta.CTGR_L_CD ='100'  THEN  META.FM_DT  ");
		buf.append("\n    WHEN  META.CTGR_L_CD ='200'  THEN Meta.BRD_DD  ");
		buf.append("\n   ELSE ''  ");
		buf.append("\n   END AS BRD_DD  ");

		buf.append("\n   , meta.FINAL_BRD_YN as META_FINAL_BRD_YN  ");
		buf.append("\n   , meta.SNPS as META_SNPS  ");
		buf.append("\n   , meta.KEY_WORDS as META_KEY_WORDS  ");
		buf.append("\n   , meta.BRD_BGN_HMS as META_BRD_BGN_HMS  ");
		buf.append("\n   , meta.BRD_END_HMS as META_BRD_END_HMS  ");
		buf.append("\n   , meta.BRD_LENG as META_BRD_LENG  ");
		buf.append("\n   , meta.PGM_RATE as META_PGM_RATE  ");
		buf.append("\n   , meta.DRT_NM as META_DRT_NM  ");
		buf.append("\n   , meta.PRODUCER_NM as META_PRODUCER_NM  ");
		buf.append("\n   , meta.WRITER_NM as META_WRITER_NM  ");
		buf.append("\n   , meta.PRDT_IN_OUTS_CD as META_PRDT_IN_OUTS_CD  ");
		buf.append("\n   , meta.PRDT_DEPT_CD as META_PRDT_DEPT_CD  ");
		buf.append("\n   , meta.PRDT_DEPT_NM as META_PRDT_DEPT_NM  ");
		buf.append("\n   , meta.ORG_PRDR_NM as META_ORG_PRDR_NM  ");
		buf.append("\n   , meta.MC_NM as META_MC_NM  ");
		buf.append("\n   , meta.CAST_NM as META_CAST_NM  ");
		buf.append("\n   , meta.CMR_DRT_NM as META_CMR_DRT_NM  ");
		buf.append("\n   , meta.FM_DT as META_FM_DT  ");
		buf.append("\n   , meta.CMR_PLACE as META_CMR_PLACE  ");
		buf.append("\n   , meta.SPC_INFO as META_SPC_INFO  ");
		buf.append("\n   , meta.REQ_CD as META_REQ_CD  ");
		buf.append("\n   , meta.SEC_ARCH_NM as META_SEC_ARCH_NM  ");
		buf.append("\n   , meta.SEC_ARCH_ID as META_SEC_ARCH_ID  ");
		buf.append("\n   , meta.GATH_CO_CD as META_GATH_CO_CD  ");
		buf.append("\n   , meta.GATH_CLF_CD as META_GATH_CLF_CD  ");
		buf.append("\n   , meta.ARCH_REG_DD as META_ARCH_REG_DD  ");
		buf.append("\n   , meta.ARRG_END_DT as META_ARRG_END_DT  ");
		buf.append("\n   , meta.WORK_PRIO_CD as META_WORK_PRIO_CD  ");
		buf.append("\n   , meta.RSV_PRD_CD as META_RSV_PRD_CD  ");
		buf.append("\n   , meta.CPRTR_NM as META_CPRTR_NM  ");
		buf.append("\n   , meta.CPRT_TYPE as META_CPRT_TYPE  ");
		buf.append("\n   , meta.CPRT_TYPE_DSC as META_CPRT_TYPE_DSC  ");
		buf.append("\n   , meta.VIEW_GR_CD as META_VIEW_GR_CD  ");
		buf.append("\n   , meta.DLBR_CD as META_DLBR_CD  ");
		buf.append("\n   , meta.AWARD_HSTR as META_AWARD_HSTR ");
		buf.append("\n   , meta.TAPE_ID as META_TAPE_ID  ");
		buf.append("\n   , meta.TAPE_ITEM_ID as META_TAPE_ITEM_ID  ");
		buf.append("\n   , meta.TAPE_MEDIA_CLF_CD as META_TAPE_MEDIA_CLF_CD  ");
		buf.append("\n   , meta.RSV_PRD_END_DD as META_RSV_PRD_END_DD  ");
		buf.append("\n   , meta.DEL_DD as META_DEL_DD  ");
		buf.append("\n   , meta.USE_YN as META_USE_YN  ");
		buf.append("\n   , meta.REG_DT as META_REG_DT  ");
		buf.append("\n   , meta.MODRID as META_MODRID  ");
		buf.append("\n   , meta.MOD_DT as META_MOD_DT  ");
		buf.append("\n   , meta.GATH_DEPT_CD as META_GATH_DEPT_CD  ");
		buf.append("\n   , meta.MCUID as META_MCUID  ");
		buf.append("\n   , meta.RPIMG_CT_ID as META_RPIMG_CT_ID  ");
		buf.append("\n   , meta.RPIMG_KFRM_SEQ as META_RPIMG_KFRM_SEQ  ");
		buf.append("\n   , meta.DATA_STAT_CD as META_DATA_STAT_CD  ");
		buf.append("\n   , meta.ING_REG_DD as META_ING_REG_DD  ");
		buf.append("\n   , meta.COPY_KEEP as META_COPY_KEEP  ");
		buf.append("\n   , meta.CLEAN_KEEP as META_CLEAN_KEEP  ");
		buf.append("\n   , meta.MUSIC_INFO as META_MUSIC_INFO  ");
		buf.append("\n   , meta.RST_CONT as META_RST_CONT  ");
		buf.append("\n   , meta.RERUN as META_RERUN  ");
		buf.append("\n   , meta.ACCEPTOR_ID as META_ACCEPTOR_ID  ");
		buf.append("\n   , meta.SUB_TTL as META_SUB_TTL  ");
		buf.append("\n   , meta.ARRANGE_NM as META_ARRANGE_NM  ");
		//buf.append("\n   , meta.ASP_RTO_CD as META_ASP_RTO_CD  ");
		//buf.append("\n   , meta.VD_QLTY as META_VD_QLTY  ");
		buf.append("\n   , erpuser.USER_NM as ACCEPTOR_NM  ");
		buf.append("\n   , scenario.TITLE AS SCENARIO_TITLE ");
		buf.append("\n   from das.metadat_mst_tbl meta  ");
		buf.append("\n     left outer join das.PGM_INFO_TBL pgm on meta.pgm_ID = pgm.pgm_id  ");
		buf.append("\n     left outer join DAS.ERP_COM_USER_TBL erpuser on meta.acceptor_ID = erpuser.USER_ID  ");
		buf.append("\n     left outer join DAS.SCENARIO_TBL scenario ON META.MASTER_ID = scenario.MASTER_ID ");
		buf.append("\n   where meta.MASTER_ID = ?  ");
		buf.append("\n   WITH UR ");

		Connection con = null;		
		PreparedStatement psmt = null;		
		ResultSet rs = null;

		try
		{
			strResult.append("\n  <meta>");

			con = DBService.getInstance().getConnection();
			//logger.debug("######getMetaResultXML######## con : " + con);
			psmt = con.prepareStatement(buf.toString());    
			int index = 0;			
			psmt.setLong(++index, nMasterID);
			rs = psmt.executeQuery();	
			if (rs.next())
			{		
				long nCurMasterID = rs.getLong("META_MASTER_ID");

				this.AddToResultXMLBuffer(strResult, "META_MASTER_ID", "      ", nCurMasterID + "");            	
				this.AddToResultXMLBuffer(strResult, "META_PGM_ID", "      ", rs.getLong("META_PGM_ID") + "");
				this.AddToResultXMLBuffer(strResult, "PGM_PGM_CD", "      ", rs.getString("PGM_PGM_CD"));
				this.AddToResultXMLBuffer(strResult, "PGM_PGM_NM", "      ", rs.getString("PGM_PGM_NM"));
				this.AddToResultXMLBuffer(strResult, "PGM_BRD_BGN_DD", "      ", rs.getString("PGM_BRD_BGN_DD"));
				this.AddToResultXMLBuffer(strResult, "PGM_BRD_END_DD", "      ", rs.getString("PGM_BRD_END_DD"));
				this.AddToResultXMLBuffer(strResult, "PGM_MEDIA_CD", "      ", rs.getString("PGM_MEDIA_CD"));
				this.AddToResultXMLBuffer(strResult, "META_EPIS_NO", "      ",rs.getLong("META_EPIS_NO") + "");
				this.AddToResultXMLBuffer(strResult, "PGM_CHAN_CD", "      ", rs.getString("PGM_CHAN_CD"));
				this.AddToResultXMLBuffer(strResult, "PGM_PILOT_YN", "      ",rs.getString("PGM_PILOT_YN") + "");

				this.AddToResultXMLBuffer(strResult, "TITLE", "      ", rs.getString("TITLE"));

				this.AddToResultXMLBuffer(strResult, "META_CTGR_L_CD", "      ", rs.getString("META_CTGR_L_CD"));
				this.AddToResultXMLBuffer(strResult, "META_CTGR_M_CD", "      ", rs.getString("META_CTGR_M_CD"));
				this.AddToResultXMLBuffer(strResult, "META_CTGR_S_CD", "      ", rs.getString("META_CTGR_S_CD"));
				this.AddToResultXMLBuffer(strResult, "BRD_DD", "      ", rs.getString("BRD_DD"));
				this.AddToResultXMLBuffer(strResult, "META_FINAL_BRD_YN", "      ", rs.getString("META_FINAL_BRD_YN"));
				this.AddToResultXMLBuffer(strResult, "META_SNPS", "      ", rs.getString("META_SNPS"));
				this.AddToResultXMLBuffer(strResult, "META_KEY_WORDS", "      ", rs.getString("META_KEY_WORDS"));
				this.AddToResultXMLBuffer(strResult, "META_BRD_BGN_HMS", "      ", rs.getString("META_BRD_BGN_HMS"));
				this.AddToResultXMLBuffer(strResult, "META_BRD_END_HMS", "      ", rs.getString("META_BRD_END_HMS"));
				this.AddToResultXMLBuffer(strResult, "META_BRD_LENG", "      ", rs.getString("META_BRD_LENG"));
				this.AddToResultXMLBuffer(strResult, "META_PGM_RATE", "      ", rs.getString("META_PGM_RATE"));
				this.AddToResultXMLBuffer(strResult, "META_DRT_NM", "      ", rs.getString("META_DRT_NM"));
				this.AddToResultXMLBuffer(strResult, "META_PRODUCER_NM", "      ", rs.getString("META_PRODUCER_NM"));
				this.AddToResultXMLBuffer(strResult, "META_WRITER_NM", "      ", rs.getString("META_WRITER_NM"));
				this.AddToResultXMLBuffer(strResult, "META_PRDT_IN_OUTS_CD", "      ", rs.getString("META_PRDT_IN_OUTS_CD"));
				this.AddToResultXMLBuffer(strResult, "META_PRDT_DEPT_CD", "      ", rs.getString("META_PRDT_DEPT_CD"));
				this.AddToResultXMLBuffer(strResult, "META_PRDT_DEPT_NM", "      ", rs.getString("META_PRDT_DEPT_NM"));
				this.AddToResultXMLBuffer(strResult, "META_ORG_PRDR_NM", "      ", rs.getString("META_ORG_PRDR_NM"));
				this.AddToResultXMLBuffer(strResult, "META_MC_NM", "      ", rs.getString("META_MC_NM"));
				this.AddToResultXMLBuffer(strResult, "META_CAST_NM", "      ", rs.getString("META_CAST_NM"));
				this.AddToResultXMLBuffer(strResult, "META_CMR_DRT_NM", "      ", rs.getString("META_CMR_DRT_NM"));
				this.AddToResultXMLBuffer(strResult, "META_FM_DT", "      ", rs.getString("META_FM_DT"));
				this.AddToResultXMLBuffer(strResult, "META_CMR_PLACE", "      ", rs.getString("META_CMR_PLACE"));
				this.AddToResultXMLBuffer(strResult, "META_SPC_INFO", "      ", rs.getString("META_SPC_INFO"));
				this.AddToResultXMLBuffer(strResult, "META_REQ_CD", "      ", rs.getString("META_REQ_CD"));
				this.AddToResultXMLBuffer(strResult, "META_SEC_ARCH_NM", "      ", rs.getString("META_SEC_ARCH_NM"));
				this.AddToResultXMLBuffer(strResult, "META_SEC_ARCH_ID", "      ", rs.getString("META_SEC_ARCH_ID"));
				this.AddToResultXMLBuffer(strResult, "META_GATH_CO_CD", "      ", rs.getString("META_GATH_CO_CD"));
				this.AddToResultXMLBuffer(strResult, "META_GATH_CLF_CD", "      ", rs.getString("META_GATH_CLF_CD"));
				this.AddToResultXMLBuffer(strResult, "META_ARCH_REG_DD", "      ", rs.getString("META_ARCH_REG_DD"));
				this.AddToResultXMLBuffer(strResult, "META_ARRG_END_DT", "      ", rs.getString("META_ARRG_END_DT"));
				this.AddToResultXMLBuffer(strResult, "META_WORK_PRIO_CD", "      ", rs.getString("META_WORK_PRIO_CD"));
				this.AddToResultXMLBuffer(strResult, "META_RSV_PRD_CD", "      ", rs.getString("META_RSV_PRD_CD"));
				this.AddToResultXMLBuffer(strResult, "META_CPRTR_NM", "      ", rs.getString("META_CPRTR_NM"));
				this.AddToResultXMLBuffer(strResult, "META_CPRT_TYPE", "      ", rs.getString("META_CPRT_TYPE"));
				this.AddToResultXMLBuffer(strResult, "META_CPRT_TYPE_DSC", "      ", rs.getString("META_CPRT_TYPE_DSC"));
				this.AddToResultXMLBuffer(strResult, "META_VIEW_GR_CD", "      ", rs.getString("META_VIEW_GR_CD"));
				this.AddToResultXMLBuffer(strResult, "META_DLBR_CD", "      ", rs.getString("META_DLBR_CD"));
				this.AddToResultXMLBuffer(strResult, "META_AWARD_HSTR", "      ", rs.getString("META_AWARD_HSTR"));
				this.AddToResultXMLBuffer(strResult, "META_TAPE_ID", "      ", rs.getString("META_TAPE_ID"));
				this.AddToResultXMLBuffer(strResult, "META_TAPE_ITEM_ID", "      ", rs.getString("META_TAPE_ITEM_ID"));
				this.AddToResultXMLBuffer(strResult, "META_TAPE_MEDIA_CLF_CD", "      ", rs.getString("META_TAPE_MEDIA_CLF_CD"));
				this.AddToResultXMLBuffer(strResult, "META_RSV_PRD_END_DD", "      ", rs.getString("META_RSV_PRD_END_DD"));
				this.AddToResultXMLBuffer(strResult, "META_DEL_DD", "      ", rs.getString("META_DEL_DD"));
				this.AddToResultXMLBuffer(strResult, "META_USE_YN", "      ", rs.getString("META_USE_YN"));
				this.AddToResultXMLBuffer(strResult, "META_REG_DT", "      ", rs.getString("META_REG_DT"));
				this.AddToResultXMLBuffer(strResult, "META_MODRID", "      ", rs.getString("META_MODRID"));
				this.AddToResultXMLBuffer(strResult, "META_MOD_DT", "      ", rs.getString("META_MOD_DT"));
				this.AddToResultXMLBuffer(strResult, "META_GATH_DEPT_CD", "      ", rs.getString("META_GATH_DEPT_CD"));
				this.AddToResultXMLBuffer(strResult, "META_MCUID", "      ", rs.getString("META_MCUID"));
				this.AddToResultXMLBuffer(strResult, "META_RPIMG_CT_ID", "      ", rs.getLong("META_RPIMG_CT_ID") + "");
				this.AddToResultXMLBuffer(strResult, "META_RPIMG_KFRM_SEQ", "      ", rs.getLong("META_RPIMG_KFRM_SEQ") + "");
				this.AddToResultXMLBuffer(strResult, "META_DATA_STAT_CD", "      ", rs.getString("META_DATA_STAT_CD"));
				this.AddToResultXMLBuffer(strResult, "META_ING_REG_DD", "      ", rs.getString("META_ING_REG_DD"));
				this.AddToResultXMLBuffer(strResult, "META_COPY_KEEP", "      ", rs.getString("META_COPY_KEEP"));
				this.AddToResultXMLBuffer(strResult, "META_CLEAN_KEEP", "      ", rs.getString("META_CLEAN_KEEP"));
				this.AddToResultXMLBuffer(strResult, "META_MUSIC_INFO", "      ", rs.getString("META_MUSIC_INFO"));
				this.AddToResultXMLBuffer(strResult, "META_RST_CONT", "      ", rs.getString("META_RST_CONT"));
				this.AddToResultXMLBuffer(strResult, "META_RERUN", "      ", rs.getString("META_RERUN"));
				this.AddToResultXMLBuffer(strResult, "META_ACCEPTOR_ID", "      ", rs.getString("META_ACCEPTOR_ID"));
				this.AddToResultXMLBuffer(strResult, "META_SUB_TTL", "      ", rs.getString("META_SUB_TTL"));
				this.AddToResultXMLBuffer(strResult, "META_ARRANGE_NM", "      ", rs.getString("META_ARRANGE_NM"));
				this.AddToResultXMLBuffer(strResult, "ACCEPTOR_NM", "      ", rs.getString("ACCEPTOR_NM"));
				this.AddToResultXMLBuffer(strResult, "META_SCENARIO_TITLE", "      ",XmlUtil.checkNull(rs.getString("SCENARIO_TITLE")));

				/*
	            	strResult.append("\n        <META_ASP_RTO_CD>");
	            	strResult.append(rs.getString("META_ASP_RTO_CD"));
	            	strResult.append("</META_ASP_RTO_CD>");

	            	strResult.append("\n        <META_VD_QLTY>");
	            	strResult.append(rs.getString("META_VD_QLTY"));
	            	strResult.append("</META_VD_QLTY>");
				 */
			}	//if (rs.next())

			// photo 정보를 붙인다.
			/* strResult.append("\n      <Photo>");
	            strResult.append(this.getPhotoResultXML(nMasterID));
	            strResult.append("\n      </Photo>");
			 */
			// attach 정보를 붙인다.
			/*    strResult.append("\n      <Attach>");
	            strResult.append(this.getAttachResultXML(nMasterID));
	            strResult.append("\n      </Attach>");
			 */
			strResult.append("  </meta>");

			return strResult.toString();
		}

		catch (Exception ex)
		{
			logger.error(buf.toString());

			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "getMetaResultXML 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, con);
		}        
	}



	/**
	 * 마스터의 해당 정보를 조회
	 * @param xml
	 * @return
	 * @throws RemoteException
	 */
	public String getMasterDataTotaly(String xml) throws DASException
	{	
		StringBuffer strResultBuffer = new StringBuffer();

		long nMasterID = 0;

		// XML에서 masterID를 찾아낸다.
		nMasterID = getMasterIDfromXML(xml);

		strResultBuffer.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n");
		strResultBuffer.append("<Data>\n");

		// Corner, CT, CTI, Map, Meta, Content에서 찾는 경우
		strResultBuffer.append(this.getCornerResultXML(nMasterID));

		// Meta 관련 정보를 가져온다.
		strResultBuffer.append(this.getMetaResultXML(nMasterID));



		strResultBuffer.append("</Data>\n");   
		logger.debug("strResultBuffer.toString()"+strResultBuffer.toString());
		return strResultBuffer.toString();

	}




	/**
	 * 마스터id로 관련데이터를 수집한다
	 * @param xml
	 * @return
	 * @throws Exception 
	 * @throws NumberFormatException 
	 * @throws RemoteException
	 */


	public String getMasterDataAll(String xml) throws NumberFormatException, Exception
	{	
		StringBuffer strResultBuffer = new StringBuffer();

		long nMasterID = 0;
		long rMasterID = 0;
		// XML에서 masterID를 찾아낸다.
		nMasterID = getMasterIDfromXML(xml);
		rMasterID = Long.parseLong(selectRelationMaster(nMasterID));
		strResultBuffer.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n");
		strResultBuffer.append("<Data>\n");

		// Corner, CT, CTI, Map, Meta, Content에서 찾는 경우
		strResultBuffer.append(this.getCornerResultXML(nMasterID));
		//cart 에서 찾는 경우
		strResultBuffer.append(this.getCartResultXML(nMasterID));

		// Meta 관련 정보를 가져온다.
		strResultBuffer.append(this.getMetaResultXML(nMasterID));
		//테이프 미디어 정보를 가져온다.
		strResultBuffer.append(this.getMusicResultXML(nMasterID));

		// 관련 영상 Meta 관련 정보를 가져온다.
		if(nMasterID != rMasterID){
			strResultBuffer.append(this.getRelationMetaResultXML(nMasterID));
		}

		strResultBuffer.append("</Data>\n");   
		logger.debug("strResultBuffer.toString()"+strResultBuffer.toString());
		return strResultBuffer.toString();

	}

	/*public String getBaseInfo(String xml) throws DASException
		{	
			StringBuffer strResultBuffer = new StringBuffer();
			logger.debug("1111" );
			long nMasterID = 0;
			long rMasterID = 0;
			// XML에서 masterID를 찾아낸다.
			nMasterID = getMasterIDfromXML(xml);
			logger.debug("2222" );

				rMasterID = Long.parseLong(selectRelationMaster(nMasterID));

				strResultBuffer.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n");
		    	strResultBuffer.append("<Data>\n");

		    	strResultBuffer.append(this.getBaseResultXML(nMasterID));


	    	strResultBuffer.append("</Data>\n");   
	    	logger.debug("strResultBuffer.toString()"+strResultBuffer.toString());
	        return strResultBuffer.toString();

		}

		public String getSceanInfo(String xml) throws DASException
		{	
			StringBuffer strResultBuffer = new StringBuffer();

			long nMasterID = 0;

			// XML에서 masterID를 찾아낸다.
			nMasterID = getMasterIDfromXML(xml);




				strResultBuffer.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n");
		    	strResultBuffer.append("<Data>\n");

		    	// Corner, CT, CTI, Map, Meta, Content에서 찾는 경우
		    	strResultBuffer.append(this.getCornerResultXML(nMasterID));
		    	//cart 에서 찾는 경우
		    	strResultBuffer.append(this.getCartResultXML(nMasterID));



	    	strResultBuffer.append("</Data>\n");   
	    	logger.debug("strResultBuffer.toString()"+strResultBuffer.toString());
	        return strResultBuffer.toString();

		}

		public String getPhotoInform(String xml) throws DASException
		{	
			StringBuffer strResultBuffer = new StringBuffer();

			long nMasterID = 0;
			long rMasterID = 0;
			// XML에서 masterID를 찾아낸다.
			nMasterID = getMasterIDfromXML(xml);


				rMasterID = Long.parseLong(selectRelationMaster(nMasterID));

				strResultBuffer.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n");
		    	strResultBuffer.append("<Data>\n");

		    	// 사진정보로를 가져온다
		    	strResultBuffer.append(this.getPhotoResultXML(nMasterID));


	    	strResultBuffer.append("</Data>\n");   
	    	logger.debug("strResultBuffer.toString()"+strResultBuffer.toString());
	        return strResultBuffer.toString();

		}
		public String getAttachInfo(String xml) throws DASException
		{	
			StringBuffer strResultBuffer = new StringBuffer();

			long nMasterID = 0;
			long rMasterID = 0;
			// XML에서 masterID를 찾아낸다.
			nMasterID = getMasterIDfromXML(xml);


				rMasterID = Long.parseLong(selectRelationMaster(nMasterID));

				strResultBuffer.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n");
		    	strResultBuffer.append("<Data>\n");

		    	// 사진정보로를 가져온다
		    	strResultBuffer.append(this.getAttachResultXML(nMasterID));


	    	strResultBuffer.append("</Data>\n");   
	    	logger.debug("strResultBuffer.toString()"+strResultBuffer.toString());
	        return strResultBuffer.toString();

		}
		public String getRelationScean(String xml) throws DASException
		{	
			StringBuffer strResultBuffer = new StringBuffer();

			long nMasterID = 0;
			long rMasterID = 0;
			// XML에서 masterID를 찾아낸다.
			nMasterID = getMasterIDfromXML(xml);


				rMasterID = Long.parseLong(selectRelationMaster(nMasterID));

				strResultBuffer.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n");
		    	strResultBuffer.append("<Data>\n");

		    	// Corner, CT, CTI, Map, Meta, Content에서 찾는 경우
		    	strResultBuffer.append(this.getCornerResultXML(rMasterID));
		    	//cart 에서 찾는 경우
		    	strResultBuffer.append(this.getCartResultXML(rMasterID));



	    	strResultBuffer.append("</Data>\n");   
	    	logger.debug("strResultBuffer.toString()"+strResultBuffer.toString());
	        return strResultBuffer.toString();

		}*/


	/**
	 * 특정 마스터id기준의 메타정보를 가져온다
	 * @param master_id
	 * @return
	 * @throws Exception 
	 * @throws NumberFormatException 
	 * @throws RemoteException
	 */
	public String getBaseInfo(long master_id) throws NumberFormatException, Exception
	{	
		StringBuffer strResultBuffer = new StringBuffer();

		long nMasterID = 0;
		long rMasterID = 0;
		// XML에서 masterID를 찾아낸다.
		//	nMasterID = getMasterIDfromXML(master_id);

		strResultBuffer.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n");
		strResultBuffer.append("<Data>\n");
		StringBuffer strResult = new StringBuffer();
		strResult.append("\n  <meta>");

		strResult.append(getBaseResultXML(nMasterID));

		strResult.append("\n      <ingest>");
		strResult.append(getIngestMetaResultXML(nMasterID));
		strResult.append("\n      </ingest>");

		rMasterID = Long.parseLong(selectRelationMaster(nMasterID));
		// 관련 영상 Meta 관련 정보를 가져온다.
		if(nMasterID != rMasterID){

			strResult.append(getRelationMetaResultXML(nMasterID));

		}
		strResult.append("\n      <Attach>");
		strResult.append(getAttachResultXML(nMasterID));
		strResult.append("\n      </Attach>");

		strResult.append("\n      <Annot>");
		strResult.append(getAnnotInfoXML(nMasterID));
		strResult.append("\n      </Annot>");

		strResult.append("  </meta>");


		strResultBuffer.append("</Data>\n");   
		logger.debug("strResultBuffer.toString()"+strResultBuffer.toString());
		return strResultBuffer.toString();

	}
	/**
	 * 화면정보를 조회한다.
	 * @param master_id
	 * @return
	 * @throws RemoteException
	 */
	public String getSceanInfo(long master_id) throws DASException
	{	
		StringBuffer strResultBuffer = new StringBuffer();

		strResultBuffer.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n");
		strResultBuffer.append("<das>\n");

		// Corner, CT, CTI, Map, Meta, Content에서 찾는 경우
		strResultBuffer.append(this.getCornerResultXML(master_id));

		strResultBuffer.append("</das>\n");   
		return strResultBuffer.toString();

	}

	/**
	 * 첨부파일 메타 정보를 조회한다.
	 * @param master_id
	 * @return
	 * @throws Exception 
	 * @throws NumberFormatException 
	 * @throws RemoteException
	 */
	public String getAttachInfo(long master_id) throws NumberFormatException, Exception
	{	
		StringBuffer strResultBuffer = new StringBuffer();

		long rMasterID = 0;
		// XML에서 masterID를 찾아낸다.


		rMasterID = Long.parseLong(selectRelationMaster(master_id));

		strResultBuffer.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n");
		strResultBuffer.append("<Data>\n");

		// 사진정보로를 가져온다
		strResultBuffer.append(this.getAttachResultXML(master_id));


		strResultBuffer.append("</Data>\n");   
		logger.debug("strResultBuffer.toString()"+strResultBuffer.toString());
		return strResultBuffer.toString();

	}

	/**
	 * 관련영상을 조회한다.
	 * @param master_id
	 * @return
	 * @throws Exception 
	 * @throws NumberFormatException 
	 * @throws RemoteException
	 */
	public String getRelationScean(long master_id) throws NumberFormatException, Exception
	{	
		StringBuffer strResultBuffer = new StringBuffer();

		long rMasterID = 0;


		rMasterID = Long.parseLong(selectRelationMaster(master_id));

		strResultBuffer.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n");
		strResultBuffer.append("<Data>\n");

		// Corner, CT, CTI, Map, Meta, Content에서 찾는 경우
		strResultBuffer.append(this.getCornerResultXML(rMasterID));
		//cart 에서 찾는 경우
		strResultBuffer.append(this.getCartResultXML(rMasterID));



		strResultBuffer.append("</Data>\n");   
		logger.debug("strResultBuffer.toString()"+strResultBuffer.toString());
		return strResultBuffer.toString();

	}

	/**
	 * WMV 재생성 요청시에 강창국 과장님이 만든 프로그램에서 메소드 호출하여 변경시켜 주는 것.
	 * @param Re_no REQ_RE_WMV_TBL 의 RE_NO 값
	 * @param Stat_cd REQ_RE_WMV_TBL 의 STAT_CD 값
	 * @throws Exception 
	 */
	public int updateWmvStatusCommand(int Re_no, String Stat_cd) throws Exception
	{
		StringBuffer buf = new StringBuffer();
		buf.append("\n update DAS.REQ_RE_WMV_TBL  ");
		buf.append("\n SET STAT_CD= ? ");		
		buf.append("\n WHERE RE_NO = ? ");

		Connection con = null;
		PreparedStatement stmt = null;		
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateWmvStatusCommand######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;			
			stmt.setString(++index, Stat_cd); 	
			stmt.setInt(++index, Re_no);

			int nResult=stmt.executeUpdate();
			return nResult;
		} 
		catch (Exception e) 
		{
			logger.error(buf.toString());

			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}

	/**
	 * 일괄수정할 데이타를 수정한다.
	 * @param totalchangeinfoDO
	 * @return
	 * @throws Exception 
	 */
	public int updateTotalChange(TotalChangeInfoDO totalchangeinfoDO)throws Exception{
		StringBuffer buf = new StringBuffer();


		Connection con = null;
		PreparedStatement stmt = null;

		try {
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateTotalChange######## con : " + con);
			int nResult =0;

			if(totalchangeinfoDO.getGubun().equals(DASBusinessConstants.TotalChangeCombo.RECORD_TYPE_CD)){
				buf.append("\n update DAS.CONTENTS_INST_TBL set  ");
				buf.append("\n RECORD_TYPE_CD = ? ");

				buf.append("\n where CT_ID in (select distinct mapp.ct_id from contents_mapp_tbl mapp ");
				buf.append("\n inner join contents_tbl con on con.ct_id = mapp.ct_id and con.CT_TYP='003' ");
				buf.append("\n where mapp.master_id in (");
				buf.append("\n  "+totalchangeinfoDO.getMasterIdGrp()+" ) )  ");

			}else{
				buf.append(" UPDATE DAS.METADAT_MST_TBL ");
				buf.append("\n set ");
				if(totalchangeinfoDO.getGubun().equals(DASBusinessConstants.TotalChangeCombo.CTGR)){
					buf.append("\n  "+DASBusinessConstants.TotalChangeCombo.CTGR_L_CD+" = ? ");
					buf.append("\n  ,"+DASBusinessConstants.TotalChangeCombo.CTGR_M_CD+" =? ");
					buf.append("\n  ,"+DASBusinessConstants.TotalChangeCombo.CTGR_S_CD+" =? ");
				}else{
					buf.append("\n  "+totalchangeinfoDO.getGubun()+"=? ");
				}
				buf.append("\n where master_id in (");
				buf.append("\n  "+totalchangeinfoDO.getMasterIdGrp()+" )   ");
			}

			stmt = con.prepareStatement(buf.toString());
			int index = 0;
			if(totalchangeinfoDO.getGubun().equals(DASBusinessConstants.TotalChangeCombo.RECORD_TYPE_CD)){
				stmt.setString(++index, totalchangeinfoDO.getRecord_type_cd());
			}else if(totalchangeinfoDO.getGubun().equals(DASBusinessConstants.TotalChangeCombo.RSV_PRD_CD)){
				stmt.setString(++index, totalchangeinfoDO.getRsv_prd_cd());

				index = 0;
				//날짜계산
				String getRsv_prd_end_dd = "";

				String dateTime = CalendarUtil.getDateTime("yyyyMMdd");
				try{


					SimpleDateFormat formatter = new SimpleDateFormat ("yyyyMMdd");

					Date date = formatter.parse(dateTime);	

					Calendar calendar = Calendar.getInstance();		     
					if(totalchangeinfoDO.getRsv_prd_cd().equals("000")){//영구
						calendar.setTime(date);
						calendar.add(Calendar.YEAR, +9999);

					} else if(totalchangeinfoDO.getRsv_prd_cd().equals("003")){//3일
						calendar.setTime(date);
						calendar.add(Calendar.DAY_OF_MONTH, +3);
						getRsv_prd_end_dd=formatter.format(calendar.getTime());

					}else if(totalchangeinfoDO.getRsv_prd_cd().equals("005")){//5일
						calendar.setTime(date);
						calendar.add(Calendar.DAY_OF_MONTH, +5);
						getRsv_prd_end_dd=formatter.format(calendar.getTime());		    	  
					}else if(totalchangeinfoDO.getRsv_prd_cd().equals("030")){//한달
						calendar.setTime(date);
						calendar.add(Calendar.DAY_OF_MONTH, +30);
						getRsv_prd_end_dd=formatter.format(calendar.getTime());    	  
					}else if(totalchangeinfoDO.getRsv_prd_cd().equals("060")){//5년
						calendar.setTime(date);
						calendar.add(Calendar.YEAR, +5);
						getRsv_prd_end_dd=formatter.format(calendar.getTime());

					}else if(totalchangeinfoDO.getRsv_prd_cd().equals("120")){//10년
						calendar.setTime(date);
						calendar.add(Calendar.YEAR, +10);
						getRsv_prd_end_dd=formatter.format(calendar.getTime());			    	  
					}else if(totalchangeinfoDO.getRsv_prd_cd().equals("240")){//20년
						calendar.setTime(date);
						calendar.add(Calendar.YEAR, +20);
						getRsv_prd_end_dd=formatter.format(calendar.getTime());		    	  
					}else if(totalchangeinfoDO.getRsv_prd_cd().equals("360")){//30년
						calendar.setTime(date);
						calendar.add(Calendar.YEAR, +30);
						getRsv_prd_end_dd=formatter.format(calendar.getTime());		    	  
					}else if(totalchangeinfoDO.getRsv_prd_cd().equals("001")){//1년
						calendar.setTime(date);
						calendar.add(Calendar.YEAR, +1);
						getRsv_prd_end_dd=formatter.format(calendar.getTime());		    	  
					}

					updateUseInfo(getRsv_prd_end_dd,totalchangeinfoDO.getRsv_prd_cd(),totalchangeinfoDO.getMasterIdGrp());
				} catch(Exception e) {
					logger.error(e);
				}
				//			}else if(totalchangeinfoDO.getGubun().equals(DASBusinessConstants.TotalChangeCombo.CTGR_L_CD)){
				//				stmt.setString(++index, totalchangeinfoDO.getCtgr_l_cd());
				//			}else if(totalchangeinfoDO.getGubun().equals(DASBusinessConstants.TotalChangeCombo.CTGR_M_CD)){
				//				stmt.setString(++index, totalchangeinfoDO.getCtgr_m_cd());
				//			}else if(totalchangeinfoDO.getGubun().equals(DASBusinessConstants.TotalChangeCombo.CTGR_S_CD)){
				//				stmt.setString(++index, totalchangeinfoDO.getCtgr_s_cd());
			}else if(totalchangeinfoDO.getGubun().equals(DASBusinessConstants.TotalChangeCombo.CTGR)){
				stmt.setString(++index, totalchangeinfoDO.getCtgr_l_cd());
				stmt.setString(++index, totalchangeinfoDO.getCtgr_m_cd());
				stmt.setString(++index, totalchangeinfoDO.getCtgr_s_cd());
			}else if(totalchangeinfoDO.getGubun().equals(DASBusinessConstants.TotalChangeCombo.PRDT_IN_OUTS_CD)){
				stmt.setString(++index, totalchangeinfoDO.getPrdt_in_outs_cd());
			}else if(totalchangeinfoDO.getGubun().equals(DASBusinessConstants.TotalChangeCombo.PRDT_DEPT_CD)){
				stmt.setString(++index, totalchangeinfoDO.getPrdt_dept_cd());
			}else if(totalchangeinfoDO.getGubun().equals(DASBusinessConstants.TotalChangeCombo.CMR_PLACE)){
				stmt.setString(++index, totalchangeinfoDO.getCmr_place());
			}else if(totalchangeinfoDO.getGubun().equals(DASBusinessConstants.TotalChangeCombo.CPRT_TYPE)){
				stmt.setString(++index, totalchangeinfoDO.getCprt_type());
			}else if(totalchangeinfoDO.getGubun().equals(DASBusinessConstants.TotalChangeCombo.CPRT_TYPE_DSC)){
				stmt.setString(++index, totalchangeinfoDO.getCprt_type_dsc());
			}else if(totalchangeinfoDO.getGubun().equals(DASBusinessConstants.TotalChangeCombo.CPRTR_NM)){
				logger.debug("######################   "+DASBusinessConstants.TotalChangeCombo.CPRTR_NM);
				stmt.setString(++index, totalchangeinfoDO.getCprtr_nm());
			}else if(totalchangeinfoDO.getGubun().equals(DASBusinessConstants.TotalChangeCombo.PRDT_DEPT_NM)){
				stmt.setString(++index, totalchangeinfoDO.getPrdt_dept_nm());
			}else if(totalchangeinfoDO.getGubun().equals(DASBusinessConstants.TotalChangeCombo.award_hstr)){
				stmt.setString(++index, totalchangeinfoDO.getAward_hstr());
			}else if(totalchangeinfoDO.getGubun().equals(DASBusinessConstants.TotalChangeCombo.ORG_PRDR_DEP_NM)){
				stmt.setString(++index, totalchangeinfoDO.getOrg_prdr_nm());
			}

			if(!totalchangeinfoDO.getGubun().equals("")&&!totalchangeinfoDO.getMasterIdGrp().equals("")){
				stmt.executeUpdate();
				nResult=1;

			}
			if(totalchangeinfoDO.getGubun().equals(DASBusinessConstants.TotalChangeCombo.PRDT_DEPT_NM)){
				//프로시져 호출 함수
				String[] master = totalchangeinfoDO.getMasterIdGrp().split(",");
				for(int i=0;i<master.length ;i++){

					systemManageDAO.insertMetaInfo(Integer.parseInt(master[i]));
				}
			}
			return nResult;
		} 
		catch (Exception e) 
		{
			logger.error(buf.toString());

			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}
	}

	public int selectNewTotalChangeCount(ProgramInfoDO programInfoDO, String flag) throws Exception {
		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
			con = DBService.getInstance().getConnection();
			//logger.debug("######selectTotalChangelist######## con : " + con);
			
			String query = ExternalStatement.selectNewTotalChangelistQuery(programInfoDO, flag);
			
			//총 조회 갯수를 구한다.
			int totalCount  = getTotalCount(con, ExternalStatement.selectNewTotalChangelistQuery(programInfoDO, flag));

			return totalCount;
		} catch (Exception e) {
			throw e;
		} finally {
			release(rs, stmt, con);
		}
	}
	
	@Deprecated
	public int selectTotalChangeCount(ProgramInfoDO programInfoDO) throws Exception
	{
		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{


			//Page에 따른 계산을 한다.
			int page = programInfoDO.getPage();
			if(page == 0)
			{
				page = 1;
			}
			con = DBService.getInstance().getConnection();
			//logger.debug("######selectTotalChangelist######## con : " + con);
			
			String query = ExternalStatement.selectTotalChangelistQuery(programInfoDO, DASBusinessConstants.PageQueryFlag.TOTAL_COUNT);
			if(logger.isDebugEnabled()) logger.debug(query);

			//총 조회 갯수를 구한다.
			int totalCount  = getTotalCount(con, query);


			return totalCount;

		} 

		catch (Exception e) 
		{

			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}
	/**
	 * 일괄 수정할 데이타를 조회한다.
	 * @param programInfoDO
	 * @return
	 * @throws Exception 
	 */
	public List selectNewTotalChangelist(ProgramInfoDO	programInfoDO, String flag) throws Exception {
		
		
		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			String query = ExternalStatement.selectNewTotalChangelistQuery(programInfoDO, flag);
			logger.debug(query);
			
			//Page에 따른 계산을 한다.
			int page = programInfoDO.getPage();
			if(page == 0)
			{
				page = 1;
			}
			con = DBService.getInstance().getConnection();

			stmt = con.prepareStatement(query);

			int endNum = page * DASBusinessConstants.PageRowCount.BASIC_ROW_COUTN;
			int startNum = endNum - (DASBusinessConstants.PageRowCount.BASIC_ROW_COUTN -1);
			int index = 0;
			stmt.setInt(++index, startNum);
			stmt.setInt(++index, endNum);

			String str = null;		
			rs = stmt.executeQuery();
			List resultList  = new ArrayList();
			while(rs.next()) {
				ProgramInfoDO item = new ProgramInfoDO();
				item.setPgmId(  rs.getLong("PGM_ID"));
				item.setMasterId( rs.getLong("MASTER_ID"));
				item.setPgmNm((rs.getString("title")));
				String epis = rs.getString("EPIS_NO");
				if(epis.trim().equals("0")){
					item.setEpis_No("");
				}else{
					item.setEpis_No( rs.getString("EPIS_NO"));	
				}
				item.setBrd_dd( rs.getString("BRD_DD"));
				item.setCtgrLCd(rs.getString("CTGR_L_CD"));
				item.setCtgrMCd(rs.getString("CTGR_M_CD"));
				item.setCtgrSCd(rs.getString("CTGR_S_CD"));
				item.setPrdt_dept_nm(rs.getString("PRDT_DEPT_NM"));
				item.setPrdt_in_outs_cd(rs.getString("PRDT_IN_OUTS_CD"));
				item.setCmr_place(rs.getString("CMR_PLACE"));
				item.setCprt_type_dsc(rs.getString("CPRT_TYPE_DSC"));
				item.setRsv_prd_cd(rs.getString("RSV_PRD_CD"));
				item.setCprt_type(rs.getString("CPRT_TYPE"));
				item.setCprtr_nm(rs.getString("CPRTR_NM"));
				item.setData_stat_cd(rs.getString("DATA_STAT_CD"));
				item.setRecord_type_cd(rs.getString("RECORD_TYPE_CD"));
				item.setAward_Hstr(rs.getString("AWARD_HSTR"));
				item.setOrg_prdr_nm(rs.getString("ORG_PRDR_NM"));
	
				resultList.add(item);		
			}		

			return resultList;

		} catch (Exception e) {
			 throw e;
		} finally {
			release(rs, stmt, con);
		}
	}
	@Deprecated
	public List selectTotalChangelist(ProgramInfoDO	programInfoDO) throws Exception
	{
		StringBuffer buf = new StringBuffer();
		buf.append(" select * FROM   	\n");
		buf.append(" (       	\n");
		buf.append( ExternalStatement.selectTotalChangelistQuery(programInfoDO, DASBusinessConstants.PageQueryFlag.NORMAL) );
		buf.append(" ) AS temp                                                           											\n");
		buf.append(" where temp.rownum >= ? and temp.rownum <=?                                            	\n");

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{


			//Page에 따른 계산을 한다.
			int page = programInfoDO.getPage();
			if(page == 0)
			{
				page = 1;
			}
			con = DBService.getInstance().getConnection();
			//logger.debug("######selectTotalChangelist######## con : " + con);

			//총 조회 갯수를 구한다.
			//int totalCount  = getTotalCount(con, ExternalStatement.selectTotalChangelistQuery(programInfoDO, DASBusinessConstants.PageQueryFlag.TOTAL_COUNT));


			logger.debug("query : " + buf.toString());
			stmt = con.prepareStatement(buf.toString());

			int endNum = page * DASBusinessConstants.PageRowCount.BASIC_ROW_COUTN;
			int startNum = endNum - (DASBusinessConstants.PageRowCount.BASIC_ROW_COUTN -1);
			int index = 0;
			stmt.setInt(++index, startNum);
			stmt.setInt(++index, endNum);

			String str = null;		
			rs = stmt.executeQuery();
			List resultList  = new ArrayList();
			while(rs.next())
			{
				ProgramInfoDO item = new ProgramInfoDO();
				item.setPgmId(  rs.getLong("PGM_ID"));
				item.setMasterId( rs.getLong("MASTER_ID"));
				item.setPgmNm((rs.getString("title")));
				String epis = rs.getString("EPIS_NO");
				if(epis.trim().equals("0")){
					item.setEpis_No("");
				}else{
					item.setEpis_No( rs.getString("EPIS_NO"));	
				}
				item.setBrd_dd( rs.getString("BRD_DD"));
				item.setCtgrLCd(rs.getString("CTGR_L_CD"));
				item.setCtgrMCd(rs.getString("CTGR_M_CD"));
				item.setCtgrSCd(rs.getString("CTGR_S_CD"));
				item.setPrdt_dept_nm(rs.getString("PRDT_DEPT_NM"));
				item.setPrdt_in_outs_cd(rs.getString("PRDT_IN_OUTS_CD"));
				item.setCmr_place(rs.getString("CMR_PLACE"));
				item.setCprt_type_dsc(rs.getString("CPRT_TYPE_DSC"));
				item.setRsv_prd_cd(rs.getString("RSV_PRD_CD"));
				item.setCprt_type(rs.getString("CPRT_TYPE"));
				item.setCprtr_nm(rs.getString("CPRTR_NM"));
				item.setData_stat_cd(rs.getString("DATA_STAT_CD"));
				item.setRecord_type_cd(rs.getString("RECORD_TYPE_CD"));
				item.setAward_Hstr(rs.getString("AWARD_HSTR"));
				item.setOrg_prdr_nm(rs.getString("ORG_PRDR_NM"));
				//item.setTotalpage(totalCount);			
				resultList.add(item);		
			}		

			return resultList;

		} 

		catch (Exception e) 
		{
			logger.error(buf.toString());

			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}
	/**
	 * 영상의 위치를 설정한다(다운로드)
	 * 
	 * @param downCartDO 카트정보

	 * @return _strg_loc 설정된위치
	 * @throws Exception 
	 */
	public String whichLoc (DownCartDO downCartDO) throws Exception{

		String strReqUsrID = getReqUsrID(downCartDO.getCartNo());
		String _strg_loc = dasHandler.getProperty("WINMP2")+CodeConstants.RestoreLoc.PDS+"/" + strReqUsrID + "/" + downCartDO.getCartNo();

		return _strg_loc;
	}
	/**
	 * 영상의 위치를 설정한다(다운로드)신규로직용
	 * 
	 * @param downCartDO 카트정보

	 * @return _strg_loc 설정된위치
	 * @throws Exception 
	 */
	public String whichStLocForNew (DownCartDO downCartDO) throws Exception{

		String strReqUsrID = getReqUsrID(downCartDO.getCartNo());
		String _strg_loc = CodeConstants.RestoreLoc.PDS+"/" + strReqUsrID + "/" + downCartDO.getCartNo();

		return _strg_loc;
	}


	/**
	 * 영상의 위치를 설정한다(다운로드, 스토리지 다운로드)
	 * 
	 * @param downCartDO 카트정보

	 * @return _strg_loc 설정된위치
	 * @throws Exception 
	 */
	public CartContDO whichStLoc(DownCartDO downCartDO) throws Exception{

		return selectCartContInfo(downCartDO.getCartNo(), downCartDO.getCartSeq());

	}



	/**
	 * 등록사진  조회한다(팝업).
	 * @param photoInfoDO                                                                                                                        
	 * @return                                                                                                                         
	 * @throws Exception 
	 */
	public List getAttachPhotoList(PhotoInfoDO condition) throws Exception
	{
		PageDO pageDO = new PageDO();

		StringBuffer buf = new StringBuffer();
		buf.append("\n select * FROM                                                      										\n");
		buf.append("\n (                                                                  												\n");
		buf.append(ExternalStatement.selecAttachPhotoList(condition, DASBusinessConstants.PageQueryFlag.NORMAL));
		buf.append("\n ) AS temp                                                           											\n");
		buf.append("\n WITH UR	 ");

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######getAttachPhotoList######## con : " + con);
			//총 조회 갯수를 구한다.
			int totalCount  = 
					getTotalCount(con, ExternalStatement.selecAttachPhotoList(condition, DASBusinessConstants.PageQueryFlag.TOTAL_COUNT));



			stmt = con.prepareStatement(buf.toString());


			rs = stmt.executeQuery();

			int indexCount = 0;
			List resultList = new ArrayList();

			while(rs.next())
			{
				PhotoInfoDO item = new PhotoInfoDO();


				item.setTitle(				rs.getString("title"));
				item.setBrd_dd(rs.getString("brd_dd"));
				item.setRegDt(rs.getString("reg_dt"));		
				item.setMaster_id(rs.getInt("master_id"));
				item.setEpis(rs.getInt("epis_no"));

				resultList.add(item);
			}

			int totalPageCount = totalCount / DASBusinessConstants.PageRowCount.USER_ROLE_ROW_COUNT  + (totalCount % DASBusinessConstants.PageRowCount.USER_ROLE_ROW_COUNT != 0 ? 1 : 0);

			//검색된 List를 셋팅한다.
			pageDO.setPageItems(resultList);
			//계산된 총 Page 수를 셋팅한다.
			pageDO.setTotalPageCount(totalPageCount);


			return resultList;
		} 
		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}

	/**
	 * 등록사진 텝을 조회한다.
	 * @param master_id 마스터id                                                                                                                        
	 * @return List                                                                                                                         
	 * @throws Exception 
	 */
	public List getPhotoList(int master_id) throws Exception
	{
		PageDO pageDO = new PageDO();

		StringBuffer buf = new StringBuffer();
		buf.append("\n select * FROM                                                      										\n");
		buf.append(" (                                                                  												\n");
		buf.append(ExternalStatement.selecPhotoList(master_id, DASBusinessConstants.PageQueryFlag.NORMAL));
		buf.append("\n ) AS temp                                                           											\n");
		//buf.append(" where temp.rownum >= ? and temp.rownum <=?                                            	\n");
		buf.append(" \n WITH UR	 ");

		//Page에 따른 계산을 한다.
		//int page = condition.getPage();
		//if(page == 0)
		//{
		//	page = 1;
		//}

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######getPhotoList######## con : " + con);

			//총 조회 갯수를 구한다.
			int totalCount  = 
					getTotalCount(con, ExternalStatement.selecPhotoList(master_id, DASBusinessConstants.PageQueryFlag.TOTAL_COUNT));



			stmt = con.prepareStatement(buf.toString());



			rs = stmt.executeQuery();

			List resultList = new ArrayList();

			while(rs.next())
			{
				PhotoInfoDO item = new PhotoInfoDO();

				item.setFlPath(				rs.getString("fl_path"));
				item.setCont(				rs.getString("cont"));
				item.setResoultion(rs.getString("resolution"));
				item.setCprtr_nm(rs.getString("cprtr_nm"));
				item.setDown_yn(rs.getString("down_yn"));
				item.setMaster_id(rs.getInt("master_id"));
				item.setPhotRegId(rs.getInt("phot_reg_id"));
				item.setOrg_fl_nm(rs.getString("ORG_FILE_NM"));
				item.setFlie_size(rs.getLong("FL_SZ"));
				resultList.add(item);
			}

			int totalPageCount = totalCount / DASBusinessConstants.PageRowCount.USER_ROLE_ROW_COUNT  + (totalCount % DASBusinessConstants.PageRowCount.USER_ROLE_ROW_COUNT != 0 ? 1 : 0);

			//검색된 List를 셋팅한다.
			pageDO.setPageItems(resultList);
			//계산된 총 Page 수를 셋팅한다.
			pageDO.setTotalPageCount(totalPageCount);


			return resultList;
		} 
		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}



	/** XML만들기위한 정보를 얻는다.(nds, pds)
	 * 
	 * @param                                                                                                                         
	 * @return                                                                                                                         
	 * @throws Exception 
	 */
	public List getXmlForNPds(DownCartDO downCartDO) throws Exception
	{
		PageDO pageDO = new PageDO();

		StringBuffer buf = new StringBuffer();
		buf.append("\n select cart.CART_SEQ, MST.TITLE  from cart_cont_tbl cart	\n");
		buf.append("\n inner join DOWN_CART_TBL down on down.CART_NO = cart.CART_NO    \n");

		buf.append("\n inner join METADAT_MST_TBL MST on MST.MASTER_ID= cart.MASTER_ID                                 ");
		buf.append("\n inner join contents_tbl con on con.CT_ID = cart.CT_ID                                 ");

		buf.append(" \n where cart.cart_no =?	 ");


		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######getXmlForNPds######## con : " + con);


			stmt = con.prepareStatement(buf.toString());


			int index = 0;

			stmt.setLong(++index, downCartDO.getCartNo());

			rs = stmt.executeQuery();

			List resultList = new ArrayList();

			while(rs.next())
			{


				downCartDO.setCartSeq(				rs.getLong("CART_SEQ"));
				downCartDO.setTitle(				rs.getString("TITLE"));			
				downCartDO.setFile_nm(downCartDO.getTitle()+"_"+downCartDO.getMedia_id()+"_HR");
				downCartDO.setFile_nm("DASdownTest_01281543");
				resultList.add(downCartDO);
			}



			return resultList;
		} 

		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}



	/**
	 * 사진 정보를 저장한다.
	 * @param photoInfoDO 사진 정보 리스트	
	 * @return 	PhotoInfoDO object 리스트 
	 * @throws Exception 
	 */
	public int insertAttachPotoinfo(PhotoInfoDO photoInfoDO) throws Exception
	{
		Connection con = null;
		PreparedStatement stmt2 = null;

		ResultSet rs = null;

		String query = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######insertAttachPotoinfo######## con : " + con);
			con.setAutoCommit(false);

			int updatecount1=0;

			int index = 0;	
			// 파일명으로 사용할 시퀀스. 새로운 파일이 들어올 때마다 시퀀스에서 하나씩 가져와서 그 숫자를 파일명으로 사용.

			String photoId = null, photoSeq = null;
			List resultList = new ArrayList();




			//PGM관련 사진 정보를 저장한다



			query = ExternalStatement.insertPgmPhotoInfoQuery();
			String[] regList = photoInfoDO.getPhotRegIdS().split(",");
			String[] photList = photoInfoDO.getMaster_ids().split(",");

			for(int k =0; k<regList.length; k++){
				String PhotRegId = regList[k];


				for(int i = 0; i<photList.length; i++){
					index = 0;	
					String masted_id = photList[i];


					stmt2 = con.prepareStatement(query);

					//순번을  채번한다
					photoSeq = getNextSquence(con, "seq_photo_seq");
					stmt2.setInt(++index, Integer.parseInt(photoSeq)); 

					photoInfoDO.setSeq(Integer.parseInt(photoSeq));

					stmt2.setLong(++index, Long.parseLong(masted_id)); 
					//stmt.setLong(++index, photoInfoDO.getPhotId());
					stmt2.setLong(++index, Long.parseLong(PhotRegId));

					stmt2.setString(++index,  CalendarUtil.getDateTime("yyyyMMddHHmmss")); 

					stmt2.setString(++index,  photoInfoDO.getReg_id()); 

					stmt2.setString(++index,   photoInfoDO.getTitle()); 

					stmt2.setString(++index,   "N"); 
					updatecount1 = stmt2.executeUpdate();

				}
				//resultList.add(photoInfoDO);
				//} //end while

				con.commit();
			}
			return updatecount1;


		} 

		catch (Exception e) 
		{
			logger.error(query);
			if(con != null)
			{
				try {
					con.rollback();					
				} catch (SQLException e1) {
					// TODO 자동 생성된 catch 블록
					logger.error(e1);
				}
			}


			throw e;
		}
		finally
		{
			//try { 	if (stmt != null)  stmt.close();	} catch (SQLException e) {}
			try {
				con.setAutoCommit(true);
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				logger.error(e);
			}
			release(rs, stmt2, con);
		}

	}
	/**
	 * das_tm에서 받은 정보를 입력한다
	 * @param pgmUserInfoDO 정보를 가지고있는 beans
	 * @return 	updatecount
	 * @throws Exception 
	 */
	public int insertTmStatusAll(TransferDO pgmUserInfoDO)throws Exception{


		StringBuffer buf = new StringBuffer();
		buf.append("\n INSERT INTO DAS.ARIEL_INFO_TBL  (   ");
		buf.append("\n    CART_NO ");
		buf.append("\n   ,CART_SEQ ");
		buf.append("\n   ,MESSAGE ");
		buf.append("\n   ,TASK_ID ");
		buf.append("\n   ,SUCCESS_YN ");
		buf.append("\n   ,PROGERESS )");
		buf.append("\n values ");
		buf.append("\n ( ");		
		buf.append("\n ?, ?, ?, ?, ?, ? ");
		buf.append("\n ) ");


		Connection con = null;
		PreparedStatement stmt = null;
		int updateCount;
		int iTmp  = 0;
		try {
			con=DBService.getInstance().getConnection();
			//logger.debug("######insertAttachPotoinfo######## con : " + con);

			stmt = con.prepareStatement(buf.toString());
			int index = 0;

			stmt.setInt(++index, pgmUserInfoDO.getCart_no());
			stmt.setInt(++index, pgmUserInfoDO.getCart_seq());
			stmt.setString(++index, pgmUserInfoDO.getMessage());
			stmt.setInt(++index, pgmUserInfoDO.getTaskID());
			if(!pgmUserInfoDO.getMessage().equals("")){
				stmt.setString(++index, "N");
			}else{
				stmt.setString(++index, "Y");
			}
			stmt.setString(++index, pgmUserInfoDO.getProgress());


			updateCount = stmt.executeUpdate();

			if (logger.isDebugEnabled()) 
			{
				logger.debug("[Inserted Count]" + updateCount);
			}

			if(updateCount == 0)
			{
				//여기서 에러를 던진다.
				DASException exception = new DASException(ErrorConstants.NOT_EXIST_PROGRAM_INFO, "저장에 실패했습니다.");
				throw exception;
			}


			con.commit();
			return updateCount;

		}
		catch (Exception e) 
		{
			logger.error(buf.toString());
			if(con != null)
			{
				try {
					con.rollback();					
				} catch (SQLException e1) {
					// TODO 자동 생성된 catch 블록
					logger.error(e1);
				}
			}


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}



	/**
	 * addtask 결과값를 저장한다.
	 * @param photoInfoDO 사진 정보 리스트	
	 * @return 	PhotoInfoDO object 리스트 
	 * @throws Exception 
	 */
	public int insertAddTaskinfo(TransferDO transfer) throws Exception
	{
		logger.debug(transfer);
		StringBuffer buf = new StringBuffer();
		buf.append("\n INSERT INTO DAS.ARIEL_INFO_TBL  (   ");
		buf.append("\n    CART_NO ");
		buf.append("\n   ,CART_SEQ ");
		buf.append("\n   ,MESSAGE ");
		buf.append("\n   ,TASK_ID ");
		buf.append("\n   ,SUCCESS_YN ");
		buf.append("\n   ,STATUS ");
		buf.append("\n   ,reg_dt ");
		buf.append("\n   ,PROGERESS )");
		buf.append("\n values ");
		buf.append("\n ( ");		
		buf.append("\n ?, ?, ?, ?, ?, ?, ?, ? ");
		buf.append("\n ) ");

		Connection con = null;
		PreparedStatement stmt = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######insertAddTaskinfo######## con : " + con);
			con.setAutoCommit(false);

			stmt = con.prepareStatement(buf.toString());
			String dateTime = CalendarUtil.getDateTime("yyyyMMddHHmmss");
			int index = 0;			
			stmt.setInt(++index, transfer.getCart_no());
			stmt.setInt(++index, transfer.getCart_seq());
			stmt.setString(++index, transfer.getMessage());
			stmt.setInt(++index, transfer.getTaskID());
			if(transfer.getTaskID()!=0){
				stmt.setString(++index, "Y");
			}else {
				stmt.setString(++index, "N");	
			}
			stmt.setString(++index, transfer.getStatus());
			stmt.setString(++index, dateTime);
			stmt.setString(++index, transfer.getProgress());


			int updateCount = stmt.executeUpdate();

			if (logger.isDebugEnabled()) 
			{
				logger.debug("[Inserted Count]" + updateCount);
			}

			if(updateCount == 0)
			{
				//여기서 에러를 던진다.
				DASException exception = new DASException(ErrorConstants.NOT_EXIST_PROGRAM_INFO, "저장에 실패했습니다.");
				throw exception;
			}


			con.commit();
			return updateCount;
		} 

		catch (Exception e) 
		{
			logger.error(buf.toString());

			if(con != null)
			{
				try {
					con.rollback();
				} catch (SQLException e1) {
					// TODO 자동 생성된 catch 블록
					logger.error(e1);
				}
			}


			throw e;
		}
		finally
		{
			try {
				con.setAutoCommit(true);
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				logger.error(e);
			}
			release(null, stmt, con);
		}

	}


	/**
	 * TASK_ID 존재유무 조회한다.
	 * @param photoInfoDO                                                                                                                        
	 * @return                                                                                                                         
	 * @throws Exception 
	 */
	public boolean isThereTaskid(int Task_id) throws Exception
	{

		//PageDO pageDO = new PageDO();

		StringBuffer buf = new StringBuffer();

		buf.append("\n select count(1) FROM  DAS.ARIEL_INFO_TBL where TASK_ID = '"+Task_id+"' \n");
		Connection con = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######isThereTaskid######## con : " + con);

			//총 조회 갯수를 구한다.
			int totalCount  = getTotalCount(con, buf.toString());

			if(totalCount > 0)
			{
				return true;
			}
			else
			{
				return false;
			}
		} 
		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			try { 
				if (con != null)  con.close();	} catch (SQLException e) {}
		}
	}


	/**
	 * ADD TASK 수정한다
	 * @param TASK_ID                                                                                                                                                                                              
	 * @return                                                                                                                                                                                              
	 * @throws Exception 
	 */
	public int updateTaskid(int Task_id, String status) throws Exception
	{

		StringBuffer buf = new StringBuffer();
		buf.append("\n update DAS.ARIEL_INFO_TBL set ");

		buf.append("\n 	status = ?");
		buf.append("\n 	WHERE TASK_ID= ?");

		boolean isUpdate = false;
		Connection con = null;
		PreparedStatement stmt = null;

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateTaskid######## con : " + con);
			con.setAutoCommit(false);

			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setString(++index, status);
			stmt.setInt(++index, Task_id);

			int updateCount = stmt.executeUpdate();

			if (logger.isDebugEnabled()) 
			{
				logger.debug("[Update Count]" + updateCount);
			}

			if(updateCount == 0)
			{
				//여기서 에러를 던진다.
				DASException exception = new DASException(ErrorConstants.NOT_EXIST_USER, "해당 사용자가 존재하지 않습니다.");
				throw exception;
			}

			//사용자 정보의 수정 내역을 등록한다.
			//insertNonEmployeeRoleHistory(con, beforeRoleDO);
			con.commit();
			return updateCount;
		} 
		catch (Exception e) 
		{
			logger.error(buf.toString());

			if(con != null)
			{
				try {
					con.rollback();
				} catch (SQLException e1) {
					// TODO 자동 생성된 catch 블록
					logger.error(e1);
				}
			}


			throw e;
		}
		finally
		{
			try {
				con.setAutoCommit(true);
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				logger.error(e);
			}
			release(null, stmt, con);
		}
	}




	/**
	 * ADD TASK 수정한다
	 * @param TASK_ID                                                                                                                                                                                              
	 * @return                                                                                                                                                                                              
	 * @throws Exception 
	 */
	public int[] updateTaskidAll(List TransferDO) throws Exception
	{

		StringBuffer buf = new StringBuffer();
		buf.append("\n update DAS.ARIEL_INFO_TBL set ");

		buf.append("\n 	 PROGERESS= ?");
		buf.append("\n 	,STATUS= ?");
		buf.append("\n 	,MESSAGE= ?");
		buf.append("\n 	,MOD_DT= ?");
		buf.append("\n 	,EQ_ID= ?");
		buf.append("\n 	WHERE TASK_ID= ?");

		boolean isUpdate = false;
		Connection con = null;
		PreparedStatement stmt = null;

		try 
		{
			con=DBService.getInstance().getConnection();
			//logger.debug("######updateTaskidAll######## con : " + con);

			int index = 0;
			if(TransferDO.size()>0)stmt = con.prepareStatement(buf.toString());
			String dateTime = CalendarUtil.getDateTime("yyyyMMddHHmmss");
			for(int i=0;i<TransferDO.size();i++){

				index = 0;
				TransferDO pgminfoDO = (TransferDO)TransferDO.get(i);

				if(StringUtils.isEmpty(pgminfoDO.getEq_id()))
					continue;

				stmt.setString(++index, pgminfoDO.getProgress());
				stmt.setString(++index, pgminfoDO.getStatus());
				stmt.setString(++index, pgminfoDO.getMessage());
				stmt.setString(++index, dateTime);
				stmt.setInt(++index, Integer.parseInt(pgminfoDO.getEq_id()));
				stmt.setInt(++index, pgminfoDO.getTaskID());

				IfCmsArchiveDO info = getIdsForTask(pgminfoDO.getTaskID());
				updateEquipMentStatus(info.getCti_idForHigh(),pgminfoDO.getProgress(),"E03",Integer.parseInt(pgminfoDO.getEq_id()),pgminfoDO.getStatus());
				if(info.getReg_nm().equals("DasCms")){
					pgminfoDO.setCart_no(Integer.parseInt(String.valueOf(info.getCart_no())));
					pgminfoDO.setCart_seq(Integer.parseInt(String.valueOf(info.getCart_seq())));
					updateConTentsTbl(pgminfoDO);
				}
				if((pgminfoDO.getProgress().equals("100")&&pgminfoDO.getStatus().equals("C"))||pgminfoDO.getStatus().equals("E")){
					IfCmsArchiveDO item3 = new IfCmsArchiveDO();

					item3 = getIdsForTask(pgminfoDO.getTaskID());  
					String date = item3.getComplete_dt();

					SimpleDateFormat df1 = new SimpleDateFormat("yyyyMMddHHmmss");
					SimpleDateFormat df2 = new SimpleDateFormat("yyyy-MM-dd+HH:mm:ss");

					Date d1;
					try {
						d1 = df1.parse(date);
						date = df2.format(d1);
					} catch (ParseException e1) {
						// TODO Auto-generated catch block
						logger.error(e1);
					}
					if(!item3.getCallback_url().equals("")){
						//http 클라이언트 호출로 완료되었음을 호출한다.
						HttpClient client = new HttpClient();
						GetMethod method = null;
						if(pgminfoDO.getStatus().equals("C")){
							logger.debug("###################################callbackurl  " +item3.getCallback_url()+"&cmsid=das"+"&wfid="+item3.getCart_no()+"&uid="+item3.getCti_idForHigh()+"&state=completed&time="+date);
							method = new GetMethod(item3.getCallback_url()+"&cmsid=das"+"&wfid="+item3.getCart_no()+"&uid="+item3.getCti_idForHigh()+"&state=completed&time="+date);
						}else{
							logger.debug("###################################callbackurl  " +item3.getCallback_url()+"&cmsid=das"+"&wfid="+item3.getCart_no()+"&uid="+item3.getCti_idForHigh()+"&state=error&time="+date);
							method = new GetMethod(item3.getCallback_url()+"&cmsid=das"+"&wfid="+item3.getCart_no()+"&uid="+item3.getCti_idForHigh()+"&state=error&time="+date);
						}
						int status = 0;
						String result = "";
						try {
							status = client.executeMethod(method);
							result = method.getResponseBodyAsString();
							logger.debug("###################################status  " +status);
							logger.debug("####################################result   " +result);
						} catch (Exception e) {
							logger.error(e);
						}
					}else{
						if(pgminfoDO.getStatus().equals("C")){
							if(logger.isDebugEnabled()){
								logger.debug("complete TaskId : "+pgminfoDO.getTaskID());
							}
						}else if(pgminfoDO.getStatus().equals("E")){
							if(logger.isDebugEnabled()){
								logger.debug("fail TaskId : "+pgminfoDO.getTaskID());
							}
						}
					}
				}		

				if(pgminfoDO.getStatus().equals("E")){
					String job_id ="014";
					String process_id ="MF";
					InsertErrjob(Integer.parseInt(pgminfoDO.getEq_id()),pgminfoDO.getError_code(),pgminfoDO.getMessage(),job_id,process_id,pgminfoDO.getTaskID());
				}
				stmt.addBatch();

			}
			int[] rInt = null;
			if(TransferDO.size()>0)rInt =stmt.executeBatch();

			con.commit();
			return rInt;
		} 
		catch (Exception e) 
		{
			logger.error(buf.toString());

			if(con != null)
			{
				try {
					con.rollback();
				} catch (SQLException e1) {
					// TODO 자동 생성된 catch 블록
					logger.error(e1);
				}
			}


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}
	}




	/**
	 * 사진 이용횟수를 수정한다.
	 * @param photInfoDO                                                                                                                                                                                              
	 * @return                                                                                                                                                                                              
	 * @throws Exception 
	 */
	public int updatPhotoCount(PhotoInfoDO photInfoDO) throws Exception
	{		
		StringBuffer buf = new StringBuffer();
		buf.append("\n update DAS.PHOT_TBL set ");
		buf.append("\n 	USE_COUNT = (RD_COUNT + 1) ");

		buf.append("\n where PHOT_REG_ID = ? ");		


		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updatPhotoCount######## con : " + con);
			con.setAutoCommit(false);	

			stmt = con.prepareStatement(buf.toString());

			int updateCount;
			int index = 0;


			stmt.setLong(++index, photInfoDO.getPhotRegId());


			updateCount = stmt.executeUpdate();



			if(updateCount == 0){
				DASException exception = new DASException(ErrorConstants.NO_MACHING_FILED, "UPDATE 또는 DELETE에 대한 행이 없습니다.");
				throw exception;
			}

			con.commit();

			return updateCount;
		}
		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}		
		finally
		{
			//try { 	if (stmt != null)  stmt.close();	} catch (SQLException e) {}
			try {
				con.setAutoCommit(true);
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				logger.error(e);
			}
			release(null, stmt, con);
		}

	}

	/**
	 * 해당 master_id 기준으로 연계되어있는 다른 master_id의 메타정보를 불러온다
	 * @param nMasterID 마스터id
	 * @return String xml
	 * @throws RemoteException
	 */
	public String getRelationMetaResultXML(long nMasterID) throws DASException
	{
		StringBuffer buf = new StringBuffer();
		StringBuffer strResult = new StringBuffer();

		buf.append("SELECT DISTINCT ");
		buf.append("\n   meta.master_ID as REL_MASTER_ID  ");	
		buf.append("\n   , meta.BRD_DD as REL_BRD_DD  ");	
		buf.append("\n   , meta.REQ_CD as REL_REQ_CD  ");
		buf.append("\n   , meta.BRD_LENG as REL_BRD_LENG  ");
		buf.append("\n   , meta.SUB_TTL as REL_SUB_TTL  ");
		buf.append("\n   ,  CON.ASP_RTO_CD as REL_ASP_RTO_CD  ");
		buf.append("\n   ,  CON.vd_qlty as REL_VD_QLTY  ");

		buf.append("\n   FROM METADAT_MST_TBL meta  ");
		buf.append("\n   inner join contents_mapp_tbl map on map.MASTER_ID=meta.MASTER_ID ");
		buf.append("\n   inner join CONTENTS_TBL CON ON CON.CT_ID=map.CT_ID ");

		buf.append("\n   WHERE meta.master_ID=  ? ");

		buf.append("\n   WITH UR ");

		Connection con = null;		
		PreparedStatement psmt = null;		
		ResultSet rs = null;

		try
		{
			strResult.append("\n  <relation>");

			con = DBService.getInstance().getConnection();
			//logger.debug("######getRelationMetaResultXML######## con : " + con);
			psmt = con.prepareStatement(buf.toString());    
			int index = 0;			
			psmt.setLong(++index, nMasterID);
			rs = psmt.executeQuery();	
			if (rs.next())
			{		
				long nCurMasterID = rs.getLong("REL_MASTER_ID");

				this.AddToResultXMLBuffer(strResult, "REL_MASTER_ID", "      ", nCurMasterID + "");            	
				this.AddToResultXMLBuffer(strResult, "REL_BRD_DD", "      ", rs.getString("REL_BRD_DD") + "");
				this.AddToResultXMLBuffer(strResult, "REL_REQ_CD", "      ", rs.getString("REL_REQ_CD"));
				this.AddToResultXMLBuffer(strResult, "REL_BRD_LENG", "      ", rs.getString("REL_BRD_LENG"));
				this.AddToResultXMLBuffer(strResult, "REL_SUB_TTL", "      ", rs.getString("REL_SUB_TTL"));
				this.AddToResultXMLBuffer(strResult, "REL_ASP_RTO_CD", "      ", rs.getString("REL_ASP_RTO_CD"));

				this.AddToResultXMLBuffer(strResult, "REL_VD_QLTY", "      ", rs.getString("REL_VD_QLTY"));

			}	

			strResult.append("  </relation>");

			return strResult.toString();
		}
		catch (Exception ex)
		{
			logger.error(buf.toString());

			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "getMetaResultXML 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, con);
		}        
	}

	//Music Meta 정보를 가져온다.
	private String getMusicResultXML(long nMasterID) throws DASException
	{
		StringBuffer buf = new StringBuffer();
		StringBuffer strResult = new StringBuffer();

		buf.append("SELECT DISTINCT ");
		buf.append("\n   INST.AUD_TYPE_CD as MU_AUD_TYPE_CD  ");	
		buf.append("\n   , INST.RECORD_TYPE_CD as MU_RECORD_TYPE_CD  ");	
		buf.append("\n   , INST.ME_CD as MU_ME_CD  ");
		buf.append("\n   , INST.COLOR_CD as MU_COLOR_CD  ");
		buf.append("\n   from DAS.CONTENTS_INST_TBL INST  ");
		buf.append("\n   INNER JOIN CONTENTS_MAPP_TBL MAP ON MAP.CT_ID=INST.CT_ID  ");

		buf.append("\n   INNER JOIN METADAT_MST_TBL MMT ON MMT.MASTER_ID=MAP.MASTER_ID  ");
		buf.append("\n   where MMT.MASTER_ID = ? ");

		buf.append("\n   WITH UR ");

		Connection con = null;		
		PreparedStatement psmt = null;		
		ResultSet rs = null;

		try
		{
			strResult.append("\n  <music>");

			con = DBService.getInstance().getConnection();
			//logger.debug("######getMusicResultXML######## con : " + con);
			psmt = con.prepareStatement(buf.toString());    
			int index = 0;			
			psmt.setLong(++index, nMasterID);
			rs = psmt.executeQuery();	
			if (rs.next())
			{		

				this.AddToResultXMLBuffer(strResult, "MU_AUD_TYPE_CD", "      ", rs.getString("MU_AUD_TYPE_CD"));            	
				this.AddToResultXMLBuffer(strResult, "MU_RECORD_TYPE_CD", "      ", rs.getString("MU_RECORD_TYPE_CD"));
				this.AddToResultXMLBuffer(strResult, "MU_ME_CD", "      ", rs.getString("MU_ME_CD"));
				this.AddToResultXMLBuffer(strResult, "MU_COLOR_CD", "      ", rs.getString("MU_COLOR_CD"));


				/*
	        	strResult.append("\n        <META_ASP_RTO_CD>");
	        	strResult.append(rs.getString("META_ASP_RTO_CD"));
	        	strResult.append("</META_ASP_RTO_CD>");

	        	strResult.append("\n        <META_VD_QLTY>");
	        	strResult.append(rs.getString("META_VD_QLTY"));
	        	strResult.append("</META_VD_QLTY>");
				 */
			}	//if (rs.next())

			// photo 정보를 붙인다.
			//strResult.append("\n      <Photo>");
			//strResult.append(this.getPhotoResultXML(nMasterID));
			//strResult.append("\n      </Photo>");

			// attach 정보를 붙인다.
			// strResult.append("\n      <Attach>");
			//strResult.append(this.getAttachResultXML(nMasterID));
			//strResult.append("\n      </Attach>");

			strResult.append("  </music>");

			return strResult.toString();
		}

		catch (Exception ex)
		{
			logger.error(buf.toString());

			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "getMetaResultXML 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, con);
		}
	}

	/**
	 * 사진을 다운로드했다는 기록을 남긴다.
	 * @param Phot_ID			사진 ID
	 * @param REQ_ID			요청자 ID
	 * @param PGM_ID			프로그램 ID
	 * @param check				1 : 다운로드, 2 : 삭제 
	 * @return 입력한 데이터 수
	 */
	public int InsertPhotoDownInfo(PhotDownDO PhotoInfoDO) throws DASException
	{		
		// 필요한 변수들
		StringBuffer buf1 = new StringBuffer();
		StringBuffer buf2 = new StringBuffer();
		StringBuffer buf3 = new StringBuffer();
		boolean bResult = false;

		String SUBJ = "";			// 사진 제목
		String L_CD = "";			// PGM의 대분류
		String M_CD = "";			// PGM의 중분류
		String S_CD = "";			// PGM의 소분류		

		Connection con = null;
		PreparedStatement psmt1 = null;
		PreparedStatement psmt2 = null;
		PreparedStatement psmt3 = null;
		ResultSet rs = null;        

		try
		{         
			con = DBService.getInstance().getConnection();
			//logger.debug("######InsertPhotoDownInfo######## con : " + con);
			String seq = getNextSquence(con, "SEQ_PHOTO_DOWN_SEQ");
			buf3.append("\n insert into DAS.PHOT_DOWN_TBL ");
			buf3.append("\n (seq, PHOT_ID, REQ_ID, REQ_DT,MASTER_ID)");
			buf3.append("\n values ( ?, ?, ?,?,?) ");
			//		
			int num = Integer.parseInt(seq);

			psmt3 = con.prepareStatement(buf3.toString());

			//      현재 시간을 받아온다.
			String REQ_DT = CalendarUtil.getDateTime("yyyyMMdd");

			int index = 0;
			psmt3.setLong(++index, Long.parseLong(seq));
			psmt3.setLong(++index, PhotoInfoDO.getPhot_id());
			psmt3.setString(++index, PhotoInfoDO.getReq_id());
			psmt3.setString(++index, REQ_DT);
			psmt3.setLong(++index, PhotoInfoDO.getMaster_id());
			int count = psmt3.executeUpdate();
			return count;
		}      
		catch (Exception ex) 
		{
			logger.error(buf1.toString());
			logger.error(buf2.toString());
			logger.error(buf3.toString());
			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "InsertPhotoDownloadInfo 에러 : " + buf1.toString(), ex);
			throw exception;
		} 

		finally
		{
			release(null, psmt1, null);
			release(null, psmt2, null);
			release(rs, psmt3, con);
		}


	}

	/**
	 * NLE Drag & Drop 조회한다.
	 * @param preProcessingDO
	 * @return
	 * @throws Exception 
	 */
	public List selectPreProcessingList(PreProcessingDO preProcessingDO) throws Exception
	{

		String query = ExternalStatement.selectPreProcessingQuery2(preProcessingDO);

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		String child_master_id = "";
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######selectPreProcessingList######## con : " + con);
			logger.debug("query : "+query);
			stmt = con.prepareStatement(query);
			//			stmt.setLong(1, masterid);
			rs = stmt.executeQuery();

			List result = new ArrayList();
			while(rs.next()){
				PreProcessingDO infoDO = new PreProcessingDO();

				infoDO.setPgm_id(rs.getLong("pgm_id"));
				infoDO.setPgm_nm(rs.getString("PGM_NM"));
				infoDO.setCtgr_nm(rs.getString("ctgr_l_nm"));
				infoDO.setPgm_nm(rs.getString("title"));
				infoDO.setCt_cla_nm(rs.getString("ct_cla_nm"));
				infoDO.setReq_dt(rs.getString("req_dt"));
				infoDO.setReq_nm(rs.getString("req_nm"));

				infoDO.setFullpath(rs.getString("file_path"));
				infoDO.setMedia_id(rs.getString("media_id"));
				infoDO.setMaster_id(rs.getString("master_id"));
				infoDO.setCt_id(rs.getLong("ct_id"));
				infoDO.setGubun(rs.getString("gubun"));
				infoDO.setEdtrid(rs.getString("edtrid"));
				infoDO.setCart_no(rs.getString("CART_NO"));
				infoDO.setData_stat_cd(rs.getString("data_stat_Cd"));

				infoDO.setTc_yn(rs.getString("TC_YN"));
				if(infoDO.getCart_no().equals("0")){
					infoDO.setCart_no("");
				}
				result.add(infoDO);
			}	

			return result;

		} 

		catch (Exception e) 
		{
			logger.error(query);

			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}

	}

	/**
	 * NLE 메타&DTL 등록 대상을 조회한다.
	 * @param conditionDO
	 * @return
	 * @throws Exception 
	 */

	public List selectArchPreProcessingList(WorkStatusConditionDO conditionDO) throws Exception
	{
		int nDataCount = -1;

		Map value = null;

		// 만약 처음으로 검색하는 거라면(다음 페이지가 아니라) 그 검색의 전체 데이터 갯수를 넘겨줘야 한다.
		//		if (conditionDO.getStartPos() == 1)
		value = this.getMetadatInfoListCount(conditionDO);

		String query = ExternalStatement.selectReqNleInfoQuery(conditionDO);

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			stmt = con.prepareStatement(query);
			rs = stmt.executeQuery();	

			List resultList = new ArrayList();			
			while(rs.next())
			{
				MetaInfoDO item = new MetaInfoDO();
				item.setMasterId(rs.getLong("MASTER_ID"));
				item.setTape_item_id(rs.getString("tape_item_id"));
				item.setMcuid(rs.getString("mcuid"));
				item.setDataStatCd(rs.getString("DATA_STAT_CD"));
				item.setDesc((rs.getString("DESC")));
				item.setTitle((rs.getString("TITLE")));
				item.setRegDt(rs.getString("REG_DT"));
				item.setBrdLeng(rs.getString("BRD_LENG"));
				item.setArchRegDd(rs.getString("ARCH_REG_DD"));
				item.setCount(rs.getInt("COUNT"));
				item.setEpisNo(rs.getInt("EPIS_NO"));
				item.setBrdDd(rs.getString("BRD_DD"));
				item.setReqCd(rs.getString("REQ_CD"));
				item.setModrid(rs.getString("MODRID"));
				item.setIng_Reg_DD(rs.getString("ING_REG_DD"));
				item.setLock_stat_cd(rs.getString("LOCK_STAT_CD"));
				item.setError_stat_cd(rs.getString("ERROR_STAT_CD"));
				item.setPgm_id(rs.getLong("pgm_id"));
				item.setQueryResultCount( Integer.parseInt(value.get("CCOUNT").toString()));
				item.setSum_brd_leng(  Integer.parseInt(value.get("SUM_BRD_LENG").toString()));

				resultList.add(item);	
			}

			return resultList;
		} 
		catch (Exception e) 
		{
			logger.error(query);


			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}

	/**
	 * NLE 메타 & DTL 등록 한다.
	 * @param metadataMstInfoDO
	 * @return
	 * @throws Exception 
	 */
	public int insertMetadat(MetadataMstInfoDO metadataMstInfoDO) throws Exception
	{
		String query = ExternalStatement.insertMetadatQuery(metadataMstInfoDO);

		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######insertMetadat######## con : " + con);
			stmt = con.prepareStatement(query);

			int index = 0;
			if(metadataMstInfoDO.getTitle().trim().length()>0)
				stmt.setString(++index, metadataMstInfoDO.getTitle());
			if(metadataMstInfoDO.getSubTtl().trim().length()>0)
				stmt.setString(++index, metadataMstInfoDO.getSubTtl());
			if(metadataMstInfoDO.getRerun().trim().length()>0)
				stmt.setString(++index, metadataMstInfoDO.getRerun());
			if(metadataMstInfoDO.getBrdBgnDd().trim().length()>0)
				stmt.setString(++index, metadataMstInfoDO.getBrdDd());
			if(metadataMstInfoDO.getFinalBrdYn().trim().length()>0)
				stmt.setString(++index, metadataMstInfoDO.getFinalBrdYn());


			if(metadataMstInfoDO.getCtgrLCd().trim().length()>0)
				stmt.setString(++index, metadataMstInfoDO.getCtgrLCd());
			if(metadataMstInfoDO.getCtgrMCd().trim().length()>0)
				stmt.setString(++index, metadataMstInfoDO.getCtgrMCd());
			if(metadataMstInfoDO.getCtgrSCd().trim().length()>0)
				stmt.setString(++index, metadataMstInfoDO.getCtgrSCd());
			if(metadataMstInfoDO.getEpisNo()>0)
				stmt.setInt(++index, metadataMstInfoDO.getEpisNo());
			if(metadataMstInfoDO.getPgmId()>0)
				stmt.setLong(++index, metadataMstInfoDO.getPgmId());


			if(metadataMstInfoDO.getProducerNm().trim().length()>0)
				stmt.setString(++index, metadataMstInfoDO.getProducerNm());
			if(metadataMstInfoDO.getWriterNm().trim().length()>0)
				stmt.setString(++index, metadataMstInfoDO.getWriterNm());
			if(metadataMstInfoDO.getDrtNm().trim().length()>0)
				stmt.setString(++index, metadataMstInfoDO.getDrtNm());
			if(metadataMstInfoDO.getCmrDrtNm().trim().length()>0)
				stmt.setString(++index, metadataMstInfoDO.getCmrDrtNm());
			if(metadataMstInfoDO.getPrdtDeptNm().trim().length()>0)
				stmt.setString(++index, metadataMstInfoDO.getPrdtDeptNm());


			if(metadataMstInfoDO.getPrdtInOutsCd().trim().length()>0)
				stmt.setString(++index, metadataMstInfoDO.getPrdtInOutsCd());
			if(metadataMstInfoDO.getOrgPrdrNm().trim().length()>0)
				stmt.setString(++index, metadataMstInfoDO.getOrgPrdrNm());
			if(metadataMstInfoDO.getMcNm().trim().length()>0)
				stmt.setString(++index, metadataMstInfoDO.getMcNm());
			if(metadataMstInfoDO.getCastNm().trim().length()>0)
				stmt.setString(++index, metadataMstInfoDO.getCastNm());
			if(metadataMstInfoDO.getCmrPlace().trim().length()>0)
				stmt.setString(++index, metadataMstInfoDO.getCmrPlace());


			if(metadataMstInfoDO.getMusicInfo().trim().length()>0)
				stmt.setString(++index, metadataMstInfoDO.getMusicInfo());
			if(metadataMstInfoDO.getSnps().trim().length()>0)
				stmt.setString(++index, metadataMstInfoDO.getSnps());
			if(metadataMstInfoDO.getKeyWords().trim().length()>0)
				stmt.setString(++index, metadataMstInfoDO.getKeyWords());
			if(metadataMstInfoDO.getSpcInfo().trim().length()>0)
				stmt.setString(++index, metadataMstInfoDO.getSpcInfo());
			if(metadataMstInfoDO.getViewGrCd().trim().length()>0)
				stmt.setString(++index, metadataMstInfoDO.getViewGrCd());

			if(metadataMstInfoDO.getPgmRate().trim().length()>0)
				stmt.setString(++index, metadataMstInfoDO.getPgmRate());
			if(metadataMstInfoDO.getDlbrCd().trim().length()>0)
				stmt.setString(++index, metadataMstInfoDO.getDlbrCd());
			if(metadataMstInfoDO.getCprtType().trim().length()>0)
				stmt.setString(++index, metadataMstInfoDO.getCprtType());
			if(metadataMstInfoDO.getCprtrNm().trim().length()>0)
				stmt.setString(++index, metadataMstInfoDO.getCprtrNm());
			if(metadataMstInfoDO.getCprtTypeDsc().trim().length()>0)
				stmt.setString(++index, metadataMstInfoDO.getCprtTypeDsc());

			if(metadataMstInfoDO.getAwardHstr().trim().length()>0)
				stmt.setString(++index, metadataMstInfoDO.getAwardHstr());
			if(metadataMstInfoDO.getTapeMediaClfCd().trim().length()>0)
				stmt.setString(++index, metadataMstInfoDO.getTapeMediaClfCd());
			if(metadataMstInfoDO.getGathCoCd().trim().length()>0)
				stmt.setString(++index, metadataMstInfoDO.getGathCoCd());
			if(metadataMstInfoDO.getRsvPrdCd().trim().length()>0)
				stmt.setString(++index, metadataMstInfoDO.getRsvPrdCd());
			if(metadataMstInfoDO.getRsvPrdEndDd().trim().length()>0)
				stmt.setString(++index, metadataMstInfoDO.getRsvPrdEndDd());

			if(metadataMstInfoDO.getRpimgKfrmSeq()>0)
				stmt.setInt(++index, metadataMstInfoDO.getRpimgKfrmSeq());
			if(metadataMstInfoDO.getRpimgCtId()>0)
				stmt.setLong(++index, metadataMstInfoDO.getRpimgCtId());
			if(metadataMstInfoDO.getArrange_nm().trim().length()>0)
				stmt.setString(++index, metadataMstInfoDO.getArrange_nm());
			if(metadataMstInfoDO.getReqCd().trim().length()>0)
				stmt.setString(++index, metadataMstInfoDO.getReqCd());
			if(metadataMstInfoDO.getBrdLeng().trim().length()>0)
				/*if(selectSumCt_leng(metadataMstInfoDO.getMasterId())!=null){
						stmt.setString(++index,selectSumCt_leng(metadataMstInfoDO.getMasterId()) );
					}else{*/
				stmt.setString(++index,metadataMstInfoDO.getBrdLeng());
			//}

			//			if (metadataMstInfoDO.getTapeId().trim().length() > 0)
			//				stmt.setString(++index, metadataMstInfoDO.getTapeId());
			//			
			//			if (metadataMstInfoDO.getTapeItemId().trim().length() > 0)
			//				stmt.setString(++index, metadataMstInfoDO.getTapeItemId());

			stmt.setLong(++index, metadataMstInfoDO.getMasterId());

			int updateCount = stmt.executeUpdate();			

			return updateCount;
		}
		catch (Exception e) 
		{
			logger.error(query);


			throw e;
		}
		finally
		{
			//try { 	if (stmt != null)  stmt.close();	} catch (SQLException e) {}
			release(null, stmt, con);
		}

	}
	/**
	 * NLE 메타 & DTL 등록 메타데이타를 카피해서 등록한다.
	 * @param metadataMstInfoDO
	 * @return updatecount
	 * @throws Exception 
	 */
	public int insertCopyMetadat(MetadataMstInfoDO metadataMstInfoDO) throws Exception
	{
		String query = ExternalStatement.insertCopyMetadatQuery();

		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######insertCopyMetadat######## con : " + con);
			stmt = con.prepareStatement(query);

			int index = 0;

			stmt.setLong(++index, metadataMstInfoDO.getMasterId());
			stmt.setLong(++index, metadataMstInfoDO.getTarget_master_id());

			if(metadataMstInfoDO.getTarget_master_id()>0){
				int updateCount = stmt.executeUpdate();			
				return updateCount;
			}else{
				return 0;
			}
		}
		catch (Exception e) 
		{
			logger.error(query);


			throw e;
		}
		finally
		{
			//try { 	if (stmt != null)  stmt.close();	} catch (SQLException e) {}
			release(null, stmt, con);
		}

	}





	// 코너 정보를 가져온다.
	private String getCartResultXML(long nMasterID) throws DASException
	{
		StringBuffer buf = new StringBuffer();
		StringBuffer strResult = new StringBuffer();

		buf.append("\n select ");
		buf.append("\n 	CART.RIST_CLF_CD , CART.REGRID, CART.MODRID , CART.MOD_DT  from DAS.CART_CONT_TBL CART  ");	
		buf.append(" \n	LEFT OUTER JOIN (select cti_id, ct_id from CONTENTS_INST_TBL group by cti_id, ct_id)  INST ON INST.CTI_ID=CART.CTI_ID ");
		buf.append(" \n	LEFT OUTER JOIN (select ct_id, master_id,del_dd from CONTENTS_MAPP_TBL group by ct_id, master_id,del_dd) MAP ON MAP.CT_ID=INST.CT_ID ");
		buf.append(" \n	LEFT OUTER JOIN METADAT_MST_TBL MST ON MST.MASTER_ID = MAP.MASTER_ID ");
		buf.append(" \n	where    MST.MASTER_ID = ? ");
		buf.append(" \n	and (MAP.del_dd is null or MAP.del_dd = '')    order by CART.MOD_DT ");


		Connection con = null;

		PreparedStatement psmt = null;
		PreparedStatement psmt_annot = null;

		ResultSet rs = null;
		ResultSet rs_annot = null;


		try
		{
			strResult.append("\n  <cart>");

			long nOldCN_ID = 0;        	

			con = DBService.getInstance().getConnection();
			//logger.debug("######getCartResultXML######## con : " + con);
			psmt = con.prepareStatement(buf.toString());    
			int index = 0;			
			psmt.setLong(++index, nMasterID);
			rs = psmt.executeQuery();	
			while(rs.next())
			{		

				strResult.append("\n    <cart_item>");


				// CART 관련 자료
				this.AddToResultXMLBuffer(strResult, "RIST_CLF_CD", "      ", rs.getString("RIST_CLF_CD") + "");
				this.AddToResultXMLBuffer(strResult, "REGRID", "      ", rs.getString("REGRID") + "");
				this.AddToResultXMLBuffer(strResult, "MODRID", "      ", rs.getString("MODRID") + "");
				this.AddToResultXMLBuffer(strResult, "MOD_DT", "      ", rs.getString("MOD_DT") + "");


				strResult.append("\n    </cart_item>");            	


			}	// while rs.next

			strResult.append("  </cart>");

		}

		catch (Exception ex)
		{
			logger.error(buf.toString());

			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "getCornerResultXML 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, null);
			release(rs_annot, psmt_annot, con);
		}        
		return strResult.toString();
	}



	/**
	 * getStatus 결과값를 저장한다.
	 * @param TransferDO  정보 리스트	
	 * @return 	TransferDO object 리스트 
	 * @throws Exception 
	 */
	public int insertTMstatusinfo(TransferDO transfer, int TaskID) throws Exception
	{
		logger.debug(transfer);
		StringBuffer buf = new StringBuffer();
		buf.append("\n INSERT INTO DAS.ARIEL_INFO_TBL  (   ");
		buf.append("\n    CART_NO ");
		buf.append("\n   ,CART_SEQ ");
		buf.append("\n   ,MESSAGE ");
		buf.append("\n   ,TASK_ID ");
		buf.append("\n   ,SUCCESS_YN ");
		buf.append("\n   ,PROGERESS )");
		buf.append("\n values ");
		buf.append("\n ( ");		
		buf.append("\n ?, ?, ?, ?, ?, ? ");
		buf.append("\n ) ");

		Connection con = null;
		PreparedStatement stmt = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######insertTMstatusinfo######## con : " + con);
			con.setAutoCommit(false);

			stmt = con.prepareStatement(buf.toString());

			int index = 0;			
			stmt.setInt(++index, transfer.getCart_no());
			stmt.setInt(++index, transfer.getCart_seq());
			stmt.setString(++index, transfer.getMessage());
			stmt.setInt(++index, TaskID);
			if(transfer.getTaskID() == 0 || transfer.getProgress().equals("100%")){
				stmt.setString(++index, "Y");
			}else {
				stmt.setString(++index, "N");	
			}
			stmt.setString(++index, transfer.getProgress().replaceAll("%", ""));



			int updateCount = stmt.executeUpdate();

			if (logger.isDebugEnabled()) 
			{
				logger.debug("[Inserted Count]" + updateCount);
			}

			if(updateCount == 0)
			{
				//여기서 에러를 던진다.
				DASException exception = new DASException(ErrorConstants.NOT_EXIST_PROGRAM_INFO, "저장에 실패했습니다.");
				throw exception;
			}


			con.commit();
			return updateCount;
		} 

		catch (Exception e) 
		{
			logger.error(buf.toString());

			if(con != null)
			{
				try {
					con.rollback();
				} catch (SQLException e1) {
					// TODO 자동 생성된 catch 블록
					logger.error(e1);
				}
			}


			throw e;
		}
		finally
		{
			try {
				con.setAutoCommit(true);
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				logger.error(e);
			}
			release(null, stmt, con);
		}
	}




	/**
	 * NLE  & DTL 등록한다.
	 * @param metadataMstInfoDO
	 * @return
	 * @throws Exception 
	 * @throws RemoteException
	 */
	public int insertNLEandDTL(long master_id) throws Exception
	{

		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######insertNLEandDTL######## con : " + con);
			//stmt = con.prepareStatement(query);
			//		logger.debug("도착 확인하였습니다 추후 divaManager와 연동 예정입니다");


			List resultList = new ArrayList();
			resultList.add(selectMappTbl2(master_id));

			String _xml = "";
			if (resultList != null && resultList.size() > 0) {

				Iterator _iter = resultList.iterator();
				while (_iter.hasNext()) {
					DivaManagerDOXML _do2 = new DivaManagerDOXML();
					_do2.setDO(_iter.next());
					_xml = _xml + _do2.toXML();
				}
			}
			String str="";

			NevigatorProxy port = new NevigatorProxy();

			str = port.archiveService(_xml);
			logger.debug("port.archiveService(_xml)[result]="+str);
			//if(str.)
			return 1;


		}
		catch (Exception e) 
		{
			logger.error(master_id);

			throw e;
		}

		finally
		{
			//try { 	if (stmt != null)  stmt.close();	} catch (SQLException e) {}
			release(null, stmt, con);
		}

	}




	/**
	 * NLE  & DTL 삭제한다.
	 * @param metadataMstInfoDO
	 * @return
	 * @throws Exception 
	 * @throws RemoteException
	 */
	public int deleteNLE(long ct_id) throws Exception
	{	
		StringBuffer buf = new StringBuffer();
		buf.append("\n update das.contents_mapp_tbl set ");

		buf.append("\n 	del_dd = ? ");
		buf.append("\n 	WHERE CT_ID= ?");
		boolean isUpdate = false;
		Connection con = null;
		PreparedStatement stmt = null;

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######deleteNLE######## con : " + con);
			con.setAutoCommit(false);

			stmt = con.prepareStatement(buf.toString());
			String dateString = CalendarUtil.getDateTime("yyyyMMdd");
			int index = 0;
			stmt.setString(++index, dateString);
			stmt.setLong(++index, ct_id);

			int updateCount = stmt.executeUpdate();

			if (logger.isDebugEnabled()) 
			{
				logger.debug("[Update Count]" + updateCount);
			}

			if(updateCount == 0)
			{
				//여기서 에러를 던진다.
				DASException exception = new DASException(ErrorConstants.NOT_EXIST_USER, "해당 사용자가 존재하지 않습니다.");
				throw exception;
			}
			/*	String _xml="";
				String str="";

				NevigatorProxy port = new NevigatorProxy();
				str = port.deleteContentService(_xml);

					logger.debug("port.archiveService(_xml)[result]="+str);
					//if(str.)
			 */			

			con.commit();

			if(getCountCtId(ct_id)){
				deleteNLEMeta(ct_id);
			}
			return updateCount;
		} 

		catch (Exception e) 
		{
			logger.error(buf.toString());

			if(con != null)
			{
				try {
					con.rollback();
				} catch (SQLException e1) {
					// TODO 자동 생성된 catch 블록
					logger.error(e1);
				}
			}


			throw e;
		}
		finally
		{
			try {
				con.setAutoCommit(true);
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				logger.error(e);
			}
			release(null, stmt, con);
		}

	}

	/**
	 * NLE  & DTL 삭제한다.
	 * @param metadataMstInfoDO
	 * @return
	 * @throws Exception 
	 * @throws RemoteException
	 */
	public int deleteNLEForDown(long cart_no) throws Exception
	{	
		StringBuffer buf = new StringBuffer();
		buf.append("\n update das.down_cart_tbl set ");

		buf.append("\n 	del_yn = 'Y' ");

		buf.append("\n 	where cart_no= ?");
		//buf.append("\n 	AND CART_SEQ= ?");
		boolean isUpdate = false;
		Connection con = null;
		PreparedStatement stmt = null;

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######deleteNLEForDown######## con : " + con);
			con.setAutoCommit(false);

			stmt = con.prepareStatement(buf.toString());
			String dateString = CalendarUtil.getDateTime("yyyyMMdd");
			int index = 0;

			stmt.setLong(++index, cart_no);

			int updateCount = stmt.executeUpdate();

			if (logger.isDebugEnabled()) 
			{
				logger.debug("[Update Count]" + updateCount);
			}



			/*	String _xml="";
				String str="";

				NevigatorProxy port = new NevigatorProxy();
				str = port.deleteContentService(_xml);

					logger.debug("port.archiveService(_xml)[result]="+str);
					//if(str.)
			 */			

			con.commit();
			return updateCount;
		} 
		catch (Exception e) 
		{
			logger.error(buf.toString());

			if(con != null)
			{
				try {
					con.rollback();
				} catch (SQLException e1) {
					// TODO 자동 생성된 catch 블록
					logger.error(e1);
				}
			}


			throw e;
		}
		finally
		{
			try {
				con.setAutoCommit(true);
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				logger.error(e);
			}
			release(null, stmt, con);
		}

	}

	/**
	 * DTL 수동 등록한다.
	 * @param metadataMstInfoDO
	 * @return
	 * @throws Exception 
	 * @throws RemoteException
	 */
	public int insertDTL(String test) throws Exception
	{
		//String query = ExternalStatement.insertMetadatQuery(metadataMstInfoDO);

		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######insertDTL######## con : " + con);
			//stmt = con.prepareStatement(query);



			return 1;
		}
		catch (Exception e) 
		{
			logger.error(test);

			throw e;
		}
		finally
		{
			//try { 	if (stmt != null)  stmt.close();	} catch (SQLException e) {}
			release(null, stmt, con);
		}

	}

	private String getBaseInfoMerge(long nMasterID) throws NumberFormatException, Exception{
		StringBuffer strResult = new StringBuffer();
		long rMasterID = 0;
		strResult.append("\n  <meta>");

		strResult.append(getBaseResultXML(nMasterID));

		strResult.append("\n      <ingest>");
		strResult.append(getIngestMetaResultXML(nMasterID));
		strResult.append("\n      </ingest>");

		rMasterID = Long.parseLong(selectRelationMaster(nMasterID));
		// 관련 영상 Meta 관련 정보를 가져온다.
		if(nMasterID != rMasterID){

			strResult.append(getRelationMetaResultXML(nMasterID));

		}
		strResult.append("\n      <Attach>");
		strResult.append(getAttachResultXML(nMasterID));
		strResult.append("\n      </Attach>");

		strResult.append("\n      <Annot>");
		strResult.append(getAnnotInfoXML(nMasterID));
		strResult.append("\n      </Annot>");

		strResult.append("  </meta>");
		return strResult.toString();
	}



	/**
	 * 기본적인 메타데이터(기본정보) 에 해당되는 데이터들을 가져온다
	 * @param master_id
	 * @return
	 * @throws RemoteException
	 */
	public String getBaseResultXML(long nMasterID) throws DASException
	{
		StringBuffer buf = new StringBuffer();
		StringBuffer strResult = new StringBuffer();

		buf.append("\n SELECT ");
		buf.append("\n   value(meta.master_ID, '') as META_MASTER_ID  ");
		buf.append("\n   , value(meta.PGM_ID, '') as META_PGM_ID  ");
		buf.append("\n   ,  case when meta.pgm_id !=0 then pgm.pgm_cd ");
		buf.append("\n  when meta.pgm_id =0 then meta.pgm_cd ");
		buf.append("\n    else meta.pgm_cd end as PGM_PGM_CD ");
		buf.append("\n    , CASE WHEN meta.ctgr_l_cd='100'  THEN Meta.TITLE   ");
		buf.append("\n   WHEN   meta.ctgr_l_cd='200' and  meta.pgm_id!=0  THEN pgm.PGM_NM ");
		buf.append("\n   ELSE meta.title   ");
		buf.append("\n   END AS PGM_PGM_NM ");
		buf.append("\n   ,  value(META.TITLE, '') as TITLE  ");
		buf.append("\n   ,  value(pgm.BRD_BGN_DD, '') as PGM_BRD_BGN_DD ");
		buf.append("\n   , value( pgm.BRD_END_DD, '') as PGM_BRD_END_DD ");
		buf.append("\n   ,  value(pgm.MEDIA_CD, '') as PGM_MEDIA_CD ");
		buf.append("\n   , value(meta.EPIS_NO,0) as META_EPIS_NO  ");
		buf.append("\n   ,  value(pgm.CHAN_CD, '') as PGM_CHAN_CD ");
		buf.append("\n   , value( pgm.PILOT_YN, '') as PGM_PILOT_YN  ");


		buf.append("\n   , value( meta.CTGR_L_CD, '') as META_CTGR_L_CD  ");
		buf.append("\n   , value( meta.CTGR_M_CD, '') as META_CTGR_M_CD  ");
		buf.append("\n   , value( meta.CTGR_S_CD, '') as META_CTGR_S_CD  ");
		buf.append("\n   ,value( meta.BRD_DD,'') AS META_BRD_DD   ");
		buf.append("\n   , value( meta.PDS_CMS_PGM_ID, '') as META_PDS_CMS_PGM_ID  ");
		buf.append("\n   , value( meta.FINAL_BRD_YN, '') as META_FINAL_BRD_YN  ");
		buf.append("\n   ,value(  meta.SNPS, '') as META_SNPS  ");
		buf.append("\n   , value( meta.KEY_WORDS, '') as META_KEY_WORDS  ");
		buf.append("\n   , value( meta.BRD_BGN_HMS, '') as META_BRD_BGN_HMS  ");
		buf.append("\n   , value( meta.BRD_END_HMS, '') as META_BRD_END_HMS  ");
		buf.append("\n   , value( meta.BRD_LENG, '') as META_BRD_LENG  ");
		buf.append("\n   , value( meta.PGM_RATE, '') as META_PGM_RATE  ");
		buf.append("\n   , value( meta.DRT_NM, '') as META_DRT_NM  ");
		buf.append("\n   , value( meta.PRODUCER_NM, '') as META_PRODUCER_NM  ");
		buf.append("\n   , value( meta.WRITER_NM, '') as META_WRITER_NM  ");
		buf.append("\n   , value( meta.PRDT_IN_OUTS_CD, '') as META_PRDT_IN_OUTS_CD  ");
		buf.append("\n   , value( meta.PRDT_DEPT_CD, '') as META_PRDT_DEPT_CD  ");
		buf.append("\n   , value( meta.PRDT_DEPT_NM, '') as META_PRDT_DEPT_NM  ");
		buf.append("\n   , value( meta.ORG_PRDR_NM, '') as META_ORG_PRDR_NM  ");
		buf.append("\n   , value( meta.MC_NM, '') as META_MC_NM  ");
		buf.append("\n   , value( meta.CAST_NM, '') as META_CAST_NM  ");
		buf.append("\n   , value( meta.CMR_DRT_NM, '') as META_CMR_DRT_NM  ");
		buf.append("\n   , value( meta.FM_DT, '') as META_FM_DT  ");
		buf.append("\n   , value( meta.CMR_PLACE, '') as META_CMR_PLACE  ");
		buf.append("\n   , value( meta.SPC_INFO, '') as META_SPC_INFO  ");
		buf.append("\n   , value( meta.REQ_CD, '') as META_REQ_CD  ");
		buf.append("\n   , value( user.USER_NM, '') as META_SEC_ARCH_NM  ");
		buf.append("\n   , value( meta.SEC_ARCH_ID, '') as META_SEC_ARCH_ID  ");
		buf.append("\n   , value( meta.GATH_CO_CD, '') as META_GATH_CO_CD  ");
		buf.append("\n   , value( meta.GATH_CLF_CD, '') as META_GATH_CLF_CD  ");
		buf.append("\n   , value( meta.ARCH_REG_DD, '') as META_ARCH_REG_DD  ");
		buf.append("\n   , value( meta.ARRG_END_DT, '') as META_ARRG_END_DT  ");
		buf.append("\n   , value( meta.WORK_PRIO_CD, '') as META_WORK_PRIO_CD  ");
		buf.append("\n   , value( meta.RSV_PRD_CD, '') as META_RSV_PRD_CD  ");
		buf.append("\n   , value( meta.CPRTR_NM, '') as META_CPRTR_NM  ");
		buf.append("\n   , value( meta.CPRT_TYPE, '') as META_CPRT_TYPE  ");
		buf.append("\n   , value( meta.CPRT_TYPE_DSC, '') as META_CPRT_TYPE_DSC  ");
		buf.append("\n   , value( meta.VIEW_GR_CD, '') as META_VIEW_GR_CD  ");
		buf.append("\n   , value( meta.DLBR_CD, '') as META_DLBR_CD  ");
		buf.append("\n   , value( meta.AWARD_HSTR, '') as META_AWARD_HSTR ");
		buf.append("\n   , value( meta.TAPE_ID, '') as META_TAPE_ID  ");
		buf.append("\n   , value( meta.TAPE_ITEM_ID, '') as META_TAPE_ITEM_ID  ");
		buf.append("\n   , value( meta.TAPE_MEDIA_CLF_CD, '') as META_TAPE_MEDIA_CLF_CD  ");
		buf.append("\n   , value( meta.RSV_PRD_END_DD, '') as META_RSV_PRD_END_DD  ");
		buf.append("\n   , value( meta.DEL_DD, '') as META_DEL_DD  ");
		buf.append("\n   , value( meta.USE_YN, '') as META_USE_YN  ");
		buf.append("\n   , value( meta.REG_DT, '') as META_REG_DT  ");
		buf.append("\n   , value( meta.MODRID, '') as META_MODRID  ");
		buf.append("\n   , value( meta.ARRG_END_DT, '') as META_MOD_DT  ");
		buf.append("\n   , value( meta.GATH_DEPT_CD, '') as META_GATH_DEPT_CD  ");
		buf.append("\n   , value( meta.MCUID, '') as META_MCUID  ");
		buf.append("\n   , value( meta.RPIMG_CT_ID, 0) as META_RPIMG_CT_ID  ");
		buf.append("\n   , value( meta.RPIMG_KFRM_SEQ, 0) as META_RPIMG_KFRM_SEQ  ");
		buf.append("\n   , value( meta.DATA_STAT_CD, '') as META_DATA_STAT_CD  ");
		buf.append("\n   , value( meta.ING_REG_DD, '') as META_ING_REG_DD  ");
		buf.append("\n   , value( meta.COPY_KEEP, '') as META_COPY_KEEP  ");
		buf.append("\n   ,value(  meta.CLEAN_KEEP, '') as META_CLEAN_KEEP  ");
		buf.append("\n   , value( meta.MUSIC_INFO, '') as META_MUSIC_INFO  ");
		buf.append("\n   , value( meta.RST_CONT, '') as META_RST_CONT  ");
		buf.append("\n   , value( meta.RERUN, '') as META_RERUN  ");
		buf.append("\n   , value( meta.ACCEPTOR_ID, '') as META_ACCEPTOR_ID  ");
		buf.append("\n   , value( meta.SUB_TTL , '') as META_SUB_TTL  ");
		buf.append("\n   , value( meta.PRDT_DEPT_CD , '') as META_PRDT_DEPT_CD ");
		buf.append("\n   , value(meta.ARRANGE_NM, '') as META_ARRANGE_NM  ");
		buf.append("\n   , value( erpuser.USER_NM, '') as META_ACCEPTOR_NM  ");
		buf.append("\n   , value(scenario.TITLE, '') AS META_SCENARIO_TITLE ");
		buf.append("\n   , value( INST.AUD_TYPE_CD, '') as META_AUD_TYPE_CD   ");
		buf.append("\n   , value( INST.RECORD_TYPE_CD, '') as META_RECORD_TYPE_CD  ");
		buf.append("\n   , value( INST.ME_CD, '') as META_ME_CD  ");
		buf.append("\n   , value( INST.COLOR_CD, '') as META_COLOR_CD  ");
		buf.append("\n   , value( CON.ASP_RTO_CD, '') AS META_ASP_RTO_CD ");
		buf.append("\n   , value( CON.VD_QLTY, '') AS META_VD_QLTY  ");


		buf.append("\n   , value( CON.DURATION, 0) AS META_DURATION  ");
		buf.append("\n   , value( CON.CT_TYP, '') AS META_CT_TYP   ");
		buf.append("\n   , value( CON.CT_CLA, '') AS META_CT_CLA  ");
		buf.append("\n   , value( INST.AUDIO_BDWT, '') AS META_AUDIO_BDWT  ");
		buf.append("\n   , value( INST.FRM_PER_SEC, '') AS META_FRM_PER_SEC ");
		buf.append("\n   , value( INST.AUD_SAMP_FRQ, '') AS META_AUD_SAMP_FRQ  ");
		buf.append("\n   , value( INST.BIT_RT, '') AS META_BIT_RT  ");

		buf.append("\n   , value( INST.VD_HRESOL ||'*'||VD_VRESOL , '') AS META_HRESOL  ");
		buf.append("\n   , value( INST.VD_HRESOL , 0) AS META_VD_HRESOL  ");
		buf.append("\n   , value( INST.VD_VRESOL , 0) AS META_VD_VRESOL  ");
		buf.append("\n   , value( INST.CT_ID , 0) AS META_CT_ID  ");
		buf.append("\n   , value( PRE.PREVIEW_SUBJ , '') AS META_PREVIEW_SUBJ ");
		buf.append("\n   , value( meta.REGRID, '') as META_ARCHIVE_REQID  ");
		buf.append("\n   , value( INST.INGEST_EQ_ID, 0) as META_INGEST_EQ_ID  ");

		//2012.4.30 추가
		buf.append("\n   , value( meta.artist, '') as META_ARTIST  ");
		buf.append("\n   , value( meta.country_cd, '') as META_COUNTRY_CD ");
		buf.append("\n   , value( meta.chennel_cd, '') as META_CHENNEL_CD ");
		buf.append("\n   , value( meta.cocd, '') as META_COCD ");
		buf.append("\n   , value( meta.RIST_CLF_CD, '') as META_RIST_CLF_CD ");
		buf.append("\n   , value( annot.ANNOT_CLF_CONT, '') as META_RIST_CLF_Cont");
		/*buf.append("\n    , CASE WHEN ((INST.ARCH_STE_YN = 'Y' and INST.DTL_YN='N') OR  (INST.ARCH_STE_YN = 'N'and INST.DTL_YN='N'))  THEN  '스토리지' ");
			buf.append("\n    WHEN  INST.ARCH_STE_YN='Y' AND  INST.DTL_YN='Y'  THEN 'DTL'  ");
			buf.append("\n   ELSE ''  ");
			buf.append("\n   END AS META_STORAGE  ");
			buf.append("\n   from das.metadat_mst_tbl meta  ");*/
		buf.append("\n    , ( DECODE((  SELECT SUB_CIT.FL_PATH FROM METADAT_MST_TBL SUB_MMT ");
		buf.append("\n    INNER JOIN CORNER_TBL SUB_CNT ON SUB_MMT.MASTER_ID = SUB_CNT.MASTER_ID  ");
		buf.append("\n   INNER JOIN CONTENTS_MAPP_TBL SUB_CMT ON SUB_CNT.MASTER_ID = SUB_CMT.MASTER_ID AND SUB_CMT.MASTER_ID = SUB_MMT.MASTER_ID   ");
		buf.append("\n  INNER JOIN CONTENTS_TBL SUB_CT ON SUB_CT.CT_ID = SUB_CMT.CT_ID AND SUB_CT.CT_TYP ='003'   ");
		buf.append("\n  INNER JOIN CONTENTS_INST_TBL SUB_CIT ON SUB_CIT.CT_ID = SUB_CMT.CT_ID AND SUB_CIT.CTI_FMT LIKE '1%'  ");
		buf.append("\n  WHERE SUB_MMT.MASTER_ID = ?  ");
		buf.append("\n  FETCH FIRST 1 ROWS ONLY  ");
		buf.append("\n  ),'','DTL','스토리지')) AS META_STORAGE ");

		buf.append("\n   from das.metadat_mst_tbl meta  ");
		buf.append("\n     left outer join das.PGM_INFO_TBL pgm on meta.pgm_ID = pgm.pgm_id  ");
		buf.append("\n      left outer join DAS.USER_INFO_TBL erpuser on meta.acceptor_ID = erpuser.SBS_USER_ID    ");
		buf.append("\n      left outer join DAS.USER_INFO_TBL user on  meta.SEC_ARCH_ID = user.SBS_USER_ID    ");

		buf.append("\n     left outer join DAS.SCENARIO_TBL scenario ON META.MASTER_ID = scenario.MASTER_ID ");
		buf.append("\n     left outer join (SELECT MASTER_ID,CT_ID FROM DAS.CONTENTS_MAPP_TBL GROUP BY MASTER_ID,CT_ID) MAP ON  MAP.MASTER_ID=META.MASTER_ID   ");
		buf.append("\n     left outer join (SELECT DTL_YN, ARCH_STE_YN,AUD_TYPE_CD, RECORD_TYPE_CD,ME_CD,COLOR_CD,CT_ID, AUDIO_BDWT, FRM_PER_SEC, AUD_SAMP_FRQ,BIT_RT, VD_HRESOL,VD_VRESOL,INGEST_EQ_ID ,cti_fmt FROM  DAS.CONTENTS_INST_TBL GROUP BY DTL_YN, ARCH_STE_YN,AUD_TYPE_CD, RECORD_TYPE_CD,ME_CD,COLOR_CD,CT_ID, AUDIO_BDWT, FRM_PER_SEC, AUD_SAMP_FRQ,BIT_RT, VD_HRESOL,VD_VRESOL,INGEST_EQ_ID ,cti_fmt)INST  ON INST.CT_ID= MAP.CT_ID  and inst.cti_fmt like '1%' ");
		buf.append("\n     LEFT OUTER JOIN DAS.CONTENTS_TBL CON ON CON.CT_ID = MAP.CT_ID ");
		buf.append("\n    LEFT OUTER JOIN das.PREVIEW_TBL PRE ON PRE.MASTER_ID=META.MASTER_ID ");
		buf.append("\n    LEFT OUTER JOIN das.annot_info_tbl annot ON annot.MASTER_ID=META.MASTER_ID  ");

		buf.append("\n   where meta.MASTER_ID = ?  ");
		buf.append("\n   fetch first 1 rows only ");
		buf.append("\n   WITH UR ");		

		Connection con = null;		
		PreparedStatement psmt = null;		
		ResultSet rs = null;

		try
		{

			con = DBService.getInstance().getConnection();
			//logger.debug("######getBaseResultXML######## con : " + con);
			psmt = con.prepareStatement(buf.toString());    
			int index = 0;			
			psmt.setLong(++index, nMasterID);
			psmt.setLong(++index, nMasterID);
			rs = psmt.executeQuery();	
			if (rs.next())
			{		
				long nCurMasterID = rs.getLong("META_MASTER_ID");

				this.AddToResultXMLBuffer(strResult, "META_MASTER_ID", "      ", nCurMasterID + "");            	
				this.AddToResultXMLBuffer(strResult, "META_PGM_ID", "      ", rs.getLong("META_PGM_ID") + "");
				this.AddToResultXMLBuffer(strResult, "PGM_PGM_CD", "      ", rs.getString("PGM_PGM_CD"));
				this.AddToResultXMLBuffer(strResult, "PGM_PGM_NM", "      ", rs.getString("PGM_PGM_NM"));
				this.AddToResultXMLBuffer(strResult, "PGM_BRD_BGN_DD", "      ", rs.getString("PGM_BRD_BGN_DD").trim());
				this.AddToResultXMLBuffer(strResult, "PGM_BRD_END_DD", "      ", rs.getString("PGM_BRD_END_DD").trim());
				this.AddToResultXMLBuffer(strResult, "PGM_MEDIA_CD", "      ", rs.getString("PGM_MEDIA_CD"));
				if(rs.getLong("META_EPIS_NO")!=0){
					this.AddToResultXMLBuffer(strResult, "META_EPIS_NO", "      ",rs.getLong("META_EPIS_NO") + "");
				}else {
					this.AddToResultXMLBuffer(strResult, "META_EPIS_NO", "      ", "");

				}
				this.AddToResultXMLBuffer(strResult, "PGM_CHAN_CD", "      ", rs.getString("PGM_CHAN_CD").trim());
				this.AddToResultXMLBuffer(strResult, "PGM_PILOT_YN", "      ",rs.getString("PGM_PILOT_YN") + "");

				this.AddToResultXMLBuffer(strResult, "TITLE", "      ", rs.getString("TITLE"));

				this.AddToResultXMLBuffer(strResult, "META_CTGR_L_CD", "      ", rs.getString("META_CTGR_L_CD"));
				this.AddToResultXMLBuffer(strResult, "META_CTGR_M_CD", "      ", rs.getString("META_CTGR_M_CD"));
				this.AddToResultXMLBuffer(strResult, "META_CTGR_S_CD", "      ", rs.getString("META_CTGR_S_CD"));
				this.AddToResultXMLBuffer(strResult, "META_BRD_DD", "      ", rs.getString("META_BRD_DD"));
				this.AddToResultXMLBuffer(strResult, "META_FINAL_BRD_YN", "      ", rs.getString("META_FINAL_BRD_YN"));
				this.AddToResultXMLBuffer(strResult, "META_SNPS", "      ", rs.getString("META_SNPS"));
				this.AddToResultXMLBuffer(strResult, "META_KEY_WORDS", "      ", rs.getString("META_KEY_WORDS"));
				this.AddToResultXMLBuffer(strResult, "META_BRD_BGN_HMS", "      ", rs.getString("META_BRD_BGN_HMS").trim());
				this.AddToResultXMLBuffer(strResult, "META_BRD_END_HMS", "      ", rs.getString("META_BRD_END_HMS").trim());
				this.AddToResultXMLBuffer(strResult, "META_BRD_LENG", "      ", rs.getString("META_BRD_LENG").trim());
				this.AddToResultXMLBuffer(strResult, "META_PGM_RATE", "      ", rs.getString("META_PGM_RATE"));
				this.AddToResultXMLBuffer(strResult, "META_DRT_NM", "      ", rs.getString("META_DRT_NM"));
				this.AddToResultXMLBuffer(strResult, "META_PRODUCER_NM", "      ", rs.getString("META_PRODUCER_NM"));
				this.AddToResultXMLBuffer(strResult, "META_WRITER_NM", "      ", rs.getString("META_WRITER_NM"));
				this.AddToResultXMLBuffer(strResult, "META_PRDT_IN_OUTS_CD", "      ", rs.getString("META_PRDT_IN_OUTS_CD"));
				this.AddToResultXMLBuffer(strResult, "META_PRDT_DEPT_CD", "      ", rs.getString("META_PRDT_DEPT_CD"));
				this.AddToResultXMLBuffer(strResult, "META_PRDT_DEPT_NM", "      ", rs.getString("META_PRDT_DEPT_NM"));
				this.AddToResultXMLBuffer(strResult, "META_ORG_PRDR_NM", "      ", rs.getString("META_ORG_PRDR_NM"));
				this.AddToResultXMLBuffer(strResult, "META_MC_NM", "      ", rs.getString("META_MC_NM"));
				this.AddToResultXMLBuffer(strResult, "META_CAST_NM", "      ", rs.getString("META_CAST_NM"));
				this.AddToResultXMLBuffer(strResult, "META_CMR_DRT_NM", "      ", rs.getString("META_CMR_DRT_NM"));
				this.AddToResultXMLBuffer(strResult, "META_FM_DT", "      ", rs.getString("META_FM_DT"));
				this.AddToResultXMLBuffer(strResult, "META_CMR_PLACE", "      ", rs.getString("META_CMR_PLACE"));
				this.AddToResultXMLBuffer(strResult, "META_SPC_INFO", "      ", rs.getString("META_SPC_INFO"));
				this.AddToResultXMLBuffer(strResult, "META_REQ_CD", "      ", rs.getString("META_REQ_CD"));
				this.AddToResultXMLBuffer(strResult, "META_SEC_ARCH_NM", "      ", rs.getString("META_SEC_ARCH_NM"));
				this.AddToResultXMLBuffer(strResult, "META_SEC_ARCH_ID", "      ", rs.getString("META_SEC_ARCH_ID"));
				this.AddToResultXMLBuffer(strResult, "META_GATH_CO_CD", "      ", rs.getString("META_GATH_CO_CD"));
				this.AddToResultXMLBuffer(strResult, "META_GATH_CLF_CD", "      ", rs.getString("META_GATH_CLF_CD").trim());
				this.AddToResultXMLBuffer(strResult, "META_ARCH_REG_DD", "      ", rs.getString("META_ARCH_REG_DD").trim());
				this.AddToResultXMLBuffer(strResult, "META_ARRG_END_DT", "      ", rs.getString("META_ARRG_END_DT").trim());
				this.AddToResultXMLBuffer(strResult, "META_WORK_PRIO_CD", "      ", rs.getString("META_WORK_PRIO_CD"));
				this.AddToResultXMLBuffer(strResult, "META_RSV_PRD_CD", "      ", rs.getString("META_RSV_PRD_CD"));
				this.AddToResultXMLBuffer(strResult, "META_CPRTR_NM", "      ", rs.getString("META_CPRTR_NM"));
				this.AddToResultXMLBuffer(strResult, "META_CPRT_TYPE", "      ", rs.getString("META_CPRT_TYPE"));
				this.AddToResultXMLBuffer(strResult, "META_CPRT_TYPE_DSC", "      ", rs.getString("META_CPRT_TYPE_DSC"));
				this.AddToResultXMLBuffer(strResult, "META_VIEW_GR_CD", "      ", rs.getString("META_VIEW_GR_CD"));
				this.AddToResultXMLBuffer(strResult, "META_DLBR_CD", "      ", rs.getString("META_DLBR_CD"));
				this.AddToResultXMLBuffer(strResult, "META_AWARD_HSTR", "      ", rs.getString("META_AWARD_HSTR"));
				this.AddToResultXMLBuffer(strResult, "META_TAPE_ID", "      ", rs.getString("META_TAPE_ID").trim());
				this.AddToResultXMLBuffer(strResult, "META_TAPE_ITEM_ID", "      ", rs.getString("META_TAPE_ITEM_ID").trim());
				this.AddToResultXMLBuffer(strResult, "META_TAPE_MEDIA_CLF_CD", "      ", rs.getString("META_TAPE_MEDIA_CLF_CD"));
				this.AddToResultXMLBuffer(strResult, "META_RSV_PRD_END_DD", "      ", rs.getString("META_RSV_PRD_END_DD").trim());
				this.AddToResultXMLBuffer(strResult, "META_DEL_DD", "      ", rs.getString("META_DEL_DD").trim());
				this.AddToResultXMLBuffer(strResult, "META_USE_YN", "      ", rs.getString("META_USE_YN"));
				this.AddToResultXMLBuffer(strResult, "META_REG_DT", "      ", rs.getString("META_REG_DT"));
				this.AddToResultXMLBuffer(strResult, "META_MODRID", "      ", rs.getString("META_MODRID"));
				this.AddToResultXMLBuffer(strResult, "META_MOD_DT", "      ", rs.getString("META_MOD_DT"));
				this.AddToResultXMLBuffer(strResult, "META_GATH_DEPT_CD", "      ", rs.getString("META_GATH_DEPT_CD"));
				this.AddToResultXMLBuffer(strResult, "META_MCUID", "      ", rs.getString("META_MCUID"));
				this.AddToResultXMLBuffer(strResult, "META_RPIMG_CT_ID", "      ", rs.getLong("META_RPIMG_CT_ID") + "");
				this.AddToResultXMLBuffer(strResult, "META_RPIMG_KFRM_SEQ", "      ", rs.getLong("META_RPIMG_KFRM_SEQ") + "");
				this.AddToResultXMLBuffer(strResult, "META_DATA_STAT_CD", "      ", rs.getString("META_DATA_STAT_CD"));
				this.AddToResultXMLBuffer(strResult, "META_ING_REG_DD", "      ", rs.getString("META_ING_REG_DD"));
				this.AddToResultXMLBuffer(strResult, "META_COPY_KEEP", "      ", rs.getString("META_COPY_KEEP").trim());
				this.AddToResultXMLBuffer(strResult, "META_CLEAN_KEEP", "      ", rs.getString("META_CLEAN_KEEP").trim());
				this.AddToResultXMLBuffer(strResult, "META_MUSIC_INFO", "      ", rs.getString("META_MUSIC_INFO"));
				this.AddToResultXMLBuffer(strResult, "META_RST_CONT", "      ", rs.getString("META_RST_CONT"));
				this.AddToResultXMLBuffer(strResult, "META_RERUN", "      ", rs.getString("META_RERUN"));
				this.AddToResultXMLBuffer(strResult, "META_ACCEPTOR_ID", "      ", rs.getString("META_ACCEPTOR_ID"));
				this.AddToResultXMLBuffer(strResult, "META_SUB_TTL", "      ", rs.getString("META_SUB_TTL"));
				this.AddToResultXMLBuffer(strResult, "META_ARRANGE_NM", "      ", rs.getString("META_ARRANGE_NM"));
				this.AddToResultXMLBuffer(strResult, "META_ACCEPTOR_NM", "      ", rs.getString("META_ACCEPTOR_NM"));
				this.AddToResultXMLBuffer(strResult, "META_SCENARIO_TITLE", "      ",XmlUtil.checkNull(rs.getString("META_SCENARIO_TITLE")));
				this.AddToResultXMLBuffer(strResult, "META_PRDT_DEPT_CD", "      ",XmlUtil.checkNull(rs.getString("META_PRDT_DEPT_CD")));
				this.AddToResultXMLBuffer(strResult, "META_AUD_TYPE_CD", "      ", rs.getString("META_AUD_TYPE_CD"));
				this.AddToResultXMLBuffer(strResult, "META_RECORD_TYPE_CD", "      ", rs.getString("META_RECORD_TYPE_CD").trim());
				this.AddToResultXMLBuffer(strResult, "META_COLOR_CD", "      ", rs.getString("META_COLOR_CD").trim());
				this.AddToResultXMLBuffer(strResult, "META_ME_CD", "      ",XmlUtil.checkNull(rs.getString("META_ME_CD")));
				this.AddToResultXMLBuffer(strResult, "META_ASP_RTO_CD", "      ", rs.getString("META_ASP_RTO_CD").trim());
				this.AddToResultXMLBuffer(strResult, "META_VD_QLTY", "      ",XmlUtil.checkNull(rs.getString("META_VD_QLTY")));

				this.AddToResultXMLBuffer(strResult, "META_DURATION", "      ", rs.getString("META_DURATION"));
				this.AddToResultXMLBuffer(strResult, "META_CT_TYP", "      ", rs.getString("META_CT_TYP"));
				this.AddToResultXMLBuffer(strResult, "META_CT_CLA", "      ",XmlUtil.checkNull(rs.getString("META_CT_CLA")));
				this.AddToResultXMLBuffer(strResult, "META_AUDIO_BDWT", "      ",XmlUtil.checkNull(rs.getString("META_AUDIO_BDWT")));
				this.AddToResultXMLBuffer(strResult, "META_FRM_PER_SEC", "      ", rs.getString("META_FRM_PER_SEC"));
				this.AddToResultXMLBuffer(strResult, "META_AUD_SAMP_FRQ", "      ", rs.getString("META_AUD_SAMP_FRQ"));
				this.AddToResultXMLBuffer(strResult, "META_BIT_RT", "      ",XmlUtil.checkNull(rs.getString("META_BIT_RT")));
				this.AddToResultXMLBuffer(strResult, "META_HRESOL", "      ", rs.getString("META_HRESOL"));
				this.AddToResultXMLBuffer(strResult, "META_VD_HRESOL", "      ", rs.getString("META_VD_HRESOL"));
				this.AddToResultXMLBuffer(strResult, "META_VD_VRESOL", "      ", rs.getString("META_VD_VRESOL"));
				this.AddToResultXMLBuffer(strResult, "META_PREVIEW_SUBJ", "      ",XmlUtil.checkNull(rs.getString("META_PREVIEW_SUBJ")));
				this.AddToResultXMLBuffer(strResult, "META_HRESOL", "      ", rs.getString("META_HRESOL"));
				this.AddToResultXMLBuffer(strResult, "META_ARCHIVE_REQID", "      ",XmlUtil.checkNull(rs.getString("META_ARCHIVE_REQID")));
				this.AddToResultXMLBuffer(strResult, "META_INGEST_EQ_ID", "      ",rs.getInt("META_INGEST_EQ_ID")+"");
				this.AddToResultXMLBuffer(strResult, "META_PDS_CMS_PGM_ID", "      ",rs.getString("META_PDS_CMS_PGM_ID").trim());
				this.AddToResultXMLBuffer(strResult, "META_CT_ID", "      ",rs.getLong("META_CT_ID")+"");

				this.AddToResultXMLBuffer(strResult, "META_STORAGE", "      ",rs.getString("META_STORAGE"));

				//2012.4.30 
				this.AddToResultXMLBuffer(strResult, "META_ARTIST", "      ",rs.getString("META_ARTIST"));

				this.AddToResultXMLBuffer(strResult, "META_COUNTRY_CD", "      ",rs.getString("META_COUNTRY_CD"));
				this.AddToResultXMLBuffer(strResult, "META_CHENNEL_CD", "      ",rs.getString("META_CHENNEL_CD"));
				this.AddToResultXMLBuffer(strResult, "META_COCD", "      ",rs.getString("META_COCD"));
				this.AddToResultXMLBuffer(strResult, "META_ANNOT_CLF_CD", "      ",rs.getString("META_RIST_CLF_CD"));
				this.AddToResultXMLBuffer(strResult, "META_ANNOT_CLF_DESC", "      ",rs.getString("META_RIST_CLF_Cont"));

			}	//if (rs.next())
			long rMasterID = 0;

			return strResult.toString();
		}
		catch (Exception ex)
		{
			logger.error(buf.toString());

			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "getMetaResultXML 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, con);
		}        
	}




	/**
	 * 관련영상 링크조회한다
	 * @param masterId
	 * @return
	 * @throws Exception 
	 * @throws RemoteException
	 */
	public List selectRelationLink(long masterid ) throws Exception
	{

		String query = ExternalStatement.selectRelationLink();

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		String child_master_id = "";
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######selectRelationLink######## con : " + con);
			//stmt = LoggableStatement.getInstance(con,query);
			stmt = con.prepareStatement(query);

			int index = 0;
			stmt.setLong(++index, masterid);
			rs = stmt.executeQuery();

			List resultList = new ArrayList();

			while(rs.next())
			{
				RelationDO item = new RelationDO();

				item.setTitle(rs.getString("title"));
				item.setBrd_dd(rs.getString("brd_dd"));			

				item.setMaster_id(rs.getLong("child_master_id"));
				item.setCtgr_l_nm(rs.getString("ctgr_l_nm"));
				item.setCtgr_ms_nm(rs.getString("ctgr_ms_nm"));
				item.setBrd_leng(rs.getString("brd_leng"));
				item.setVd_qlty(rs.getString("vd_qlty"));

				resultList.add(item);
			}


			return resultList;
		} 
		catch (Exception e) 
		{
			logger.error(query);


			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}	
	}


	/**
	 * getStatus 결과값를 저장한다.
	 * @param TransferDO  정보 리스트	
	 * @return 	TransferDO object 리스트 
	 * @throws Exception 
	 */
	public int insertAllTMstatusinfo(TransferDO transfer) throws Exception
	{
		logger.debug(transfer);
		StringBuffer buf = new StringBuffer();
		buf.append("\n INSERT INTO DAS.ARIEL_INFO_TBL  (   ");
		buf.append("\n    CART_NO ");
		buf.append("\n   ,CART_SEQ ");
		buf.append("\n   ,MESSAGE ");
		buf.append("\n   ,TASK_ID ");
		buf.append("\n   ,SUCCESS_YN ");
		buf.append("\n   ,PROGERESS )");
		buf.append("\n values ");
		buf.append("\n ( ");		
		buf.append("\n ?, ?, ?, ?, ?, ? ");
		buf.append("\n ) ");

		Connection con = null;
		PreparedStatement stmt = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######insertAllTMstatusinfo######## con : " + con);
			con.setAutoCommit(false);

			stmt = con.prepareStatement(buf.toString());

			int index = 0;			
			stmt.setInt(++index, transfer.getCart_no());
			stmt.setInt(++index, transfer.getCart_seq());
			stmt.setString(++index, transfer.getMessage());
			stmt.setInt(++index, transfer.getTaskID());
			if(transfer.getTaskID() == 0 || transfer.getProgress().equals("100%")){
				stmt.setString(++index, "Y");
			}else {
				stmt.setString(++index, "N");	
			}
			stmt.setString(++index, transfer.getProgress().replaceAll("%", ""));



			int updateCount = stmt.executeUpdate();

			if (logger.isDebugEnabled()) 
			{
				logger.debug("[Inserted Count]" + updateCount);
			}

			if(updateCount == 0)
			{
				//여기서 에러를 던진다.
				DASException exception = new DASException(ErrorConstants.NOT_EXIST_PROGRAM_INFO, "저장에 실패했습니다.");
				throw exception;
			}


			con.commit();
			return updateCount;
		} 

		catch (Exception e) 
		{
			logger.error(buf.toString());

			if(con != null)
			{
				try {
					con.rollback();
				} catch (SQLException e1) {
					// TODO 자동 생성된 catch 블록
					logger.error(e1);
				}
			}


			throw e;
		}
		finally
		{
			try {
				con.setAutoCommit(true);
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				logger.error(e);
			}
			release(null, stmt, con);
		}
	}



	/**
	 * tm정보를 조회한다.
	 * @param photoInfoDO                                                                                                                        
	 * @return                                                                                                                         
	 * @throws Exception 
	 */
	public List selectTmList(int taskid) throws Exception
	{
		PageDO pageDO = new PageDO();

		StringBuffer buf = new StringBuffer();
		buf.append("\n select task_id FROM                                                      										\n");
		buf.append("\n ARIEL_INFO_TBL ");
		buf.append("\n WHERE task_id=?	 ");

		//Page에 따른 계산을 한다.
		//int page = condition.getPage();
		//if(page == 0)
		//{
		//	page = 1;
		//}

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######selectTmList######## con : " + con);

			stmt = con.prepareStatement(buf.toString());

			//디스플레이할 페이지의 시작 row와 끝 row를 계산한다.
			//int endNum = page * DASBusinessConstants.PageRowCount.DISUSE_ROW_COUNT; 
			//int startNum = endNum - (DASBusinessConstants.PageRowCount.DISUSE_ROW_COUNT  -1);

			int index = 0;

			//stmt.setInt(++index, startNum);
			stmt.setInt(++index, taskid);

			rs = stmt.executeQuery();

			int indexCount = 0;
			List resultList = new ArrayList();

			while(rs.next())
			{
				PhotoInfoDO item = new PhotoInfoDO();
				item.setTitle(rs.getString("task_id"));
				resultList.add(item);
			}



			return resultList;
		} 

		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}



	/**
	 * getbaseinfo에서 조회시 인제스트 정보에 해당하는 메타데이터를 조회한다
	 * @param nMasterID 마스터id
	 * @return xml
	 */
	public String getIngestMetaResultXML(long nMasterID) throws DASException
	{
		StringBuffer buf = new StringBuffer();
		StringBuffer strResult = new StringBuffer();

		buf.append("SELECT   ");
		buf.append("\n   CON.CT_ID AS META_CT_ID  ");	
		buf.append("\n   ,inst.CTI_ID AS META_CTI_ID  ");
		buf.append("\n   ,CODE2.DESC  AS META_CT_NM ");	
		buf.append("\n   ,CON.CT_LENG  AS META_CT_LENG  ");
		buf.append("\n   ,CON.REG_DT AS META_REG_DT  ");
		buf.append("\n   ,(select fl_sz from contents_inst_tbl inst where con.ct_id=inst.ct_id and cti_fmt like '10%') as META_M2_SZ ");
		buf.append("\n   ,(select fl_sz from contents_inst_tbl inst where con.ct_id=inst.ct_id and cti_fmt like '30%') as META_M4_SZ  ");
		buf.append("\n   ,INST.INGEST_EQ_ID AS META_INGEST_EQ_ID ");
		buf.append("\n   ,INST.VD_HRESOL AS META_VD_HRESOL ");
		buf.append("\n   ,INST.VD_VRESOL AS META_VD_VRESOL ");
		buf.append("\n   ,INST.BIT_RT AS META_BIT_RT ");
		buf.append("\n   ,INST.FRM_PER_SEC AS META_FRM_PER_SEC ");
		buf.append("\n   ,INST.AUD_SAMP_FRQ AS META_AUD_SAMP_FRQ ");
		buf.append("\n   ,INST.AUDIO_BDWT AS META_AUDIO_BDWT ");
		buf.append("\n   ,CON.TOT_KFRM_NUMS AS META_TOT_KFRM_NUMS ");
		buf.append("\n   ,CODE.DESC AS META_CT_CLA ");
		buf.append("\n   ,map.del_dd AS META_DEL_DD ");
		buf.append("\n   FROM CONTENTS_TBL CON ");
		buf.append("\n  inner join (select master_id, ct_id ,del_dd,del_yn from  CONTENTS_MAPP_TBL group by master_id, ct_id,del_dd,del_yn) map on map.ct_id =con.ct_id ");		
		buf.append("\n  INNER JOIN METADAT_MST_TBL MST ON MST.MASTER_ID=MAP.MASTER_ID  ");
		buf.append("\n   INNER JOIN CONTENTS_INST_TBL INST ON INST.CT_ID=CON.CT_ID and inst.CTI_FMT like '1%' ");
		buf.append("\n   LEFT OUTER JOIN CODE_TBL CODE ON CODE.SCL_CD = CON.CT_CLA AND CODE.CLF_CD='A001' ");
		buf.append("\n   LEFT OUTER JOIN CODE_TBL CODE2 ON CODE2.SCL_CD = CON.CT_TYP AND CODE2.CLF_CD='A002' ");
		buf.append("\n   WHERE MST.MASTER_ID= ?   	   ");

		buf.append("\n   and  map.del_yn <>'Y'   ");
		buf.append("\n   order by   CODE2.rmk_2 asc , con.ct_seq asc	   ");

		buf.append("\n   WITH UR ");

		Connection con = null;		
		PreparedStatement psmt = null;		
		ResultSet rs = null;

		try
		{


			con = DBService.getInstance().getConnection();
			//logger.debug("######getIngestMetaResultXML######## con : " + con);
			psmt = con.prepareStatement(buf.toString()); 

			int index = 0;			
			psmt.setLong(++index, nMasterID);
			rs = psmt.executeQuery();
			int i=0;
			while (rs.next())
			{		
				i++;
				strResult.append("\n  <ingestinfo>");

				this.AddToResultXMLBuffer(strResult, "META_CT_ID", "      ", rs.getLong("META_CT_ID") + "");
				this.AddToResultXMLBuffer(strResult, "META_CTI_ID", "      ", rs.getLong("META_CTI_ID") + "");
				this.AddToResultXMLBuffer(strResult, "META_CT_NM", "      ", rs.getString("META_CT_NM"));
				this.AddToResultXMLBuffer(strResult, "META_CT_LENG", "      ", rs.getString("META_CT_LENG"));
				this.AddToResultXMLBuffer(strResult, "META_REG_DT", "      ", rs.getString("META_REG_DT"));
				this.AddToResultXMLBuffer(strResult, "META_M2_SZ", "      ", rs.getString("META_M2_SZ"));
				this.AddToResultXMLBuffer(strResult, "META_M4_SZ", "      ", rs.getString("META_M4_SZ"));
				//2011.1.21
				this.AddToResultXMLBuffer(strResult, "META_INGEST_EQ_ID", "      ", rs.getString("META_INGEST_EQ_ID"));
				this.AddToResultXMLBuffer(strResult, "META_VD_HRESOL", "      ", rs.getInt("META_VD_HRESOL")+"");
				this.AddToResultXMLBuffer(strResult, "META_VD_VRESOL", "      ", rs.getInt("META_VD_VRESOL")+"");
				this.AddToResultXMLBuffer(strResult, "META_BIT_RT", "      ", rs.getString("META_BIT_RT"));
				this.AddToResultXMLBuffer(strResult, "META_FRM_PER_SEC", "      ", rs.getString("META_FRM_PER_SEC"));
				this.AddToResultXMLBuffer(strResult, "META_INGEST_EQ_ID", "      ", rs.getInt("META_INGEST_EQ_ID")+"");
				this.AddToResultXMLBuffer(strResult, "META_AUD_SAMP_FRQ", "      ", rs.getString("META_AUD_SAMP_FRQ"));
				this.AddToResultXMLBuffer(strResult, "META_AUDIO_BDWT", "      ", rs.getString("META_AUDIO_BDWT"));
				this.AddToResultXMLBuffer(strResult, "META_TOT_KFRM_NUMS", "      ", rs.getInt("META_TOT_KFRM_NUMS")+"");
				this.AddToResultXMLBuffer(strResult, "META_CT_CLA", "      ", rs.getString("META_CT_CLA"));
				this.AddToResultXMLBuffer(strResult, "META_DEL_DD", "      ", rs.getString("META_DEL_DD").trim());

				strResult.append("\n  </ingestinfo>");


			}	


			release(rs, psmt, con);
			return strResult.toString();
		}

		catch (Exception ex)
		{
			logger.error(buf.toString());

			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "getMetaResultXML 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, con);
		}        
	}


	/**
	 * 모든lock을 해제한다
	 * @param master_id 마스터id
	 * @param brd_dd 방송일
	 * @param req_cd 청구번호
	 * @param brd_leng 방송길이
	 * @param sub_ttl 부제
	 * @throws Exception 
	 */	
	public int updateRelation(long master_id, String brd_dd, String req_cd, String brd_leng,String sub_ttl) throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.Metadat_mst_tbl set ");
		buf.append("\n 	brd_dd = ? ");
		buf.append("\n 	,req_cd = ?");
		buf.append("\n 	,brd_leng = ? ");
		buf.append("\n 	,sub_ttl = ? ");
		buf.append("\n where master_id = ? ");

		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateRelation######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setString(++index, brd_dd);
			stmt.setString(++index, req_cd);
			stmt.setString(++index, brd_leng);
			stmt.setString(++index, sub_ttl);
			stmt.setLong(++index, master_id);

			int updateCount = stmt.executeUpdate();

			return updateCount;
		}

		catch (Exception e) 
		{
			logger.error(buf.toString());

			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}
	/**
	 * 화면비 업데이트 한다
	 * @param asp_rto_cd 화면비코드
	 * @param ct_id 영상id 
	 * @return updatecount
	 * @throws Exception 
	 * @throws RemoteException
	 */

	public int updateASP_RTO(String asp_rto_cd, int ct_id) throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.contents_tbl set ");
		buf.append("\n 	asp_rto_cd=? ");
		buf.append("\n where ct_id = ? ");

		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateASP_RTO######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setString(++index, asp_rto_cd);

			stmt.setInt(++index, ct_id);

			int updateCount = stmt.executeUpdate();

			return updateCount;
		}

		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}
	/**
	 * 프로그랜 정보를 수정한다
	 * @param pgm_nm 프로그램명
	 * @param pgm_cd 프로그램 코드
	 * @param brd_bgn_dd 방송시작일
	 * @param brd_end_dd 방송종료일 
	 * @param media_cd 미디어코드 
	 * @param chan_Cd 체널코드 
	 * @param pilot_yn 파일럿yn 
	 * @param pgm_id 프로그램id 
	 * @return updatecount
	 * @throws Exception 
	 * @throws RemoteException
	 */

	public int updatePGMinfo(String pgm_nm,String pgm_cd, String brd_bgn_dd,String brd_end_dd,String media_cd, String chan_Cd, String pilot_yn,long pgm_id) throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.pgm_info_tbl set ");
		buf.append("\n 	pgm_nm=? ");
		buf.append("\n 	,pgm_cd=? ");
		//buf.append("\n 	,brd_bgn_dd=? ");
		//buf.append("\n 	,brd_end_dd=? ");
		buf.append("\n 	,media_cd=? ");
		buf.append("\n 	,chan_cd=? ");
		buf.append("\n 	,pilot_yn=? ");
		buf.append("\n where pgm_id = ? ");

		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updatePGMinfo######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setString(++index, pgm_nm);
			stmt.setString(++index, pgm_cd);
			//stmt.setString(++index, brd_bgn_dd);
			//stmt.setString(++index, brd_end_dd);
			stmt.setString(++index, media_cd);
			stmt.setString(++index, chan_Cd);
			stmt.setString(++index, pilot_yn);
			stmt.setLong(++index, pgm_id);
			int updateCount = stmt.executeUpdate();

			return updateCount;
		}
		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}

	/**
	 * 관련영상 master_id를 찾는다
	 * @param master_id   마스터id
	 * @return List		ProgramInfoDO 리스트
	 * @throws Exception 
	 */
	public List selectRelCtid(long master_id) throws Exception
	{

		String query = ExternalStatement.selectRelCtid(master_id);
		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######selectRelCtid######## con : " + con);
			stmt = con.prepareStatement(query);

			String str = null;		
			rs = stmt.executeQuery();
			List resultList  = new ArrayList();
			while(rs.next())
			{
				MetadataMstInfoDO item = new MetadataMstInfoDO();

				item.setRel_ct_id(rs.getInt("ct_id"));


				resultList.add(item);		
			}		

			return resultList;

		} 

		catch (Exception e) 
		{
			logger.error(query);

			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}
	/**
	 * das.contents_tbl 수정한다
	 * @param ctID    컨텐츠id
	 * @param duration    duration
	 * @param ct_cla    컨텐츠 타입
	 * @param ct_typ    컨텐츠 유형
	 * @return updatecount
	 * @throws Exception 
	 */
	public int updateContentsInfo(int ctID, String duration,String ct_cla, String ct_typ) throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.contents_tbl set ");
		buf.append("\n 	duration = ?,ct_cla=?,ct_typ=? ");
		buf.append("\n where ct_id = ? ");

		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateContentsInfo######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setString(++index, duration);
			stmt.setString(++index, ct_cla);
			stmt.setString(++index, ct_typ);
			stmt.setInt(++index, ctID);

			int updateCount = stmt.executeUpdate();

			return updateCount;
		}

		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}




	/**
	 * PDS DOWN
	 * @param commonDO
	 * @return
	 * @throws Exception 
	 * @throws RemoteException
	 */
	public List getPDSList(PdsDownDO pdsDownDO) throws Exception
	{
		PageDO pageDO = new PageDO();

		StringBuffer buf = new StringBuffer();

		buf.append(ExternalStatement.selectPDSList());

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######getPDSList######## con : " + con);

			stmt = con.prepareStatement(buf.toString());


			int index = 0;

			stmt.setInt(++index, pdsDownDO.getCart_no());
			stmt.setInt(++index, pdsDownDO.getCart_seq());
			rs = stmt.executeQuery();

			int indexCount = 0;
			List resultList = new ArrayList();

			while(rs.next())
			{
				PdsDownDO item = new PdsDownDO();

				item.setProgram_id(				rs.getString("pgm_id"));
				item.setProgram_title(				rs.getString("title"));
				item.setProgram_sequence_number(rs.getString("epis_no"));
				item.setProgram_subtitle(rs.getString("sub_ttl"));
				item.setClip_name(rs.getString("cti_id"));
				item.setBroadcast_event_kind(rs.getString("ctgr_m_cd"));
				item.setCart_no(rs.getInt("cart_no"));
				item.setCart_seq(				rs.getInt("cart_seq"));
				item.setMedia_id(				rs.getString("MEDIA_ID"));
				item.setDown_nm(rs.getString("DOWN_SUBJ"));
				item.setDown_path(rs.getString("path"));
				item.setNode_id("");
				resultList.add(item);
			}



			return resultList;
		} 
		catch (Exception e) 
		{
			logger.error(buf.toString());

			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}




	/**
	 * NDS DOWN
	 * @param commonDO
	 * @return
	 * @throws Exception 
	 * @throws RemoteException
	 */
	public List getNDSList(NdsDownDO ndsDownDO) throws Exception
	{
		PageDO pageDO = new PageDO();
		StringBuffer buf = new StringBuffer();
		buf.append(ExternalStatement.selectNDSList());
		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######getNDSList######## con : " + con);


			stmt = con.prepareStatement(buf.toString());


			int index = 0;

			stmt.setInt(++index, ndsDownDO.getCart_no());
			stmt.setInt(++index, ndsDownDO.getCart_seq());
			rs = stmt.executeQuery();

			List resultList = new ArrayList();

			while(rs.next())
			{
				NdsDownDO item = new NdsDownDO();

				item.setMediatypecode(				rs.getString("storageid"));
				item.setMediaid(				rs.getString("media_id"));
				item.setTitle(rs.getString("title"));
				item.setSutitle(rs.getString("sub_ttl"));
				item.setWorkername(rs.getString("SEC_ARCH_ID"));
				item.setCart_seq(rs.getInt("CART_SEQ"));
				item.setCart_no(rs.getInt("CART_NO"));
				item.setDown_path(rs.getString("PATH"));

				resultList.add(item);
			}


			return resultList;
		}
		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}



	/**
	 * 기본정보 초기화면
	 * @param commonDO
	 * @return
	 * @throws RemoteException
	 */
	public String getRepBaseInfo(long master_id) throws DASException
	{	
		StringBuffer strResultBuffer = new StringBuffer();

		strResultBuffer.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n");
		strResultBuffer.append("<Data>\n");

		strResultBuffer.append(this.getRepBaseInfoXML(master_id));


		strResultBuffer.append("</Data>\n");   
		logger.debug("strResultBuffer.toString()"+strResultBuffer.toString());
		return strResultBuffer.toString();

	}


	private String getRepBaseInfoXML(long nMasterID) throws DASException
	{
		StringBuffer buf = new StringBuffer();
		StringBuffer strResult = new StringBuffer();

		buf.append("\n SELECT ");
		buf.append("\n   value(mst.title, '') as TITLE  ");
		buf.append("\n   , value(CODE1.DESC, '') as CTGR_L_NM  ");
		buf.append("\n   , value(CODE2.DESC, '') as CPRT_TYPE ");
		buf.append("\n   ,  value(con.ct_leng, '') as CT_LENG ");
		buf.append("\n   ,  value(CODE3.DESC, '') as VD_QLTY_NM ");
		buf.append("\n   , value(mst.sub_ttl, '') as SUB_TTL ");
		buf.append("\n   ,  value(mst.brd_dd, '') as BRD_DD ");
		buf.append("\n   ,  value(mst.arrange_nm, '') as ARRANGE_NM ");
		buf.append("\n   , value( mst.fm_dt, '') as FM_DT  ");
		buf.append("\n   , value( pgm.pgm_nm, '') as PGM_NM  ");

		buf.append("\n   from das.metadat_mst_tbl mst ");
		buf.append("\n     inner join CONTENTS_MAPP_tbl   map on mst.MASTER_ID=map.MASTER_ID  ");
		buf.append("\n     inner join contents_tbl con on con.CT_ID=map.CT_ID    ");
		buf.append("\n     inner join pgm_info_tbl pgm on pgm.PGM_ID=mst.PGM_ID ");
		buf.append("\n    LEFT OUTER JOIN CODE_TBL CODE1 ON CODE1.SCL_CD=MST.ctgr_l_cd AND CODE1.CLF_CD='P002'  ");
		buf.append("\n    LEFT OUTER JOIN CODE_TBL CODE2 ON CODE2.SCL_CD=MST.CPRT_TYPE AND CODE2.CLF_CD='P013' ");
		buf.append("\n    LEFT OUTER JOIN CODE_TBL CODE3 ON CODE3.SCL_CD=con.vd_qlty AND CODE3.CLF_CD='A005' ");

		buf.append("\n   where mST.MASTER_ID = ?  ");
		buf.append("\n   fetch first 1 rows only ");
		buf.append("\n   WITH UR ");				
		Connection con = null;		
		PreparedStatement psmt = null;		
		ResultSet rs = null;

		try
		{
			strResult.append("\n  <meta>");

			con = DBService.getInstance().getConnection();
			//logger.debug("######getRepBaseInfoXML######## con : " + con);
			psmt = con.prepareStatement(buf.toString());    
			int index = 0;			
			psmt.setLong(++index, nMasterID);
			rs = psmt.executeQuery();	
			if (rs.next())
			{		


				this.AddToResultXMLBuffer(strResult, "TITLE", "      ", rs.getString("TITLE"));
				this.AddToResultXMLBuffer(strResult, "CTGR_L_NM", "      ", rs.getString("CTGR_L_NM"));
				this.AddToResultXMLBuffer(strResult, "CPRT_TYPE", "      ", rs.getString("CPRT_TYPE"));
				this.AddToResultXMLBuffer(strResult, "CT_LENG", "      ", rs.getString("CT_LENG"));
				this.AddToResultXMLBuffer(strResult, "VD_QLTY_NM", "      ", rs.getString("VD_QLTY_NM"));
				this.AddToResultXMLBuffer(strResult, "SUB_TTL", "      ", rs.getString("SUB_TTL"));
				this.AddToResultXMLBuffer(strResult, "BRD_DD", "      ",rs.getString("BRD_DD"));
				this.AddToResultXMLBuffer(strResult, "ARRANGE_NM", "      ", rs.getString("ARRANGE_NM"));
				this.AddToResultXMLBuffer(strResult, "FM_DT", "      ",rs.getString("FM_DT"));

				this.AddToResultXMLBuffer(strResult, "PGM_NM", "      ", rs.getString("PGM_NM"));


			}	

			strResult.append("  </meta>");

			return strResult.toString();
		}

		catch (Exception ex)
		{
			logger.error(buf.toString());

			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "getMetaResultXML 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, con);
		}        
	}

	/**
	 * Job을 MIN 으로 처리순서를 잡고 조회를 한건 한다. 
	 */
	public TcBeanDO selectTcJob() throws DASException{

		StringBuffer buf = new StringBuffer();
		Connection con = null;		
		PreparedStatement psmt = null;		
		ResultSet rs = null;

		//		buf.append(" select * from (                                                       ");
		//		buf.append(" select ROW_NUMBER() OVER(ORDER BY A.seq desc) AS rownum                    ");
		//		buf.append("       ,SEQ, MEDIA_ID, REG_DT, RESULT, TC_ID                           ");
		//		buf.append("       , REQ_CD,  INPUT_LR, OUTPUT_LR_PATH, OUTPUT_CT_PATH    ");
		//		buf.append("       , OUTPUT_LR_NM, OUTPUT_CT_NM, CT_ID, FILE_READY, JOB_ALOCATE    ");
		//		buf.append("       , VALUE(INPUT_HR_NM,'') AS INPUT_HR_NM,  VALUE( INPUT_HR,'') AS INPUT_HR    ");
		//		buf.append(" from das.tc_job_tbl A where A.JOB_ALOCATE = 'N'                       ");
		//		buf.append(" ) B                                                                   ");
		//		buf.append(" where B.rownum =  ?                                                  ");

		/**
		 * Job을 MIN 으로 처리순서를 잡고 조회를 한건 한다. 
		 */
		buf.append(" select										                   ");
		buf.append("       SEQ, MEDIA_ID, REG_DT, RESULT, TC_ID                           ");
		buf.append("       , REQ_CD,  INPUT_LR, OUTPUT_LR_PATH, OUTPUT_CT_PATH    ");
		buf.append("       , OUTPUT_LR_NM, OUTPUT_CT_NM, CT_ID, FILE_READY, JOB_ALOCATE    ");
		buf.append("       , VALUE(INPUT_HR_NM,'') AS INPUT_HR_NM,  VALUE( INPUT_HR,'') AS INPUT_HR    ");
		buf.append(" from das.tc_job_tbl A                     ");
		buf.append("  where      seq = (select seq from das.tc_job_tbl where job_alocate='N' and cocd='S' order by priority desc fetch first 1 rows only ) ");

		try {
			con = DBService.getInstance().getConnection();
			//logger.debug("######selectTcJob######## con : " + con);
			//con.setAutoCommit(false);
			// psmt = con.prepareStatement(buf.toString());    
			psmt = con.prepareStatement(buf.toString());
			int index = 0;			
			//			psmt.setLong(++index, Long.parseLong(getNextSquence(con, DASBusinessConstants.SequenceName.TC_JOB)));
			rs = psmt.executeQuery();
			String input_hr=""; 
			if(rs.next())
			{
				TcBeanDO item = new TcBeanDO();
				item.setSeq(     	rs.getLong("SEQ"));
				item.setMedia_id(   rs.getString("MEDIA_ID"));
				item.setReg_dt(     rs.getString("REG_DT"));
				item.setResult(     rs.getString("RESULT"));
				item.setTc_id(      rs.getString("TC_ID"));
				item.setReq_cd(     rs.getString("REQ_CD"));
				String hr = rs.getString("INPUT_HR").trim();
				if(hr.matches(".*arcreq.*")){
					input_hr = hr.replaceAll("/"+dasHandler.getProperty("WINARCREQ"), dasHandler.getProperty("ARCREQ"));
					input_hr = input_hr.replaceAll(dasHandler.getProperty("WINARCREQ"), dasHandler.getProperty("ARCREQ"));
					//logger.debug("input arcreq =========== " +input_hr);
					item.setInput_hr(input_hr);
				}else if(hr.matches(".*mp2.*")){
					input_hr =hr.replaceAll("/"+dasHandler.getProperty("WINMP2"),dasHandler.getProperty("MP2"));
					input_hr =input_hr.replaceAll(dasHandler.getProperty("WINMP2"),dasHandler.getProperty("MP2"));
					//logger.debug("input mp2 =========== " +input_hr);
					item.setInput_hr(input_hr);
				}else if(hr.matches(".*nearline.*")){
					input_hr =hr.replaceAll("/"+dasHandler.getProperty("WINNEARLINE"),dasHandler.getProperty("NEARLINE"));
					input_hr =input_hr.replaceAll(dasHandler.getProperty("WINNEARLINE"),dasHandler.getProperty("NEARLINE"));
					// logger.debug("input nearline =========== " +input_hr);
					item.setInput_hr(input_hr);
				}else{
					item.setInput_hr(hr);
					//	logger.debug("input nomal =========== " +input_hr);
				} 






				item.setInput_lr("");


				/*	String Out_put_lr_path = rs.getString("OUTPUT_LR_PATH").trim().replaceAll(dasHandler.getProperty("WINMP4"), dasHandler.getProperty("MP4"));
					item.setOut_put_lr_path(Out_put_lr_path);
					String Out_put_ct_path = rs.getString("OUTPUT_CT_PATH").replaceAll(dasHandler.getProperty("WINMP4"), dasHandler.getProperty("MP4"));
					item.setOut_put_ct_path(Out_put_ct_path);
				 */
				//2012.06.19 변경안

				String Out_put_lr_path = rs.getString("OUTPUT_LR_PATH").trim().replaceAll(dasHandler.getProperty("WINNET_MP4"), dasHandler.getProperty("NET_MP4"));
				Out_put_lr_path = Out_put_lr_path.replaceAll(dasHandler.getProperty("WINMP4"), dasHandler.getProperty("MP4"));
				item.setOut_put_lr_path(Out_put_lr_path);
				String Out_put_ct_path = rs.getString("OUTPUT_CT_PATH").replaceAll(dasHandler.getProperty("WINNET_MP4"), dasHandler.getProperty("NET_MP4"));
				Out_put_ct_path = Out_put_ct_path.replaceAll(dasHandler.getProperty("WINMP4"), dasHandler.getProperty("MP4"));
				item.setOut_put_ct_path(Out_put_ct_path);


				item.setOut_put_lr_nm(   rs.getString("OUTPUT_LR_NM"));
				item.setOut_put_ct_nm(   rs.getString("OUTPUT_CT_NM"));
				item.setCt_id(         	 rs.getLong("CT_ID"));
				item.setFile_ready(      rs.getString("FILE_READY"));
				item.setInput_lr_nm(      rs.getString("OUTPUT_LR_NM"));
				item.setInput_hr_nm(      rs.getString("INPUT_HR_NM"));
				item.setJob_alocate(	 rs.getString("JOB_ALOCATE"));

				/**
				 * allocate 값을 'Y'로 수정하는 것을 추가 ExternalDAO
				 */

				int result = updateResultTcjob(item);


				// wmv 재생성일, 명칭 업데이트
				//	updateContentsInst(item);

				// 키프레임 명 업데이트
				//updateContents(item);

				// 대표화면 키프레임 저장
				//	updatemetatbl(item);
				if(result ==1){
					return item;
				}else{
					return null;
				}
			}


			return null;

		}
		catch (Exception ex)
		{
			logger.error(buf.toString());

			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "selectTcJon 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			//        	con.setAutoCommit(true);
			release(rs, psmt, con);
		}

	}

	/**
	 * Job을 MIN 으로 처리순서를 잡고 조회를 한건 한다. (pds tc 완료시)
	 * @throws Exception 
	 */
	public TcBeanDO selectTcJob2(TcBeanDO tcBeanDO) throws Exception{


		/**
		 * allocate 값을 'Y'로 수정하는 것을 추가 ExternalDAO
		 */

		Connection con = null;		
		//PreparedStatement psmt = null;
		try {

			con = DBService.getInstance().getConnection();
			//logger.debug("######selectTcJob2######## con : " + con);
			if(tcBeanDO.getReq_cd().equals("LRCT")){

				// wmv 재생성일, 명칭 업데이트
				updateContentsInst(con,tcBeanDO);
				// 고해상도 정보 업데이트
				updateContentsInst2(con,tcBeanDO);
				// 메타 데이터 정리전으로 변환
				updateMetadat2(con,tcBeanDO);
				// 키프레임 명 업데이트
				updatemetatbl(con,tcBeanDO);
				// etc ''값
				updateETCNull(con,tcBeanDO.getCt_id());
				// 경로저장
				updateContents(con,tcBeanDO);
				//H264 정보 업데이트 2012.6.28


				//기존 코너를 삭제하고 새로운 코너를 생성한다
				TcBeanDO oldInfo = getMappInfo2(con,tcBeanDO.getCt_id());
				tcBeanDO.setCn_info(oldInfo.getCn_info());
				deleteCorner(con,tcBeanDO);
				insertCornerInfo2(con,oldInfo,tcBeanDO);
				insertContentsMappInfo(con,oldInfo,tcBeanDO);
				long master = findMasterid(tcBeanDO.getCt_id());
				String tmp = String.valueOf(master);
				int master_id = Integer.parseInt(tmp);
				systemManageDAO.insertCornerInfoForProceduer(master_id);
				//20121211 변경
				String  Out_put_lr_path = tcBeanDO.getOut_put_ct_path().replaceAll(dasHandler.getProperty("MP4"), dasHandler.getProperty("WINMP4"));
				Out_put_lr_path = Out_put_lr_path.replaceAll(dasHandler.getProperty("NET_MP4"), dasHandler.getProperty("WINNET_MP4"));  
				insertMergeInfo(tcBeanDO.getTc_id(),tcBeanDO.getCt_id(),Out_put_lr_path);
			}

			// 키프레임 명 업데이트
			if(tcBeanDO.getReq_cd().trim().equals("CT")){
				// 경로저장
				updateContents(con,tcBeanDO);
				updateContentsInstCatalog(con,tcBeanDO);
				// 키프레임 명 업데이트
				updatemetatbl(con,tcBeanDO);
				// etc ''값
				updateETCNull(con,tcBeanDO.getCt_id());


				//기존 코너를 삭제하고 새로운 코너를 생성한다
				TcBeanDO oldInfo = getMappInfo2(con,tcBeanDO.getCt_id());
				deleteCorner(con,tcBeanDO);
				//deleteContentsMapp(tcBeanDO);
				//deleteCornerCont(tcBeanDO);
				insertCornerInfo2(con,oldInfo,tcBeanDO);
				insertContentsMappInfo(con,oldInfo,tcBeanDO);
				long master = findMasterid(tcBeanDO.getCt_id());
				String tmp = String.valueOf(master);
				int master_id = Integer.parseInt(tmp);

				systemManageDAO.insertCornerInfoForProceduer(master_id);

				//20121211 변경
				String  Out_put_lr_path = tcBeanDO.getOut_put_ct_path().replaceAll(dasHandler.getProperty("MP4"), dasHandler.getProperty("WINMP4"));
				Out_put_lr_path = Out_put_lr_path.replaceAll(dasHandler.getProperty("NET_MP4"), dasHandler.getProperty("WINNET_MP4"));  
				insertMergeInfo(tcBeanDO.getTc_id(),tcBeanDO.getCt_id(),Out_put_lr_path);
			}


			// 대표화면 키프레임 저장
			if(tcBeanDO.getReq_cd().trim().equals("LR")){

				// wmv 재생성일, 명칭 업데이트
				updateContentsInst6(con,tcBeanDO);
				updatemetatbl(con,tcBeanDO);
				// 경로저장
				updateContents(con,tcBeanDO);
				updateETCNull(con,tcBeanDO.getCt_id());

			}
			return tcBeanDO;

		} 
		catch (Exception ex)
		{		 

			try {
				con.rollback();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				logger.error(e);
			}
			throw ex;


		}
		finally
		{
			//    	con.setAutoCommit(true);
			release(null, null, con);
		}
	}





	/**
	 * Job을 MIN 으로 처리순서를 잡고 조회를 한건 한다. (manual tc 완료시)
	 * @throws Exception 
	 */
	public TcBeanDO selectTcJob3(TcBeanDO tcBeanDO) throws Exception{


		/**
		 * allocate 값을 'Y'로 수정하는 것을 추가 ExternalDAO
		 */
		Connection con = null;		
		//PreparedStatement psmt = null;		
		try {

			con = DBService.getInstance().getConnection();
			//logger.debug("######selectTcJob3######## con : " + con);
			if(tcBeanDO.getReq_cd().equals("LRCT")){

				// wmv 재생성일, 명칭 업데이트
				updateContentsInst(con,tcBeanDO);
				// 고해상도 정보 업데이트
				updateContentsInst2(con,tcBeanDO);
				// 메타 데이터 정리전으로 변환
				updateMetadat2(con,tcBeanDO);
				// 키프레임 명 업데이트
				updatemetatbl3(con,tcBeanDO);
				// etc ''값
				updateETCNull(con,tcBeanDO.getCt_id());
				// 경로저장
				updateContents(con,tcBeanDO);
				//기존 코너를 삭제하고 새로운 코너를 생성한다
				TcBeanDO oldInfo = getMappInfo2(tcBeanDO.getCt_id());
				logger.debug("[oldInfo]"+oldInfo);

				deleteCorner(con,tcBeanDO);
				//deleteContentsMapp(con,tcBeanDO);
				insertCornerInfo(con,oldInfo,tcBeanDO);
				insertContentsMappInfo(con,oldInfo,tcBeanDO);

				//20121211 변경
				String  Out_put_lr_path = tcBeanDO.getOut_put_ct_path().replaceAll(dasHandler.getProperty("MP4"), dasHandler.getProperty("WINMP4"));
				Out_put_lr_path = Out_put_lr_path.replaceAll(dasHandler.getProperty("NET_MP4"), dasHandler.getProperty("WINNET_MP4"));  
				insertMergeInfo(tcBeanDO.getTc_id(),tcBeanDO.getCt_id(),Out_put_lr_path);
			}





			// 키프레임 명 업데이트
			if(tcBeanDO.getReq_cd().trim().equals("CT")){
				// 경로저장
				updateContents(con,tcBeanDO);
				// 키프레임 명 업데이트
				updatemetatbl(con,tcBeanDO);
				// etc ''값
				updateETCNull(con,tcBeanDO.getCt_id());


				//기존 코너를 삭제하고 새로운 코너를 생성한다
				TcBeanDO oldInfo = getMappInfo(tcBeanDO.getCt_id());
				deleteCorner(con,tcBeanDO);
				deleteContentsMapp(con,tcBeanDO);
				insertCornerInfo(con,oldInfo,tcBeanDO);
				insertContentsMappInfo(con,oldInfo,tcBeanDO);
				//20121211 변경
				String  Out_put_lr_path = tcBeanDO.getOut_put_ct_path().replaceAll(dasHandler.getProperty("MP4"), dasHandler.getProperty("WINMP4"));
				Out_put_lr_path = Out_put_lr_path.replaceAll(dasHandler.getProperty("NET_MP4"), dasHandler.getProperty("WINNET_MP4"));  
				insertMergeInfo(tcBeanDO.getTc_id(),tcBeanDO.getCt_id(),Out_put_lr_path);
			}



			// 대표화면 키프레임 저장
			if(tcBeanDO.getReq_cd().equals("LR")){


				// wmv 재생성일, 명칭 업데이트
				updateContentsInst(con,tcBeanDO);
				updatemetatbl(con,tcBeanDO);
				// 경로저장
				updateContents(con,tcBeanDO);
				updateETCNull(con,tcBeanDO.getCt_id());

			}
			return tcBeanDO;
		} 
		catch (Exception ex)
		{
			try {
				con.rollback();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				logger.error(e);
			}
			throw ex;


		}
		finally
		{
			//    	con.setAutoCommit(true);
			release(null, null, con);
		}

	}


	/**
	 * BackEnd TC 의 STATE 를 확인하여 Idle 인 TC GET
	 * @return
	 * @throws DASException
	 */
	public TcBeanDO selectTcAllocationState() throws DASException{

		StringBuffer buf = new StringBuffer();
		Connection con = null;		
		PreparedStatement psmt = null;		
		ResultSet rs = null;

		/**
		 * rownum 분배가 이루어 지는 구조. (BackendTC 요청시 동시성 해결 OK)
		 */
		//		buf.append(" select * from (                                                      ");
		//		buf.append(" select ROW_NUMBER() OVER(ORDER BY A.seq) AS rownum                   ");
		//		buf.append("      ,SEQ, TC_ID,TC_NM,CH_SEQ,WORK_STAT                              ");
		//		buf.append(" 	 from das.tc_STATE_tbl A where A.WORK_STAT = 'I'                  ");
		//		buf.append(" ) B                                                                  ");
		//		buf.append(" where B.rownum =  ?                                                  ");

		/**
		 * Min 분배가 이루어 지는 구조 . (BackendTC 요청시 동시성 미해결 )
		 */
		buf.append(" select ");
		buf.append("     SEQ, TC_ID,TC_NM,CH_SEQ,WORK_STAT                              ");
		buf.append(" from das.tc_STATE_tbl A                 ");
		buf.append(" where A.seq = (select min(B.seq) from DAS.TC_STATE_TBL B where B.WORK_STAT = 'I' )  ");

		try {
			con = DBService.getInstance().getConnection();
			//logger.debug("######selectTcAllocationState######## con : " + con);
			//con.setAutoCommit(false);
			psmt = con.prepareStatement(buf.toString());    
			int index = 0;			
			long seq =Long.parseLong(getNextSquence(con, DASBusinessConstants.SequenceName.TC_STATE));
			logger.debug("[DASBusinessConstants.SequenceName.TC_STATE]"+seq);
			//			psmt.setLong(++index,seq);  // rownum 분배가 이루어 지는 Sequence
			rs = psmt.executeQuery();	
			if(rs.next())
			{
				TcBeanDO item = new TcBeanDO();
				item.setSeq(     	rs.getLong("SEQ"));
				item.setTc_id(      rs.getString("TC_ID"));
				item.setTc_nm(rs.getString("TC_NM"));
				item.setCh_seq(rs.getString("CH_SEQ"));
				item.setWork_stat(rs.getString("WORK_STAT"));



				//con.setAutoCommit(true);






				return item;
			}
			//con.setAutoCommit(true);
			return null;

		}
		catch (Exception ex)
		{
			logger.error(buf.toString());

			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "selectTcJon 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, con);
		}

	}

	/**
	 * BackEnd TC 의 STATE 를 확인하여 Idle 인 TC GET
	 * @return
	 * @throws DASException
	 */

	public TcBeanDO selectTcAllocationState(TcBeanDO tcBeanDO) throws DASException{

		StringBuffer buf = new StringBuffer();
		Connection con = null;		
		PreparedStatement psmt = null;		
		ResultSet rs = null;

		/**
		 * rownum 분배가 이루어 지는 구조. (BackendTC 요청시 동시성 해결 OK)
		 */
		//		buf.append(" select * from (                                                      ");
		//		buf.append(" select ROW_NUMBER() OVER(ORDER BY A.seq) AS rownum                   ");
		//		buf.append("      ,SEQ, TC_ID,TC_NM,CH_SEQ,WORK_STAT                              ");
		//		buf.append(" 	 from das.tc_STATE_tbl A where A.WORK_STAT = 'I'                  ");
		//		buf.append(" ) B                                                                  ");
		//		buf.append(" where B.rownum =  ?                                                  ");

		/**
		 * Min 분배가 이루어 지는 구조 . (BackendTC 요청시 동시성 미해결 )
		 */
		buf.append(" select ");
		buf.append("     SEQ, TC_ID,TC_NM,CH_SEQ,WORK_STAT                              ");
		buf.append(" from das.tc_STATE_tbl A                 ");

		buf.append(" where A.seq = ? and A.WORK_STAT='I' ");

		try {
			con = DBService.getInstance().getConnection();
			psmt = con.prepareStatement(buf.toString());

			int index = 0;			
			psmt.setLong(++index,tcBeanDO.getSeq());
			rs = psmt.executeQuery();	
			if(rs.next())
			{
				TcBeanDO item = new TcBeanDO();
				item.setSeq(     	rs.getLong("SEQ"));
				item.setTc_id(      rs.getString("TC_ID"));
				item.setTc_nm(rs.getString("TC_NM"));
				item.setCh_seq(rs.getString("CH_SEQ"));
				item.setWork_stat(rs.getString("WORK_STAT"));

				//con.setAutoCommit(true);


				/**
				 * TC_STATE 값을 'I' (IDLE)로 수정하는 것을 추가
				 */

				if(tcBeanDO.getWork_stat().equals("I")){
					updateTcState(tcBeanDO);
				}

				return item;
			}
			//con.setAutoCommit(true);
			return null;

		}
		catch (Exception ex)
		{
			logger.error(buf.toString());

			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "selectTcJon 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, con);
		}

	}

	/**
	 * 해당 TC Seq를 확인하여 해당 WorkStat 값을 확인한다.
	 * @return
	 * @throws DASException
	 */
	public TcBeanDO selectTcState(TcBeanDO tcBeanDO) throws DASException{

		StringBuffer buf = new StringBuffer();
		Connection con = null;		
		PreparedStatement psmt = null;		
		ResultSet rs = null;

		buf.append(" select                   ");
		buf.append("      SEQ, TC_ID,TC_NM,CH_SEQ,WORK_STAT                              ");
		buf.append(" 	 from das.tc_STATE_tbl A where A.SEQ = ?                  ");

		try {
			con = DBService.getInstance().getConnection();
			psmt = con.prepareStatement(buf.toString());
			int index = 0;			
			psmt.setString(++index, tcBeanDO.getSeq()+"");
			rs = psmt.executeQuery();	
			TcBeanDO item = new TcBeanDO();
			if(rs.next())
			{
				item.setSeq(     	rs.getLong("SEQ"));
				item.setTc_id(      rs.getString("TC_ID"));
				item.setTc_nm(rs.getString("TC_NM"));
				item.setCh_seq(rs.getString("CH_SEQ"));
				item.setWork_stat(rs.getString("WORK_STAT"));
			}

			//con.setAutoCommit(true);
			return item;
		}
		catch (Exception ex)
		{
			logger.error(buf.toString());

			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "selectTcJon 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, con);
		}

	}
	/**
	 * Backend Tc 잡상태 변화
	 * @param tcBeanDO
	 * @return
	 * @throws Exception 
	 * @throws RemoteException
	 */
	public int updateTcJobState(Long seq,String tc_id) throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.tc_job_tbl set ");
		buf.append("\n 	job_alocate = 'Y' ");
		buf.append("\n 	,tc_id=? ");
		buf.append("\n where seq = ? ");

		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateTcJobState######## con : " + con);
			//stmt = con.prepareStatement(buf.toString());
			stmt = con.prepareStatement(buf.toString());
			int index = 0;
			stmt.setString(++index, tc_id);
			stmt.setLong(++index, seq);


			int updateCount = stmt.executeUpdate();

			return updateCount;
		}

		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}

	/**
	 * BackEnd TC 의 ID 값을 확인하여 'Busy' 값을 부여.
	 * @param ct_id
	 * @return
	 * @throws Exception 
	 */
	public int updateTcState(String SEQ) throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.tc_state_tbl set ");
		buf.append("\n 	WORK_STAT = 'B' ");
		buf.append("\n where SEQ = ? ");

		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateTcState######## con : " + con);
			//stmt = con.prepareStatement(buf.toString());
			stmt = con.prepareStatement(buf.toString());
			int index = 0;
			stmt.setString(++index, SEQ);


			int updateCount = stmt.executeUpdate();

			return updateCount;
		}

		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}

	/**
	 * BackEnd TC 의 ID 값을 확인하여 'Busy' 값을 부여.
	 * @param ct_id
	 * @return
	 * @throws Exception 
	 */
	public boolean updateTcState(TcBeanDO tcBeanDO) throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.tc_state_tbl set ");
		buf.append("\n 	WORK_STAT = ? ");
		buf.append("\n where TC_ID = ? ");

		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateTcState######## con : " + con);
			stmt = con.prepareStatement(buf.toString());
			//stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setString(++index, tcBeanDO.getWork_stat()+"");
			stmt.setString(++index, tcBeanDO.getTc_id());

			int updateCount = stmt.executeUpdate();

			if(updateCount>0)return true;
			return false;
		}

		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}
	/**
	 * work_stat의 상태가 F일때는 실패로 등록한다
	 * @param tcBeanDO
	 * @return boolean
	 * @throws Exception 
	 * @throws RemoteException
	 */
	public boolean updateErrTcjob(TcBeanDO tcBeanDO) throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.tc_job_tbl set ");
		buf.append("\n 	JOB_ALOCATE = 'F' ");
		buf.append("\n where CT_ID = ? ");

		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateErrTcjob######## con : " + con);
			//stmt = con.prepareStatement(buf.toString());
			stmt = con.prepareStatement(buf.toString());
			int index = 0;
			//stmt.setString(++index, tcBeanDO.getWork_stat()+"");
			stmt.setLong(++index, tcBeanDO.getCt_id());

			int updateCount = stmt.executeUpdate();
			//updateMetadat3(con,tcBeanDO);
			if(updateCount>0)return true;
			return false;
		}
		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}

	/**
	 * Backend Tc 연동 하는 작업 완료 요청 인터페이스
	 * @param tcBeanDO
	 * @return
	 * @throws Exception 
	 * @throws RemoteException
	 */
	public int updateReqComTc(TcBeanDO tcBeanDO) throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.TC_JOB_TBL set ");
		buf.append("\n 	MEDIA_ID = ? ");
		buf.append("\n 	TC_ID = ? ");
		buf.append("\n 	OUTPUT_LR_PATH = ? ");
		buf.append("\n 	OUTPUT_CT_PATH = ? ");
		buf.append("\n 	OUTPUT_LR_NM = ? ");
		buf.append("\n 	OUTPUT_CT_NM = ? ");


		buf.append("\n where ct_id = ? ");

		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateReqComTc######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			//stmt.setString(++index, duration);
			//stmt.setString(++index, ct_cla);
			//stmt.setString(++index, ct_typ);
			//stmt.setInt(++index, ctID);

			int updateCount = stmt.executeUpdate();

			return updateCount;
		}
		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}




	/**
	 * 컨텐츠 정보를 받아온다
	 * @param pgm_id    프로그램 id
	 * @return DivaManagerDO	 리스트
	 * @throws Exception 
	 */
	public DivaManagerDO selectMappTbl(long pgm_id) throws Exception
	{

		String query = ExternalStatement.selectMappTbl(pgm_id);
		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######selectMappTbl######## con : " + con);
			stmt = con.prepareStatement(query);

			String str = null;		
			rs = stmt.executeQuery();
			List resultList  = new ArrayList();
			DivaManagerDO item = new DivaManagerDO();
			while(rs.next())
			{

				item.setCt_id(rs.getLong("ct_id"));
				item.setCti_id(rs.getLong("cti_id"));
				item.setMaster_id(rs.getLong("master_id"));
				item.setPgm_id(rs.getLong("pgm_id"));
				item.setFile_path(rs.getString("fl_path"));

				resultList.add(item);	

			}		

			return item;

		} 
		catch (Exception e) 
		{
			logger.error(query);

			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}
	/**
	 * 컨텐츠 정보를 받아온다
	 * @param pgm_id    프로그램 id
	 * @return DivaManagerDO	 리스트
	 * @throws Exception 
	 */
	public DivaManagerDO selectMappTbl2(long pgm_id) throws Exception
	{

		String query = ExternalStatement.selectMappTbl2(pgm_id);
		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######selectMappTbl2######## con : " + con);
			stmt = con.prepareStatement(query);

			String str = null;		
			rs = stmt.executeQuery();
			List resultList  = new ArrayList();
			DivaManagerDO item = new DivaManagerDO();
			while(rs.next())
			{

				item.setCt_id(rs.getLong("ct_id"));
				item.setCti_id(rs.getLong("cti_id"));
				item.setMaster_id(rs.getLong("master_id"));
				item.setPgm_id(rs.getLong("pgm_id"));
				item.setFile_path(rs.getString("fl_path"));

				resultList.add(item);	

			}		

			return item;

		} 

		catch (Exception e) 
		{
			logger.error(query);

			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}


	/**
	 * wmv_nm 정보를 삽입
	 * @param m
	 * @param 
	 * @return
	 * @throws Exception 
	 */
	public TcBeanDO inserWmv_nm(TcBeanDO TcBeanDO) throws Exception
	{
		Connection con = null;
		PreparedStatement stmt = null;

		StringBuffer buf = new StringBuffer();
		buf.append("\n INSERT INTO TC_JOB_TBL ( ");
		buf.append("\n   SEQ ");
		buf.append("\n ,MEDIA_ID ");
		buf.append("\n ,REG_DT ");
		buf.append("\n ,RESULT ");
		buf.append("\n ,TC_ID ");
		buf.append("\n ,REQ_CD ");
		buf.append("\n ,INPUT_HR ");
		buf.append("\n ,INPUT_HR_NM ");
		buf.append("\n ,INPUT_LR ");
		buf.append("\n ,INPUT_LR_NM ");
		buf.append("\n ,OUTPUT_LR_PATH ");
		buf.append("\n ,OUTPUT_CT_PATH ");
		buf.append("\n ,OUTPUT_LR_NM ");
		buf.append("\n ,OUTPUT_CT_NM ");
		buf.append("\n ,CT_ID ");
		buf.append("\n ,FILE_READY ");
		buf.append("\n ,JOB_ALOCATE ");
		buf.append("\n ,TC_TYPE");
		buf.append("\n ,REQ_ID");

		buf.append("\n ,COCD");
		buf.append("\n ,CART_NO");
		buf.append("\n ) VALUES ( ");
		buf.append("\n ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ");


		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######inserWmv_nm######## con : " + con);
			//			con.setAutoCommit(false);

			//	stmt = con.prepareStatement(buf.toString());
			stmt = con.prepareStatement(buf.toString());
			String userId="";
			int index = 0;
			String dateTime = CalendarUtil.getDateTime("yyyyMMddHHmmss");
			long seq =  selectSeq();

			stmt.setLong(++index, seq);//SEQ
			stmt.setString(++index, String.valueOf(TcBeanDO.getMedia_id()));//MEDIA_ID
			stmt.setString(++index, dateTime);//REG_DT
			stmt.setString(++index, "");//RESULT
			stmt.setString(++index, "");//TC_ID
			stmt.setString(++index, "LR");			//REQ_CD
			stmt.setString(++index, TcBeanDO.getInput_hr());//INPUT_HR
			stmt.setString(++index, TcBeanDO.getInput_hr_nm());//INPUT_HR_nm
			stmt.setString(++index, TcBeanDO.getInput_lr());//INPUT_LR
			stmt.setString(++index, TcBeanDO.getCti_id()+".mp4");//INPUT_LR_nm
			stmt.setString(++index, TcBeanDO.getInput_lr());	//OUTPUT_LR_PATH


			stmt.setString(++index, TcBeanDO.getOut_put_ct_path());//OUTPUT_CT_PATH
			stmt.setString(++index, TcBeanDO.getCti_id()+".mp4");//OUTPUT_LR_NM
			stmt.setString(++index, TcBeanDO.getCt_id()+".mer");//OUTPUT_CT_NM
			stmt.setLong(++index, TcBeanDO.getCt_id());//CT_ID

			stmt.setString(++index, "");//FILE_READY
			stmt.setString(++index,"N");//JOB_ALOCATE
			stmt.setString(++index,CodeConstants.TcGubun.RECREATE);//TC_TYPE
			stmt.setString(++index,TcBeanDO.getReq_id());//REQ_ID
			stmt.setString(++index,TcBeanDO.getCocd());//COCD
			stmt.setLong(++index,TcBeanDO.getCart_no());//CART_NO
			TcBeanDO.setSeq(seq);

			int itmp = stmt.executeUpdate();


			//사용자 정보의 수정 내역을 등록한다.
			//insertNonEmployeeRoleHistory(con, roleDO);

			con.commit();
			return TcBeanDO;

		}
		catch (Exception e) 
		{
			logger.error(buf.toString());

			if(con != null)
			{
				try {
					con.rollback();
				} catch (SQLException e1) {
					// TODO 자동 생성된 catch 블록
					logger.error(e1);
				}
			}


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}


	}

	/**
	 * wmv_KFRM 정보를 삽입
	 * @param m
	 * @param 
	 * @return
	 * @throws Exception 
	 */
	public TcBeanDO inserWmv_KFRM(TcBeanDO TcBeanDO) throws Exception
	{

		Connection con = null;
		PreparedStatement stmt = null;

		StringBuffer buf = new StringBuffer();
		buf.append("\n INSERT INTO TC_JOB_TBL ( ");
		buf.append("\n   SEQ ");
		buf.append("\n ,MEDIA_ID ");
		buf.append("\n ,REG_DT ");
		buf.append("\n ,RESULT ");
		buf.append("\n ,TC_ID ");
		buf.append("\n ,REQ_CD ");
		buf.append("\n ,INPUT_HR ");
		buf.append("\n ,INPUT_HR_NM ");
		buf.append("\n ,INPUT_LR ");
		buf.append("\n ,INPUT_LR_NM ");
		buf.append("\n ,OUTPUT_LR_PATH ");
		buf.append("\n ,OUTPUT_CT_PATH ");
		buf.append("\n ,OUTPUT_LR_NM ");
		buf.append("\n ,OUTPUT_CT_NM ");
		buf.append("\n ,CT_ID ");
		buf.append("\n ,FILE_READY ");
		buf.append("\n ,JOB_ALOCATE ");
		buf.append("\n ,TC_TYPE");
		buf.append("\n ,REQ_ID");
		buf.append("\n ,COCD");
		buf.append("\n ,CART_NO");
		buf.append("\n ) VALUES ( ");
		buf.append("\n ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ");


		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######inserWmv_KFRM######## con : " + con);
			//			con.setAutoCommit(false);

			//	stmt = con.prepareStatement(buf.toString());
			stmt = con.prepareStatement(buf.toString());
			String userId="";
			int index = 0;
			String dateTime = CalendarUtil.getDateTime("yyyyMMddHHmmss");
			long seq =  selectSeq();

			stmt.setLong(++index, seq);//SEQ
			stmt.setString(++index, String.valueOf(TcBeanDO.getMedia_id()));//MEDIA_ID
			stmt.setString(++index, dateTime);//REG_DT
			stmt.setString(++index, "");//RESULT
			stmt.setString(++index, "");//TC_ID
			stmt.setString(++index, "LRCT");			//REQ_CD
			stmt.setString(++index, TcBeanDO.getInput_hr());//INPUT_HR
			stmt.setString(++index, TcBeanDO.getInput_hr_nm());//INPUT_HR_nm
			stmt.setString(++index, TcBeanDO.getInput_lr());//INPUT_LR
			stmt.setString(++index, TcBeanDO.getCti_id()+".mp4");//INPUT_LR_nm
			stmt.setString(++index, TcBeanDO.getInput_lr());	//OUTPUT_LR_PATH


			stmt.setString(++index, TcBeanDO.getOut_put_ct_path());//OUTPUT_CT_PATH
			stmt.setString(++index, TcBeanDO.getCti_id()+".mp4");//OUTPUT_LR_NM
			stmt.setString(++index, TcBeanDO.getCt_id()+".mer");//OUTPUT_CT_NM
			stmt.setLong(++index, TcBeanDO.getCt_id());//CT_ID

			stmt.setString(++index, "");//FILE_READY
			stmt.setString(++index,"N");//JOB_ALOCATE
			stmt.setString(++index,CodeConstants.TcGubun.RECREATE);//TC_TYPE
			stmt.setString(++index,TcBeanDO.getReq_id());//REQ_ID
			stmt.setString(++index,TcBeanDO.getCocd());//COCD
			stmt.setLong(++index,TcBeanDO.getCart_no());//CART_NO
			TcBeanDO.setSeq(seq);

			int itmp = stmt.executeUpdate();


			//사용자 정보의 수정 내역을 등록한다.
			//insertNonEmployeeRoleHistory(con, roleDO);

			con.commit();
			return TcBeanDO;

		}

		catch (Exception e) 
		{
			logger.error(buf.toString());
			if(con != null)
			{
				try {
					con.rollback();
				} catch (SQLException e1) {
					// TODO 자동 생성된 catch 블록
					logger.error(e1);
				}
			}


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}

	/**
	 * wmv_KFRM 정보를 삽입
	 * @param m
	 * @param 
	 * @return
	 * @throws Exception 
	 */
	public TcBeanDO inserKFRM(TcBeanDO TcBeanDO) throws Exception
	{

		Connection con = null;
		PreparedStatement stmt = null;

		StringBuffer buf = new StringBuffer();
		buf.append("\n INSERT INTO TC_JOB_TBL ( ");
		buf.append("\n   SEQ ");
		buf.append("\n ,MEDIA_ID ");
		buf.append("\n ,REG_DT ");
		buf.append("\n ,RESULT ");
		buf.append("\n ,TC_ID ");
		buf.append("\n ,REQ_CD ");
		buf.append("\n ,INPUT_HR ");
		buf.append("\n ,INPUT_HR_NM ");
		buf.append("\n ,INPUT_LR ");
		buf.append("\n ,INPUT_LR_NM ");
		buf.append("\n ,OUTPUT_LR_PATH ");
		buf.append("\n ,OUTPUT_CT_PATH ");
		buf.append("\n ,OUTPUT_LR_NM ");
		buf.append("\n ,OUTPUT_CT_NM ");
		buf.append("\n ,CT_ID ");
		buf.append("\n ,FILE_READY ");
		buf.append("\n ,JOB_ALOCATE ");
		buf.append("\n ,TC_TYPE");
		buf.append("\n ,REQ_ID");
		buf.append("\n ,COCD");
		buf.append("\n ,CART_NO");
		buf.append("\n ) VALUES ( ");
		buf.append("\n ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ");


		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######inserKFRM######## con : " + con);
			//			con.setAutoCommit(false);

			//	stmt = con.prepareStatement(buf.toString());
			stmt = con.prepareStatement(buf.toString());
			String userId="";
			int index = 0;
			String dateTime = CalendarUtil.getDateTime("yyyyMMddHHmmss");
			long seq =  selectSeq();

			stmt.setLong(++index, seq);//SEQ
			stmt.setString(++index, String.valueOf(TcBeanDO.getMedia_id()));//MEDIA_ID
			stmt.setString(++index, dateTime);//REG_DT
			stmt.setString(++index, "");//RESULT
			stmt.setString(++index, "");//TC_ID
			stmt.setString(++index, "CT");			//REQ_CD
			stmt.setString(++index, TcBeanDO.getInput_hr());//INPUT_HR
			stmt.setString(++index, TcBeanDO.getInput_hr_nm());//INPUT_HR_nm
			stmt.setString(++index, TcBeanDO.getInput_lr());//INPUT_LR
			stmt.setString(++index, TcBeanDO.getCti_id()+".mp4");//INPUT_LR_nm
			stmt.setString(++index, TcBeanDO.getInput_lr());	//OUTPUT_LR_PATH
			//stmt.setString(++index,  dasHandler.getProperty("WINMP4")+"/"+dateTime2+"/"+pdsArchiveDO.getCt_id());	//OUTPUT_LR_PATH
			//stmt.setString(++index, dasHandler.getProperty("WINMP4")+"/"+dateTime2+"/"+pdsArchiveDO.getCt_id()+"/KFRM");//OUTPUT_CT_PATH

			stmt.setString(++index, TcBeanDO.getOut_put_ct_path());//OUTPUT_CT_PATH
			stmt.setString(++index, TcBeanDO.getCti_id()+".mp4");//OUTPUT_LR_NM
			stmt.setString(++index, TcBeanDO.getCt_id()+".mer");//OUTPUT_CT_NM
			stmt.setLong(++index, TcBeanDO.getCt_id());//CT_ID

			stmt.setString(++index, "");//FILE_READY
			stmt.setString(++index,"N");//JOB_ALOCATE
			stmt.setString(++index,CodeConstants.TcGubun.RECREATE);//TC_TYPE
			stmt.setString(++index,TcBeanDO.getReq_id());//REQ_ID
			stmt.setString(++index,TcBeanDO.getCocd());//COCD
			stmt.setLong(++index,TcBeanDO.getCart_no());//CART_NO
			TcBeanDO.setSeq(seq);

			int itmp = stmt.executeUpdate();


			//사용자 정보의 수정 내역을 등록한다.
			//insertNonEmployeeRoleHistory(con, roleDO);

			con.commit();
			return TcBeanDO;

		}

		catch (Exception e) 
		{
			logger.error(buf.toString());

			if(con != null)
			{
				try {
					con.rollback();
				} catch (SQLException e1) {
					// TODO 자동 생성된 catch 블록
					logger.error(e1);
				}
			}


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}

	/**
	 * tc q의 데이터를 읽어온다
	 * @param tcbean    검색할 정보가 담긴 beans
	 * @return tcbean		tcbean 리스트
	 * @throws Exception 
	 */
	public TcBeanDO selectTcBeanTbl(TcBeanDO tcbean) throws Exception
	{

		String query = ExternalStatement.selectTcBeanTbl(tcbean);
		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######selectTcBeanTbl######## con : " + con);

			stmt = con.prepareStatement(query);

			String str = null;		
			rs = stmt.executeQuery();
			List resultList  = new ArrayList();
			TcBeanDO item = new TcBeanDO();
			while(rs.next())
			{

				item.setCt_id(tcbean.getCt_id());
				item.setCti_id(rs.getLong("cti_id"));
				item.setInput_hr(rs.getString("fl_path"));
				item.setOut_put_ct_path(rs.getString("KFRM_PATH"));
				if(!rs.getString("flpath").equals("")){
					item.setInput_lr(rs.getString("flpath"));
				}else {
					String k[] = item.getOut_put_ct_path().split("/");
					String path="";
					for(int i =0 ;i<k.length ; i++){
						if(i!=4){
							if(i==0){
								path=k[i];
							}else{
								path=path+"/"+k[i];
							}
						}
					}
					item.setInput_lr(path);	

				}
				//resultList.add(item);	

			}		

			return item;

		} 

		catch (Exception e) 
		{
			logger.error(query);

			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}

	/**
	 * tc q의 데이터를 읽어온다
	 * @param ct_id    컨텐츠id
	 * @return tcbean		tcbean 리스트
	 * @throws Exception 
	 */
	public TcBeanDO selectTcBeanTbl(long ct_id) throws Exception
	{

		String query = ExternalStatement.selectTcBeanTbl(ct_id);
		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######selectTcBeanTbl######## con : " + con);
			stmt = con.prepareStatement(query);

			String str = null;		
			rs = stmt.executeQuery();
			List resultList  = new ArrayList();
			TcBeanDO item = new TcBeanDO();
			while(rs.next())
			{

				item.setCt_id(ct_id);
				item.setCti_id(rs.getLong("cti_id"));
				//	item.setInput_hr(rs.getString("fl_path"));
				item.setOut_put_ct_path(rs.getString("KFRM_PATH"));
				item.setInput_lr(rs.getString("fl_path"));
				resultList.add(item);	

			}		

			return item;

		} 
		catch (Exception e) 
		{
			logger.error(query);

			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}



	/**
	 * seq 를 생성한다
	 * @param condition 조회조건을 포함하고 있는 DataObject
	 * @return
	 * @throws Exception 
	 */
	public long selectSeq() throws Exception
	{

		StringBuffer buf = new StringBuffer();
		buf.append("select  NEXTVAL FOR SEQ_SEQ_ID from sysibm.sysdummy1 ");



		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();

			//logger.debug("######selectSeq######## con : " + con);
			stmt = con.prepareStatement(buf.toString());


			int index = 0;

			rs = stmt.executeQuery();
			rs.next();

			long newSeq_Id = rs.getLong(1);



			return newSeq_Id;
		} 

		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}	
	}




	/**
	 * archve seq 를 생성한다
	 * @param condition 조회조건을 포함하고 있는 DataObject
	 * @return
	 * @throws Exception 
	 */
	public long selectArchveSeq() throws Exception
	{

		StringBuffer buf = new StringBuffer();
		buf.append("select  NEXTVAL FOR ARCHIVE_SEQ_ID from sysibm.sysdummy1 ");



		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######selectArchveSeq######## con : " + con);

			stmt = con.prepareStatement(buf.toString());


			int index = 0;

			rs = stmt.executeQuery();
			rs.next();

			long newSeq_Id = rs.getLong(1);



			return newSeq_Id;
		} 

		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}	
	}


	/**
	 * backendtc에서 상태값을 받아서 업테이트한다
	 * @param tcBeanDO 정보를 가지고있는 beans
	 * @return updatecount
	 * @throws Exception 
	 */
	public int insertTcStateInfo(TcBeanDO tcBeanDO)throws Exception{
		StringBuffer buf = new StringBuffer();
		buf.append("\n update DAS.TC_STATE_TBL  ");
		buf.append("\n    SET  WORK_STAT=?)  ");
		buf.append("\n where SEQ =? ");

		Connection con = null;
		PreparedStatement stmt = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######insertTcStateInfo######## con : " + con);
			con.setAutoCommit(false);

			stmt = con.prepareStatement(buf.toString());

			int index = 0;			
			stmt.setString(++index,tcBeanDO.getWork_stat());
			stmt.setLong(++index, tcBeanDO.getSeq());


			int updateCount = stmt.executeUpdate();

			if (logger.isDebugEnabled()) 
			{
				logger.debug("[Inserted Count]" + updateCount);
			}

			if(updateCount == 0)
			{
				//여기서 에러를 던진다.
				DASException exception = new DASException(ErrorConstants.NOT_EXIST_PROGRAM_INFO, "저장에 실패했습니다.");
				throw exception;
			}


			con.commit();
			return updateCount;
		} 
		catch (Exception e) 
		{
			logger.error(buf.toString());

			if(con != null)
			{
				try {
					con.rollback();
				} catch (SQLException e1) {
					// TODO 자동 생성된 catch 블록
					logger.error(e1);
				}
			}


			throw e;
		}
		finally
		{
			try {
				con.setAutoCommit(true);
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				logger.error(e);
			}
			release(null, stmt, con);
		}
	}

	/**
	 * TC에게 작업을 배정하는 메소드 
	 * @param tcJobBeanDO JOB 을 가지고 오는 빈
	 * @param stateBeanDO TC를 가지고 오는 빈
	 * @param tc_inter_path
	 * @throws Exception 
	 */
	public void getTCJob(TcBeanDO tcJobBeanDO,TcBeanDO stateBeanDO,String tc_inter_path)throws Exception{

		try {
			if(logger.isDebugEnabled()){
				//		logger.debug("getTCJob [input tcBeanDO,tc_inter_path]"+tcJobBeanDO+","+tc_inter_path+","+stateBeanDO.getTc_id());
			}
			TcBeanDOXML _doXML = new TcBeanDOXML();
			TcBeanDO _do = (TcBeanDO)_doXML.setDO(tcJobBeanDO);

			/**
			 * 해당 디렉토리에 XML 파일을 전송,저장한다.
			 */
			jutil fo = new jutil();
			logger.debug("location [_doXML.toXML()]"+tc_inter_path+stateBeanDO.getTc_id()+"/"+tcJobBeanDO.getCt_id());
			
			File f = new File(tc_inter_path+stateBeanDO.getTc_id());
			if(!f.exists()) f.mkdirs();
			
			fo.makeFile(_doXML.toXML(), tc_inter_path+stateBeanDO.getTc_id()+"/"+tcJobBeanDO.getCt_id());
			logger.debug("getTCJob [_doXML.toXML()]"+_doXML.toXML());
		} catch (Exception e) {
			throw e;
		}

	}



	/**
	 * 첨부파일 정보를 조회한다.
	 * @param master_id
	 * @return
	 * @throws RemoteException
	 */
	public String getAttachFileInfo(long master_id) throws DASException
	{	
		StringBuffer strResultBuffer = new StringBuffer();


		strResultBuffer.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n");
		strResultBuffer.append("<Data>\n");
		strResultBuffer.append(this.getAttachResultXML(master_id));
		strResultBuffer.append("</Data>\n");   
		logger.debug("strResultBuffer.toString()"+strResultBuffer.toString());
		return strResultBuffer.toString();

	}

	/**
	 * PDAS 아카이브 요청 신청
	 *    
	 * @param date
	 * @return
	 */
	public String ArchivePDSReq(PdsArchiveDO pdsArchiveDO,String cms_pgm_id) {

		String _result = "";
		try{

			pdsArchiveDO.setCocd(selectCocd(pdsArchiveDO.getCti_id())) ;
			DivaManagerDOXML _doing = new DivaManagerDOXML();

			NevigatorProxy port = new NevigatorProxy();
			_result = port.archiveService(_doing.getNewArchiveXML(pdsArchiveDO));
			logger.debug("_ArchivePDSReq result : "+_result);
			return _result;
		}
		catch (Exception e) {
			logger.error(cms_pgm_id);
			logger.error("ArchivePDSReq", e);
		}	

		return _result;
	}




	/**
	 * PDAS&IFCMS 복본 요청 신청
	 *    
	 * @param date
	 * @return
	 */
	public String ArchiveCopyReq(UseInfoDO pdsArchiveDO,String cms_pgm_id) {


		String xml=""; 
		String _result = "false";
		try{
			PdsArchiveDO pDo = new PdsArchiveDO();
			pDo.setCti_id(pdsArchiveDO.getCti_id());
			pDo.setReq_id(pdsArchiveDO.getUser_id());
			pDo.setCocd(pdsArchiveDO.getDtl_type());
			pDo.setFl_nm(pdsArchiveDO.getFileName());
			DivaManagerDOXML _doing = new DivaManagerDOXML();
			xml= _doing.getNewCopyXML(pDo);

			ServiceNevigatorService nevigatorService = new ServiceNevigatorServiceLocator();
			Nevigator nevigator = nevigatorService.getServiceNevigatorPort();
			nevigator.archiveService(_doing.getNewCopyXML(pDo));
			//}
			return _result;
		}
		catch (Exception e) {
			logger.error(cms_pgm_id);
			logger.error("ArchiveCopyReq",e);

		}	


		return "";
	}
	/**
	 * PDAS&IFCMS 소산 요청 신청
	 *    
	 * @param date
	 * @return
	 */
	public String ArchiveBackUpReq(UseInfoDO pdsArchiveDO,String cms_pgm_id) {




		String xml=""; 
		String _result = "false";
		try{
			PdsArchiveDO pDo = new PdsArchiveDO();
			pDo.setCti_id(pdsArchiveDO.getCti_id());
			pDo.setReq_id(pdsArchiveDO.getUser_id());
			pDo.setCocd(pdsArchiveDO.getDtl_type());
			DivaManagerDOXML _doing = new DivaManagerDOXML();
			xml= _doing.getNewBackupXML(pDo);

			ServiceNevigatorService nevigatorService = new ServiceNevigatorServiceLocator();
			Nevigator nevigator = nevigatorService.getServiceNevigatorPort();
			nevigator.archiveService(_doing.getNewBackupXML(pDo));
			//}
			return _result;
		}
		catch (Exception e) {
			logger.error(cms_pgm_id);
			logger.error("ArchiveBackUpReq",e);
		}	


		return "";
	}

	/**
	 * 복본 여부 확인
	 * @param cms_pgm_id
	 * @return
	 * @throws Exception 
	 */
	public String isThereCopyYn(String cms_pgm_id) throws Exception
	{

		StringBuffer buf = new StringBuffer();

		buf.append("\n select count(1) FROM  DAS.copy_info_Tbl where cms_pgm_id = '"+cms_pgm_id+"' and copy_yn='Y' \n");
		Connection con = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//총 조회 갯수를 구한다.
			int totalCount  = getTotalCount(con, buf.toString());

			if(totalCount > 0)
			{
				return "Y";
			}
			else
			{
				return "N";
			}
		} 
		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			try { 	if (con != null)  con.close();	} catch (SQLException e) {}
		}
	}

	/**
	 * 해당 미디어 아이디로 콘텐츠 아이디를 가지고 온다.
	 * @param pdsArchiveDO
	 * @return
	 * @throws DASException
	 */
	public PdsArchiveDO selectCtiFromMediaid(PdsArchiveDO pdsArchiveDO) throws DASException{

		StringBuffer buf = new StringBuffer();
		Connection con = null;		
		PreparedStatement psmt = null;		
		ResultSet rs = null;

		buf.append(" SELECT CTI.CTI_ID as cti_id   ,'"+dasHandler.getProperty("ARCREQ")+"/'||left(CTI.reg_dt,6)||'/'||substr(CTI.reg_dt,7,2) as fl_path ,tc.input_hr_nm ,ct.media_id FROM DAS.CONTENTS_TBL CT                  ");
		buf.append("     INNER JOIN DAS.CONTENTS_INST_TBL CTI ON CTI.CT_ID= CT.CT_ID AND CTI.CTI_FMT LIKE '10%'  ");
		buf.append("  inner join DAS.TC_JOB_TBL tc on tc.CT_ID=cti.CT_ID       ");
		buf.append(" WHERE CT.MEDIA_ID = ?          ");
		buf.append(" fetch first 1 rows only        ");
		try {
			con = DBService.getInstance().getConnection();
			//logger.debug("######selectCtiFromMediaid######## con : " + con);
			//con.setAutoCommit(false);
			psmt = con.prepareStatement(buf.toString());    
			int index = 0;			
			psmt.setString(++index, pdsArchiveDO.getMedia_id());
			rs = psmt.executeQuery();	
			PdsArchiveDO item = new PdsArchiveDO();
			if(rs.next())
			{
				item.setCti_id(rs.getLong("cti_id"));
				item.setFl_path(rs.getString("fl_path"));
				item.setFl_nm(rs.getString("input_hr_nm"));
				item.setMedia_id(rs.getString("media_id"));
			}
			logger.debug("fl_path    " + item.getFl_path()+"/"+item.getFl_nm());
			logger.debug("cti_id    " + item.getCti_id());
			logger.debug("media_id    " + item.getMedia_id());
			//con.setAutoCommit(true);
			return item;   
		}
		catch (Exception ex)
		{
			logger.error(buf.toString());
			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "selectTcJon 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, con);
		}

	}



	/**
	 * contents_inst_tbl 잡상태 변화(wmv영상)
	 * @param tcBeanDO
	 * @return
	 * @throws SQLException 
	 * @throws RemoteException
	 */
	public int updateContentsInst(Connection con,TcBeanDO tcBeanDO) throws DASException, SQLException
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.contents_inst_tbl set ");
		buf.append("\n 	fl_path = ? ");
		buf.append("\n 	,fl_sz = ? ");
		buf.append("\n 	,wrk_file_nm = ? ");
		buf.append("\n 	,re_wmv_reg_dt = ? ");
		buf.append("\n 	,wmv_yn = ? ");

		buf.append("\n 	,catalog_yn = ? ");
		buf.append("\n 	,bit_rt = ? ");
		buf.append("\n 	,frm_per_sec = ? ");
		buf.append("\n 	,drp_frm_yn = ? ");
		buf.append("\n 	,audio_bdwt = ? ");
		buf.append("\n 	,aud_samp_frq = ? ");
		buf.append("\n 	,vd_hresol = ? ");
		buf.append("\n 	,vd_vresol = ? ");
		buf.append("\n where ct_id = ? ");
		buf.append("\n and cti_fmt like '%30%'  ");
		PreparedStatement stmt = null;
		//Connection con = null;		

		try 
		{
			//con = DBService.getInstance().getConnection();

			stmt = con.prepareStatement(buf.toString());
			String dateTime = CalendarUtil.getDateTime("yyyyMMddHHmmss");
			int index = 0;
			logger.debug("#####Out_put_lr_path #####"+tcBeanDO.getOut_put_lr_path());
			logger.debug("#####Out_put_lr_path #####"+tcBeanDO.getOut_put_lr_path());
			String  Out_put_lr_path = tcBeanDO.getOut_put_lr_path().replaceAll(dasHandler.getProperty("MP4"), dasHandler.getProperty("WINMP4"));
			logger.debug("#####Out_put_lr_path #####"+Out_put_lr_path);
			logger.debug("#####Out_put_lr_path #####"+Out_put_lr_path);
			Out_put_lr_path = Out_put_lr_path.replaceAll(dasHandler.getProperty("NET_MP4"), dasHandler.getProperty("WINNET_MP4"));  
			logger.debug("#####Out_put_lr_path #####"+Out_put_lr_path);
			stmt.setString(++index, Out_put_lr_path);
			stmt.setLong(++index,Long.parseLong(tcBeanDO.getLR_FL_SZ()));
			stmt.setString(++index, tcBeanDO.getOut_put_lr_nm());			
			stmt.setString(++index, dateTime );
			stmt.setString(++index, "Y" );
			stmt.setString(++index, "Y" );
			stmt.setString(++index, tcBeanDO.getLR_BIT_RT());
			stmt.setString(++index, tcBeanDO.getLR_FRM_PER_SEC());
			stmt.setString(++index, tcBeanDO.getLR_DRP_FRM_YN() );
			stmt.setString(++index, tcBeanDO.getLR_AUDIO_BDWT());
			stmt.setString(++index, tcBeanDO.getLR_AUDIO_SAMP_FRQ());

			String[] sol = tcBeanDO.getLr_resol().split("X");
			for(int i =0; i<sol.length;i++){
				stmt.setString(++index, sol[i] );
			}
			stmt.setLong(++index, tcBeanDO.getCt_id());	

			int updateCount = stmt.executeUpdate();

			return updateCount;
		}

		catch (SQLException e) 
		{
			logger.error(buf.toString());
			if(con != null)
			{
				try {
					con.rollback();
				} catch (SQLException e1) {
					// TODO 자동 생성된 catch 블록
					logger.error(e1);
				}
			}

			throw e;
		}
		finally
		{
			release(null, stmt, null);
		}

	}



	/**
	 * contents_inst_tbl 잡상태 변화(wmv영상)
	 * @param tcBeanDO
	 * @return
	 * @throws SQLException 
	 * @throws RemoteException
	 */
	public int updateContentsInst6(Connection con,TcBeanDO tcBeanDO) throws DASException, SQLException
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.contents_inst_tbl set ");
		buf.append("\n 	fl_path = ? ");
		buf.append("\n 	,fl_sz = ? ");
		buf.append("\n 	,wrk_file_nm = ? ");
		buf.append("\n 	,re_wmv_reg_dt = ? ");
		buf.append("\n 	,wmv_yn = ? ");
		buf.append("\n 	,bit_rt = ? ");
		buf.append("\n 	,frm_per_sec = ? ");
		buf.append("\n 	,drp_frm_yn = ? ");
		buf.append("\n 	,audio_bdwt = ? ");
		buf.append("\n 	,aud_samp_frq = ? ");
		buf.append("\n 	,vd_hresol = ? ");
		buf.append("\n 	,vd_vresol = ? ");
		buf.append("\n where ct_id = ? ");
		buf.append("\n and cti_fmt like '%30%'  ");
		PreparedStatement stmt = null;
		//Connection con = null;		

		try 
		{
			//con = DBService.getInstance().getConnection();
			stmt = con.prepareStatement(buf.toString());
			String dateTime = CalendarUtil.getDateTime("yyyyMMddHHmmss");
			int index = 0;
			logger.debug("#####Out_put_lr_path #####"+tcBeanDO.getOut_put_lr_path());
			logger.debug("#####Out_put_lr_path #####"+tcBeanDO.getOut_put_lr_path());
			String  Out_put_lr_path = tcBeanDO.getOut_put_lr_path().replaceAll(dasHandler.getProperty("MP4"), dasHandler.getProperty("WINMP4"));
			logger.debug("#####Out_put_lr_path #####"+Out_put_lr_path);
			logger.debug("#####Out_put_lr_path #####"+Out_put_lr_path);
			Out_put_lr_path = Out_put_lr_path.replaceAll(dasHandler.getProperty("NET_MP4"), dasHandler.getProperty("WINNET_MP4"));  
			logger.debug("#####Out_put_lr_path #####"+Out_put_lr_path);
			stmt.setString(++index, Out_put_lr_path);
			stmt.setLong(++index,Long.parseLong(tcBeanDO.getLR_FL_SZ()));
			stmt.setString(++index, tcBeanDO.getOut_put_lr_nm());			
			stmt.setString(++index, dateTime );
			stmt.setString(++index, "Y" );
			stmt.setString(++index, tcBeanDO.getLR_BIT_RT());
			stmt.setString(++index, tcBeanDO.getLR_FRM_PER_SEC());
			stmt.setString(++index, tcBeanDO.getLR_DRP_FRM_YN() );
			stmt.setString(++index, tcBeanDO.getLR_AUDIO_BDWT());
			stmt.setString(++index, tcBeanDO.getLR_AUDIO_SAMP_FRQ());

			String[] sol = tcBeanDO.getHR_RESOL_HR().split("X");
			for(int i =0; i<sol.length;i++){
				stmt.setString(++index, sol[i] );
			}
			stmt.setLong(++index, tcBeanDO.getCt_id());	

			int updateCount = stmt.executeUpdate();

			return updateCount;
		}

		catch (SQLException e) 
		{
			logger.error(buf.toString());
			//			 TODO 자동 생성된 catch 블록
			try {
				con.rollback();
			} catch (SQLException e1) {
				// TODO Auto-generated catch block
				logger.error(e1);
			}
			logger.error(e);


			throw e;
		}
		finally
		{
			release(null, stmt, null);
		}

	}

	/**
	 * contents_inst_tbl 잡상태 변화(hr영상)
	 * @param tcBeanDO
	 * @return
	 * @throws Exception 
	 * @throws RemoteException
	 */
	public int updateContentsInst2(Connection con,TcBeanDO tcBeanDO) throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.contents_inst_tbl set ");
		buf.append("\n 	fl_sz = ? ");
		buf.append("\n 	,bit_rt = ? ");
		buf.append("\n 	,vd_hresol = ? ");
		buf.append("\n 	,vd_vresol = ? ");
		buf.append("\n 	,frm_per_sec = ? ");
		buf.append("\n 	,drp_frm_yn = ? ");
		buf.append("\n 	,audio_bdwt = ? ");
		buf.append("\n 	,aud_samp_frq = ? ");
		buf.append("\n where ct_id = ? ");
		buf.append("\n and cti_fmt like '%10%'  ");
		PreparedStatement stmt = null;
		//Connection con = null;		

		try 
		{
			//con = DBService.getInstance().getConnection();
			stmt = con.prepareStatement(buf.toString());
			String dateTime = CalendarUtil.getDateTime("yyyyMMddHHmmss");
			int index = 0;

			stmt.setLong(++index,Long.parseLong(tcBeanDO.getHR_FL_SZ()));
			stmt.setString(++index, tcBeanDO.getHR_BIT_RT());
			String[] sol = tcBeanDO.getHR_RESOL_HR().split("X");
			for(int i =0; i<sol.length;i++){
				stmt.setString(++index, sol[i] );
			}
			stmt.setString(++index, tcBeanDO.getLR_FRM_PER_SEC());			
			stmt.setString(++index, tcBeanDO.getLR_DRP_FRM_YN() );

			stmt.setString(++index, tcBeanDO.getLR_AUDIO_BDWT());
			stmt.setString(++index, tcBeanDO.getLR_AUDIO_SAMP_FRQ());

			stmt.setLong(++index, tcBeanDO.getCt_id());

			int updateCount = stmt.executeUpdate();
			updateContents2(tcBeanDO);
			return updateCount;
		}

		catch (SQLException e) 
		{
			logger.error(buf.toString());
			try {
				con.rollback();
			} catch (SQLException e1) {
				// TODO Auto-generated catch block
				logger.error(e1);
			}

			throw e;
		}
		finally
		{
			release(null, stmt, null);
		}

	}

	/**
	 * contents_tbl 잡상태 변화
	 * @param tcBeanDO
	 * @return
	 * @throws SQLException 
	 * @throws RemoteException
	 */
	public int updateContents(Connection con,TcBeanDO tcBeanDO) throws DASException, SQLException
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.contents_tbl set ");
		buf.append("\n 	kfrm_path = ? ");
		buf.append("\n 	,mod_dt = ? ");
		buf.append("\n where ct_id = ? ");

		PreparedStatement stmt = null;
		//Connection con = null;		

		try 
		{
			//con = DBService.getInstance().getConnection();
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			String Out_put_ct_path = tcBeanDO.getOut_put_ct_path().replaceAll(dasHandler.getProperty("MP4"), dasHandler.getProperty("WINMP4"));
			Out_put_ct_path = Out_put_ct_path.replaceAll(dasHandler.getProperty("NET_MP4"), dasHandler.getProperty("WINNET_MP4"));

			String dateTime = CalendarUtil.getDateTime("yyyyMMddHHmmss");
			stmt.setString(++index, Out_put_ct_path);
			stmt.setString(++index, dateTime);
			stmt.setLong(++index, tcBeanDO.getCt_id());
			int updateCount = stmt.executeUpdate();

			return updateCount;
		}

		catch (SQLException e) 
		{
			logger.error(buf.toString());
			try {
				con.rollback();
			} catch (SQLException e1) {
				// TODO Auto-generated catch block
				logger.error(e1);
			}

			throw e;
		}
		finally
		{
			release(null, stmt, null);
		}

	}

	/**
	 * contents_tbl 잡상태 변화(hr영상)
	 * @param tcBeanDO
	 * @return
	 * @throws Exception 
	 * @throws RemoteException
	 */
	public int updateContents2(TcBeanDO tcBeanDO) throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.contents_tbl set ");
		buf.append("\n 	ct_leng= ? ");
		buf.append("\n 	,duration= ? ");
		buf.append("\n where ct_id = ? ");

		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateContents2######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setString(++index, tcBeanDO.getHR_CT_LENG());	
			stmt.setLong(++index, Long.parseLong(tcBeanDO.getDURATION()));		
			stmt.setLong(++index, tcBeanDO.getCt_id());
			int updateCount = stmt.executeUpdate();
			updateCorner(tcBeanDO);
			return updateCount;
		}
		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}



	/**
	 * corner_tbl 잡상태 변화(hr영상)
	 * @param tcBeanDO
	 * @return
	 * @throws Exception 
	 * @throws RemoteException
	 */
	public int updateCorner(TcBeanDO tcBeanDO) throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.corner_tbl set ");
		buf.append("\n 	duration= ? ");

		buf.append("\n where cn_id in (select cn_id from contents_mapp_tbl where ct_id=?) ");

		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateCorner######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setLong(++index, Long.parseLong(tcBeanDO.getDURATION()));		
			stmt.setLong(++index, tcBeanDO.getCt_id());
			int updateCount = stmt.executeUpdate();
			updateMappTbl(tcBeanDO);
			return updateCount;
		}

		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}



	/**
	 * corner_tbl 잡상태 변화(hr영상)
	 * @param tcBeanDO
	 * @return
	 * @throws Exception 
	 * @throws RemoteException
	 */
	public int updateMappTbl(TcBeanDO tcBeanDO) throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.contents_mapp_tbl set ");
		buf.append("\n 	e_duration= ? ");

		buf.append("\n where ct_id = ? ");

		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateMappTbl######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setLong(++index, Long.parseLong(tcBeanDO.getDURATION()));		
			stmt.setLong(++index, tcBeanDO.getCt_id());
			int updateCount = stmt.executeUpdate();

			return updateCount;
		}
		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}
	/**
	 * contents_mapp_tbl 잡상태 변화
	 * @param tcBeanDO
	 * @return
	 * @throws Exception 
	 * @throws RemoteException
	 */
	public int updateContentsMapp(Long seq) throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.tc_job_tbl set ");
		buf.append("\n 	job_alocate = 'Y' ");
		buf.append("\n where seq = ? ");

		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateContentsMapp######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setLong(++index, seq);


			int updateCount = stmt.executeUpdate();

			return updateCount;
		}

		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}
	/**
	 * metadat_mst_tbl  잡상태 변화
	 * @param tcBeanDO
	 * @return
	 * @throws SQLException 
	 * @throws RemoteException
	 */
	public int updatemetatbl(Connection con,TcBeanDO tcBeanDO) throws DASException, SQLException
	{

		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.metadat_mst_tbl set ");

		buf.append("\n 	RPIMG_KFRM_SEQ = ? ");
		buf.append("\n 	,RPIMG_CT_ID = ? ");
		buf.append("\n where master_id in ( select distinct master_id from CONTENTS_MAPP_TBL where ct_id = ?) ");

		PreparedStatement stmt = null;
		//Connection con = null;		

		try 
		{
			//con = DBService.getInstance().getConnection();
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setLong(++index, tcBeanDO.getRpimg_kfrm());		
			stmt.setLong(++index, tcBeanDO.getCt_id());
			stmt.setLong(++index, tcBeanDO.getCt_id());
			int updateCount = stmt.executeUpdate();

			return updateCount;
		}

		catch (SQLException e) 
		{
			logger.error(buf.toString());
			try {
				con.rollback();
			} catch (SQLException e1) {
				// TODO Auto-generated catch block
				logger.error(e1);
			}
			logger.error(e);


			throw e;
		}
		finally
		{
			release(null, stmt, null);
		}

	}

	/**
	 * metadat_mst_tbl  잡상태 변화
	 * @param tcBeanDO
	 * @return
	 * @throws Exception 
	 * @throws RemoteException
	 */
	public int updatemetatbl(PdsArchiveDO pad) throws Exception
	{

		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.metadat_mst_tbl set ");
		buf.append("\n 	RPIMG_KFRM_SEQ = ? ");
		buf.append("\n 	,RPIMG_CT_ID = ? ");
		buf.append("\n where master_id = ? ");

		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			if(pad.getConn() != null) {
				con = pad.getConn();
			} else {
				con = DBService.getInstance().getConnection();
				con.setAutoCommit(false);
			}

			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setLong(++index, 0);		
			stmt.setLong(++index, pad.getCt_id());
			stmt.setLong(++index, pad.getMaster_id());
			int updateCount = stmt.executeUpdate();

			if(pad.getConn() == null) con.commit();

			return updateCount;
		} catch (Exception e) {
			if(pad.getConn() == null) con.rollback();
			throw e;
		} finally {
			try {
				if(pad.getConn() == null) con.setAutoCommit(true);
			} catch (SQLException e) {}

			if(pad.getConn() == null)
				release(null, stmt, con);
			else
				release(null, stmt, null);
		}

	}



	/**
	 * metadat_mst_tbl  잡상태 변화 수동아카이브시
	 * @param tcBeanDO
	 * @return
	 * @throws SQLException 
	 * @throws RemoteException
	 */
	public int updatemetatbl3(Connection con ,TcBeanDO tcBeanDO) throws DASException, SQLException
	{

		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.metadat_mst_tbl set ");
		buf.append("\n 	RPIMG_KFRM_SEQ = ? ");
		buf.append("\n 	,brd_leng = ? ");
		buf.append("\n 	,RPIMG_CT_ID = ? ");
		buf.append("\n where master_id in ( select distinct master_id from CONTENTS_MAPP_TBL where ct_id = ?) ");

		PreparedStatement stmt = null;
		//Connection con = null;		

		try 
		{
			//con = DBService.getInstance().getConnection();
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setLong(++index, tcBeanDO.getRpimg_kfrm());		
			stmt.setString(++index, tcBeanDO.getHR_CT_LENG());
			stmt.setLong(++index, tcBeanDO.getCt_id());
			stmt.setLong(++index, tcBeanDO.getCt_id());
			int updateCount = stmt.executeUpdate();

			return updateCount;
		}

		catch (SQLException e) 
		{
			logger.error(buf.toString());
			try {
				con.rollback();
			} catch (SQLException e1) {
				// TODO Auto-generated catch block
				logger.error(e1);
			}

			throw e;
		}
		finally
		{
			release(null, stmt, null);
		}

	}

	private boolean isDownloadStatus(long cartNo) throws Exception
	{

		StringBuffer buf = new StringBuffer();
		buf.append("\n select ");
		buf.append("\n 	cart_stat ");
		buf.append("\n from DAS.DOWN_CART_TBL ");
		buf.append("\n where CART_NO = ? ");		
		buf.append("\n WITH UR	 ");

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######isDownloadStatus######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setLong(++index, cartNo);
			rs = stmt.executeQuery();

			while(rs.next()){;
			if(rs.getString("RIST_YN").equals(DASBusinessConstants.YesNo.YES))
			{
				return true;
			}
			else
			{
				return false;
			}
			}
			return false;
		} 

		catch (Exception e) 
		{
			logger.error(buf.toString());

			throw e;
		}
		finally
		{
			if (logger.isDebugEnabled()) 
			{
				logger.debug("[isDownloadRistrict Released : CartNo = " + cartNo + "]");
			}
			release(rs, stmt, con);
		}		

	}







	/**
	 * 다운로드 에러난것 재요청 DAS2.0
	 * @param cartNo
	 * @param cartseq
	 * @param title
	 * @return
	 * @throws DASException
	 */
	/*	public int updateErrorDownCart(DownCartDO downCartDO) throws DASException
		{		
			StringBuffer buf = new StringBuffer();
			buf.append("\n update DAS.CART_CONT_TBL set ");
			buf.append("\n 	DOWN_STAT = ? ");
			buf.append("\n where CART_NO = ? ");
			//buf.append("\n and CART_seq = ? ");

			PreparedStatement stmt = null;
			Connection con = null;		

			try 
			{
				con = DBService.getInstance().getConnection();
				con.setAutoCommit(false);	

				stmt = con.prepareStatement(buf.toString());

				int updateCount;
				int index = 0;
				String[] cartnos =downCartDO.getCartNos().split(",");
				String[] cartseqs =downCartDO.getCartSeqs().split(",");
				// 다운로드 카트의 상태를 진행중으로 변경한다.
				stmt.setString(++index, "006");
					stmt.setLong(++index, downCartDO.getCartNo());
				//	stmt.setLong(++index, downCartDO.getCartSeq());


					updateCount = stmt.executeUpdate();

					복수처리' , '구현, 실제 사용여부는?
					for(int i=0; i<cartnos.length;i++){
					index = 0;
						stmt.setString(++index, "006");
						stmt.setLong(++index, Long.parseLong(cartnos[i]));
						stmt.setLong(++index,  Long.parseLong(cartseqs[i]));


						updateCount = stmt.executeUpdate();


					}




					if (logger.isDebugEnabled()) 
			        {
			                logger.debug("[Start : WebService Call To WAS for DownloadCart : CartNo = " + downCartDO.getCartNo() + "]");
			        }


					// 다운로드 경로에 대한 값을 얻어온다.
					String _strg_loc = whichLoc(downCartDO);

					StringBuffer buf2 = new StringBuffer();
					buf2.append("update DAS.DOWN_CART_TBL set STRG_LOC = ? where CART_NO = ? ");

					PreparedStatement stmt2= con.prepareStatement(buf2.toString());
					index = 0;
					stmt2.setString(++index, _strg_loc);
					stmt2.setLong(++index, downCartDO.getCartNo());
					stmt2.executeUpdate();

						중복처리' , '구현, 실제 사용여부는?
					for(int i=0; i<cartnos.length;i++){
							index = 0;
					stmt2.setString(++index, _strg_loc);
					stmt2.setLong(++index, downCartDO.getCartNo());
					stmt2.executeUpdate();


					}






	//				 다운로드 제한 여부가 No이 웹 서비스를 호출하여 다운로드 카트를 승인 없이  다운로드 한다
	//				ServiceNevigatorIF port = new ServiceNevigatorService_Impl().getServiceNevigatorIFPort();

					//String xml = "<?xml version=\"1.0\" encoding=\"utf-8\"?>";
					//xml = xml + "<das>";
					//xml = xml + "<cart_no>" + Long.toString(cartNo) + "</cart_no>";
					//xml = xml + "</das>";

					//port.downloadService(xml);

	//				((com.tmax.axis.client.Stub)port). _setTimeout(500);
	//				port.downloadService(Long.toString(cartNo));	// 김건학실장님이 XML로 주지 말고 cartNo만 달라고 해서

					String xml = String.valueOf(downCartDO.getCartNo());
					NevigatorProxy port = new NevigatorProxy();
					String _result = port.downloadService(xml); 

					if (logger.isDebugEnabled()) 
			        {
			                logger.debug("[End : WebService Call To WAS for DownloadCart : CartNo = " + downCartDO.getCartNo() + "]");
			        }

				if(updateCount == 0){
					DASException exception = new DASException(ErrorConstants.NO_MACHING_FILED, "UPDATE 또는 DELETE에 대한 행이 없습니다.");
					throw exception;
				}

				con.commit();   

				return updateCount;
			}
			catch (NamingException e) 
			{
				// TODO 자동 생성된 catch 블록
				logger.error(e);

		        DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "시스템 장애입니다.", e);
		        throw exception;
			} 
			catch (SQLException e) 
			{
	//			 TODO 자동 생성된 catch 블록
				logger.error(e);

		        DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "시스템 장애입니다.", e);
		        throw exception;
			}
			catch (Exception e) 
			{
				logger.error(e);

				DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "시스템 장애입니다.", e);
			    throw exception;
			}		
			finally
			{
				//try { 	if (stmt != null)  stmt.close();	} catch (SQLException e) {}
				release(null, stmt, con);
			}

		}*/
	/**
	 * 재요청할 DOWN_CART의 정보를 얻어온다.
	 * @param  downCartDO 재요청할 정보를 담고있는 beans
	 * @return DownCartDO
	 * @throws Exception 
	 */
	public int updateErrorDownCart(DownCartDO downCartDO) throws Exception
	{		
		//down_cart_tbl 에 저장할정보를 얻는다
		DownCartDO down = selectDownCartInfo(downCartDO.getCartNo());
		DownCartDO result = insertCartInfo(down);

		//cart_cont_tbl 에 저장할정보를 얻는다


		CartContDO cart = selectCartContInfo(downCartDO.getCartNo(),downCartDO.getCartSeq());
		int seq = selectCartContMaxSeq(result.getCartNo());
		cart.setCartNo(result.getCartNo());
		cart.setCartSeq(++seq);
		result.setCartSeq(cart.getCartSeq());
		insertCartContInfo(cart);
		updateDownCart(result);
		return 1;
	}


	/**
	 * 마스터id에 따른 메타저보를 조회한다.
	 * @param master_id 마스터id
	 * @return DownCartDO
	 * @throws Exception 
	 */
	public DownCartDO selectMetadatList(long master_id) throws Exception
	{
		String query = ExternalStatement.selectMetadatQuery();

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######selectMetadatList######## con : " + con);
			stmt = con.prepareStatement(query);

			int index = 0;
			stmt.setLong(++index, master_id);

			rs = stmt.executeQuery();

			List resultList = new ArrayList();

			DownCartDO item = new DownCartDO();
			while(rs.next())
			{
				/*item.setCartNo(         	rs.getLong("CART_NO"));
					item.setCartSeq(        	rs.getInt("CART_SEQ"));
					item.setRistClfCd(      	rs.getString("RIST_CLF_CD"));
					item.setCtId(           		rs.getLong("CT_ID"));
					item.setCtiId(          		rs.getLong("CTI_ID"));
					item.setSom(            	rs.getString("SOM"));
					item.setEom(            	rs.getString("EOM"));
					item.setDuration(       	rs.getLong("DURATION"));
					item.setRegDt(          	rs.getString("REG_DT"));
					item.setRegrId(         	rs.getString("REGRID"));
					item.setModDt(          	rs.getString("MOD_DT"));
					item.setModrId(         	rs.getString("MODRID"));
					item.setCtgrLCd(        	rs.getString("CTGR_L_CD"));
					item.setCtgrMCd(        	rs.getString("CTGR_M_CD"));
					item.setCtgrSCd(        	rs.getString("CTGR_S_CD"));
					item.setCtCont(replace(rs.getString("CT_CONT")));
					item.setCtNm(replace(rs.getString("CT_NM")));
					item.setMasterId(			rs.getLong("MASTER_ID"));
				 */
				resultList.add(item);
			}	

			return item;
		} 

		catch (Exception e) 
		{
			logger.error(query);


			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}

	}



	/**
	 * WMV 재생성일 생성
	 * @param ct_id 컨텐츠id
	 * @return updatecount
	 * @throws Exception 
	 */
	public int updateWMVdate(long ct_id) throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.contents_inst_tbl set ");
		buf.append("\n 	RE_WMV_REG_DT=? ");

		buf.append("\n where ct_id = ? ");

		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateWMVdate######## con : " + con);
			stmt = con.prepareStatement(buf.toString());
			String dateTime = CalendarUtil.getDateTime("yyyyMMddHHmmss");
			int index = 0;
			stmt.setString(++index, dateTime);

			stmt.setLong(++index, ct_id);

			int updateCount = stmt.executeUpdate();

			return updateCount;
		}

		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}



	/**
	 * 복본 재생성일 생성
	 * @param ct_id 컨텐츠id
	 * @return updatecount
	 * @throws Exception 
	 */
	public int updateCOPYdate(int ct_id) throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.contents_inst_tbl set ");
		buf.append("\n 	re_copy_reg_dt=? ");
		buf.append("\n where ct_id = ? ");

		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateCOPYdate######## con : " + con);
			stmt = con.prepareStatement(buf.toString());
			String dateTime = CalendarUtil.getDateTime("yyyyMMddHHmmss");
			int index = 0;
			stmt.setString(++index, dateTime);

			stmt.setInt(++index, ct_id);

			int updateCount = stmt.executeUpdate();

			return updateCount;
		}

		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}

	/**
	 * cti_id를 받아온다
	 * @param ct_id    영상id
	 * @return 
	 * @throws Exception 
	 */
	public Long selectCtidFromCtiId(long ct_id) throws Exception
	{

		String query = ExternalStatement.selectCtidFromCtiId(ct_id);
		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######selectCtidFromCtiId######## con : " + con);
			stmt = con.prepareStatement(query);

			String str = null;		
			rs = stmt.executeQuery();
			long cti_id=0;
			while(rs.next())
			{

				cti_id =rs.getLong("cti_id");

			}		

			return cti_id;

		} 

		catch (Exception e) 
		{
			logger.error(query);

			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}




	/**
	 * 연장정보를 반영한다.
	 * @param codeDO 코드 정보를 포함하고 있는 DataObject
	 * @param commonDO 공통정보
	 * @throws Exception 
	 */
	public int updateUseInfo(String rsvdd, String rsvcd,String masterId) throws Exception
	{

		StringBuffer buf = new StringBuffer();
		buf.append("\n update DAS.METADAT_MST_TBL SET ");

		buf.append("\n 	 RSV_PRD_END_DD= ? ,  ");
		buf.append("\n 	 RSV_PRD_CD= ?  ");

		buf.append("\n 	 where  ");
		buf.append("\n MASTER_ID IN  ("+masterId+" )");

		Connection con = null;
		PreparedStatement stmt = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateUseInfo######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			//현재 시간을 받아온다.
			String toDateTime = CalendarUtil.getDateTime("yyyyMMddHHmmss");

			int index = 0;

			stmt.setString(++index, rsvdd);
			stmt.setString(++index, rsvcd);
			//stmt.setString(++index, masterId);



			int updateCount = stmt.executeUpdate();

			if(updateCount == 0)
			{
				DASException exception = new DASException(ErrorConstants.NO_MACHING_FILED, "UPDATE 또는 DELETE에 대한 행이 없습니다.");
				throw exception;
			}
			return updateCount;

		} 

		catch (Exception e) 
		{
			logger.error(buf.toString());

			throw e;
		}	
		finally
		{
			release(null, stmt, con);
		}

	}





	/**
	 * 사용등급, 주제영상 정보를 조회한다
	 * @param nMasterID  마스터id
	 * @return xml
	 * @throws RemoteException
	 */
	public String getAnnotInfoXML(long nMasterID) throws DASException
	{
		StringBuffer buf = new StringBuffer();
		StringBuffer strResult = new StringBuffer();

		buf.append("\n select  ");
		buf.append("\n  value (code.DESC, '') AS ANNOT_CLF_NM, ");
		buf.append("\n value (annot.ANNOT_CLF_CONT, '') AS ANNOT_CONT   ");
		buf.append("\n from annot_info_tbl annot  ");
		buf.append("\n inner join CODE_TBL code on code.clf_cd='P018' and code.SCL_CD = annot.ANNOT_CLF_CD and code.GUBUN = 'L' ");
		buf.append("\n where annot.master_id= ? ");
		buf.append("\n and annot.ANNOT_CLF_cd <> '007' ");

		Connection con = null;

		PreparedStatement psmt = null;

		ResultSet rs = null;

		try
		{	
			con = DBService.getInstance().getConnection();
			//logger.debug("######getAnnotInfoXML######## con : " + con);
			psmt = con.prepareStatement(buf.toString());    
			int index = 0;			
			psmt.setLong(++index, nMasterID);
			rs = psmt.executeQuery();	
			String annot_nm ="00";
			String annot_cont ="00";
			String newannot_nm ="00";
			String newannot_cont ="00";

			while (rs.next())
			{

				newannot_nm = rs.getString("ANNOT_CLF_NM").trim();
				newannot_cont = rs.getString("ANNOT_CONT").trim();

				if(!newannot_nm.equals(annot_nm)||!annot_cont.equals(newannot_cont)){
					strResult.append("\n  <AnnotInfo>");
					this.AddToResultXMLBuffer(strResult, "ANNOT_CLF_NM", "      ", rs.getString("ANNOT_CLF_NM"));
					this.AddToResultXMLBuffer(strResult, "ANNOT_CONT", "      ", rs.getString("ANNOT_CONT"));
					strResult.append("\n  </AnnotInfo>");
				}

				annot_nm = rs.getString("ANNOT_CLF_NM").trim();
				annot_cont = rs.getString("ANNOT_CONT").trim();


			}	//while (rs.next()) 

			return strResult.toString();
		}
		catch (Exception ex)
		{
			logger.error(buf.toString());

			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "getAttachResultXML 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, con);
		}        
	}


	/**
	 * 사용하지 않는 함수
	 * @param masterId
	 * @return
	 * @throws RemoteException
	 */
	public String getCnDetailInfoXML(long nMasterID) throws DASException
	{
		StringBuffer buf = new StringBuffer();
		StringBuffer strResult = new StringBuffer();

		buf.append("\n select  ");
		buf.append("\n  SEQ ");
		buf.append("\n ,CN_ID   ");
		buf.append("\n ,SOM  ");
		buf.append("\n ,EOM ");
		buf.append("\n ,CONT ");
		buf.append("\n from cn_detail where cn_id in (select cn_id from contents_mapp_tbl where master_id = ? )");


		Connection con = null;

		PreparedStatement psmt = null;

		ResultSet rs = null;

		try
		{	
			con = DBService.getInstance().getConnection();
			//logger.debug("######getCnDetailInfoXML######## con : " + con);
			psmt = con.prepareStatement(buf.toString());    
			int index = 0;			
			psmt.setLong(++index, nMasterID);
			rs = psmt.executeQuery();	

			while (rs.next())
			{
				strResult.append("\n  <CnDetail>");
				this.AddToResultXMLBuffer(strResult, "CN_ID", "      ", rs.getLong("CN_ID")+"");
				this.AddToResultXMLBuffer(strResult, "SEQ", "      ", rs.getLong("SEQ")+"");
				this.AddToResultXMLBuffer(strResult, "SOM", "      ", rs.getString("SOM"));
				this.AddToResultXMLBuffer(strResult, "EOM", "      ", rs.getString("EOM"));
				this.AddToResultXMLBuffer(strResult, "CONT", "      ", rs.getString("CONT"));


				strResult.append("\n  </CnDetail>");
			}	//while (rs.next()) 

			return strResult.toString();
		}

		catch (Exception ex)
		{
			logger.error(buf.toString());

			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "getAttachResultXML 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, con);
		}        
	}

	/**
	 * 첨부파일을 삭제한다.
	 * @param attachFilename 삭제할 파일 이름	
	 * @param file_type 파일 타입
	 * @return clf_cd	구분
	 * @throws DASException
	 */
	public int deleteBoardAttachFile(String attachFilename, String fl_path, int board_id) throws DASException
	{	
		//		 필요한 변수들
		StringBuffer buf = new StringBuffer();
		StringBuffer strResultBuffer = new StringBuffer();
		//		서버에 실제로 저장된 이름을 가져온다.
		StringBuffer buf2 = new StringBuffer();
		buf2.append("\n select ORG_FILE_NM,REGRID, substr(fl_path,26) as fl_path from DAS.ATTCH_TBL ");
		buf2.append("\n where mothr_data_id = ? and ORG_FILE_NM = ?"); 
		// SQL 구성		
		buf.append("\n delete from DAS.ATTCH_TBL");
		buf.append("\n where mothr_data_id = ? and ORG_FILE_NM = ?"); 
		Connection con = null;
		PreparedStatement psmt = null;
		ResultSet rs = null;
		try
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######deleteBoardAttachFile######## con : " + con);
			con.setAutoCommit(false);

			// 서버에 저장된 파일명을 가져온다.
			psmt = con.prepareStatement(buf2.toString());
			int index = 0;		
			psmt.setInt(++index, board_id);
			psmt.setString(++index, attachFilename);
			rs = psmt.executeQuery();
			rs.next();
			String fl_nm = rs.getString("ORG_FILE_NM");
			String reg_id = rs.getString("REGRID");
			String fl_path1 = rs.getString("fl_path");
			psmt = con.prepareStatement(buf.toString());
			index = 0;		


			psmt.setInt(++index, board_id);
			psmt.setString(++index, attachFilename);
			psmt.executeUpdate();

			// 파일 삭제(DB에서 삭제에 성공했을 때만)
			//String strDeleteFilePath = "/was/jeus5/webhome/app_home/DAS/mp4/attach/" + file_type.trim() + "/" + clf_cd.trim() + "/" + attachFilename.trim();
			//String strDeleteFilePath = "/mp4/attach/" + file_type.trim() + "/" + clf_cd.trim() + "/" + attachFilename.trim();
			//  String strDeleteFilePath = "/mp4/attach/" + file_type.trim() + "/" + clf_cd.trim() + "/" + fl_nm.trim();
			// String strDeleteFile = "/mp4/attach/"  + "001" + "/"+reg_id +fl_path  + fl_nm.trim();
			//  String strDeleteFilePath = "/mp4/attach/"  + "001" + "/"+reg_id +fl_path ;

			String strDeleteFile = fl_path  + fl_nm.trim();
			String strDeleteFilePath = fl_path;

			File file = new File(strDeleteFile);
			File folder = new File(strDeleteFilePath);
			boolean bFileExist = false;			
			try
			{
				bFileExist = file.exists();
			}
			catch (SecurityException e)
			{            
				con.rollback();
				logger.debug("SecurityException 발생 : " + e.getMessage());
				return 0;
			}

			if (true == bFileExist)
			{
				if (file.delete())  
				{
					folder.delete();
					con.commit();
					logger.debug("정상 삭제된 파일 : " + strDeleteFile);
					logger.debug("정상 삭제된 폴더 : " + strDeleteFilePath);
					return 1;
				}            		
				else
				{
					con.rollback();            	
					logger.debug("롤백된 파일 : " + strDeleteFile);
					return 0;
				}            	
			}
			else
			{
				con.rollback();            	
				logger.debug("존재하지 않아 롤백된 파일 : " + strDeleteFile);
				return 0;
			}

		}
		catch (Exception ex)
		{
			logger.error(buf2.toString());
			logger.error(buf.toString());
			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "deleteAttachFile 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			try {
				con.setAutoCommit(true);
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				logger.error(e);
			}
			release(rs, psmt, con);
		}
	}


	/*
	    public int deleteBoardAttachFile(String attachFilename, int board_id) throws DASException
		{	
	//		 필요한 변수들
			StringBuffer buf = new StringBuffer();
			StringBuffer strResultBuffer = new StringBuffer();

	//		서버에 실제로 저장된 이름을 가져온다.
			StringBuffer buf2 = new StringBuffer();
			buf2.append("\n select ORG_FILE_NM,REGRID, reg_dt from DAS.ATTCH_TBL ");
			buf2.append("\n where mothr_data_id = ? and ORG_FILE_NM = ?"); 
					// SQL 구성		
			buf.append("\n delete from DAS.ATTCH_TBL");
			buf.append("\n where mothr_data_id = ? and ORG_FILE_NM = ?"); 

			Connection con = null;
			PreparedStatement psmt = null;
			ResultSet rs = null;
	        try
	        {
	        	con = DBService.getInstance().getConnection();
	        	con.setAutoCommit(false);

	        	// 서버에 저장된 파일명을 가져온다.
	            psmt = con.prepareStatement(buf2.toString());
	            int index = 0;		


				psmt.setInt(++index, board_id);
				psmt.setString(++index, attachFilename);
	    		rs = psmt.executeQuery();
	    		rs.next();
	    		String fl_nm = rs.getString("ORG_FILE_NM");
	    		String reg_id = rs.getString("REGRID");
	    		String reg_dt = rs.getString("REG_DT");
	    		psmt = con.prepareStatement(buf.toString());
	    		index = 0;		


				psmt.setInt(++index, board_id);
				psmt.setString(++index, attachFilename);
	            psmt.executeUpdate();

	            // 파일 삭제(DB에서 삭제에 성공했을 때만)
	            //String strDeleteFilePath = "/was/jeus5/webhome/app_home/DAS/mp4/attach/" + file_type.trim() + "/" + clf_cd.trim() + "/" + attachFilename.trim();
	            //String strDeleteFilePath = "/mp4/attach/" + file_type.trim() + "/" + clf_cd.trim() + "/" + attachFilename.trim();
	          //  String strDeleteFilePath = "/mp4/attach/" + file_type.trim() + "/" + clf_cd.trim() + "/" + fl_nm.trim();
	           String strDeleteFile = "/mp4/attach/"  + "001" + "/"+reg_id + "/"+reg_dt  + "/"+ fl_nm.trim();
	            String strDeleteFilePath = "/mp4/attach/"  + "001" + "/"+reg_id + "/"+reg_dt ;
	            logger.debug("삭제할 파일 : " + strDeleteFile);
	           logger.debug("삭제할 폴더 : " + strDeleteFilePath);
	            File file = new File(strDeleteFile);
	          File folder = new File(strDeleteFilePath);
	            String[] fnameList =file.list();
	            int fcnt = fnameList.length;
	            String childPath="";
	            for(int i =0; i<fcnt;i++){
	            	 File file2 = new File(strDeleteFilePath);
	            	if(!file2.isDirectory()){
	            		file2.delete();
	            	}else{

	            	}
	            }
	            boolean bFileExist = false;			
	            try
	            {
	            	bFileExist = file.exists();
	            }
	            catch (SecurityException e)
	            {            
	            	con.rollback();
	            	logger.debug("SecurityException 발생 : " + e.getMessage());
	            	return 0;
	            }

	            if (true == bFileExist)
	            {
	            	if (file.delete())  
	            	{
	            		folder.delete();
	            		con.commit();
	            		logger.debug("정상 삭제된 파일 : " + strDeleteFile);
	            		logger.debug("정상 삭제된 폴더 : " + strDeleteFilePath);
	            		return 1;
	            	}            		
	            	else
	            	{
	            		con.rollback();            	
	            		logger.debug("롤백된 파일 : " + strDeleteFilePath);
	            		return 0;
	            	}            	
	            }
	            else
	            {
	            	con.rollback();            	
	        		logger.debug("존재하지 않아 롤백된 파일 : " + strDeleteFilePath);
	        		return 0;
	            }

	        }
	        catch (NamingException ex) 
			{
				// TODO 자동 생성된 catch 블록
				ex.printStackTrace();
		        DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "deleteAttachFile 에러 : " + buf.toString(), ex);
		        throw exception;
			} 
	        catch (SQLException ex)
	        {
	        	ex.printStackTrace();

		        DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "deleteAttachFile 에러 : " + buf.toString(), ex);
		        throw exception;
	        }
	        finally
	        {
	            release(rs, psmt, con);
	        }
		}

	 */



	/**
	 * 다운로드 승인 조회한다.(등록시)
	 * @param ApprveDO                                                                                                                                                                                              
	 * @return                                                                                                                                                                                              
	 * @throws Exception 
	 */
	public List selectApproveInfoList(ApproveInfoDO ApproveInfoDO) throws Exception
	{
		String query = ExternalStatement.selectApproveInfoList(ApproveInfoDO);

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######selectApproveInfoList######## con : " + con);
			stmt = con.prepareStatement(query);

			int index = 0;


			rs = stmt.executeQuery();

			List resultList  = new ArrayList();
			while(rs.next())
			{
				ApproveInfoDO item = new ApproveInfoDO();
				item.setPgm_id(         	rs.getString("pgm_id"));
				item.setPgm_nm(       	rs.getString("pgm_nm"));
				item.setApp_gubun(      		rs.getString("app_gubun"));
				item.setDept_cd(      		rs.getString("dept_cd"));
				item.setUser_no(      		rs.getString("approve_user_num"));
				item.setUser_nm(		rs.getString("approve_user_nm"));
				item.setPosition( rs.getString("position"));
				item.setDept_nm(		rs.getString("DEPT_NM"));

				resultList.add(item);
			}

			return resultList; 
		}  
		catch (Exception e) 
		{
			logger.error(query);


			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}

	/**
	 * 다운로드 승인 조회한다
	 * @param ApprveDO                                                                                                                                                                                              
	 * @return                                                                                                                                                                                              
	 * @throws Exception 
	 */
	public List getApproveInfo(ApproveInfoDO ApproveInfoDO) throws Exception
	{
		String query = ExternalStatement.selectApproveInfo(ApproveInfoDO);

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######getApproveInfo######## con : " + con);

			stmt = con.prepareStatement(query);

			int index = 0;


			rs = stmt.executeQuery();

			List resultList  = new ArrayList();
			while(rs.next())
			{
				ApproveInfoDO item = new ApproveInfoDO();
				item.setPgm_id(         	rs.getString("PROGRAM_CODE"));
				item.setPgm_nm(       	rs.getString("PROGRAM_NAME"));
				item.setApp_gubun(      		rs.getString("app_gubun"));
				item.setDept_cd(      		rs.getString("dept_cd"));
				item.setUser_no(      		rs.getString("USER_NUM"));
				item.setUser_nm(		rs.getString("USER_NM"));
				item.setPosition( rs.getString("CP_YN"));
				item.setDept_nm(		rs.getString("DEPT_NM"));

				resultList.add(item);
			}

			return resultList; 
		} 
		catch (Exception e) 
		{
			logger.error(query);


			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}

	/**
	 * 승인자를 등록 한다.
	 * @param roleDO 부서 정보가 포함되어 있는 DataObject
	 * @param 
	 * @throws Exception 
	 */


	public int[] insertApproveInfo(List roleDO) throws Exception
	{
		String delAddDate = dasHandler.getProperty(DASBusinessConstants.DeleteAfterDate.DELETEAFTERDATE);
		StringBuffer buf = new StringBuffer();

		buf.append("\n insert into DAS.APPROVE_INFO_TBL( ");	
		buf.append("\n 	PGM_ID,  ");
		buf.append("\n 	PGM_NM,  ");
		buf.append("\n 	APP_GUBUN, "); 
		buf.append("\n 	DEPT_CD, ");
		buf.append("\n 	APPROVE_USER_NM,  ");
		buf.append("\n 	POSITION, ");
		buf.append("\n 	APPROVE_USER_NUM  ");	

		buf.append("\n )  ");
		buf.append("\n values  ");
		/*
			buf.append("\n  merge into das.APPROVE_INFO_TBL TG   ");		
			buf.append("\n 	 using (     ");
			buf.append("\n 	 select  ? as pgm_id, '11' as pgm_nm, '11' as app_gubun, '11' as dept_cd, '11' as approve_user_nm, '11' as position, '11' as  approve_user_num  ");
			buf.append("\n 	 from sysibm.sysdummy1    ");   
			buf.append("\n 	 ) ABC ");
			buf.append("\n   ON (  TG.approve_user_num = ABC.approve_user_num )");
			buf.append("\n 	 when not matched then  "); 
			buf.append("\n 		insert (pgm_id, pgm_nm,app_gubun, dept_cd, approve_user_nm, position, approve_user_num )  ");
			buf.append("\n 		values (?, ?, ?, ?, ?, ?, ?)   ");
		 */

		buf.append("\n 		(?, ?, ?, ?, ?, ?, ?)   ");
		Connection con = null;
		PreparedStatement stmt = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######insertApproveInfo######## con : " + con);
			con.setAutoCommit(false);

			stmt = con.prepareStatement(buf.toString());

			int index = 0;

			try{
				logger.debug( buf.toString());


				for(int i=0;i<roleDO.size();i++){
					index = 0;
					ApproveInfoDO roleDOs = (ApproveInfoDO)roleDO.get(i);
					logger.debug("roleDOs2" +roleDOs);
					logger.debug(""+roleDOs.getPgm_id());	
					logger.debug(""+roleDOs.getPgm_nm());
					logger.debug(""+roleDOs.getApp_gubun());
					logger.debug(""+roleDOs.getDept_cd());
					logger.debug(""+roleDOs.getUser_nm());
					logger.debug(""+roleDOs.getPosition());
					logger.debug(""+roleDOs.getUser_no());



					stmt.setString(++index, roleDOs.getPgm_id());	
					stmt.setString(++index, roleDOs.getPgm_nm());
					stmt.setString(++index, roleDOs.getApp_gubun());
					stmt.setString(++index, roleDOs.getDept_cd());
					stmt.setString(++index, roleDOs.getUser_nm());
					stmt.setString(++index, roleDOs.getPosition());
					stmt.setString(++index, roleDOs.getUser_no());
					stmt.addBatch();

				}

				int[] rInt = null;	
				if(roleDO.size()>0)stmt.executeBatch();

				con.commit();
				return rInt;
			} catch(SQLException e) {

			}


		} 
		catch (Exception e) 
		{
			logger.error(buf.toString());
			if(con != null)
			{
				try {
					con.rollback();
				} catch (SQLException e1) {
					// TODO 자동 생성된 catch 블록
					logger.error(e1);
				}
			}


			throw e;
		}
		finally
		{
			try {
				con.setAutoCommit(true);
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				logger.error(e);
			}
			release(null, stmt, con);
		}
		return null;

	}






	/**
	 * 승인정보를 삭제한다
	 * @param user_no
	 * @return
	 * @throws Exception 
	 * @throws RemoteException
	 */
	public int deleteApproveInfo(String user_no,String DEPT_CD) throws Exception
	{
		Connection con = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######deleteApproveInfo######## con : " + con);
			con.setAutoCommit(false);

			int result = deletapproveInfo(con, user_no,DEPT_CD);

			con.commit();
			return result;
		} 

		catch (Exception e) 
		{
			logger.error(user_no);
			logger.error(DEPT_CD);

			if(con != null)
			{
				try {
					con.rollback();
				} catch (SQLException e1) {
					// TODO 자동 생성된 catch 블록
					logger.error(e1);
				}
			}


			throw e;
		}
		finally
		{
			try {
				con.setAutoCommit(true);
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				logger.error(e);
			}
			release(null, null, con);
		}

	}



	/**
	 * 승인정보를 삭제한다
	 * @param user_no
	 * @return
	 * @throws Exception 
	 * @throws RemoteException
	 */
	public int deleteApproveInfo2(String user_no,String DEPT_CD,String pgm_Cd) throws Exception
	{
		Connection con = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######deleteApproveInfo2######## con : " + con);
			con.setAutoCommit(false);

			int result = deletapproveInfo2(con, user_no,DEPT_CD,pgm_Cd);

			con.commit();
			return result;
		} 

		catch (Exception e) 
		{
			logger.error(user_no);
			logger.error(DEPT_CD);
			logger.error(pgm_Cd);

			if(con != null)
			{
				try {
					con.rollback();
				} catch (SQLException e1) {
					// TODO 자동 생성된 catch 블록
					logger.error(e1);
				}
			}


			throw e;
		}
		finally
		{
			try {
				con.setAutoCommit(true);
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				logger.error(e);
			}
			release(null, null, con);
		}

	}
	private int deletapproveInfo(Connection con, String user_no,String deptcd) throws SQLException
	{
		StringBuffer buf = new StringBuffer();

		buf.append("\n delete from DAS.approve_info_tbl where APPROVE_USER_NUM = ?  ");
		buf.append("\n and dept_cd = ?  ");
		PreparedStatement stmt = null;
		try 
		{

			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			int result=0;
			String[] userno= user_no.split(",");
			String[] dept_cd= deptcd.split(",");
			for(int i =0;i<userno.length;i++){

				if(userno[i].equals("")){
					stmt.setString(++index, "");
				}else{
					stmt.setString(++index, userno[i]);
				}
				stmt.setString(++index, dept_cd[i]);
				result =  stmt.executeUpdate();
			}



			return result;
		} 
		catch (SQLException e) 
		{
			logger.error(buf.toString());

			throw e;
		}
		finally
		{
			// panboy. 이 처리도 나중에 문제가 생기면 확인
			try { 	if (stmt != null)  stmt.close();	} catch (SQLException e) {}
		}

	}
	private int deletapproveInfo2(Connection con, String user_no,String deptcd,String pgm_cd) throws SQLException
	{
		StringBuffer buf = new StringBuffer();

		buf.append("\n delete from DAS.approve_info_tbl where APPROVE_USER_NUM = ?  ");
		buf.append("\n and dept_cd = ? and pgm_id = ?  ");
		PreparedStatement stmt = null;
		try 
		{

			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			int result=0;
			String[] userno= user_no.split(",");
			String[] dept_cd= deptcd.split(",");
			String[] pgm_id= pgm_cd.split(",");
			for(int i =0;i<userno.length;i++){
				index = 0;
				if(userno[i].equals("")){
					stmt.setString(++index, "");
				}else{
					stmt.setString(++index, userno[i]);
				}
				stmt.setString(++index, dept_cd[i]);
				stmt.setString(++index, pgm_id[i]);
				result =  stmt.executeUpdate();
			}



			return result;
		} 
		catch (SQLException e) 
		{
			logger.error(buf.toString());

			throw e;
		}
		finally
		{
			// panboy. 이 처리도 나중에 문제가 생기면 확인
			try { 	if (stmt != null)  stmt.close();	} catch (SQLException e) {}
		}

	}






	/**
	 * 검색어를 포함하는 프로그램 이름을 모두 가져온다
	 * @param pgmNm    프로그램 이름 검색어
	 * @return List		ProgramInfoDO 리스트
	 * @throws Exception 
	 */
	public List selectProgramInfo2(String pgmNm) throws Exception
	{
		String query = ExternalStatement.selectProgramInfoQuery2(pgmNm);

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######selectProgramInfo2######## con : " + con);
			stmt = con.prepareStatement(query);

			String str = null;		
			rs = stmt.executeQuery();
			List resultList  = new ArrayList();
			while(rs.next())
			{
				ProgramInfoDO item = new ProgramInfoDO();
				item.setPgmId(rs.getLong("PGM_ID"));
				item.setMasterId(rs.getLong("MASTER_ID"));

				str = rs.getString("PGM_NM");
				str = StringUtils.replace(str, "<", " ");
				str = StringUtils.replace(str, ">", " ");
				item.setPgmNm(str);

				//str = rs.getString("PGM_EPIS");
				str = rs.getString("EPIS_NO");
				str = StringUtils.replace(str, "<", " ");
				str = StringUtils.replace(str, ">", " ");
				item.setPgmEpis(str);

				resultList.add(item);		
			}		

			return resultList;

		} 
		catch (Exception e) 
		{
			logger.error(query);

			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}





	/**
	 * 프로그램이름을 포함하는 프로그램 정보을 모두 가져온다(pds cms pgm_id 기준)
	 * @param pgmNm    프로그램 이름 검색어
	 * @return List		ProgramInfoDO 리스트
	 * @throws Exception 
	 */
	public List selectPgmInfoFromName2(String pgmNm) throws Exception
	{

		String query = ExternalStatement.selectPgmInfoFromNameQuery2(pgmNm);

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######selectPgmInfoFromName2######## con : " + con);
			stmt = con.prepareStatement(query);
			stmt.setString(1, "%"+CommonUtl.transXmlText(pgmNm)+"%");

			String str = null;		
			rs = stmt.executeQuery();
			List resultList  = new ArrayList();

			while(rs.next())
			{
				ProgramInfoDO item = new ProgramInfoDO();

				item.setPgmNm(  rs.getString("PROGRAM_NAME"));
				item.setPgmCd(  rs.getString("PROGRAM_CODE"));

				resultList.add(item);
			}		

			return resultList;

		} 
		catch (Exception e) 
		{
			logger.error(query);

			throw e;
		} 

		finally
		{
			release(rs, stmt, con);
		}
	}





	/**
	 *  WMV 재생성 요청 김건학 실장님 수정요청사항 dekim
	 * @param cti_id 콘텐츠 인스턴스 아이디
	 * @param user_id 사용자id
	 * @param tc_inter_path tc 경로
	 * @return String
	 * @throws Exception 
	 */
	public String recreateWMVForClient(long ct_id,String user_id,String tc_inter_path, String req_cd) throws Exception
	{
		try
		{
			String strData = "RETRY," + ct_id+","+user_id;

			//restore
			//down_Cart_tbl에 insert한다
			DownCartDO result2 = selectInfoForRecreate2(ct_id);
			result2.setRegrId(user_id);
			//ExternalBusinessProcessor.insertDownCartInfo(result2);
			insertCartInfo2(result2,req_cd);
			//cart_cont_tbl 에 insert한다
			CartContDO result = selectInfoForRecreate(ct_id);
			result.setRegrId(user_id);
			ExternalBusinessProcessor.insertCartContInfo(result);
			//insertCartContInfo(result);

			return "1";

		}
		catch (Exception e) 
		{
			logger.error(ct_id);
			logger.error(user_id);
			logger.error(tc_inter_path);
			logger.error(req_cd);


			throw e;		    
		}
	}
	/**
	 * 키프레임 재신청 요청 한다.
	 * @param cti_id 콘텐츠 인스턴스 아이디
	 * @param user_nm 요청자명
	 * @return updatecount
	 * @throws Exception 
	 */
	public String recreateWMV_KFRMForClient(long ct_id,String user_id,String tc_inter_path,String req_cd)throws Exception{

		try {	
			//restore
			//down_Cart_tbl에 insert한다
			DownCartDO result2 = selectInfoForRecreate2(ct_id);
			result2.setRegrId(user_id);

			//ExternalBusinessProcessor.insertDownCartInfo(result2);
			DownCartDO result3 =  insertCartInfo2(result2,req_cd);
			//cart_cont_tbl 에 insert한다
			CartContDO result = selectInfoForRecreate(ct_id);
			result.setRegrId(user_id);
			result.setCartNo(result3.getCartNo());
			//ExternalBusinessProcessor.insertCartContInfo(result);
			result.setDown_typ("F");
			insertRecreateInfo(result);
			updateDownCart3(result3);
			if(req_cd.equals("LRCT")){
				updateCTWMVYN(ct_id,user_id);
			}else if(req_cd.equals("CT")){
				updateCTYN(ct_id,user_id);	
			}else  if(req_cd.equals("LR")){
				updateWMVYN(ct_id,user_id);	
			}
			return "1";
		} catch (Exception e) {

			logger.error(ct_id);
			logger.error(user_id);
			logger.error(tc_inter_path);
			logger.error(req_cd);


			throw e;
		}

	}
	/**
	 * 키프레임  요청 한다.
	 * @param cti_id 콘텐츠 인스턴스 아이디
	 * @param user_nm 요청자명
	 * @return updatecount
	 * @throws Exception 
	 */
	public String recreateKFRMForClient(long ct_id,String user_id,String tc_inter_path, String req_cd)throws Exception{

		try {

			//restore
			//down_Cart_tbl에 insert한다
			DownCartDO result2 = selectInfoForRecreate2(ct_id);
			result2.setRegrId(user_id);
			//ExternalBusinessProcessor.insertDownCartInfo(result2);
			insertCartInfo2(result2,req_cd);
			//cart_cont_tbl 에 insert한다
			CartContDO result = selectInfoForRecreate(ct_id);
			result.setRegrId(user_id);
			ExternalBusinessProcessor.insertCartContInfo(result);
			//insertCartContInfo(result);

			return "1";
		} catch (Exception e) {

			logger.error(ct_id);
			logger.error(user_id);
			logger.error(tc_inter_path);
			logger.error(req_cd);


			throw e;
		}

	}




	/**
	 * arcreq에 xml을 전송 
	 * @param tcJobBeanDO JOB 을 가지고 오는 빈
	 * @param stateBeanDO TC를 가지고 오는 빈
	 * @param tc_inter_path
	 * @throws Exception 
	 */
	public void getTCJob(DownCartDO downCartDO,String xml)throws Exception{

		try {
			if(logger.isDebugEnabled()){
				logger.debug("getTCJob [input xml]"+ xml);
			}

			/**
			 * 해당 디렉토리에 XML 파일을 전송,저장한다.
			 */
			jutil fo = new jutil();

			fo.makeFile(xml, dasHandler.getProperty("ARCREQ")+"/"+downCartDO.getFile_nm());

		} catch (Exception e) {
			logger.error(xml);

			throw e;
		}

	}
	/**
	 * 다운로드 mp2/restore에 xml을 전송 
	 * @param tcJobBeanDO JOB 을 가지고 오는 빈
	 * @param stateBeanDO TC를 가지고 오는 빈
	 * @param tc_inter_path
	 * @throws Exception 
	 */
	public void getTCJobDown(PdsDownDO downCartDO,String xml)throws Exception{

		try {


			/**
			 * 해당 디렉토리에 XML 파일을 전송,저장한다.
			 */
			jutil fo = new jutil();
			String temp_file = downCartDO.getFilename();
			String file_name ="";
			if(temp_file.length()>0)
				file_name = temp_file.substring(0, temp_file.lastIndexOf("."));
			
			String path = "/"+dasHandler.getProperty("WINMP2")+"/restore/"+downCartDO.getUser_id()+"/"+downCartDO.getCart_no();
			File f = new File(path);
			if(!f.exists()) f.mkdirs();
			
			fo.makeFile3(xml, file_name, path);




		} catch (Exception e) {
			logger.error(xml);

			throw e;
		}

	}



	/**
	 * 다운로드 mp2/restore에 xml을 make 
	 * @param downCartDO
	 * @param xml
	 * @throws Exception 
	 */
	public void createXmlDown(PdsDownDO downCartDO,String xml)throws Exception{

		try {
			if(logger.isDebugEnabled()){
				logger.debug("createXmlDown [input xml]"+ xml);
				logger.debug("createXmlDown [input DownCartDO]"+ downCartDO);
			}

			/**
			 * 해당 디렉토리에 XML 파일을 전송,저장한다.
			 */
			jutil fo = new jutil();
			String temp_file = downCartDO.getFilename();
			String file_name =downCartDO.getFilename();
			if(temp_file.length()>0)
				file_name = temp_file.substring(0, temp_file.lastIndexOf("."));


			fo.makeFile3(xml, file_name,"/"+dasHandler.getProperty("WINMP2")+"/restore/"+downCartDO.getUser_id()+"/"+downCartDO.getCart_no());



			/**  
			 * FTP로 해당 파일을 전달한다.
			 */

		} catch (Exception e) {
			logger.error(xml);

			throw e;
		}

	}
	/**
	 * 다운로드 mp2/restore에 xml을 make(스토리지 다운로드용) 
	 * @param downCartDO
	 * @param xml
	 * @throws Exception 
	 */
	public void createXmlDownForStorage(PdsDownDO downCartDO,String xml)throws Exception{

		try {
			if(logger.isDebugEnabled()){
				logger.debug("createXmlDownForStorage [input xml]"+ xml);
				logger.debug("createXmlDownForStorage [input DownCartDO]"+ downCartDO);
			}

			/**
			 * 해당 디렉토리에 XML 파일을 전송,저장한다.
			 */
			jutil fo = new jutil();
			String temp_file = downCartDO.getFilename();
			String file_name =downCartDO.getFilename();
			if(temp_file.length()>0)
				fo.makeFile3(xml, file_name,"/"+dasHandler.getProperty("WINMP2")+"/restore/"+downCartDO.getUser_id()+"/"+downCartDO.getCart_no());
			logger.debug("파일 생성 완료!"+"/mp2/restore/"+downCartDO.getUser_id()+"/"+downCartDO.getCart_no()+"/"+file_name);


			/**  
			 * FTP로 해당 파일을 전달한다.
			 */

		} catch (Exception e) {
			logger.error(xml);

			throw e;
		}

	}

	/**
	 * 재생성시 필요한 정보 를 생성한다.(cart_cont_tbl)
	 * @param ct_id 영상id
	 * @return
	 * @throws Exception 
	 */
	public CartContDO selectInfoForRecreate(long ct_id) throws Exception
	{
		String query = ExternalStatement.selectInfoForRecreate(ct_id);

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//	logger.debug("######selectInfoForRecreate######## con : " + con);
			stmt = con.prepareStatement(query);

			String str = null;		
			rs = stmt.executeQuery();
			CartContDO item = new CartContDO();
			while(rs.next())
			{
				item.setCtId(       		rs.getLong("ct_id"));
				item.setCtiId(       		rs.getLong("cti_id"));
				item.setMasterId(       		rs.getLong("MASTER_ID"));
				item.setFl_path(       		rs.getString("fl_path"));
				item.setAsp_rto_cd(       		rs.getString("ASP_RTO_CD"));
				item.setVd_qlty(       		rs.getString("VD_QLTY"));


			}		

			return item;

		} 
		catch (Exception e) 
		{
			logger.error(query);

			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}



	/**
	 * 재생성시 필요한 정보 를 생성한다.(down_cart_tbl)
	 * @param ct_id 영상id
	 * @return
	 * @throws Exception 
	 */
	public DownCartDO selectInfoForRecreate2(long ct_id) throws Exception
	{
		String query = ExternalStatement.selectInfoForRecreate2(ct_id);

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######selectInfoForRecreate2######## con : " + con);
			stmt = con.prepareStatement(query);

			String str = null;		
			rs = stmt.executeQuery();
			DownCartDO item = new DownCartDO();
			while(rs.next())
			{

				item.setAspRtoCd(       		rs.getString("ASP_RTO_CD"));
				item.setVdQlty(       		rs.getString("VD_QLTY"));


			}		

			return item;

		} 
		catch (Exception e) 
		{
			logger.error(query);

			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}






	/**
	 *재생성을 위한 카트 정보를 저장한다.<p>
	 * 다운로드 카트 정보와 카트 내용을 DB 스키마와 동일하게 받아 저장한다.
	 * @param downCartDO 카트정보
	 * @param commonDO 공통정보
	 * @return DownCartDO 채번한 카트번호를 포함하고 있는 다운로드 카트
	 * @throws Exception 
	 */
	public DownCartDO insertCartInfo2(DownCartDO downCartDO,String req_cd) throws Exception
	{
		// 먼저 DEPT_CD를 찾아온다.
		//String DEPT_CD = getDECP_CDFromUserID(downCartDO.getReqUsrid());

		StringBuffer buf = new StringBuffer();
		buf.append("\n insert into DAS.DOWN_CART_TBL( ");
		buf.append("\n 	CART_NO, "); 
		buf.append("\n 	DATA_CLF_CD, "); 
		buf.append("\n 	PRIO_CD, "); 
		buf.append("\n 	STRG_LOC, "); 
		buf.append("\n 	RIST_YN, "); 

		buf.append("\n 	APP_CONT,  ");
		buf.append("\n 	REQ_USRID, "); 
		buf.append("\n 	REQ_NM,  ");
		buf.append("\n 	REQ_DT,  ");
		buf.append("\n 	DOWN_DT,  ");

		buf.append("\n 	APP_DT,  ");
		buf.append("\n 	DOWN_SUBJ,  ");
		buf.append("\n 	GAURANTOR_ID, "); 
		buf.append("\n 	REG_DT,  ");
		buf.append("\n 	REGRID,  ");

		buf.append("\n 	MOD_DT,  ");
		buf.append("\n 	MODRID,  ");
		buf.append("\n 	VD_QLTY,  ");
		buf.append("\n 	ASP_RTO_CD, ");
		buf.append("\n 	CART_STAT, ");

		buf.append("\n  CO_CD, ");
		buf.append("\n  SEG_CD, ");
		buf.append("\n  DEPT_CD ,");
		buf.append("\n  DOWN_GUBUN, ");
		buf.append("\n  OUT_STRG_LOC, ");
		buf.append("\n  TC_REQ_CD ");
		buf.append("\n ) ");
		buf.append("\n values(?, ?, ?, ?, ?,");
		buf.append("\n        ?, ?, ?, ?, ?,");
		buf.append("\n        ?, ?, ?, ?, ?,"); 
		buf.append("\n        ?, ?, ?, ?, ?,");
		buf.append("\n        ?, ?, ?, ?, ?, ?) ");

		Connection con = null;
		PreparedStatement stmt = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######insertCartInfo2######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			//현재 시간을 받아온다.
			String toDateTime = CalendarUtil.getDateTime("yyyyMMddHHmmss");

			//카트번호 시퀀스를 채번한다.
			long cartNo = Long.parseLong(getNextSquence(con, DASBusinessConstants.SequenceName.CART_NO));
			downCartDO.setCartNo(cartNo);			
			String _strg_loc = whichLoc(downCartDO);

			int index = 0;
			stmt.setLong(++index, cartNo); 
			stmt.setString(++index, downCartDO.getDataClfCd()); 
			stmt.setString(++index, downCartDO.getPrioCd()); 
			//경로정보를 받아온다
			stmt.setString(++index, _strg_loc); 
			stmt.setString(++index, "N"); 

			stmt.setString(++index, downCartDO.getAppCont()); 
			stmt.setString(++index, "D080009"); 
			stmt.setString(++index, downCartDO.getReqNm()); 
			stmt.setString(++index, toDateTime);
			stmt.setString(++index, downCartDO.getDownDt()); 

			stmt.setString(++index, downCartDO.getAppDt()); 
			stmt.setString(++index, downCartDO.getDownSubj()); 
			stmt.setString(++index, downCartDO.getGaurantorId()); 
			stmt.setString(++index, toDateTime); 
			stmt.setString(++index, "D080009");

			stmt.setString(++index, toDateTime); 
			stmt.setString(++index, "D080009"); 
			stmt.setString(++index, downCartDO.getVdQlty()); 
			stmt.setString(++index, downCartDO.getAspRtoCd()); 
			stmt.setString(++index, downCartDO.getCartStat());

			stmt.setString(++index, downCartDO.getCo_cd());
			stmt.setString(++index, downCartDO.getSeg_cd());
			stmt.setString(++index, downCartDO.getDeptCd());			
			stmt.setString(++index, downCartDO.getDown_gubun());
			stmt.setString(++index, downCartDO.getOut_strg_loc());
			stmt.setString(++index, req_cd);

			stmt.executeUpdate();

			//DownCartDO 에 채번한 카트번호를 셋팅한다.
			downCartDO.setStrgLoc(_strg_loc);
			//downCartDO.setCartNo(cartNo);
			return downCartDO;
		} 

		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}

	/**
	 * 카트에 대한 상세 정보를 저장한다
	 * @param cartContDO 정보를 가지고있는 beans
	 * @return updaetcount
	 * @throws Exception 
	 * @throws RemoteException
	 */
	public int insertCartContInfo2(CartContDO cartContDO) throws Exception
	{

		StringBuffer buf = new StringBuffer();
		buf.append("\n Insert into DAS.CART_CONT_TBL( ");
		buf.append("\n 	CART_NO,  ");
		buf.append("\n 	CART_SEQ,  ");
		buf.append("\n 	RIST_CLF_CD,  ");
		buf.append("\n 	CT_ID,  ");
		buf.append("\n 	CTI_ID,  ");

		buf.append("\n 	SOM,  ");
		buf.append("\n 	EOM,  ");
		buf.append("\n 	DURATION,  ");
		buf.append("\n 	REG_DT,  ");
		buf.append("\n 	REGRID,  ");

		buf.append("\n 	MOD_DT,  ");
		buf.append("\n 	MODRID,  ");
		buf.append("\n 	CTGR_L_CD,  ");
		buf.append("\n 	CTGR_M_CD,  ");
		buf.append("\n 	CTGR_S_CD,  ");

		buf.append("\n 	CT_CONT,  ");
		buf.append("\n 	CT_NM, ");
		buf.append("\n 	S_FRAME, ");
		buf.append("\n 	MASTER_ID, ");
		buf.append("\n  ASP_RTO_CD, ");

		buf.append("\n  VD_QLTY, ");
		buf.append("\n  DOWN_STAT, ");
		buf.append("\n  DOWN_TYP, ");
		buf.append("\n  OUTSOURCING_YN, ");
		buf.append("\n  RIST_YN ,");
		buf.append("\n  MEDIA_ID ");
		//		buf.append("\n  DOWN_GUBUN ");
		// TODO. 여기에 REQ_CD를 추가해야 한다. DB에도 필드를 추가해야 한다. 
		buf.append("\n ) ");
		buf.append("\n values(?, ?, ?, ?, ?, " +
				" ?, ?, ?, ?, ?, " +
				" ?, ?, ?, ?, ?, " +
				" ?, ?, ?, ?, ?, " +
				" ?, ?, ?, ?, ?, ?) ");

		Connection con = null;
		PreparedStatement stmt = null;
		try 
		{
			String strNow = CalendarUtil.getDateTime("yyyyMMddHHmmss");
			con = DBService.getInstance().getConnection();
			//logger.debug("######insertCartContInfo2######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setLong(++index, cartContDO.getCartNo()); 
			stmt.setInt(++index, cartContDO.getCartSeq()); 
			stmt.setString(++index, CodeConstants.AnnotCode.UNLIMITED);			
			stmt.setLong(++index, cartContDO.getCtId()); 
			stmt.setLong(++index, cartContDO.getCtiId()); 

			stmt.setString(++index, cartContDO.getSom()); 
			stmt.setString(++index, cartContDO.getEom()); 
			stmt.setLong(++index, cartContDO.getDuration()); 
			stmt.setString(++index, strNow);
			stmt.setString(++index, cartContDO.getRegrId());

			stmt.setString(++index, strNow);
			stmt.setString(++index, cartContDO.getModrId()); 
			stmt.setString(++index, cartContDO.getCtgrLCd()); 
			stmt.setString(++index, cartContDO.getCtgrMCd()); 
			stmt.setString(++index, cartContDO.getCtgrSCd()); 

			stmt.setString(++index, cartContDO.getCtCont()); 
			stmt.setString(++index, cartContDO.getCtNm());
			stmt.setString(++index, cartContDO.getSFrame());
			stmt.setLong(++index, cartContDO.getMasterId());
			stmt.setString(++index, cartContDO.getAsp_rto_cd());

			stmt.setString(++index, cartContDO.getVd_qlty());
			stmt.setString(++index, "006");
			stmt.setString(++index, cartContDO.getDown_typ());
			stmt.setString(++index, cartContDO.getOutsourcing_yn());
			stmt.setString(++index, "N");
			String media_id = codeInfoDAO.getMediaId();
			stmt.setString(++index,media_id);
			//			stmt.setString(++index,cartContDO.getDown_gubun_nm());
			stmt.executeUpdate();

			return 1;
		} 

		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}










	/**
	 * 다운로드 요청 DAS2.0(재요청한 영상 다운요청)
	 * @param cartNo
	 * @param cartState
	 * @param title
	 * @return
	 * @throws Exception 
	 */
	public int updateDownCart2(DownCartDO downCartDO) throws Exception
	{		
		StringBuffer buf = new StringBuffer();
		buf.append("\n update DAS.DOWN_CART_TBL set ");
		buf.append("\n 	CART_STAT = ? ");
		buf.append("\n	, DOWN_SUBJ = ? ");
		buf.append("\n  , DOWN_GUBUN = ? ");
		//buf.append("\n  , file_path = ? ");

		buf.append("\n where CART_NO = ? ");

		PreparedStatement stmt = null;
		PreparedStatement stmt2 = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateDownCart2######## con : " + con);
			con.setAutoCommit(false);	

			stmt = con.prepareStatement(buf.toString());

			int updateCount;
			int index = 0;


			stmt.setString(++index, CodeConstants.CartStatus2.DOWNLOAD);
			stmt.setString(++index, downCartDO.getDownSubj());
			if(!"".equals(downCartDO.getDown_gubun())){
				stmt.setString(++index, downCartDO.getDown_gubun());
			}else{
				stmt.setString(++index, "006");
			}


			stmt.setLong(++index, downCartDO.getCartNo());				

			updateCount = stmt.executeUpdate();
			//	}


			// 다운로드 경로에 대한 값을 얻어온다.
			String _strg_loc = whichLoc(downCartDO);

			StringBuffer buf2 = new StringBuffer();
			buf2.append("update DAS.DOWN_CART_TBL set STRG_LOC = ? where CART_NO = ? ");

			stmt2= con.prepareStatement(buf2.toString());
			index = 0;
			stmt2.setString(++index, _strg_loc);
			stmt2.setLong(++index, downCartDO.getCartNo());
			stmt2.executeUpdate();

			//con.setAutoCommit(true);


			// 다운로드 카트의 사용 제한 여부를 확인하고 
			//	if(!isDownloadRistrict(downCartDO.getCartNo()))
			//	{

			if (logger.isDebugEnabled()) 
			{
				logger.debug("[Start : WebService Call To WAS for DownloadCart : CartNo = " + downCartDO.getCartNo() + "]");
			}

			//다운로드 제한 여부가 No이 웹 서비스를 호출하여 다운로드 카트를 승인 없이  다운로드 한다
			//cart_cont_tbl의 rist_yn이 N인 값만 던진다

			//downCartDO.setRegrId("D080009");
			//downCartDO.setReqUsrid("D080009");
			//String xml = getDownloadXml(downCartDO);//<- 카트번호를 받아 소속 seq list로 보냄
			String xml = getDownloadXmlFormat(downCartDO);
			logger.debug("xml   = "+xml);

			if(!"".equals(xml)){
				NevigatorProxy port = new NevigatorProxy();
				String _result = port.downloadService(xml); 
			}

			if (logger.isDebugEnabled()) 
			{
				logger.debug("[End : WebService Call To WAS for DownloadCart : CartNo = " + downCartDO.getCartNo() + "]");
			}

			//}


			if(updateCount == 0){
				DASException exception = new DASException(ErrorConstants.NO_MACHING_FILED, "UPDATE 또는 DELETE에 대한 행이 없습니다.");
				throw exception;
			}

			con.commit();

			return updateCount;
		}
		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			//try { 	if (stmt != null)  stmt.close();	} catch (SQLException e) {}
			try {
				con.setAutoCommit(true);
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				logger.error(e);
			}
			release(null, stmt, con);
			release(null, stmt2, null);
		}

	}



	/**
	 * 다운로드 요청 DAS2.0(재요청한 영상 다운요청)
	 * @param cartNo
	 * @param cartState
	 * @param title
	 * @return
	 * @throws Exception 
	 */
	public int updateDownCart3(DownCartDO downCartDO) throws Exception
	{		
		StringBuffer buf = new StringBuffer();
		buf.append("\n update DAS.DOWN_CART_TBL set ");
		buf.append("\n 	CART_STAT = ? ");
		buf.append("\n	, DOWN_SUBJ = ? ");
		buf.append("\n  , OUT_STRG_LOC = ? ");
		buf.append("\n  , DOWN_GUBUN = ? ");
		buf.append("\n  , file_path = ? ");
		buf.append("\n  , category = ? ");
		buf.append("\n  , storagename = ? ");
		buf.append("\n where CART_NO = ? ");

		PreparedStatement stmt = null;
		PreparedStatement stmt2 = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateDownCart3######## con : " + con);
			con.setAutoCommit(false);	

			stmt = con.prepareStatement(buf.toString());

			int updateCount;
			int index = 0;


			stmt.setString(++index, CodeConstants.CartStatus2.DOWNLOAD);
			stmt.setString(++index, downCartDO.getDownSubj());
			stmt.setString(++index, "");
			stmt.setString(++index, "006");
			stmt.setString(++index, "");
			stmt.setString(++index, "");
			stmt.setString(++index,"");

			stmt.setLong(++index, downCartDO.getCartNo());				

			updateCount = stmt.executeUpdate();
			//	}


			// 다운로드 경로에 대한 값을 얻어온다.
			String _strg_loc = whichLoc(downCartDO);

			StringBuffer buf2 = new StringBuffer();
			buf2.append("update DAS.DOWN_CART_TBL set STRG_LOC = ? where CART_NO = ? ");

			stmt2= con.prepareStatement(buf2.toString());
			index = 0;
			stmt2.setString(++index, _strg_loc);
			stmt2.setLong(++index, downCartDO.getCartNo());
			stmt2.executeUpdate();

			//con.setAutoCommit(true);


			// 다운로드 카트의 사용 제한 여부를 확인하고 
			//	if(!isDownloadRistrict(downCartDO.getCartNo()))
			//	{

			if (logger.isDebugEnabled()) 
			{
				logger.debug("[Start : WebService Call To WAS for DownloadCart : CartNo = " + downCartDO.getCartNo() + "]");
			}

			//다운로드 제한 여부가 No이 웹 서비스를 호출하여 다운로드 카트를 승인 없이  다운로드 한다
			//cart_cont_tbl의 rist_yn이 N인 값만 던진다

			//downCartDO.setRegrId("D080009");
			//downCartDO.setReqUsrid("D080009");
			//String xml = getDownloadXml(downCartDO);//<- 카트번호를 받아 소속 seq list로 보냄
			//String xml = getDownloadXmlFormat(downCartDO);
			String xml = getNewDownloadXml(downCartDO);
			logger.debug("xml   = "+xml);

			if(!"".equals(xml)){
				NevigatorProxy port = new NevigatorProxy();
				String _result = port.downloadService(xml); 
				logger.debug("_result   = "+_result);
			}
			if (logger.isDebugEnabled()) 
			{
				logger.debug("[End : WebService Call To WAS for DownloadCart : CartNo = " + downCartDO.getCartNo() + "]");
			}

			//}


			if(updateCount == 0){
				DASException exception = new DASException(ErrorConstants.NO_MACHING_FILED, "UPDATE 또는 DELETE에 대한 행이 없습니다.");
				throw exception;
			}

			con.commit();

			return updateCount;
		}
		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}

		finally
		{
			//try { 	if (stmt != null)  stmt.close();	} catch (SQLException e) {}
			try {
				con.setAutoCommit(true);
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				logger.error(e);
			}
			release(null, stmt, con);
			release(null, stmt2, null);
		}

	}


	/**
	 * 컨텐츠 정보를 받아온다
	 * @param num    contents_down_tbl의 key
	 * @return List		
	 * @throws Exception 
	 */
	public String selectAddTaskForXml(int num) throws Exception
	{
		/**
		 * addtask job xml 생성 쿼리
		 */
		String query = ExternalStatement.selectAddTaskForXml(num);
		/**
		 * pds, nds  xml 생성 쿼리
		 * 		 */
		String query2 = ExternalStatement.selectInfoForDownXml(num);


		/**
		 * if cms xml 생성 쿼리
		 * 		 */
		String query3 = ExternalStatement.selectInfoForDownXmlInIfCms(num);

		Connection con = null;
		Connection con2 = null;
		Connection con3 = null;
		PreparedStatement stmt = null;
		PreparedStatement stmt2 = null;
		PreparedStatement stmt3 = null;
		commonUtl = new CommonUtl();
		ResultSet rs = null;
		XmlUtil xmlutil = new XmlUtil();
		try 
		{
			con = DBService.getInstance().getConnection();
			con2 = DBService.getInstance().getConnection();
			con3 = DBService.getInstance().getConnection();
			//logger.debug("######selectAddTaskForXml######## con : " + con);
			//logger.debug("######selectAddTaskForXml######## con2 : " + con2);
			//logger.debug("######selectAddTaskForXml######## con3 : " + con3);
			stmt = con.prepareStatement(query);
			stmt2 = con2.prepareStatement(query2);
			stmt3 = con3.prepareStatement(query3);
			//stmt2 = LoggableStatement.getInstance(con2, query2);
			//stmt3 = LoggableStatement.getInstance(con3, query3);
			String str = null;		
			rs = stmt.executeQuery();

			List resultList  = new ArrayList();
			List resultList2  = new ArrayList();
			List resultList3  = new ArrayList();
			TransferDO item = new TransferDO();
			PdsDownDO item2 = new PdsDownDO();

			IfCmsArchiveDO item3 = new IfCmsArchiveDO();
			String fileName ="";
			while(rs.next())
			{

				item.setRename(rs.getString("RENAME"));
				item.setMedia_id(rs.getString("MEDIA_ID"));
				item.setFile_path(rs.getString("STRG_LOC"));
				item.setCategory(rs.getString("CATEGORY"));
				item.setStoragename(rs.getString("storagename"));
				item.setTitle(rs.getString("TITLE"));
				item.setPgm_nm(rs.getString("pgm_nm"));
				item.setPgm_nm(rs.getString("pgm_nm"));
				item.setCart_no(rs.getInt("CART_NO"));
				item.setCart_seq(rs.getInt("CART_SEQ"));
				item.setUser_id(rs.getString("req_usrid"));
				item.setFl_nm(rs.getString("FILENAME"));
				item.setStrg_loc(rs.getString("strg_loc"));
				item.setDown_gubun(rs.getString("down_gubun"));
				item.setTarget_cms_id(rs.getString("target_cms_id"));
				item.setSom(rs.getString("som"));
				item.setEom(rs.getString("eom"));
				item.setDown_typ(rs.getString("down_typ"));
				item.setReg_dt(rs.getString("reg_dt"));
				//fileName=item.getCart_no()+"_"+item.getMedia_id()+"_"+item.getReg_dt();
				//item.setFl_nm(fileName);
				resultList.add(item);
			}

			rs = stmt2.executeQuery();
			while(rs.next()){				
				item2.setUser_id(rs.getString("req_usrid"));				
				item2.setMedia_id(rs.getString("MEDIA_ID"));
				item2.setFl_path(rs.getString("FILE_PATH"));
				item2.setCategory(rs.getString("CATEGORY"));
				item2.setStoragename(rs.getString("storagename"));
				item2.setTitle(rs.getString("TITLE"));
				item2.setSub_ttl(rs.getString("SUB_TTL"));
				item2.setPgm_nm(rs.getString("PROGRAM_NAME"));
				item2.setCart_no(rs.getInt("CART_NO"));
				item2.setCart_seq(rs.getInt("CART_SEQ"));
				item2.setFilename(rs.getString("FILENAME"));
				item2.setPds_program_id(rs.getString("PDS_CMS_PGM_ID").trim());
				item2.setEpis_no(rs.getLong("EPIS_NO"));
				item2.setProducer_nm(rs.getString("PRODUCER_NM"));
				item2.setCmr_place(rs.getString("CMR_PLACE"));	
				item2.setFm_dt(rs.getString("FM_DT"));
				item2.setCprt_nm(rs.getString("CPRTR_NM"));
				item2.setCprt_cd(rs.getString("CPRT_TYPE"));
				if(rs.getString("RIST_CLF_CD").equals("")){
					item2.setRist_clf_cd("007");
				}else{
					item2.setRist_clf_cd(rs.getString("RIST_CLF_CD"));
				}
				String view = xmlutil.changViewGrade2(rs.getString("VIEW_GR_CD"));
				item2.setDeliberation_cd(view);
				item2.setBrd_dd(rs.getString("BRD_LENG"));
				item2.setBrd_bgn_hms(rs.getString("BRD_BGN_HMS").trim());
				item2.setBrd_end_hms(rs.getString("BRD_END_HMS").trim());
				item2.setBrd_dd(rs.getString("BRD_DD"));
				item2.setVd_hresol(rs.getString("VD_HRESOL"));
				item2.setVd_vresol(rs.getString("VD_VRESOL"));
				item2.setFl_sz(rs.getLong("FL_SZ"));
				item2.setBit_rt(rs.getString("BIT_RT"));
				item2.setAud_samp_frq(rs.getString("AUD_SAMP_FRQ"));
				item2.setAud_bdwt(rs.getString("AUDIO_BDWT"));
				String recode_Cd = xmlutil.changRecordCode2(rs.getString("RECORD_TYPE_CD"));
				item2.setRecord_type_cd(recode_Cd);
				item2.setFrm_per_sec(rs.getString("FRM_PER_SEC"));
				item2.setHdmode(rs.getString("VD_QLTY"));
				item2.setCt_cla(rs.getString("CT_CLA"));
				long ct_leng = rs.getLong("CT_LENG");
				String ct_leg = commonUtl.sendTimecode(ct_leng);
				item2.setCt_leng(ct_leg);
				item2.setAsp_rto_cd(rs.getString("ASP_RTO_CD"));
				item2.setCt_typ(rs.getString("CT_TYP"));
				item2.setSom(rs.getString("SOM"));
				item2.setEom(rs.getString("EOM"));
				item2.setDown_gubun(rs.getString("DOWN_GUBUN"));
				item2.setRename(rs.getString("RENAME"));
				item2.setFilesize(rs.getLong("FILESIZE"));
				item2.setLogical_tree(rs.getString("logical_tree"));
				item2.setPhysical_tree(rs.getString("PHYICAL_TREE"));	
				item2.setUser_nm(rs.getString("user_nm"));
				item2.setCart_no(rs.getInt("cart_no"));
				//item2.setFilename(fileName);
				resultList2.add(item2);	

			}


			//다운로드 구분이 007이면 if cms용 xml을 생성하기위한 작업을 시작한다.
			if(item2.getDown_gubun().equals("007")){
				rs = stmt3.executeQuery();
				while(rs.next())
				{
					item3.setView_gr_cd(rs.getString("VIEW_GR_CD"));
					item3.setPhyical_tree(rs.getString("PHYICAL_TREE"));
					item3.setStorage_nm(rs.getString("storagename"));
					item3.setCart_no(rs.getLong("cart_no"));
					item3.setGroup_id(rs.getLong("master_id"));
					//20121223최효정과정 요청사항 특이사항 빠진 부분 추가
					item3.setSpecial_info(rs.getString("special_info"));
					item3.setTitle(rs.getString("title"));
					item3.setSub_ttl(rs.getString("title_sub"));
					item3.setProgram_id(rs.getString("program_id"));
					item3.setProgram_name(rs.getString("program_name"));
					item3.setCorner_title(rs.getString("corner_title"));	
					item3.setCorner_contents(rs.getString("corner_contents"));		
					item3.setEpisode_no(String.valueOf(rs.getLong("program_sequence")));
					item3.setCreator(rs.getString("creator"));
					item3.setPublisher(rs.getString("publisher"));
					item3.setPublisher_external(rs.getString("publisher_external"));
					item3.setCtgr_l_cd(rs.getString("genre_l"));
					item3.setCtgr_m_cd(rs.getString("genre_m"));
					item3.setCtgr_s_cd(rs.getString("genre_s"));
					item3.setBrd_dd(rs.getString("datetime_onair"));
					item3.setFm_dt(rs.getString("datetime_shooting"));
					item3.setLocation_shooting(rs.getString("location_shooting"));
					item3.setKeyword(rs.getString("keyword"));
					item3.setCopyright_desc(rs.getString("copyright_desc"));	
					item3.setCopyright_owner(rs.getString("copyright_owner"));	
					item3.setCopyright_type(rs.getString("copyright_type"));
					item3.setProduction_type(rs.getString("production_type"));
					item3.setLimited_use(rs.getString("usegrade"));
					item3.setLimited_use_cont(rs.getString("usegrade_desc"));
					item3.setName_host(rs.getString("name_host"));		
					item3.setName_guest(rs.getString("name_guest"));
					item3.setArtist(rs.getString("artist"));
					item3.setCountry(rs.getString("country"));
					item3.setMusic_info(rs.getString("music_info"));
					item3.setMedia_id(rs.getString("media_id"));
					item3.setResolution(rs.getString("resolution"));
					item3.setAspectratio(rs.getString("aspectratio"));
					CommonUtl commonUtl = new CommonUtl();
					String timecode=commonUtl.sendTimecode(Long.parseLong(rs.getString("duration")));
					item3.setBrd_leng(timecode);
					item3.setAudio_type(rs.getString("audio_type"));
					item3.setDatatime_request(rs.getString("datetime_regist"));
					item3.setContents_type(rs.getString("contents_type"));
					item3.setFile_name(rs.getString("file_name"));
					item3.setRefile_nm(rs.getString("rename"));
					item3.setSom(rs.getString("som"));
					item3.setEom(rs.getString("eom"));
					item3.setVd_hresol(rs.getString("vd_hresol"));
					item3.setVd_vresol(rs.getString("vd_vresol"));
					item3.setFile_size(rs.getString("file_size"));
					item3.setBit_rt(rs.getString("bit_rate"));
					item3.setAud_samp_frq(rs.getString("aud_samp_frq"));
					item3.setAud_bandwidth(rs.getString("aud_bandwidth"));
					item3.setFrm_per_sec(rs.getString("frame_per_second"));
					item3.setContents_class(rs.getString("contents_class"));
					item3.setBroadcast_event_type(rs.getString("broadcast_event_type"));
					item3.setBgn_time_onair(rs.getString("bgn_time_onair"));
					item3.setEnd_time_onair(rs.getString("end_time_onair"));
					item3.setWorker_id(rs.getString("worker_id"));
					item3.setDownload_comment(rs.getString("download_comment"));	
					item3.setCallback_url(rs.getString("url"));
					item3.setComplete_dt(rs.getString("updt_dtm"));
					item3.setCti_idForHigh(rs.getLong("cti_id"));
					if(rs.getString("transaction_id").equals("")){
						item3.setTransaction_id(0);
					}else{

						item3.setTransaction_id(Long.parseLong(rs.getString("transaction_id")));
					}
					item3.setCreator_sub(rs.getString("creator_sub"));				
					item3.setCopyright_type(rs.getString("copyright_type"));
					item3.setCopyright_owner(rs.getString("copyright_owner"));
					item3.setCopyright_desc(rs.getString("copyright_desc"));
					item3.setDownload_comment(rs.getString("download_comment"));
					item3.setChannel_cd(rs.getString("contents_channel"));
					item3.setFile_name(rs.getString("file_name"));
					resultList3.add(item3);
				}
			}
			//다운 구분이 PDS라면 pds파일을 떨군다
			if(item2.getDown_gubun().equals("001")){

				try {
					List _infoList2 =  resultList2;
					if (_infoList2 != null && _infoList2.size() > 0) {
						Iterator _iter2 = _infoList2.iterator();
						while (_iter2.hasNext()) {
							StringBuffer _xml = new StringBuffer();
							PdsDownDOXML _do = new PdsDownDOXML();
							_do.setDO(_iter2.next());
							_xml.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>");
							_xml.append(_do.getSubXML());
							createXmlDown(item2, _xml.toString());
						}

					}
				} catch (DASException e) {
					// TODO: handle exception
					logger.error(e);
				}

			}
			//다운 구분이 NDS라면 pds파일을 떨군다
			if(item2.getDown_gubun().equals("002")){

				try {
					List _infoList2 =  resultList2;
					if (_infoList2 != null && _infoList2.size() > 0) {
						Iterator _iter2 = _infoList2.iterator();
						while (_iter2.hasNext()) {
							StringBuffer _xml = new StringBuffer();
							PdsDownDOXML _do = new PdsDownDOXML();
							_do.setDO(_iter2.next());
							_xml.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>");
							_xml.append(_do.getSubXML2());

							createXmlDown(item2, _xml.toString());
						}

					}
				} catch (DASException e) {
					// TODO: handle exception
					logger.error(e);
				}

			}

			//다운 구분이 ifcms 라면 xml파일을 떨군다
			if(item2.getDown_gubun().equals("007")){

				try {
					List _infoList3 =  resultList3;
					if (_infoList3 != null && _infoList3.size() > 0) {
						Iterator _iter2 = _infoList3.iterator();
						while (_iter2.hasNext()) {
							StringBuffer _xml = new StringBuffer();
							IfCmsArchiveDOXML _do = new IfCmsArchiveDOXML();
							_do.setDO(_iter2.next());
							_xml.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>");
							_xml.append(_do.getSubXML());

							createXmlDown(item2, _xml.toString());
						}

					}
				} catch (DASException e) {
					// TODO: handle exception
					logger.error(e);
				}

			}
			//transfe job xml을 한다.

			//다운 구분이 계열사라면  !!!
			if(item2.getDown_gubun().equals("005")){

				List _infoList =  resultList;
				if (_infoList != null && _infoList.size() > 0) {
					Iterator _iter = _infoList.iterator();
					while (_iter.hasNext()) {
						String _xml = "";
						TransferDOXML _do = new TransferDOXML();
						_do.setDO(_iter.next());
						_xml = _xml +"<?xml version=\"1.0\" encoding=\"utf-8\"?>";
						_xml = _xml + _do.getSubXML();

						if (logger.isDebugEnabled())
							logger.debug("_xml" + _xml);

						return _xml;
					}
				}
			}


			List _infoList =  resultList;
			if (_infoList != null && _infoList.size() > 0) {
				Iterator _iter = _infoList.iterator();
				while (_iter.hasNext()) {
					String _xml = "";
					TransferDOXML _do = new TransferDOXML();
					_do.setDO(_iter.next());
					_xml = _xml +"<?xml version=\"1.0\" encoding=\"utf-8\"?>";
					_xml = _xml + _do.getSubXML();

					if (logger.isDebugEnabled())
						logger.debug("_xml" + _xml);

					return _xml;
				}
			}
		} 

		catch (Exception e) 
		{
			logger.error(query);
			logger.error(query2);
			logger.error(query3);

			throw e;
		}
		finally
		{
			release(rs, stmt, con);
			release(rs, stmt2, con2);
			release(rs, stmt3, con3);

		}
		return null;
	}
	/**
	 * addtask job xml 생성 쿼리,pds, nds, 계열사  xml 생성 쿼리 생성하는 함수
	 * @param cartNo 카트넘버
	 * @param cartSeq 카트순번
	 * @return
	 * @throws Exception 
	 */

	public String selectAddTaskForXmlByStorageClip(long cartNo,long cartSeq) throws Exception
	{
		/**
		 * addtask job xml 생성 쿼리
		 */
		String query = ExternalStatement.selectAddTaskForXmlByStorageClip( cartNo, cartSeq);
		/**
		 * pds, nds, 계열사  xml 생성 쿼리
		 * 		 */
		String query2 = ExternalStatement.selectInfoForDownXmlByStorageClip( cartNo, cartSeq);

		/**
		 * if cms xml 생성 쿼리
		 * 		 */
		String query3 = ExternalStatement.selectInfoForDownXmlByStorageIfCms(cartNo, cartSeq);
		Connection con = null;
		Connection con2 = null;
		Connection con3 = null;
		PreparedStatement stmt = null;
		PreparedStatement stmt2 = null;
		PreparedStatement stmt3 = null;
		ResultSet rs = null;
		XmlUtil xmlutil = new XmlUtil();
		try 
		{
			con = DBService.getInstance().getConnection();
			con2 = DBService.getInstance().getConnection();
			con3 = DBService.getInstance().getConnection();
			//logger.debug("######selectAddTaskForXmlByStorageClip######## con : " + con);
			//logger.debug("######selectAddTaskForXmlByStorageClip######## con2 : " + con2);
			//logger.debug("######selectAddTaskForXmlByStorageClip######## con3 : " + con3);


			stmt = con.prepareStatement(query);
			//stmt2 = LoggableStatement.getInstance(con2, query2);	
			stmt2 = con2.prepareStatement(query2);
			stmt3 = con3.prepareStatement(query3);
			//stmt3 = LoggableStatement.getInstance(con3, query3);	
			String str = null;		
			rs = stmt.executeQuery();

			List resultList  = new ArrayList();
			List resultList2  = new ArrayList();
			List resultList3  = new ArrayList();
			TransferDO item = new TransferDO();
			PdsDownDO item2 = new PdsDownDO();
			IfCmsArchiveDO item3 = new IfCmsArchiveDO();

			String fileName = "";
			while(rs.next())
			{
				item.setRename(rs.getString("RENAME"));
				item.setMedia_id(rs.getString("MEDIA_ID"));
				item.setFile_path(rs.getString("FILE_PATH"));
				item.setCategory(rs.getString("CATEGORY"));
				item.setStoragename(rs.getString("storagename"));
				item.setTitle(rs.getString("TITLE"));
				item.setPgm_nm(rs.getString("pgm_nm"));
				item.setCart_no(rs.getInt("CART_NO"));
				item.setCart_seq(rs.getInt("CART_SEQ"));
				item.setUser_id(rs.getString("req_usrid"));
				item.setOrg_file_nm(rs.getString("FILENAME"));
				item.setStrg_loc(rs.getString("strg_loc"));
				item.setDown_gubun(rs.getString("down_gubun"));
				item.setSom(rs.getString("som"));
				item.setEom(rs.getString("eom"));
				item.setWrk_fl_nm(rs.getString("wrk_FILENAME"));
				item.setDown_typ(rs.getString("down_typ"));
				item.setTarget_cms_id(rs.getString("target_cms_id"));
				item.setVd_qlty(rs.getString("vd_qlty"));
				item.setFile_path(rs.getString("PATH"));
				item.setCti_id(rs.getLong("CTI_ID"));
				item.setReg_dt(rs.getString("reg_dt"));
				if(!item.getOrg_file_nm().equals("")){
					item.setWrk_fl_nm(item.getOrg_file_nm());
				}
				fileName = item.getCart_no()+"_"+item.getMedia_id()+"_"+item.getReg_dt();
				item.setFl_nm(fileName);
				resultList.add(item);

			}
			rs = stmt2.executeQuery();
			while(rs.next()){				
				item2.setUser_id(rs.getString("req_usrid"));				
				item2.setMedia_id(rs.getString("MEDIA_ID"));
				item2.setFl_path(rs.getString("FILE_PATH"));
				item2.setCategory(rs.getString("CATEGORY"));
				item2.setStoragename(rs.getString("storagename"));
				item2.setTitle(rs.getString("TITLE"));
				item2.setPgm_nm(rs.getString("PROGRAM_NAME"));
				item2.setCart_no(rs.getInt("CART_NO"));
				item2.setCart_seq(rs.getInt("CART_SEQ"));
				//item2.setFilename(rs.getString("FILENAME"));
				item2.setFilename(fileName);
				item2.setPds_program_id(rs.getString("PDS_CMS_PGM_ID").trim());
				item2.setEpis_no(rs.getLong("EPIS_NO"));
				item2.setProducer_nm(rs.getString("PRODUCER_NM"));
				item2.setCmr_place(rs.getString("CMR_PLACE"));
				item2.setFm_dt(rs.getString("FM_DT"));
				item2.setCprt_nm(rs.getString("CPRTR_NM"));
				item2.setCprt_cd(rs.getString("CPRT_TYPE"));
				item2.setRist_clf_cd(rs.getString("RIST_CLF_CD"));
				String view = xmlutil.changViewGrade2(rs.getString("VIEW_GR_CD"));
				item2.setDeliberation_cd(view);
				item2.setBrd_dd(rs.getString("BRD_LENG"));
				item2.setBrd_bgn_hms(rs.getString("BRD_BGN_HMS").trim());
				item2.setBrd_end_hms(rs.getString("BRD_END_HMS").trim());
				item2.setBrd_dd(rs.getString("BRD_DD"));
				item2.setVd_hresol(rs.getString("VD_HRESOL"));
				item2.setVd_vresol(rs.getString("VD_VRESOL"));
				item2.setFilesize(rs.getLong("FL_SZ"));
				item2.setBit_rt(rs.getString("BIT_RT"));
				item2.setAud_samp_frq(rs.getString("AUD_SAMP_FRQ"));
				item2.setAud_bdwt(rs.getString("AUDIO_BDWT"));
				String recode_Cd = rs.getString("RECORD_TYPE_CD");
				if(recode_Cd.equals("001")){
					str="M";
				}else if(recode_Cd.equals("002")){
					str="S";
				}else if(recode_Cd.equals("003")){
					str="F";
				}else if(recode_Cd.equals("004")){
					str="B";
				}else if(recode_Cd.equals("005")){
					str="V";
				}else if(recode_Cd.equals("006")){
					str="O";
				}
				item2.setRecord_type_cd(str);
				item2.setFrm_per_sec(rs.getString("FRM_PER_SEC"));
				item2.setHdmode(rs.getString("VD_QLTY"));
				item2.setCt_cla(rs.getString("CT_CLA"));
				item2.setCt_leng(rs.getString("CT_LENG"));
				item2.setAsp_rto_cd(rs.getString("ASP_RTO_CD"));
				item2.setCt_typ(rs.getString("CT_TYP"));
				item2.setSom(rs.getString("SOM"));
				item2.setEom(rs.getString("EOM"));
				item2.setDown_gubun(rs.getString("DOWN_GUBUN"));
				item2.setRename(rs.getString("RENAME"));
				item2.setCart_no(rs.getInt("cart_no"));
				item2.setLogical_tree(rs.getString("logical_tree"));
				item2.setPhysical_tree(rs.getString("phyical_tree"));
				item2.setWrkfilename(rs.getString("wrk_filename"));
				/*	if(item2.getFilename().equals("")){
						item2.setFilename(item2.getWrkfilename());
					}*/
				item2.setFilename(fileName);
				resultList2.add(item2);	
				//logger.debug(item2);
			}		




			//다운로드 구분이 007이면 if cms용 xml을 생성하기위한 작업을 시작한다.
			if(item2.getDown_gubun().equals("007")){
				rs = stmt3.executeQuery();
				while(rs.next())
				{
					item3.setView_gr_cd(rs.getString("VIEW_GR_CD"));
					item3.setPhyical_tree(rs.getString("PHYICAL_TREE"));
					item3.setStorage_nm(rs.getString("storagename"));
					item3.setCart_no(rs.getLong("cart_no"));
					item3.setGroup_id(rs.getLong("master_id"));
					item3.setChannel_cd(rs.getString("contents_channel"));
					item3.setTitle(rs.getString("title"));
					item3.setSub_ttl(rs.getString("title_sub"));
					item3.setProgram_id(rs.getString("program_id"));
					item3.setProgram_name(rs.getString("program_name"));
					item3.setCorner_title(rs.getString("corner_title"));
					item3.setCorner_contents(rs.getString("corner_contents"));
					item3.setEpisode_no(String.valueOf(rs.getLong("program_sequence")));
					item3.setCreator(rs.getString("creator"));
					item3.setCreator_sub(rs.getString("creator_sub"));
					item3.setPublisher(rs.getString("publisher"));
					item3.setPublisher_external(rs.getString("publisher_external"));
					item3.setCtgr_l_cd(rs.getString("genre_l"));
					item3.setCtgr_m_cd(rs.getString("genre_m"));
					item3.setCtgr_s_cd(rs.getString("genre_s"));
					item3.setBrd_dd(rs.getString("datetime_onair"));
					item3.setFm_dt(rs.getString("datetime_shooting"));
					item3.setLocation_shooting(rs.getString("location_shooting"));
					item3.setKeyword(rs.getString("keyword"));
					item3.setCopyright_desc(rs.getString("copyright_desc"));
					item3.setCopyright_owner(rs.getString("copyright_owner"));
					item3.setCopyright_type(rs.getString("copyright_type"));
					item3.setProduction_type(rs.getString("production_type"));
					item3.setLimited_use(rs.getString("usegrade"));
					item3.setLimited_use_cont(rs.getString("usegrade_desc"));
					item3.setName_host(rs.getString("name_host"));
					item3.setName_guest(rs.getString("name_guest"));
					item3.setArtist(rs.getString("artist"));
					item3.setCountry(rs.getString("country"));
					item3.setMusic_info(rs.getString("music_info"));
					item3.setMedia_id(rs.getString("media_id"));
					item3.setResolution(rs.getString("resolution"));
					item3.setAspectratio(rs.getString("aspectratio"));
					CommonUtl commonUtl = new CommonUtl();
					String timecode=commonUtl.sendTimecode(Long.parseLong(rs.getString("duration")));
					item3.setBrd_leng(timecode);
					item3.setAudio_type(rs.getString("audio_type"));
					item3.setDatatime_request(rs.getString("datetime_regist"));
					item3.setContents_type(rs.getString("contents_type"));
					//item3.setFile_name(rs.getString("file_name"));
					item3.setFile_name(fileName);
					item3.setSom(rs.getString("som"));
					item3.setEom(rs.getString("eom"));
					item3.setVd_hresol(rs.getString("vd_hresol"));
					item3.setVd_vresol(rs.getString("vd_vresol"));
					item3.setFile_size(rs.getString("file_size"));
					item3.setBit_rt(rs.getString("bit_rate"));
					item3.setAud_samp_frq(rs.getString("aud_samp_frq"));
					item3.setAud_bandwidth(rs.getString("aud_bandwidth"));
					item3.setFrm_per_sec(rs.getString("frame_per_second"));
					item3.setContents_class(rs.getString("contents_class"));
					item3.setBroadcast_event_type(rs.getString("broadcast_event_type"));
					item3.setBgn_time_onair(rs.getString("bgn_time_onair"));
					item3.setEnd_time_onair(rs.getString("end_time_onair"));
					item3.setWorker_id(rs.getString("worker_id"));
					item3.setDownload_comment(rs.getString("download_comment"));
					item3.setCallback_url(rs.getString("url"));
					item3.setComplete_dt(rs.getString("reg_Dt"));
					item3.setCti_idForHigh(rs.getLong("cti_id"));
					if(rs.getString("TRANSACTION_ID").equals("")){
						item3.setTransaction_id(0);

					}else{
						item3.setTransaction_id(Long.parseLong(rs.getString("TRANSACTION_ID")));

					}

					item3.setSpecial_info(rs.getString("special_info"));
					item3.setRefile_nm(rs.getString("rename"));
					item3.setCreator_sub(rs.getString("creator_sub"));
					item3.setCopyright_type(rs.getString("copyright_type"));
					item3.setCopyright_owner(rs.getString("copyright_owner"));
					item3.setCopyright_desc(rs.getString("copyright_desc"));
					item3.setDownload_comment(rs.getString("req_cont"));

					resultList3.add(item3);
				}
			}



			//다운 구분이 PDS라면 pds파일을 떨군다
			if(item2.getDown_gubun().equals("001")){

				try {
					List _infoList2 =  resultList2;
					if (_infoList2 != null && _infoList2.size() > 0) {
						Iterator _iter2 = _infoList2.iterator();
						while (_iter2.hasNext()) {
							String _xml = "";
							PdsDownDOXML _do = new PdsDownDOXML();
							_do.setDO(_iter2.next());
							_xml = _xml +"<?xml version=\"1.0\" encoding=\"utf-8\"?>";
							_xml = _xml + _do.getSubXMLForStorage();

							if (logger.isDebugEnabled())
								logger.debug("_xml : " + _xml);
							createXmlDownForStorage(item2, _xml);
						}

					}
				} catch (DASException e) {
					logger.error(e);
				}

			}
			//다운 구분이 NDS라면 pds파일을 떨군다
			if(item2.getDown_gubun().equals("002")){

				try {
					List _infoList2 =  resultList2;
					if (_infoList2 != null && _infoList2.size() > 0) {
						Iterator _iter2 = _infoList2.iterator();
						while (_iter2.hasNext()) {
							String _xml = "";
							PdsDownDOXML _do = new PdsDownDOXML();
							_do.setDO(_iter2.next());
							_xml = _xml +"<?xml version=\"1.0\" encoding=\"utf-8\"?>";
							_xml = _xml + _do.getSubXML2ForStorage();

							if (logger.isDebugEnabled())
								logger.debug("_xml" + _xml);
							createXmlDownForStorage(item2, _xml);
						}

					}
				} catch (DASException e) {
					// TODO: handle exception
					logger.error(e);
				}

			}



			//다운 구분이 ifcms 라면 xml파일을 떨군다
			if(item2.getDown_gubun().equals("007")){

				try {
					List _infoList3 =  resultList3;
					if (_infoList3 != null && _infoList3.size() > 0) {
						Iterator _iter2 = _infoList3.iterator();
						while (_iter2.hasNext()) {
							String _xml = "";
							IfCmsArchiveDOXML _do = new IfCmsArchiveDOXML();
							_do.setDO(_iter2.next());
							_xml = _xml +"<?xml version=\"1.0\" encoding=\"utf-8\"?>";
							_xml = _xml + _do.getSubXMLForStorage();

							if (logger.isDebugEnabled())
								logger.debug("_xml" + _xml);
							createXmlDownForStorage(item2, _xml);
						}

					}
				} catch (DASException e) {
					// TODO: handle exception
					logger.error(e);
				}

			}



			//다운 구분이 계열사라면  !!!
			if(item2.getDown_gubun().equals("005")){

				List _infoList =  resultList;
				if (_infoList != null && _infoList.size() > 0) {
					Iterator _iter = _infoList.iterator();
					while (_iter.hasNext()) {
						String _xml = "";
						TransferDOXML _do = new TransferDOXML();
						_do.setDO(_iter.next());
						_xml = _xml +"<?xml version=\"1.0\" encoding=\"utf-8\"?>";
						_xml = _xml + _do.getSubXML2();

						if (logger.isDebugEnabled())
							logger.debug("_xml" + _xml);

						return _xml;
					}
				}
			}else{
				//transfe job xml을 한다.
				List _infoList =  resultList;
				if (_infoList != null && _infoList.size() > 0) {
					Iterator _iter = _infoList.iterator();
					while (_iter.hasNext()) {
						String _xml = "";
						TransferByStorageDOXML _do = new TransferByStorageDOXML();
						_do.setDO(_iter.next());
						_xml = _xml +"<?xml version=\"1.0\" encoding=\"utf-8\"?>";
						_xml = _xml + _do.getSubXML3();

						if (logger.isDebugEnabled())
							logger.debug("_xml" + _xml);

						return _xml;
					}
				}

			}



		} 


		catch (Exception e) 
		{
			logger.error(query);
			logger.error(query2);
			logger.error(query3);

			throw e;
		}
		finally
		{
			release(rs, stmt, con);
			release(rs, stmt2, con2);
			release(rs, stmt3, con3);
		}
		return null;
	}



	/**
	 * down_addtask_tbl 정보를 삽입한다.
	 * @param cartContDO 정보를 가지고잇는 beans
	 * @return updatecount
	 * @throws Exception 
	 */
	public int insertDownAddTask(CartContDO cartContDO)throws Exception{

		Connection con = null;
		PreparedStatement stmt = null;
		StringBuffer buf=new StringBuffer();
		try {

			con=DBService.getInstance().getConnection();
			//logger.debug("######insertDownAddTask######## con : " + con);
			buf.append("\n insert into DAS.DOWN_ADDTASK_TBL ( ");
			buf.append("\n FL_PATH ");
			buf.append("\n ,CART_NO ");
			buf.append("\n  ,CART_SEQ ");
			buf.append("\n ,MEDIA_ID ");
			buf.append("\n ,FILE_NM ");
			buf.append("\n ,CATEGORY ");
			buf.append("\n ,PROGRAM_NM ");
			buf.append("\n ,PROGRAM_TITLE ");
			buf.append("\n ,STORAGE_NAME ");
			buf.append("\n ) VALUES ( ");
			buf.append("\n  ?, ?, ?, ?, ? ");
			buf.append("\n  ?, ?, ?, ? ) ");
			stmt=con.prepareStatement(buf.toString());
			int index=0;

			stmt.setString(++index	, cartContDO.getFl_path());
			stmt.setLong(++index    , cartContDO.getCartNo());
			stmt.setInt(++index	, cartContDO.getCartSeq());
			stmt.setString(++index    , cartContDO.getMedia_id());
			stmt.setString(++index   ,"");
			stmt.setString(++index    , "");
			stmt.setString(++index	, "");
			stmt.setString(++index    , "");
			stmt.setString(++index    , "");
			int iTmp = stmt.executeUpdate();

			return iTmp;
		}
		catch (Exception e) 
		{
			logger.error(buf.toString());
			if(con != null)
			{
				try {
					con.rollback();					
				} catch (SQLException e1) {
					// TODO 자동 생성된 catch 블록
					logger.error(e1);
				}
			}


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}
	}



	//down_addtask_tbl 정보를 추가로 업뎃한다.
	/**
	 * down_addtask_tbl 정보를 추가로 업뎃한다.
	 * @throws Exception 
	 */
	public int updateDownAddTask(DownCartDO downCartDO) throws Exception
	{
		StringBuffer buf = new StringBuffer();				
		PreparedStatement stmt = null;
		Connection con = null;		

		buf.append("\n update DAS.DOWN_ADDTASK_TBL set ");
		buf.append("\n 	FILE_NM=?,");
		buf.append("\n 	CATEGORY=?, ");
		buf.append("\n 	PROGRAM_NM=?, ");
		buf.append("\n 	PROGRAM_TITLE=?,");
		buf.append("\n 	STORAGE_NAME=? ");
		buf.append("\n where cart_no = ? ");

		try 
		{
			con = DBService.getInstance().getConnection();
			//	logger.debug("######updateDownAddTask######## con : " + con);
			stmt = con.prepareStatement(buf.toString());
			String dateTime = CalendarUtil.getDateTime("yyyyMMddHHmmss");
			int index = 0;
			int updateCount =0; 
			stmt.setString(++index, downCartDO.getFile_nm());
			stmt.setString(++index, downCartDO.getCategory());
			stmt.setString(++index, downCartDO.getTitle());
			stmt.setString(++index, downCartDO.getTitle());
			stmt.setString(++index, downCartDO.getStoragename());
			stmt.setLong(++index,   downCartDO.getCartNo());

			updateCount =stmt.executeUpdate();

			return updateCount;
		}
		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}

	/**
	 * 프로그램이름을 포함하는 프로그램 정보을 모두 가져온다 beans로 파싱
	 * @param pgmNm    프로그램 이름 검색어
	 * @return List		ProgramInfoDO 리스트
	 * @throws Exception 
	 */
	public List selectPgmInfoFromName(String pgmNm) throws Exception
	{

		String query = ExternalStatement.selectPgmInfoFromNameQuery(pgmNm);

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######selectPgmInfoFromName######## con : " + con);
			stmt = con.prepareStatement(query);

			String str = null;		
			rs = stmt.executeQuery();
			List resultList  = new ArrayList();

			while(rs.next())
			{
				ProgramInfoDO item = new ProgramInfoDO();

				item.setPgmId(  rs.getLong("PGM_ID"));
				item.setPgmCd(  rs.getString("PGM_CD"));
				item.setMasterId(  rs.getLong("master_id"));
				item.setBrdBgnDd( rs.getString("BRD_BGN_DD"));
				item.setBrdEndDd( rs.getString("BRD_END_DD"));
				item.setCtgrLCd( rs.getString("CTGR_L_CD"));
				item.setCtgrMCd( rs.getString("CTGR_M_CD"));
				item.setCtgrSCd( rs.getString("CTGR_S_CD"));
				item.setMediaCd( rs.getString("MEDIA_CD"));
				item.setChanCd( rs.getString("CHAN_CD"));
				item.setPrd_Dept_Nm(rs.getString("PRD_DEPT_NM"));
				item.setSchd_Pgm_Nm(rs.getString("SCHD_PGM_NM"));
				item.setAward_Hstr(rs.getString("AWARD_HSTR"));
				item.setSub_ttl(rs.getString("SUB_TTL"));
				str = rs.getString("PGM_NM");
				str = StringUtils.replace(str, "<", " ");
				str = StringUtils.replace(str, ">", " ");
				item.setPgmNm(str);
				resultList.add(item);
			}		

			return resultList;

		} 
		catch (Exception e) 
		{
			logger.error(query);

			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}





	/**
	 * PDS DOWN
	 * @param commonDO
	 * @return
	 * @throws Exception 
	 * @throws RemoteException
	 */
	public List getArchveList(long cti_id) throws Exception
	{

		StringBuffer buf = new StringBuffer();

		buf.append(ExternalStatement.selectPDSList());

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######getArchveList######## con : " + con);

			stmt = con.prepareStatement(buf.toString());


			int index = 0;

			//stmt.setLong(++index,long cti_id);

			rs = stmt.executeQuery();

			int indexCount = 0;
			List resultList = new ArrayList();

			while(rs.next())
			{
				PdsDownDO item = new PdsDownDO();

				item.setProgram_id(				rs.getString("pgm_id"));
				item.setProgram_title(				rs.getString("title"));
				item.setProgram_sequence_number(rs.getString("epis_no"));
				item.setProgram_subtitle(rs.getString("sub_ttl"));
				item.setClip_name(rs.getString("cti_id"));
				item.setBroadcast_event_kind(rs.getString("ctgr_m_cd"));
				item.setCart_no(rs.getInt("cart_no"));
				item.setCart_seq(				rs.getInt("cart_seq"));
				item.setMedia_id(				rs.getString("MEDIA_ID"));
				item.setDown_nm(rs.getString("DOWN_SUBJ"));
				item.setDown_path(rs.getString("path"));
				item.setNode_id("");
				resultList.add(item);
			}



			return resultList;
		} 
		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}






	/**
	 * 사진 메타정보를 수정한다.
	 * @param PhotoInfoDO  수정할 정보를 가지고있는 beans
	 * @return Update count
	 * @throws Exception 
	 */
	public int updatePhotInfo(PhotoInfoDO photoInfoDO) throws Exception
	{
		String query = ExternalStatement.updatePhotInfoQuery();

		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updatePhotInfo######## con : " + con);
			stmt = con.prepareStatement(query);

			int index = 0;
			stmt.setString(++index, photoInfoDO.getCont());
			//stmt.setString(++index, photoInfoDO.getFl_sz());
			stmt.setString(++index, photoInfoDO.getResoultion());
			stmt.setString(++index, photoInfoDO.getCprtr_nm());
			stmt.setString(++index, photoInfoDO.getDown_yn());			
			stmt.setLong(++index, photoInfoDO.getPhotRegId());


			int updateCount = stmt.executeUpdate();

			return updateCount;
		}
		catch (Exception e) 
		{
			logger.error(query);


			throw e;
		}
		finally
		{
			//try { 	if (stmt != null)  stmt.close();	} catch (SQLException e) {}
			release(null, stmt, con);
		}

	}





	/**
	 * archive 요청job  등록
	 * @param xml
	 * @return updaetcount
	 * @throws Exception 
	 * @throws RemoteException
	 */
	public int insertArchiveReq(String xml)throws Exception{


		Connection con = null;
		PreparedStatement stmt = null;
		StringBuffer buf=new StringBuffer();
		try {
			con=DBService.getInstance().getConnection();
			//logger.debug("######insertArchiveReq######## con : " + con);
			buf.append("\n insert into DAS.ARCHIVE_JOB_TBL ( ");
			buf.append("\n SEQ ");
			buf.append("\n ,XML_CONT ");
			buf.append("\n ,JOB_ALOCATE ");
			buf.append("\n ,reg_dt ");
			buf.append("\n ) VALUES ( ");
			buf.append("\n  ?, ? ,?,?)");

			stmt=con.prepareStatement(buf.toString());
			int index=0;
			int iTmp=0;
			String dateTime = CalendarUtil.getDateTime("yyyyMMddHHmmss");

			long seq =  selectArchveSeq();
			stmt.setLong(++index    , seq);
			stmt.setString(++index    , xml);
			stmt.setString(++index    , "N");
			stmt.setString(++index    , dateTime);
			iTmp = stmt.executeUpdate();

			return iTmp;

		}
		catch (Exception e) 
		{
			logger.error(buf.toString());
			if(con != null)
			{
				try {
					con.rollback();					
				} catch (SQLException e1) {
					// TODO 자동 생성된 catch 블록
					logger.error(e1);
				}
			}


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}
	}





	/**
	 * 해당 ARCHIVE Seq를 확인하여 해당 WorkStat 값을 확인한다.
	 * @return
	 * @throws DASException
	 */
	public ArchiveReqDO selectArchiveState(ArchiveReqDO archiveReqDO) throws DASException{

		StringBuffer buf = new StringBuffer();
		Connection con = null;		
		PreparedStatement psmt = null;		
		ResultSet rs = null;

		buf.append(" select                   ");
		buf.append("      SEQ, Archive_ID,Archive_NM,Archive_SEQ,WORK_STAT                              ");
		buf.append(" 	 from das.ARCHIVE_STATE_tbl A where A.SEQ = ?                  ");

		try {
			con = DBService.getInstance().getConnection();
			//logger.debug("######selectArchiveState######## con : " + con);
			//con.setAutoCommit(false);
			// psmt = con.prepareStatement(buf.toString());    
			psmt = con.prepareStatement(buf.toString());
			int index = 0;			
			psmt.setLong(++index, archiveReqDO.getSEQ());
			rs = psmt.executeQuery();	
			ArchiveReqDO item = new ArchiveReqDO();
			if(rs.next())
			{
				item.setSEQ(     	rs.getLong("SEQ"));
				item.setArchive_id(      rs.getString("Archive_ID"));
				item.setArchive_nm(rs.getString("Archive_NM"));
				item.setArchive_seq(rs.getString("Archive_SEQ"));
				item.setWork_stat(rs.getString("WORK_STAT"));
			}

			//con.setAutoCommit(true);
			return item;
		}
		catch (Exception ex)
		{
			logger.error(buf.toString());

			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "selectTcJon 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, con);
		}

	}




	/**
	 * work_stat의 상태가 F일때는 실패로 등록한다
	 * @param archiveReqDO
	 * @return
	 * @throws Exception 
	 * @throws RemoteException
	 */
	public boolean updateErrArchivejob(ArchiveReqDO archiveReqDO) throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.ARCHIVE_job_tbl set ");
		buf.append("\n 	JOB_ALOCATE = 'F' ");
		buf.append("\n where SEQ = ? ");

		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateErrArchivejob######## con : " + con);
			//stmt = con.prepareStatement(buf.toString());
			stmt = con.prepareStatement(buf.toString());
			int index = 0;
			//stmt.setString(++index, tcBeanDO.getWork_stat()+"");
			stmt.setLong(++index, archiveReqDO.getSEQ());

			int updateCount = stmt.executeUpdate();

			if(updateCount>0)return true;
			return false;
		}
		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}





	/**
	 * Archive on-ari에게 작업을 배정하는 메소드 
	 * @param tcJobBeanDO JOB 을 가지고 오는 빈
	 * @param stateBeanDO TC를 가지고 오는 빈
	 * @param tc_inter_path
	 * @throws Exception 
	 */
	public void getArchveJob(ArchiveReqDO tcJobBeanDO,ArchiveReqDO stateBeanDO,String tc_inter_path)throws Exception{

		try {

			ArchiveReqDOXML _doXML = new ArchiveReqDOXML();
			ArchiveReqDO _do = (ArchiveReqDO)_doXML.setDO(tcJobBeanDO);

			/**
			 * 해당 디렉토리에 XML 파일을 전송,저장한다.
			 */
			jutil fo = new jutil();
			logger.debug("_do.getXml_cont()  :  "+_do.getXml_cont());
			fo.makeFile(_do.getXml_cont(), "/"+tc_inter_path+stateBeanDO.getArchive_seq()+"/"+tcJobBeanDO.getSEQ());



		} catch (Exception e) {

			logger.error(tc_inter_path);


			throw e;
		}

	}


	/**
	 * Archive 잡상태 변화
	 * @param tcBeanDO
	 * @return
	 * @throws Exception 
	 * @throws RemoteException
	 */
	public int updateArchiveJobState(Long seq) throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.Archive_job_tbl set ");
		buf.append("\n 	job_alocate = 'Y' ");
		buf.append("\n where seq = ? and job_alocate='N'");

		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateArchiveJobState######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setLong(++index, seq);


			int updateCount = stmt.executeUpdate();

			return updateCount;
		}

		catch (Exception e) 
		{
			logger.error(buf.toString());

			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}




	/**
	 * BackEnd TC 의 ID 값을 확인하여 'Busy' 값을 부여.
	 * @param ct_id
	 * @return
	 * @throws Exception 
	 */
	public int updateArchiveState(String SEQ) throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.Archive_state_tbl set ");
		buf.append("\n 	WORK_STAT = 'B' ");
		buf.append("\n where SEQ = ? ");

		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateArchiveState######## con : " + con);
			//stmt = con.prepareStatement(buf.toString());
			stmt = con.prepareStatement(buf.toString());
			int index = 0;
			stmt.setString(++index, SEQ);

			int updateCount = stmt.executeUpdate();

			return updateCount;
		}
		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}


	/**
	 * on-air 인제스트의 장비 상태값을 업데이트
	 * @param ct_id
	 * @return
	 * @throws Exception 
	 */
	public int updateOnAirIngestStatus(String SEQ) throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.das_equipment_tbl set ");
		buf.append("\n 	job_status='I'");
		buf.append("\n 	,MOD_DT= ? ");
		buf.append("\n where DAS_EQ_CLF_CD= 'E05' AND DAS_EQ_ID = ? ");

		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateArchiveState######## con : " + con);
			//stmt = con.prepareStatement(buf.toString());
			stmt = con.prepareStatement(buf.toString());
			int index = 0;
			String dateTime = CalendarUtil.getDateTime("yyyyMMddHHmmss");

			stmt.setString(++index, dateTime);

			if(SEQ.equals("1")){
				stmt.setInt(++index, 13);
			}else{
				stmt.setInt(++index, 14); 
			}
			int updateCount = stmt.executeUpdate();

			return updateCount;
		}
		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}

	/**
	 * job 할당된곳에 xml을 만들어주기위한 조회를 시행한다
	 * @return ArchiveReqDO
	 * @throws RemoteException
	 */
	public ArchiveReqDO selectArchiveJob() throws DASException{

		StringBuffer buf = new StringBuffer();
		Connection con = null;		
		PreparedStatement psmt = null;		
		ResultSet rs = null;


		/**
		 * Job을 MIN 으로 처리순서를 잡고 조회를 한건 한다. 
		 */
		buf.append(" select										                   ");
		buf.append("       SEQ, XML_CONT, JOB_ALOCATE                         ");

		buf.append(" from das.ARCHIVE_job_tbl A                     ");
		buf.append("  where      seq = (select min(seq) from das.ARCHIVE_job_tbl where job_alocate='N')  ");


		try {
			con = DBService.getInstance().getConnection();
			psmt = con.prepareStatement(buf.toString());
			int index = 0;			
			rs = psmt.executeQuery();	
			if(rs.next())
			{
				ArchiveReqDO item = new ArchiveReqDO();
				item.setSEQ(     	rs.getLong("SEQ"));
				item.setXml_cont(   rs.getString("XML_CONT"));
				item.setJob_alocate(     rs.getString("JOB_ALOCATE"));

				/**
				 * allocate 값을 'Y'로 수정하는 것을 추가 ExternalDAO
				 */
				int result = updateArchiveJobState(item.getSEQ());



				if(result!=0){
					return item;
				}else{
					return null;
				}


			}
		}
		catch (Exception ex)
		{
			ex.printStackTrace();

			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "selectTcJon 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			//    	con.setAutoCommit(true);
			release(rs, psmt, con);
		}
		return null;

	}



	/**
	 * 아카이브 잡 분배가 이루어 지는 부분
	 * @param archiveReqDO
	 * @return
	 * @throws RemoteException
	 */
	public ArchiveReqDO selectArchiveAllocationState(ArchiveReqDO archiveReqDO) throws DASException{

		StringBuffer buf = new StringBuffer();
		Connection con = null;		
		PreparedStatement psmt = null;		
		ResultSet rs = null;


		/**
		 * Min 분배가 이루어 지는 구조 . 
		 */
		buf.append(" select ");
		buf.append("     SEQ, Archive_ID,Archive_NM,Archive_SEQ,WORK_STAT                              ");
		buf.append(" from das.Archive_STATE_tbl A                 ");
		buf.append(" where A.seq = (select min(B.seq) from DAS.Archive_STATE_TBL B where B.WORK_STAT = 'I' )  ");

		try {
			con = DBService.getInstance().getConnection();
			//logger.debug("######selectArchiveAllocationState######## con : " + con);
			//con.setAutoCommit(false);
			psmt = con.prepareStatement(buf.toString());    
			int index = 0;			
			long seq =Long.parseLong(getNextSquence(con, DASBusinessConstants.SequenceName.TC_STATE));
			logger.debug("[DASBusinessConstants.SequenceName.Archive_STATE]"+seq);
			//		psmt.setLong(++index,seq);  // rownum 분배가 이루어 지는 Sequence
			rs = psmt.executeQuery();	
			if(rs.next())
			{
				ArchiveReqDO item = new ArchiveReqDO();
				item.setSEQ(     	rs.getLong("SEQ"));
				item.setArchive_id(      rs.getString("Archive_ID"));
				item.setArchive_nm(rs.getString("Archive_NM"));
				item.setArchive_seq(rs.getString("Archive_SEQ"));
				item.setWork_stat(rs.getString("WORK_STAT"));

				//con.setAutoCommit(true);


				/**
				 * TC_STATE 값을 'I' (IDLE)로 수정하는 것을 추가
				 */

				if(archiveReqDO.getWork_stat().equals("I")){
					updateArchive(archiveReqDO);
				}



				return item;
			}
			//con.setAutoCommit(true);
			return null;

		}
		catch (Exception ex)
		{
			logger.error(buf.toString());

			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "selectTcJon 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, con);
		}

	}




	/**
	 * Archive의 ID 값을 확인하여 'Busy' 값을 부여.
	 * @param ct_id
	 * @return
	 * @throws Exception 
	 */
	public int updateArchive(ArchiveReqDO archiveReqDO) throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.Archive_state_tbl set ");
		buf.append("\n 	WORK_STAT = ? ");
		buf.append("\n where SEQ = ? ");

		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateArchive######## con : " + con);
			//stmt = con.prepareStatement(buf.toString());
			stmt = con.prepareStatement(buf.toString());
			int index = 0;
			stmt.setString(++index, archiveReqDO.getWork_stat());
			stmt.setLong(++index, archiveReqDO.getSEQ());



			int updateCount = stmt.executeUpdate();

			return updateCount;
		}

		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}



	/**
	 * Archive의 ID 값을 확인하여 큐테이브에 정보를 남김
	 * @param ct_id
	 * @return
	 * @throws Exception 
	 */
	public int updateArchiveInfo(ArchiveReqDO archiveReqDO) throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.Archive_job_tbl set ");
		buf.append("\n 	eq_id = ? ");
		buf.append("\n where SEQ = ? ");

		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateArchiveInfo######## con : " + con);
			//stmt = con.prepareStatement(buf.toString());
			stmt = con.prepareStatement(buf.toString());
			int index = 0;
			if(archiveReqDO.getArchive_id().equals("1")){
				stmt.setString(++index, "13");
			}else if(archiveReqDO.getArchive_id().equals("2")){
				stmt.setString(++index, "14");
			}else{
				stmt.setString(++index, archiveReqDO.getArchive_id());
			}

			stmt.setLong(++index, archiveReqDO.getSEQ());

			int updateCount = stmt.executeUpdate();

			return updateCount;
		}
		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}



	/**
	 * 아카이브 결과값을 받아오는 함수
	 * @return ArchiveReqDO
	 * @throws RemoteException
	 */

	public ArchiveReqDO selectArchiveJob(ArchiveReqDO archiveReqDO) throws DASException{

		archiveReqDO.setResult("true");
		return archiveReqDO;

	}



	/**
	 * 해당 미디어 아이디로 콘텐츠 아이디를 가지고 온다.(PDS ARCHIVE기준)
	 * @param pdsArchiveDO
	 * @return
	 * @throws DASException
	 */
	public PdsArchiveDO selectCtiFromMediaidForPDS(PdsArchiveDO pdsArchiveDO) throws DASException{

		StringBuffer buf = new StringBuffer();
		Connection con = null;		
		PreparedStatement psmt = null;		
		ResultSet rs = null;

		buf.append(" SELECT CTI.CTI_ID as cti_id   ,tc.INPUT_HR as fl_path ,tc.input_hr_nm ,ct.media_id ,ct.reg_dt ,CT.VD_QLTY ,ct.ct_cla                 ");
		buf.append(" , MST.CTGR_L_CD                  ");
		buf.append("  FROM DAS.CONTENTS_TBL CT                  ");
		buf.append("     INNER JOIN DAS.CONTENTS_INST_TBL CTI ON CTI.CT_ID= CT.CT_ID AND CTI.CTI_FMT LIKE '10%'  ");
		buf.append("     INNER JOIN (SELECT CT_ID,MASTER_ID FROM DAS.CONTENTS_MAPP_TBL GROUP BY CT_ID,MASTER_ID) MAP ON MAP.CT_ID= CT.CT_ID   ");
		buf.append("     INNER JOIN DAS.METADAT_MST_TBL MST ON MST.MASTER_ID = MAP.MASTER_ID  ");

		buf.append("  inner join DAS.TC_JOB_TBL tc on tc.CT_ID=cti.CT_ID       ");
		buf.append(" WHERE CT.MEDIA_ID = ?        order by ct.reg_dt desc       ");
		buf.append(" fetch first 1 rows only        ");
		try {
			con = DBService.getInstance().getConnection();
			//logger.debug("######selectCtiFromMediaidForPDS######## con : " + con);
			//con.setAutoCommit(false);
			psmt = con.prepareStatement(buf.toString());    
			int index = 0;			
			psmt.setString(++index, pdsArchiveDO.getMedia_id());
			rs = psmt.executeQuery();	
			PdsArchiveDO item = new PdsArchiveDO();
			if(rs.next())
			{
				item.setCti_id(rs.getLong("cti_id"));
				item.setFl_path(rs.getString("fl_path"));
				item.setFl_nm(rs.getString("input_hr_nm"));
				item.setMedia_id(rs.getString("media_id"));
				item.setReq_dt(rs.getString("reg_dt"));
				item.setVd_qulty(rs.getString("VD_QLTY"));
				item.setCt_cla(rs.getString("ct_cla"));
				item.setCtgr_l_cd(rs.getString("CTGR_L_CD"));
			}
			//con.setAutoCommit(true);
			return item;   
		}
		catch (Exception ex)
		{
			logger.error(buf.toString());

			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "selectTcJon 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, con);
		}

	}

	/**
	 * 해당 영상 아이디로 콘텐츠 아이디를 가지고 온다.(PDS ARCHIVE기준)
	 * @param pdsArchiveDO
	 * @return
	 * @throws DASException
	 */
	public PdsArchiveDO selectCtiFromCtIdForPDS(long ct_id) throws DASException{

		StringBuffer buf = new StringBuffer();
		Connection con = null;		
		PreparedStatement psmt = null;		
		ResultSet rs = null;

		buf.append(" SELECT CTI.CTI_ID as cti_id   ,tc.INPUT_HR as fl_path ,tc.input_hr_nm ,ct.media_id ,ct.reg_dt,ct.vd_qlty,ct.ct_cla,mst.ctgr_l_cd FROM DAS.CONTENTS_TBL CT                  ");
		buf.append("     INNER JOIN DAS.CONTENTS_INST_TBL CTI ON CTI.CT_ID= CT.CT_ID AND CTI.CTI_FMT LIKE '10%'  ");
		buf.append("  inner join DAS.TC_JOB_TBL tc on tc.CT_ID=cti.CT_ID       ");
		buf.append("  inner join DAS.contents_mapp_tbl map on map.CT_ID=cti.CT_ID       ");
		buf.append("  inner join DAS.metadat_mst_Tbl mst on mst.master_id = map.master_id       ");
		buf.append(" WHERE  CTI.CT_ID = ?        order by ct.reg_dt desc       ");
		buf.append(" fetch first 1 rows only        ");
		try {
			con = DBService.getInstance().getConnection();
			//logger.debug("######selectCtiFromCtIdForPDS######## con : " + con);
			//con.setAutoCommit(false);
			psmt = con.prepareStatement(buf.toString());    
			int index = 0;			
			psmt.setLong(++index, ct_id);
			rs = psmt.executeQuery();	
			PdsArchiveDO item = new PdsArchiveDO();
			if(rs.next())
			{
				item.setCti_id(rs.getLong("cti_id"));
				item.setFl_path(rs.getString("fl_path"));
				item.setFl_nm(rs.getString("input_hr_nm"));
				item.setMedia_id(rs.getString("media_id"));
				item.setReq_dt(rs.getString("reg_dt"));
				item.setVd_qulty(rs.getString("vd_qlty"));
				item.setCt_cla(rs.getString("ct_cla"));
				item.setCtgr_l_cd(rs.getString("ctgr_l_cd"));
			}

			//con.setAutoCommit(true);
			return item;   
		}
		catch (Exception ex)
		{
			logger.error(buf.toString());

			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "selectTcJon 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, con);
		}

	}

	/**
	 * 해당 마스터 아이디로 콘텐츠 아이디를 가지고 온다.(복본기준)
	 * @param pdsArchiveDO
	 * @return
	 * @throws DASException
	 */
	public UseInfoDO selectCtiFromMasterForPDS(long master_id) throws DASException{

		StringBuffer buf = new StringBuffer();
		Connection con = null;		
		PreparedStatement psmt = null;		
		ResultSet rs = null;

		buf.append(" SELECT ct.ct_id , CTI.CTI_ID, CTI.REGRID ,cti.OUT_SYSTEM_ID FROM DAS.CONTENTS_TBL CT                 ");
		buf.append(" INNER JOIN DAS.CONTENTS_INST_TBL CTI ON CTI.CT_ID= CT.CT_ID AND CTI.CTI_FMT LIKE '10%'   ");

		buf.append("\n where ct.ct_id in (select map.ct_id from contents_mapp_tbl map inner join contents_tbl con on con.ct_id =map.ct_id and con.ct_typ='003' where map.master_id = ?  ) ");

		buf.append("        ");
		try {
			con = DBService.getInstance().getConnection();
			//logger.debug("######selectCtiFromMasterForPDS######## con : " + con);
			//con.setAutoCommit(false);
			psmt = con.prepareStatement(buf.toString());    
			int index = 0;			
			psmt.setLong(++index, master_id);
			rs = psmt.executeQuery();	
			UseInfoDO item = new UseInfoDO();
			String ct_id ="";
			String cti_id ="";
			String reg_id ="";
			String out_sys_id="";
			while(rs.next())
			{
				if(ct_id.equals("")){
					ct_id=String.valueOf(rs.getLong("ct_id"));
				}else{
					ct_id=ct_id +","+String.valueOf(rs.getLong("ct_id"));
				}


				if(cti_id.equals("")){
					cti_id=String.valueOf(rs.getLong("cti_id"));
				}else{
					cti_id=cti_id +","+String.valueOf(rs.getLong("cti_id"));
				}        	
				reg_id= rs.getString("REGRID");
				out_sys_id = rs.getString("OUT_SYSTEM_ID");
			}
			item.setCt_ids(ct_id);
			item.setCti_ids(cti_id);
			item.setReg_id(reg_id);
			item.setOut_sys_id(out_sys_id);


			//con.setAutoCommit(true);
			return item;   
		}
		catch (Exception ex)
		{
			logger.error(buf.toString());

			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "selectTcJon 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, con);
		}

	}

	/**
	 *  DAS-TM 이용 여부 판단.
	 * @param num
	 * @return
	 * @throws DASException
	 */
	public boolean getUsedDasTmYn(int num) throws DASException{

		StringBuffer buf = new StringBuffer();
		Connection con = null;		
		PreparedStatement psmt = null;		
		ResultSet rs = null;

		/**
		 * 다운로드 구분(001: PDS , 002:NDS , 003:데정팀 , 004:tape-out, 005:계열사 다운로드, 007:ifcms)
		 */
		buf.append("\n SELECT DCT.CART_NO																						");
		buf.append("\n FROM DAS.CONTENTS_DOWN_TBL CDT                               ");
		buf.append("\n 	INNER JOIN DAS.DOWN_CART_TBL DCT ON DCT.CART_NO=CDT.CART_NO ");
		buf.append("\n WHERE CDT.NUM = ?  AND DCT.DOWN_GUBUN IN ('001','002','005','007')  ");

		try {
			con = DBService.getInstance().getConnection();
			//logger.debug("######getUsedDasTmYn######## con : " + con);
			psmt = con.prepareStatement(buf.toString());    
			int index = 0;			
			psmt.setLong(++index, num);
			rs = psmt.executeQuery();	
			if(rs.next())
			{
				return true;
			}

			return false;
		}
		catch (Exception ex)
		{
			logger.error(buf.toString());

			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "selectTcJon 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, con);
		}
	}

	/**
	 *  다운로드 구분(001: PDS , 002:NDS , 003:데정팀 , 004:tape-out, 005:계열사 다운로드) 파악
	 * @param CartNo 카트번호
	 * @return boolean
	 * @throws DASException
	 */
	public boolean getUsedDasTmYnByCartNo(long CartNo) throws DASException{

		StringBuffer buf = new StringBuffer();
		Connection con = null;		
		PreparedStatement psmt = null;		
		ResultSet rs = null;

		/**
		 * 다운로드 구분(001: PDS , 002:NDS , 003:데정팀 , 004:tape-out, 005:계열사 다운로드)
		 * -20121113 모두 전송  하도록 변경
		 */
		buf.append("\n SELECT DCT.CART_NO																						");
		buf.append("\n 	FROM  DAS.DOWN_CART_TBL DCT ");
		//buf.append("\n WHERE DCT.CART_NO = ?  AND DCT.DOWN_GUBUN IN ('001','002','005','007')  ");
		buf.append("\n WHERE DCT.CART_NO = ?   ");

		try {
			con = DBService.getInstance().getConnection();
			//logger.debug("######getUsedDasTmYnByCartNo######## con : " + con);
			psmt = con.prepareStatement(buf.toString());    
			int index = 0;			
			psmt.setLong(++index, CartNo);
			rs = psmt.executeQuery();	
			if(rs.next())
			{
				return true;
			}

			return false;
		}
		catch (Exception ex)
		{
			logger.error(buf.toString());

			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "selectTcJon 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, con);
		}
	}


	/**
	 *  다운로드 구분(001: PDS , 002:NDS , 003:데정팀 , 004:tape-out, 005:계열사 다운로드) 파악 (재생성 다운로드를 제외한 모든 다운로드를 파악)
	 * @param CartNo 카트번호
	 * @return boolean
	 * @throws DASException
	 */
	public boolean getUsedDasTmYnByCartNoForAll(long CartNo) throws DASException{

		StringBuffer buf = new StringBuffer();
		Connection con = null;		
		PreparedStatement psmt = null;		
		ResultSet rs = null;

		/**
		 * 다운로드 구분(001: PDS , 002:NDS , 003:데정팀 , 004:tape-out, 005:계열사 다운로드)
		 */
		buf.append("\n SELECT DCT.CART_NO																						");
		buf.append("\n 	FROM  DAS.DOWN_CART_TBL DCT ");
		buf.append("\n WHERE DCT.CART_NO = ?  AND DCT.DOWN_GUBUN IN ('001','002','003','004','005','007')  ");

		try {
			con = DBService.getInstance().getConnection();
			//logger.debug("######getUsedDasTmYnByCartNoForAll######## con : " + con);
			psmt = con.prepareStatement(buf.toString());    
			int index = 0;			
			psmt.setLong(++index, CartNo);
			rs = psmt.executeQuery();	
			if(rs.next())
			{
				return true;
			}

			return false;
		}
		catch (Exception ex)
		{
			logger.error(buf.toString());

			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "selectTcJon 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, con);
		}
	}


	/**
	 *  카트번호 , seqence 를 얻어온다
	 * @param num
	 * @return
	 * @throws DASException
	 */
	public TransferDO getCartInfo(int num) throws DASException{

		StringBuffer buf = new StringBuffer();
		Connection con = null;		
		PreparedStatement psmt = null;		
		ResultSet rs = null;


		buf.append("\n SELECT cart_no, cart_seq																				");
		buf.append("\n FROM DAS.CONTENTS_DOWN_TBL                               ");

		buf.append("\n WHERE NUM = ?    ");

		try {
			con = DBService.getInstance().getConnection();
			//logger.debug("######getCartInfo######## con : " + con);
			psmt = con.prepareStatement(buf.toString());    
			int index = 0;			
			psmt.setLong(++index, num);
			rs = psmt.executeQuery();
			TransferDO item = new TransferDO();
			if(rs.next())
			{
				item.setCart_no(rs.getInt("CART_NO"));
				item.setCart_seq(rs.getInt("CART_seq"));
			}
			return item;

		}
		catch (Exception ex)
		{
			logger.error(buf.toString());

			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "selectTcJon 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, con);
		}
	}



	/**
	 * ERP 발령정보 최근 순번 GET
	 * @return
	 * @throws Exception 
	 */
	public String selectERPAppointMaxSeqQuery() throws Exception{


		StringBuffer buf = new StringBuffer();

		buf.append(UserRoleStatement.selectERPAppointMaxSeqQuery());

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######selectERPAppointMaxSeqQuery######## con : " + con);

			stmt = con.prepareStatement(buf.toString());


			int index = 0;

			rs = stmt.executeQuery();
			int indexCount = 0;

			while(rs.next())
			{
				return rs.getString(1);
			}

			return "0";
		} 
		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}



	/**
	 * cart seq의 갯수를 구한다
	 * 
	 * @param cart_no
	 * 
	 * @return int
	 * @throws Exception 
	 */

	public long getCountCartSeq(long cart_no) throws Exception {

		StringBuffer buf = new StringBuffer();
		buf.append("\n select count(*) as seq_count   from cart_cont_tbl where CART_NO="+cart_no+"  \n");
		buf.append("\n WITH UR	 ");

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
			con = DBService.getInstance().getConnection();
			//logger.debug("######getCountCartSeq######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			long count=0;
			rs = stmt.executeQuery();
			if(rs.next()){
				count =rs.getLong("seq_count");
			}
			return count;
		}  catch (Exception e) {
			logger.error(buf.toString());

			throw e;
		} finally {
			release(rs, stmt, con);
		}
	}


	/**
	 * cart seq를 구한다
	 * 
	 * @param cart_no
	 * 
	 * @return int
	 * @throws Exception 
	 */

	public String getCartSeq(long cart_no) throws Exception {

		StringBuffer buf = new StringBuffer();
		buf.append("\n select cart_seq   from cart_cont_tbl where CART_NO="+cart_no+"  \n");
		buf.append("\n WITH UR	 ");

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
			con = DBService.getInstance().getConnection();
			//logger.debug("######getCartSeq######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			String cartseq="";
			rs = stmt.executeQuery();
			while(rs.next()){
				if(cartseq.equals("")){
					cartseq=rs.getString("cart_seq");
				}else{
					cartseq =cartseq+","+rs.getString("cart_seq");
				}
			}
			return cartseq;
		} catch (Exception e) {
			logger.error(buf.toString());

			throw e;
		} finally {
			release(rs, stmt, con);
		}
	}
	/**
	 * 카트넘버와 순번을 받아서 해당 파일의 경로를 구한다
	 * @param cart_no
	 * @param cart_seq
	 * @throws Exception 
	 */

	public ContentsInfoDO getFl_path(long cart_no,long cart_seq) throws Exception {

		StringBuffer buf = new StringBuffer();
		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;

		buf.append("\n SELECT INST.FL_PATH,INST.WRK_FILE_NM,value(INST.ORG_FILE_NM,'') as ORG_FILE_NM ,INST.FL_SZ,CCT.DOWN_TYP            ");
		buf.append("\n ,inst.cti_id  ,DOWN.DOWN_GUBUN   ,cct.som , cct.eom      ");
		buf.append("\n FROM CART_CONT_TBL CCT                                                      ");
		buf.append("\n INNER JOIN DOWN_CART_TBL DOWN ON DOWN.CART_NO = CCT.CART_NO          ");
		buf.append("\n LEFT OUTER JOIN CONTENTS_INST_TBL INST ON INST.CTI_ID = CCT.CTI_ID          ");
		buf.append("\n WHERE CCT.CART_NO = ?   and CCT.CART_SEQ =  ?                               ");

		try {
			con = DBService.getInstance().getConnection();
			//logger.debug("######getFl_path######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setLong(++index, cart_no);
			stmt.setLong(++index, cart_seq);
			rs = stmt.executeQuery();

			ContentsInfoDO contentsInfoDO = new ContentsInfoDO();
			if(rs.next()){
				contentsInfoDO.setFl_path( rs.getString("FL_PATH"));
				contentsInfoDO.setWrk_file_nm( rs.getString("WRK_FILE_NM"));
				contentsInfoDO.setOrg_file_nm( rs.getString("ORG_FILE_NM"));
				contentsInfoDO.setDown_typ( rs.getString("DOWN_TYP"));
				contentsInfoDO.setCti_id( rs.getLong("cti_id"));
				contentsInfoDO.setDown_gubun(rs.getString("DOWN_GUBUN"));
				contentsInfoDO.setSom(rs.getString("som"));
				contentsInfoDO.setEom(rs.getString("eom"));
				//				contentsInfoDO.setFl_sz( rs.getString("FL_SZ"));
			}

			return contentsInfoDO;
		} catch (Exception e) {
			logger.error(buf.toString());

			throw e;
		} finally {
			release(rs, stmt, con);
		}
	}

	/**
	 * 다운로드 아웃소싱 여부
	 * @param user_id 사용자 아이디
	 * @return
	 * @throws Exception 
	 */
	public String getOutSourcing_yn(String user_id) throws Exception{

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		String str = null;		

		StringBuffer buf = new StringBuffer();
		buf.append("\n select * from USER_INFO_TBL ");
		buf.append("\n where ACCT_CODE like 'S%' and DEPT_CD ='D3JA01' AND SBS_USER_ID =? ");;

		try 
		{
			con = DBService.getInstance().getConnection();
			stmt = con.prepareStatement(buf.toString());
			stmt.setString(1, user_id);
			rs = stmt.executeQuery();
			if(rs.next())
			{
				return "Y";
			}		

			return "N";

		} 
		catch (Exception e) 
		{
			logger.error(buf.toString());

			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}



	/**
	 * 해당 id가 외주제작 소속인지 확인한다
	 * @param user_id 사용자id 
	 * @return String result
	 * @throws Exception 
	 * @throws RemoteException
	 */
	public String getOutSourcing_ynEmployee(String user_id) throws Exception{

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		String str = null;		

		StringBuffer buf = new StringBuffer();
		buf.append("\n select * from USER_INFO_TBL ");
		buf.append("\n where ACCT_CODE like 'R%' and (DEPT_CD ='D3JA01' OR DEPT_CD ='QABF01') AND SBS_USER_ID =? ");;

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######getOutSourcing_ynEmployee######## con : " + con);
			stmt = con.prepareStatement(buf.toString());
			stmt.setString(1, user_id);
			rs = stmt.executeQuery();
			if(rs.next())
			{
				return "Y";
			}		

			return "N";

		} 
		catch (Exception e) 
		{
			logger.error(buf.toString());

			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}




	private boolean isDownloadOutsourcing(long cartNo, long cartSeq) throws Exception
	{

		StringBuffer buf = new StringBuffer();
		buf.append("\n select ");
		buf.append("\n 	OUTSOURCING_YN ");
		buf.append("\n from DAS.cart_cont_tbl ");
		buf.append("\n where CART_NO = ? ");	
		buf.append("\n and CART_seq = ? ");	
		buf.append("\n WITH UR	 ");

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######isDownloadOutsourcing######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setLong(++index, cartNo);
			stmt.setLong(++index, cartSeq);
			rs = stmt.executeQuery();

			while(rs.next()){;
			if(rs.getString("OUTSOURCING_YN").equals(DASBusinessConstants.YesNo.NO))
			{
				return true;
			}
			else
			{
				return false;
			}
			}
			return false;
		} 
		catch (Exception e) 
		{
			logger.error(buf.toString());

			throw e;
		}
		finally
		{
			if (logger.isDebugEnabled()) 
			{
				logger.debug("[isDownloadRistrict Released : CartNo = " + cartNo + "]");
			}
			release(rs, stmt, con);
		}		

	}




	private CartContDO getIdForMasterId(long master_id) throws Exception
	{
		StringBuffer buf = new StringBuffer();
		buf.append("\n select distinct");
		buf.append("\n 	inst.ct_id, inst.cti_id ");
		buf.append("\n from das.contents_inst_tbl inst ");
		buf.append("\n inner join das.contents_mapp_tbl map on map.ct_id = inst.ct_id and inst.cti_fmt like '%10%'");
		buf.append("\n inner join das.CONTENTS_TBL CON on map.ct_id = CON.CT_ID and con.ct_typ ='003' ");

		buf.append("\n where map.master_id = ?	 ");

		buf.append("\n WITH UR	 ");

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######getIdForMasterId######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setLong(++index, master_id);


			rs = stmt.executeQuery();

			String groupcti_ids = "";
			String groupct_ids = "";
			CartContDO cart = new CartContDO();
			while(rs.next())
			{
				cart.setCtId(rs.getLong("ct_id"));
				cart.setCtiId(rs.getLong("cti_id"));
				if(groupcti_ids.equals("")){
					groupcti_ids =rs.getString("cti_id");
					groupct_ids =rs.getString("ct_id");
				}else{
					groupcti_ids =groupcti_ids +","+rs.getString("cti_id");
					groupct_ids =groupct_ids + "," +rs.getString("ct_id");
				}
			}		
			cart.setGroup_ct_ids(groupct_ids);
			cart.setGroup_cti_ids(groupcti_ids);
			return cart;
		} 
		catch (Exception e) 
		{
			logger.error(buf.toString());

			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}





	private CartContDO getIdForCtId(long ct_id) throws Exception
	{
		StringBuffer buf = new StringBuffer();
		buf.append("\n select ");
		buf.append("\n 	inst.cti_id ");
		buf.append("\n 	,map.master_id ");
		buf.append("\n from das.contents_inst_tbl inst ");
		buf.append("\n inner join (select master_id,ct_id from  das.contents_mapp_tbl group by master_id,ct_id) map on map.ct_id = inst.ct_id  ");
		buf.append("\n where inst.ct_id = ? and inst.cti_fmt like '%10%'");

		buf.append("\n WITH UR	 ");

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######getIdForCtId######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setLong(++index, ct_id);


			rs = stmt.executeQuery();

			int nPrior = 0;
			int nOldPrior = 0;
			String annotClfCd = "";

			CartContDO cart = new CartContDO();
			while(rs.next())
			{

				cart.setCtiId(rs.getLong("cti_id"));
				cart.setMaster_id(rs.getLong("master_id"));
				cart.setMasterId(rs.getLong("master_id"));
			}		
			return cart;
		} 
		catch (Exception e) 
		{
			logger.error(buf.toString());

			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}





	private CartContDO getIdsForCtId(long ct_id) throws Exception
	{
		StringBuffer buf = new StringBuffer();
		buf.append("\n select ");
		buf.append("\n 	inst.cti_id,map.master_id ");
		buf.append("\n from das.contents_inst_tbl inst ");
		buf.append("\n inner join (select master_id,ct_id from  das.contents_mapp_tbl group by master_id,ct_id) map on map.ct_id = inst.ct_id  ");
		buf.append("\n where map.ct_id = ? and inst.cti_fmt like '%10%'");

		buf.append("\n WITH UR	 ");

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######getIdsForCtId######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setLong(++index, ct_id);


			rs = stmt.executeQuery();

			int nPrior = 0;
			int nOldPrior = 0;
			String annotClfCd = "";

			CartContDO cart = new CartContDO();
			while(rs.next())
			{

				cart.setCtiId(rs.getLong("cti_id"));
				cart.setMaster_id(rs.getLong("master_id"));
			}		
			return cart;
		} 
		catch (Exception e) 
		{
			logger.error(buf.toString());

			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}



	/**
	 * tc req_cd의 값을 구한다
	 * @param int num
	 * @return
	 * @throws Exception 
	 */
	public TcBeanDO selectTcInfo(int num) throws Exception
	{
		String query = ExternalStatement.selectTcInfo(num);

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			stmt = con.prepareStatement(query);

			String str = null;		
			rs = stmt.executeQuery();
			String tc_cd ="";
			TcBeanDO item = new TcBeanDO();
			while(rs.next())
			{

				item.setReq_cd(rs.getString("TC_REQ_CD").trim());
				item.setCt_id(rs.getLong("ct_id"));
				item.setCart_no(rs.getLong("cart_no"));	
				item.setInput_hr_nm(rs.getString("filename"));
				item.setReq_id(rs.getString("regrid"));
			}		



			return item;

		} 
		catch (Exception e) 
		{
			logger.error(query);

			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}


	/**
	 * tc req_cd의 값을 구한다
	 * @param ct_id 컨텐츠id
	 * @return
	 * @throws Exception 
	 */
	public TcBeanDO selectTcInfo(long ct_id) throws Exception
	{
		String query = ExternalStatement.selectTcInfo(ct_id);

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######selectTcInfo######## con : " + con);
			stmt = con.prepareStatement(query);

			String str = null;		
			rs = stmt.executeQuery();
			//List resultList  = new ArrayList();
			//DownCartDO item = new DownCartDO();
			TcBeanDO item = new TcBeanDO();
			while(rs.next())
			{

				item.setReq_cd(rs.getString("TC_REQ_CD"));
				item.setCt_id(rs.getLong("ct_id"));
				item.setCart_no(rs.getLong("cart_no"));	
				item.setInput_hr_nm(rs.getString("filename"));
			}		



			return item;

		} 
		catch (Exception e) 
		{
			logger.error(query);

			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}
	/**
	 * 해당 카트번호에 해당하는 카트내용을 테이블에 저장한다.(재생성용)
	 * @param cartNo 카트번호
	 * @param cartContDOList 카트내용 DataObject인 CartContDO 를 포함하고 있는 List
	 * @return List 
	 * @throws Exception 
	 */
	public CartContDO insertRecreateInfo(CartContDO cartContDO) throws Exception
	{
		Connection con = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######insertRecreateInfo######## con : " + con);
			//현재 시간을 받아온다.
			String toDateTime = CalendarUtil.getDateTime("yyyyMMddHHmmss");

			//입력받은 카트번호에 해당하는 카트 내용들 중에 가장 큰 카트 내 순번을 구한다.
			int seq = selectCartContMaxSeq(cartContDO.getCartNo());

			//CartContDO cart = getIdForMasterId(cartContDO.getMasterId());

			String riskYn = DASBusinessConstants.YesNo.NO;
			cartContDO.setCartSeq(++seq);
			//cartContDO.setCtId(cart.getCtId());
			//.setCtiId(cart.getCtiId());
			String riskClfCd = getRiskClfCd(cartContDO);
			//사용제한구분이 무제한이 아니면 사용제한포함여부는 'Y'이
			//if(!CodeConstants.RiskCode.UNLIMIT.equals(riskClfCd))
			cartContDO.setModrId("D080009");
			if(false == riskClfCd.equals(""))
			{
				riskYn = DASBusinessConstants.YesNo.YES;
			}

			insertCartContInfo(con, cartContDO, toDateTime, riskClfCd);


			return cartContDO;
		} 

		catch (Exception e) 
		{
			logger.error(cartContDO);


			throw e;
		}
		finally
		{
			release(null, null, con);
		}

	}

	/**
	 * 모든lock을 해제한다
	 * @throws Exception 
	 * 
	 */	
	public int updateLockStatCd() throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.metadat_mst_tbl set lock_stat_cd='N' ");

		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateLockStatCd######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;

			int updateCount = stmt.executeUpdate();

			return updateCount;
		}
		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}

	/**
	 * WMV 표기
	 * @param ct_id 컨텐츠id
	 * @return updatecount
	 * @throws Exception 
	 */
	public int updateWMVYN(long ct_id,String user_id ) throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.contents_inst_tbl set ");
		buf.append("\n 	ETC=? ");
		buf.append("\n 	,regrid=? ");
		buf.append("\n where ct_id = ? ");

		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateWMVYN######## con : " + con);
			stmt = con.prepareStatement(buf.toString());
			String dateTime = CalendarUtil.getDateTime("yyyyMMddHHmmss");
			int index = 0;
			stmt.setString(++index, "WMV재생성 중입니다");
			stmt.setString(++index, user_id);
			stmt.setLong(++index, ct_id);

			int updateCount = stmt.executeUpdate();

			return updateCount;
		}
		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}





	/**
	 * Cataloging 표기
	 * @param ct_id 컨텐츠id
	 * @return updatecount
	 * @throws Exception 
	 */
	public int updateCTYN(long ct_id,String user_id) throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.contents_inst_tbl set ");
		buf.append("\n 	ETC=? ");
		buf.append("\n 	,regrid=? ");
		buf.append("\n where ct_id = ? ");

		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateCTYN######## con : " + con);
			stmt = con.prepareStatement(buf.toString());
			String dateTime = CalendarUtil.getDateTime("yyyyMMddHHmmss");
			int index = 0;
			stmt.setString(++index, "Cataloging 재생성 중입니다");
			stmt.setString(++index, user_id);
			stmt.setLong(++index, ct_id);

			int updateCount = stmt.executeUpdate();

			return updateCount;
		}
		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}


	/**
	 * 복본 표기
	 * @param ct_id 컨텐츠id
	 * @return updatecount
	 * @throws Exception 
	 */
	public int updateCopyYN(long ct_id,String reg_id) throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.contents_inst_tbl set ");
		buf.append("\n 	ETC=? ");
		buf.append("\n 	,regrid=? ");
		buf.append("\n where ct_id in (select map.ct_id from contents_mapp_tbl map inner join contents_tbl con on con.ct_id =map.ct_id and con.ct_typ='003' where map.master_id = ?  fetch first 1 rows only)");

		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateCopyYN######## con : " + con);
			stmt = con.prepareStatement(buf.toString());
			String dateTime = CalendarUtil.getDateTime("yyyyMMddHHmmss");
			int index = 0;
			stmt.setString(++index, "복본 재생성 중입니다");

			stmt.setString(++index, reg_id);
			stmt.setLong(++index, ct_id);
			int updateCount = stmt.executeUpdate();

			return updateCount;
		}

		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}



	/**
	 * WMV&Cataloging  표기 
	 * @param ct_id 컨텐츠id
	 * @return updatecount
	 * @throws Exception 
	 */
	public int updateCTWMVYN(long ct_id,String user_id) throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.contents_inst_tbl set ");
		buf.append("\n 	ETC=? ");
		buf.append("\n 	,regrid=? ");
		buf.append("\n where ct_id = ? ");

		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateCTWMVYN######## con : " + con);
			stmt = con.prepareStatement(buf.toString());
			String dateTime = CalendarUtil.getDateTime("yyyyMMddHHmmss");
			int index = 0;
			stmt.setString(++index, "WMV&Cataloging 재생성 중입니다");
			stmt.setString(++index, user_id);
			stmt.setLong(++index, ct_id);

			int updateCount = stmt.executeUpdate();

			return updateCount;
		}
		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}
	/**
	 * 재요청할 DOWN_CART의 정보를 얻어온다.
	 * @param  cart_no 카트번호
	 * @return DownCartDO
	 * @throws Exception 
	 */
	public DownCartDO selectDownCartInfo(long cart_no) throws Exception
	{
		String query = ExternalStatement.selectDownCartInfo(cart_no);

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######selectDownCartInfo######## con : " + con);
			stmt = con.prepareStatement(query);

			String str = null;		
			rs = stmt.executeQuery();
			//List resultList  = new ArrayList();
			//DownCartDO item = new DownCartDO();
			String tc_cd ="";
			DownCartDO item = new DownCartDO();
			while(rs.next())
			{
				item.setDataClfCd(rs.getString("DATA_CLF_CD"));
				item.setPrioCd(rs.getString("PRIO_CD"));
				item.setStrgLoc(rs.getString("STRG_LOC"));
				item.setRistYn(rs.getString("RIST_YN"));
				item.setAppCont(rs.getString("APP_CONT"));
				item.setReqUsrid(rs.getString("REQ_USRID"));
				item.setReqNm(rs.getString("REQ_NM"));
				item.setDownSubj(rs.getString("DOWN_SUBJ"));
				item.setGaurantorId(rs.getString("GAURANTOR_ID"));
				item.setRegrId(rs.getString("REGRID"));
				item.setModrId(rs.getString("MODRID"));
				item.setDeptCd(rs.getString("DEPT_CD"));
				item.setCo_cd(rs.getString("CO_CD"));
				item.setSeg_cd(rs.getString("SEG_CD"));
				item.setDown_gubun(rs.getString("DOWN_GUBUN"));
				item.setOut_strg_loc(rs.getString("OUT_STRG_LOC"));
				item.setFl_path(rs.getString("FILE_PATH"));
				item.setCategory(rs.getString("CATEGORY"));
				item.setStoragename(rs.getString("STORAGENAME"));


			}		



			return item;

		} 
		catch (Exception e) 
		{
			logger.error(query);

			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}



	/**
	 * 영상의 위치를 설정한다(다운로드, 스토리지 다운로드)
	 * @param cart_no 카트넘버
	 * @param cart_seq 카트순번 
	 * @return CartContDO 
	 * @throws Exception 
	 */
	public CartContDO selectCartContInfo(long cart_no, long cart_seq) throws Exception
	{
		String query = "";
		if(cart_seq>0){
			query = ExternalStatement.selectCartContInfo(cart_no, cart_seq);
		}else{
			query = ExternalStatement.selectCartContInfo(cart_no);
		}

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######selectCartContInfo######## con : " + con);
			stmt = con.prepareStatement(query);

			String str = null;		
			rs = stmt.executeQuery();

			CartContDO item = new CartContDO();
			while(rs.next())
			{
				item.setRistClfCd(rs.getString("RIST_CLF_CD"));
				item.setCtId(rs.getLong("CT_ID"));
				item.setCtiId(rs.getLong("CTI_ID"));
				item.setSom(rs.getString("SOM"));
				item.setEom(rs.getString("EOM"));
				item.setDuration(rs.getLong("DURATION"));
				item.setRegrId(rs.getString("REGRID"));
				item.setModrId(rs.getString("MODRID"));
				item.setCtgrLCd(rs.getString("CTGR_L_CD"));
				item.setCtgrMCd(rs.getString("CTGR_M_CD"));
				item.setCtgrSCd(rs.getString("CTGR_S_CD"));
				item.setCtCont(rs.getString("CT_CONT"));
				item.setCtNm(rs.getString("CT_NM"));
				item.setMasterId(rs.getLong("MASTER_ID"));
				item.setSframe(rs.getString("S_FRAME"));
				item.setApp_cont(rs.getString("APP_CONT"));
				item.setDown_vol(rs.getString("DOWN_VOL"));
				item.setVd_qlty(rs.getString("VD_QLTY"));
				item.setAsp_rto_cd(rs.getString("ASP_RTO_CD"));
				item.setDown_stat(rs.getString("DOWN_STAT"));
				item.setOutsourcing_yn(rs.getString("OUTSOURCING_YN"));
				item.setOutsourcing_approve(rs.getString("OUTSOURCING_APPROVE"));
				item.setDown_typ(rs.getString("DOWN_TYP"));
				item.setReq_cont(rs.getString("REQ_CONT"));
				item.setMedia_id(rs.getString("MEDIA_ID"));
				//			item.setDown_gubun_nm(rs.getString("DOWN_GUBUN"));
			}		

			return item;

		} 
		catch (Exception e) 
		{
			logger.error(query);

			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}



	/**
	 * 화질, 화면비를 구한다
	 * @param int num
	 * @return CartContDO
	 * @throws Exception 
	 */
	public CartContDO selectAspVdInfo(long ct_id) throws Exception
	{
		String query = ExternalStatement.selectAspVdInfo(ct_id);

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######selectAspVdInfo######## con : " + con);
			stmt = con.prepareStatement(query);

			String str = null;		
			rs = stmt.executeQuery();
			CartContDO item = new CartContDO();
			while(rs.next())
			{

				item.setAsp_rto_cd(rs.getString("asp_rto_cd"));
				item.setVd_qlty(rs.getString("vd_qlty"));
				item.setAsp_rto_nm(rs.getString("asp_rto_nm"));
				item.setVd_qlty_nm(rs.getString("vd_qlty_nm"));

			}		



			return item;

		} 
		catch (Exception e) 
		{
			logger.error(query);

			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}







	/**
	 *에러난 카드를 새로 생성한다
	 * 다운로드 카트 정보와 카트 내용을 DB 스키마와 동일하게 받아 저장한다.
	 * @param downCartDO 카트정보
	 * @param commonDO 공통정보
	 * @return DownCartDO 채번한 카트번호를 포함하고 있는 다운로드 카트
	 * @throws Exception 
	 */
	public DownCartDO insertCartInfo3(DownCartDO downCartDO) throws Exception
	{
		// 먼저 DEPT_CD를 찾아온다.
		String DEPT_CD = getDECP_CDFromUserID(downCartDO.getReqUsrid());

		StringBuffer buf = new StringBuffer();
		buf.append("\n insert into DAS.DOWN_CART_TBL( ");
		buf.append("\n 	CART_NO, "); 
		buf.append("\n 	DATA_CLF_CD, "); 
		buf.append("\n 	PRIO_CD, "); 
		buf.append("\n 	STRG_LOC, "); 
		buf.append("\n 	RIST_YN, "); 

		buf.append("\n 	APP_CONT,  ");
		buf.append("\n 	REQ_USRID, "); 
		buf.append("\n 	REQ_NM,  ");
		buf.append("\n 	REQ_DT,  ");
		buf.append("\n 	DOWN_DT,  ");

		buf.append("\n 	APP_DT,  ");
		buf.append("\n 	DOWN_SUBJ,  ");
		buf.append("\n 	GAURANTOR_ID, "); 
		buf.append("\n 	REG_DT,  ");
		buf.append("\n 	REGRID,  ");

		buf.append("\n 	MOD_DT,  ");
		buf.append("\n 	MODRID,  ");
		buf.append("\n 	VD_QLTY,  ");
		buf.append("\n 	ASP_RTO_CD, ");
		buf.append("\n 	CART_STAT, ");

		buf.append("\n  CO_CD, ");
		buf.append("\n  SEG_CD, ");
		buf.append("\n  DEPT_CD ,");
		buf.append("\n  DOWN_GUBUN, ");
		buf.append("\n  OUT_STRG_LOC, ");
		buf.append("\n  TC_REQ_CD ");
		buf.append("\n  ,FILE_PATH ");
		buf.append("\n  ,CATEGORY ");
		buf.append("\n  ,STORAGENAME   ");
		buf.append("\n ) ");
		buf.append("\n values(?, ?, ?, ?, ?,");
		buf.append("\n        ?, ?, ?, ?, ?,");
		buf.append("\n        ?, ?, ?, ?, ?,"); 
		buf.append("\n        ?, ?, ?, ?, ?,");
		buf.append("\n        ?, ?, ?, ?, ?,");
		buf.append("\n        ?, ?, ?, ? ) ");
		Connection con = null;
		PreparedStatement stmt = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######insertCartInfo3######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			//현재 시간을 받아온다.
			String toDateTime = CalendarUtil.getDateTime("yyyyMMddHHmmss");

			//카트번호 시퀀스를 채번한다.
			long cartNo = Long.parseLong(getNextSquence(con, DASBusinessConstants.SequenceName.CART_NO));

			int index = 0;
			stmt.setLong(++index, cartNo); 
			stmt.setString(++index, downCartDO.getDataClfCd()); 
			stmt.setString(++index, downCartDO.getPrioCd()); 
			stmt.setString(++index, downCartDO.getStrgLoc()); 
			stmt.setString(++index, downCartDO.getRistYn()); 

			stmt.setString(++index, downCartDO.getAppCont()); 
			stmt.setString(++index, downCartDO.getReqUsrid()); 
			stmt.setString(++index, downCartDO.getReqNm()); 
			stmt.setString(++index, toDateTime);
			stmt.setString(++index, downCartDO.getDownDt()); 

			stmt.setString(++index, downCartDO.getAppDt()); 
			stmt.setString(++index, downCartDO.getDownSubj()); 
			stmt.setString(++index, downCartDO.getGaurantorId()); 
			stmt.setString(++index, toDateTime); 
			stmt.setString(++index, downCartDO.getRegrId());

			stmt.setString(++index, toDateTime); 
			stmt.setString(++index, downCartDO.getModrId()); 
			stmt.setString(++index, downCartDO.getVdQlty()); 
			stmt.setString(++index, downCartDO.getAspRtoCd()); 
			stmt.setString(++index, downCartDO.getCartStat());

			stmt.setString(++index, downCartDO.getCo_cd());
			stmt.setString(++index, downCartDO.getSeg_cd());
			stmt.setString(++index, downCartDO.getDeptCd());			
			stmt.setString(++index, downCartDO.getDown_gubun());
			stmt.setString(++index, downCartDO.getOut_strg_loc());
			stmt.setString(++index, "");
			stmt.setString(++index, downCartDO.getFl_path());
			stmt.setString(++index, downCartDO.getCategory());
			stmt.setString(++index, downCartDO.getStoragename());
			stmt.executeUpdate();

			//DownCartDO 에 채번한 카트번호를 셋팅한다.
			downCartDO.setCartNo(cartNo);			

			return downCartDO;
		} 
		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}


	/**
	 * metadat_mst_tbl 데이터 상태 변환
	 * @param tcBeanDO
	 * @return
	 * @throws Exception 
	 * @throws RemoteException
	 */
	public int updateMetadat2(Connection con,TcBeanDO tcBeanDO) throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.metadat_mst_Tbl set ");
		buf.append("\n 	data_stat_cd = ? ");

		buf.append("\n where master_id in (select distinct master_id from contents_mapp_tbl where ct_id = ? )  ");

		PreparedStatement stmt = null;

		try 
		{
			stmt = con.prepareStatement(buf.toString());
			String dateTime = CalendarUtil.getDateTime("yyyyMMddHHmmss");
			int index = 0;

			stmt.setString(++index,"001");

			stmt.setLong(++index, tcBeanDO.getCt_id());

			int updateCount = stmt.executeUpdate();
			updateContents2(tcBeanDO);
			return updateCount;
		}

		catch (SQLException e) 
		{
			logger.error(buf.toString());
			try {
				con.rollback();
			} catch (SQLException e1) {
				// TODO Auto-generated catch block
				logger.error(e1);
			}

			throw e;
		}
		finally
		{
			release(null, stmt, null);
		}

	}


	/**
	 * metadat_mst_tbl 데이터 상태 변환
	 * @param tcBeanDO
	 * @return
	 * @throws SQLException 
	 * @throws RemoteException
	 */
	public int updateMetadat3(Connection con,TcBeanDO tcBeanDO) throws DASException, SQLException
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.metadat_mst_Tbl set ");
		buf.append("\n 	data_stat_cd = ? ");

		buf.append("\n where master_id in (select distinct master_id from contents_mapp_tbl where ct_id = ? )  ");

		PreparedStatement stmt = null;
		//Connection con = null;		

		try 
		{
			//con = DBService.getInstance().getConnection();
			stmt = con.prepareStatement(buf.toString());
			String dateTime = CalendarUtil.getDateTime("yyyyMMddHHmmss");
			int index = 0;

			stmt.setString(++index,"009");

			stmt.setLong(++index, tcBeanDO.getCt_id());

			int updateCount = stmt.executeUpdate();
			//updateContents2(tcBeanDO);
			return updateCount;
		}

		catch (SQLException e) 
		{
			logger.error(buf.toString());
			try {
				con.rollback();
			} catch (SQLException e1) {
				// TODO Auto-generated catch block
				logger.error(e1);
			}

			throw e;
		}
		finally
		{
			release(null, stmt, null);
		}

	}

	////완료되었음으로 '' 표기
	//public int updateETCNull(long ct_id) throws DASException
	//{
	//	StringBuffer buf = new StringBuffer();				

	/**
	 * 우클릭 삭제(영상선정, 클립검색).
	 * @param metadataMstInfoDO
	 * @return
	 * @throws Exception 
	 * @throws RemoteException
	 */
	public int deleteMasterSceanForMapp(long master_id) throws Exception
	{	
		StringBuffer buf = new StringBuffer();
		buf.append("\n update das.contents_mapp_tbl set ");

		buf.append("\n 	del_dd = ? ");
		buf.append("\n 	WHERE master_id= ?");
		boolean isUpdate = false;
		Connection con = null;
		PreparedStatement stmt = null;

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######deleteMasterSceanForMapp######## con : " + con);
			con.setAutoCommit(false);

			stmt = con.prepareStatement(buf.toString());
			String dateString = CalendarUtil.getDateTime("yyyyMMdd");
			int index = 0;
			stmt.setString(++index, dateString);
			stmt.setLong(++index, master_id);

			int updateCount = stmt.executeUpdate();

			if (logger.isDebugEnabled()) 
			{
				logger.debug("[Update Count]" + updateCount);
			}

			if(updateCount == 0)
			{
				//여기서 에러를 던진다.
				DASException exception = new DASException(ErrorConstants.NOT_EXIST_USER, "해당 사용자가 존재하지 않습니다.");
				throw exception;
			}
			con.commit();
			return 1;
		} 

		catch (Exception e) 
		{
			logger.error(buf.toString());

			if(con != null)
			{
				try {
					con.rollback();
				} catch (SQLException e1) {
					// TODO 자동 생성된 catch 블록
					logger.error(e1);
				}
			}


			throw e;
		}
		finally
		{
			try {
				con.setAutoCommit(true);
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				logger.error(e);
			}
			release(null, stmt, con);
		}

	}




	/**
	 * 우클릭 삭제(영상선정, 클립검색).
	 * @param metadataMstInfoDO
	 * @return
	 * @throws Exception 
	 * @throws RemoteException
	 */
	public int deleteMasterSceanForMst(long master_id) throws Exception
	{	
		StringBuffer buf = new StringBuffer();
		buf.append("\n update das.metadat_mst_tbl set ");

		buf.append("\n 	del_dd = ? ");
		buf.append("\n 	WHERE master_id= ?");
		//buf.append("\n 	AND CART_SEQ= ?");
		boolean isUpdate = false;
		Connection con = null;
		PreparedStatement stmt = null;

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######deleteMasterSceanForMst######## con : " + con);
			con.setAutoCommit(false);

			stmt = con.prepareStatement(buf.toString());
			String dateString = CalendarUtil.getDateTime("yyyyMMdd");
			int index = 0;
			stmt.setString(++index, dateString);
			stmt.setLong(++index, master_id);

			int updateCount = stmt.executeUpdate();

			if (logger.isDebugEnabled()) 
			{
				logger.debug("[Update Count]" + updateCount);
			}

			if(updateCount == 0)
			{
				//여기서 에러를 던진다.
				DASException exception = new DASException(ErrorConstants.NOT_EXIST_USER, "해당 사용자가 존재하지 않습니다.");
				throw exception;
			}

			con.commit();
			return updateCount;
		} 

		catch (Exception e) 
		{
			logger.error(buf.toString());

			if(con != null)
			{
				try {
					con.rollback();
				} catch (SQLException e1) {
					// TODO 자동 생성된 catch 블록
					logger.error(e1);
				}
			}


			throw e;
		}
		finally
		{
			try {
				con.setAutoCommit(true);
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				logger.error(e);
			}
			release(null, stmt, con);
		}

	}

	/**
	 * MasterId_id의 eom를 조회한다
	 * @return MasterId 마스터id
	 * @throws Exception 
	 * @throws RemoteException
	 */
	public String selectEomByMasterId(long master_id) throws Exception
	{
		String query = ExternalStatement.selectEomByMasterId();

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######selectEomByMasterId######## con : " + con);
			stmt = con.prepareStatement(query);

			int index = 0;
			stmt.setLong(++index, master_id);

			rs = stmt.executeQuery();

			if(rs.next())
			{
				return rs.getString("brd_leng");
			}
			else
			{
				return "";
			}
		} 
		catch (Exception e) 
		{
			logger.error(query);


			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}

	}




	/**
	 * 이용자별 다운로드 목록을 조회한다
	 * @param CartItemDO                                                                                                                                                                                            
	 * @param                                                                                                                                                                                               
	 * @return                                                                                                            
	 * @throws Exception 
	 */
	public List getCartInfoForUser(CartItemDO cartItemDO) throws Exception
	{
		String query = ExternalStatement.selectCartInfoForUser(cartItemDO);

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######getCartInfoForUser######## con : " + con);
			stmt = con.prepareStatement(query);

			int index = 0;


			rs = stmt.executeQuery();

			List resultList  = new ArrayList();
			while(rs.next())
			{
				CartItemDO item = new CartItemDO();
				item.setReq_id(         	rs.getString("REGRID"));
				item.setCartNo(       	rs.getLong("CART_NO"));
				item.setCartseq(      		rs.getInt("CART_SEQ"));
				item.setRist_clf_nm(      		rs.getString("RIST_CLF_CD"));
				item.setTitle(      		rs.getString("TITLE"));
				item.setCt_id(		rs.getLong("CT_ID"));
				item.setReqNm( rs.getString("USER_NM"));
				item.setMedia_id(		rs.getString("MEDIA_ID"));
				item.setCt_cla(         	rs.getString("CT_CLA"));
				item.setReqDT(       	rs.getString("REG_DT"));
				item.setDown_status(      		rs.getString("DOWN_STAT"));
				item.setSom(      		rs.getString("SOM"));
				item.setEom(      		rs.getString("EOM"));
				item.setDownSubj(      		rs.getString("DOWN_SUBJ"));
				item.setEpisno(      		rs.getString("epis_no"));
				item.setBrd_dd(      		rs.getString("brd_dd"));
				item.setFm_dt(      		rs.getString("fm_dt"));
				item.setCtgr_l_cd(      		rs.getString("ctgr_l_cd"));
				item.setConm(      		rs.getString("CONM"));
				resultList.add(item);
			}

			return resultList; 
		} 
		catch (Exception e) 
		{
			logger.error(query);


			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}

	/**
	 * DAS.CONTENTS_INST_TBL 정보 수정
	 * @param recode_type_cd 녹음방식코드
	 * @param  master_ids 마스터id

	 * @return Update count
	 * @throws RemoteException
	 */
	public int UpdateContent(String recode_type_cd, String master_ids) throws DASException
	{	
		// 필요한 변수들
		StringBuffer buf = new StringBuffer();
		StringBuffer strResultBuffer = new StringBuffer();

		// SQL 구성		
		buf.append("\n update DAS.CONTENTS_INST_TBL set  ");
		buf.append("\n RECORD_TYPE_CD = ? ");
		buf.append("\n where CT_ID in (select CT_ID from DAS.CONTENTS_MAPP_TBL ");
		buf.append("\n where MASTER_ID in ("+master_ids+")) ");

		Connection con = null;
		PreparedStatement psmt = null;
		ResultSet rs = null;        

		try
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######UpdateContent######## con : " + con);
			psmt = con.prepareStatement(buf.toString());

			int index = 0;			

			psmt.setString(++index, recode_type_cd);
			//	psmt.setString(++index, master_ids);


			int cApplied = psmt.executeUpdate();
			return cApplied;            
		}
		catch (Exception ex)
		{
			logger.error(buf.toString());

			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "UpdateContentMediaInfo 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, con);
		}
	}



	/**
	 * 완료되었으면 '' 표기
	 * @param ct_id 컨텐츠id
	 * @throws SQLException 
	 */
	public int updateETCNull(Connection con,long ct_id) throws DASException, SQLException
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.contents_inst_tbl set ");
		buf.append("\n 	ETC=? ");
		buf.append("\n where ct_id = ? ");

		PreparedStatement stmt = null;


		try 
		{
			//con = DBService.getInstance().getConnection();
			stmt = con.prepareStatement(buf.toString());
			String dateTime = CalendarUtil.getDateTime("yyyyMMddHHmmss");
			int index = 0;
			stmt.setString(++index, "");

			stmt.setLong(++index, ct_id);

			int updateCount = stmt.executeUpdate();

			return updateCount;
		}

		catch (SQLException e) 
		{
			logger.error(buf.toString());
			if(con != null)
			{
				try {
					con.rollback();
				} catch (SQLException e1) {
					// TODO 자동 생성된 catch 블록
					logger.error(e1);
				}
			}
			logger.error(e);


			throw e;
		}
		finally
		{
			release(null, stmt, null);
		}

	}


	/**
	 * allocate 값을 'Y'로 수정함
	 * @throws Exception 
	 */

	public int updateResultTcjob(TcBeanDO tcBeanDO) throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.tc_job_tbl set ");
		buf.append("\n 	JOB_ALOCATE = 'Y' ");
		buf.append("\n where SEQ = ? and JOB_ALOCATE='N' ");

		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateResultTcjob######## con : " + con);
			//stmt = con.prepareStatement(buf.toString());
			stmt = con.prepareStatement(buf.toString());
			int index = 0;
			//stmt.setString(++index, tcBeanDO.getWork_stat()+"");
			stmt.setLong(++index, tcBeanDO.getSeq());

			int updateCount = stmt.executeUpdate();

			if(updateCount>0)return 1;
			return 0;
		}
		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}


	/**
	 *  영상선정에서 폐기 등록한 정보를 얻어온다
	 * @param master_id
	 * @return
	 * @throws DASException
	 */
	public DiscardDO getDiscardInfo(long master_id) throws DASException{

		StringBuffer buf = new StringBuffer();
		Connection con = null;		
		PreparedStatement psmt = null;		
		ResultSet rs = null;


		buf.append("\n SELECT						");
		buf.append("\n title         ");
		buf.append("\n ,brd_dd                    ");
		buf.append("\n ,fm_dt                    ");
		buf.append("\n ,brd_leng                      ");
		buf.append("\n ,fm_dt                       ");
		buf.append("\n ,value(rsv_prd_end_dd ,'')   as   rsv_prd_end_dd                    ");
		buf.append("\n ,rsv_prd_cd                        ");
		buf.append("\n from metadat_mst_tbl                        ");

		buf.append("\n WHERE master_id = ?    ");

		try {
			con = DBService.getInstance().getConnection();
			//logger.debug("######getDiscardInfo######## con : " + con);
			psmt = con.prepareStatement(buf.toString());    
			int index = 0;			
			psmt.setLong(++index, master_id);
			rs = psmt.executeQuery();
			DiscardDO item = new DiscardDO();
			if(rs.next())
			{
				item.setTitle(rs.getString("title"));
				if(rs.getString("brd_dd") == null)
					item.setBrd_dd(rs.getString("brd_dd") == null ? rs.getString("fm_dt") : rs.getString("brd_dd"));
				item.setBrd_len(org.apache.commons.lang.StringUtils.defaultString(rs.getString("brd_leng"), ""));
				item.setFm_dt(rs.getString("fm_dt"));
				item.setRsv_prd_end_dd(rs.getString("rsv_prd_end_dd"));
				item.setRsv_prd_cd(rs.getString("rsv_prd_cd"));
			}
			return item;

		}
		catch (Exception ex)
		{
			logger.error(buf.toString());

			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "selectTcJon 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, con);
		}
	}


	/**
	 * 다운로드 승인 조회한다.(등록시)
	 * @param ApprveDO                                                                                                                                                                                              
	 * @return                                                                                                                                                                                              
	 * @throws Exception 
	 */
	public ManualArchiveDO getManualArchiveInfo(String media_id) throws Exception
	{
		String query = ExternalStatement.getManualArchiveInfo(media_id);

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######getManualArchiveInfo######## con : " + con);
			stmt = con.prepareStatement(query);

			int index = 0;


			rs = stmt.executeQuery();


			ManualArchiveDO manualArchiveDO = new ManualArchiveDO();
			while(rs.next())
			{
				manualArchiveDO.setAsp_rto_cd(         	rs.getString("ASP_RTO_CD"));
				manualArchiveDO.setAudio_type(       	rs.getString("AUD_TYPE_CD"));
				manualArchiveDO.setCmr_place(      		rs.getString("CMR_PLACE"));
				manualArchiveDO.setCms_id(      		rs.getString("pds_cms_pgm_id"));
				manualArchiveDO.setCt_cla(      		rs.getString("CT_CLA"));
				manualArchiveDO.setCtgr_l_cd(		rs.getString("ctgr_l_cd"));
				manualArchiveDO.setEpis_no( rs.getString("epis_no"));
				manualArchiveDO.setFm_dt(      		rs.getString("FM_DT"));

				manualArchiveDO.setOrg_media_id(		rs.getString("media_id"));
				manualArchiveDO.setProducer_nm( rs.getString("PRODUCER_NM"));
				manualArchiveDO.setRist_clf_cd(		rs.getString("RIST_CLF_CD"));
				manualArchiveDO.setSub_ttl(		rs.getString("sub_ttl"));
				manualArchiveDO.setTitle(      		rs.getString("title"));
				manualArchiveDO.setVd_hresol(      		rs.getString("VD_HRESOL"));
				manualArchiveDO.setVd_vresol(		rs.getString("VD_VRESOL"));
				manualArchiveDO.setArch_route(		rs.getString("ARCH_ROUTE"));
				manualArchiveDO.setCocd(		rs.getString("cocd"));
				manualArchiveDO.setChennel(		rs.getString("chennel_cd"));


			}

			return manualArchiveDO; 
		} 
		catch (Exception e) 
		{
			logger.error(query);


			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}



	/**
	 * 수동 아카이브  
	 * @param manualArchiveDO                                                                                                                                                                                              
	 * @return                   
	 * @throws Exception 
	 **/
	public int insertManualArchiveInfo(ManualArchiveDO manualArchiveDO)throws Exception{


		Connection con = null;
		PreparedStatement stmt = null;
		StringBuffer buf=new StringBuffer();
		try {
			con=DBService.getInstance().getConnection();
			//logger.debug("######insertManualArchiveInfo######## con : " + con);
			buf.append("\n insert into TEMP_MANUAL_TBL (");
			buf.append("\n FL_PATH ");
			buf.append("\n ,ORG_MEDIA_ID ");
			buf.append("\n ,NEW_MEDIA_ID ");
			buf.append("\n ,PDS_CMS_ID ");
			buf.append("\n ,CTGR_L_CD ");
			buf.append("\n ,TITLE ");
			buf.append("\n ,SUB_TTL ");
			buf.append("\n ,EPIS_NO ");
			buf.append("\n ,CT_CLA ");
			buf.append("\n ,RIST_CLF_CD ");
			buf.append("\n ,FM_DT ");
			buf.append("\n ,CMR_PLACE ");
			buf.append("\n ,PRODUCER_NM ");
			buf.append("\n ,VD_HERSOL ");
			buf.append("\n ,VD_VERSOL ");
			buf.append("\n ,ASP_RTO_CD ");
			buf.append("\n ,AUDIO_TYPE ");
			buf.append("\n ,ARCH_ROUTE ");
			buf.append("\n ,RECORD_TYPE_CD ");
			buf.append("\n ,COCD ");
			buf.append("\n ,CHENNEL ");
			buf.append("\n ,DTL_GUBUN ");
			buf.append("\n ) VALUES ( ");
			buf.append("\n  ?, ? ,?,?, ? ,?,?, ? ,?,?, ? ,?,?, ? ,?,?, ? ,?,?, ? ,? ,?)");

			stmt=con.prepareStatement(buf.toString());
			int index=0;
			int iTmp=0;
			long seq =  selectArchveSeq();
			stmt.setString(++index    , manualArchiveDO.getFl_path());
			stmt.setString(++index    , manualArchiveDO.getOrg_media_id());
			stmt.setString(++index    , manualArchiveDO.getNew_media_id());
			stmt.setString(++index    , manualArchiveDO.getCms_id());
			stmt.setString(++index    , manualArchiveDO.getCtgr_l_cd());
			stmt.setString(++index    , manualArchiveDO.getTitle());
			stmt.setString(++index    , manualArchiveDO.getSub_ttl());
			stmt.setString(++index    , manualArchiveDO.getEpis_no());
			stmt.setString(++index    , manualArchiveDO.getCt_cla());
			stmt.setString(++index    , manualArchiveDO.getRist_clf_cd());
			stmt.setString(++index    , manualArchiveDO.getFm_dt());
			stmt.setString(++index    , manualArchiveDO.getCmr_place());
			stmt.setString(++index    , manualArchiveDO.getProducer_nm());
			stmt.setString(++index    , manualArchiveDO.getVd_hresol());
			stmt.setString(++index    ,manualArchiveDO.getVd_vresol());
			stmt.setString(++index    , manualArchiveDO.getAsp_rto_cd());
			stmt.setString(++index    , manualArchiveDO.getAudio_type());
			stmt.setString(++index    , manualArchiveDO.getArch_route());
			stmt.setString(++index    , manualArchiveDO.getRecode_yn());
			//2012.4.26
			stmt.setString(++index    , manualArchiveDO.getCocd());
			stmt.setString(++index    , manualArchiveDO.getChennel());
			stmt.setString(++index    , manualArchiveDO.getDtl_gubun());
			iTmp = stmt.executeUpdate();

			return iTmp;

		}

		catch (Exception e) 
		{
			logger.error(buf.toString());
			if(con != null)
			{
				try {
					con.rollback();					
				} catch (SQLException e1) {
					// TODO 자동 생성된 catch 블록
					logger.error(e1);
				}
			}


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}
	}

	/**
	 * 수동 아카이브 상세정보를 조회한다
	 * @param ApprveDO                                                                                                                                                                                              
	 * @return                                                                                                                                                                                              
	 * @throws Exception 
	 */
	public List getManualInfo(ManualArchiveDO manualArchiveD) throws Exception
	{
		String query = ExternalStatement.selectManualInfo(manualArchiveD);

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######getManualInfo######## con : " + con);
			stmt = con.prepareStatement(query);

			int index = 0;


			rs = stmt.executeQuery();

			List resultList  = new ArrayList();
			while(rs.next())
			{
				ManualArchiveDO item = new ManualArchiveDO();
				item.setFl_path(         	rs.getString("FL_PATH"));
				item.setOrg_media_id(       	rs.getString("ORG_MEDIA_ID"));
				item.setNew_media_id(      		rs.getString("NEW_MEDIA_ID"));
				item.setCms_id(      		rs.getString("PDS_CMS_ID"));
				item.setCtgr_l_cd(      		rs.getString("CTGR_L_CD"));
				item.setTitle(		rs.getString("TITLE"));
				item.setSub_ttl( rs.getString("SUB_TTL"));
				item.setEpis_no(		rs.getString("EPIS_NO"));
				item.setCt_cla(         	rs.getString("CT_CLA"));
				item.setRist_clf_cd(       	rs.getString("RIST_CLF_CD"));
				item.setFm_dt(      		rs.getString("FM_DT"));
				item.setCmr_place(      		rs.getString("CMR_PLACE"));
				item.setProducer_nm(      		rs.getString("PRODUCER_NM"));
				item.setVd_vresol(		rs.getString("VD_VERSOL"));
				item.setVd_hresol( rs.getString("VD_HERSOL"));
				item.setAsp_rto_cd(		rs.getString("ASP_RTO_CD"));
				item.setAudio_type(		rs.getString("AUDIO_TYPE"));
				item.setArch_route(		rs.getString("ARCH_ROUTE"));
				item.setRecode_yn(		rs.getString("RECORD_TYPE_CD"));
				//2012.4.26
				item.setCocd(		rs.getString("COCD"));
				item.setChennel(		rs.getString("CHENNEL"));
				item.setDtl_gubun(		rs.getString("DTL_GUBUN"));
				resultList.add(item);
			}

			return resultList; 
		} 
		catch (Exception e) 
		{
			logger.error(query);


			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}



	/**
	 * 수동 아카이브 상세정보를 조회한다
	 * @param ApprveDO                                                                                                                                                                                              
	 * @return                                                                                                                                                                                              
	 * @throws Exception 
	 */
	public ManualArchiveDO getManualInfo(String media_id) throws Exception
	{
		String query = ExternalStatement.selectManualInfo(media_id);

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//	logger.debug("######getManualInfo######## con : " + con);
			stmt = con.prepareStatement(query);

			int index = 0;


			rs = stmt.executeQuery();


			ManualArchiveDO item = new ManualArchiveDO();
			while(rs.next())
			{
				item.setFl_path(         	rs.getString("FL_PATH"));
				item.setOrg_media_id(       	rs.getString("ORG_MEDIA_ID"));
				item.setNew_media_id(      		rs.getString("NEW_MEDIA_ID"));
				item.setCms_id(      		rs.getString("PDS_CMS_ID"));
				item.setCtgr_l_cd(      		rs.getString("CTGR_L_CD"));
				item.setTitle(		rs.getString("TITLE"));
				item.setSub_ttl( rs.getString("SUB_TTL"));
				item.setEpis_no(		rs.getString("EPIS_NO").trim());
				item.setCt_cla(         	rs.getString("CT_CLA"));
				item.setRist_clf_cd(       	rs.getString("RIST_CLF_CD"));
				item.setFm_dt(      		rs.getString("FM_DT"));
				item.setCmr_place(      		rs.getString("CMR_PLACE"));
				item.setProducer_nm(      		rs.getString("PRODUCER_NM"));
				item.setVd_vresol(		rs.getString("VD_VERSOL").trim());
				item.setVd_hresol( rs.getString("VD_HERSOL").trim());
				item.setAsp_rto_cd(		rs.getString("ASP_RTO_CD"));
				item.setAudio_type(		rs.getString("AUDIO_TYPE"));
				item.setArch_route(		rs.getString("ARCH_ROUTE"));

				//2012.4.26
				item.setCocd(		rs.getString("COCD"));
				item.setChennel(		rs.getString("CHENNEL"));
				item.setDtl_gubun(		rs.getString("DTL_GUBUN"));

			}

			return item; 
		} 
		catch (Exception e) 
		{
			logger.error(query);


			throw e;
		} 

		finally
		{
			release(rs, stmt, con);
		}
	}



	/**  
	 * 임시저장된 정보를 수정한다(수동아카이브)
	 * @param     master_id                                                                                                                                                                                    
	 * @return                                                                                                                                                                                              
	 * @throws Exception 
	 */
	public int updateManualArchive(ManualArchiveDO manualArchiveDO) throws Exception
	{
		logger.debug(manualArchiveDO);
		StringBuffer buf = new StringBuffer();


		Connection con = null;
		PreparedStatement stmt = null;

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateManualArchive######## con : " + con);
			con.setAutoCommit(false);
			int updateCount =0;


			buf.append("\n update DAS.temp_manual_tbl set ");

			buf.append("\n PDS_CMS_ID = ? ");
			buf.append("\n ,CTGR_L_CD  = ? ");
			buf.append("\n ,TITLE  = ? ");
			buf.append("\n ,SUB_TTL  = ? ");
			buf.append("\n ,EPIS_NO  = ? ");
			buf.append("\n ,CT_CLA  = ? ");
			buf.append("\n ,RIST_CLF_CD  = ? ");
			buf.append("\n ,FM_DT  = ? ");
			buf.append("\n ,CMR_PLACE  = ? ");
			buf.append("\n ,PRODUCER_NM  = ? ");
			buf.append("\n ,VD_VERSOL  = ? ");
			buf.append("\n ,VD_HERSOL  = ? ");
			buf.append("\n ,ASP_RTO_CD  = ? ");
			buf.append("\n ,AUDIO_TYPE  = ? ");
			buf.append("\n ,ARCH_ROUTE  = ? ");
			buf.append("\n ,COCD  = ? ");
			buf.append("\n ,CHENNEL  = ? ");
			buf.append("\n ,DTL_GUBUN  = ? ");
			buf.append("\n ,FL_PATH  = ? ");
			buf.append("\n where new_media_id = ? ");

			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			String dateTime = CalendarUtil.getDateTime("yyyyMMddHHmmss");
			stmt.setString(++index, manualArchiveDO.getCms_id());	
			stmt.setString(++index, manualArchiveDO.getCtgr_l_cd());	
			stmt.setString(++index, manualArchiveDO.getTitle());	
			stmt.setString(++index, manualArchiveDO.getSub_ttl());	
			stmt.setString(++index, manualArchiveDO.getEpis_no());	
			stmt.setString(++index, manualArchiveDO.getCt_cla());	
			stmt.setString(++index, manualArchiveDO.getRist_clf_cd());	
			stmt.setString(++index, manualArchiveDO.getFm_dt());	
			stmt.setString(++index, manualArchiveDO.getCmr_place());	
			stmt.setString(++index, manualArchiveDO.getProducer_nm());	
			stmt.setString(++index, manualArchiveDO.getVd_vresol());	
			stmt.setString(++index, manualArchiveDO.getVd_hresol());
			stmt.setString(++index, manualArchiveDO.getAsp_rto_cd());
			stmt.setString(++index, manualArchiveDO.getAudio_type());
			stmt.setString(++index, manualArchiveDO.getArch_route());
			stmt.setString(++index, manualArchiveDO.getCocd());
			stmt.setString(++index, manualArchiveDO.getChennel());
			stmt.setString(++index, manualArchiveDO.getDtl_gubun());
			stmt.setString(++index, manualArchiveDO.getFl_path());
			stmt.setString(++index, manualArchiveDO.getNew_media_id());
			updateCount = stmt.executeUpdate();

			if (logger.isDebugEnabled()) 
			{
				logger.debug("[Update Count]" + updateCount);
			}

			if(updateCount == 0)
			{
				//여기서 에러를 던진다.
				DASException exception = new DASException(ErrorConstants.NOT_EXIST_PROGRAM_INFO, "해당 프로그램 정보가 존재하지 않습니다.");
				throw exception;
			}


			con.commit();
			return updateCount;
		} 

		catch (Exception e) 
		{
			logger.error(buf.toString());

			if(con != null)
			{
				try {
					con.rollback();
				} catch (SQLException e1) {
					// TODO 자동 생성된 catch 블록
					logger.error(e1);
				}
			}


			throw e;
		}
		finally
		{
			try {
				con.setAutoCommit(true);
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				logger.error(e);
			}
			release(null, stmt, con);
		}
	}



	/**
	 * 코너를 삭제한다
	 * @param tcBeanDO 삭제하기위한 정보가 들어있는 beans
	 * @throws DASException
	 * @throws SQLException 
	 */
	public int deleteCorner(Connection con ,TcBeanDO tcBeanDO)throws DASException, SQLException{

		//Connection con = null;
		PreparedStatement stmt = null;
		StringBuffer buf=new StringBuffer();
		try {
			//	con=DBService.getInstance().getConnection();
			buf.append("\n delete from  DAS.corner_tbl where cn_id in (select cn_id from contents_mapp_tbl where ct_id = ? ) ");
			stmt=con.prepareStatement(buf.toString());
			int index=0;
			stmt.setLong(++index	, tcBeanDO.getCt_id());

			//맵핑 데이터도 삭제한다.(ct_id 기준)

			int iTmp = stmt.executeUpdate();
			deleteContentsMapp(con,tcBeanDO);
			return iTmp;
		}

		catch (SQLException e) 
		{
			logger.error(buf.toString());
			if(con != null)
			{
				try {
					con.rollback();					
				} catch (SQLException e1) {
					// TODO 자동 생성된 catch 블록
					logger.error(e1);
				}
			}

			throw e;
		}
		finally
		{
			release(null, stmt, null);
		}
	}


	/**
	 * 코너 별 내용을 삭제한다<- 사용하지 않음
	 * @param tcBeanDO
	 * @throws Exception 
	 */
	public int deleteCornerCont(TcBeanDO tcBeanDO)throws Exception{

		Connection con = null;
		PreparedStatement stmt = null;
		StringBuffer buf=new StringBuffer();
		try {
			con=DBService.getInstance().getConnection();
			//logger.debug("######deleteCornerCont######## con : " + con);
			buf.append("\n delete from  DAS.cn_detail where cn_id in (select cn_id from contents_mapp_tbl where ct_id = ? ) ");
			stmt=con.prepareStatement(buf.toString());
			int index=0;
			stmt.setLong(++index	, tcBeanDO.getCt_id());

			int iTmp = stmt.executeUpdate();
			return iTmp;
		}

		catch (Exception e) 
		{
			logger.error(buf.toString());
			if(con != null)
			{
				try {
					con.rollback();					
				} catch (SQLException e1) {
					// TODO 자동 생성된 catch 블록
					logger.error(e1);
				}
			}

			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}
	}





	/**
	 * 코너 재생성을위해 map데이터 삭제
	 * @param tcBeanDO 삭제할 정보가 들어있는 beans
	 * @throws DASException
	 * @throws SQLException 
	 */
	public int deleteContentsMapp(Connection con,TcBeanDO tcBeanDO)throws DASException, SQLException{

		//Connection con = null;
		PreparedStatement stmt = null;
		StringBuffer buf=new StringBuffer();
		try {
			//con=DBService.getInstance().getConnection();
			buf.append("\n delete from  DAS.contents_mapp_Tbl where ct_id =  ?  ");
			stmt=con.prepareStatement(buf.toString());
			int index=0;
			stmt.setLong(++index	, tcBeanDO.getCt_id());
			//deleteAnnotInfo( con, tcBeanDO);

			int iTmp = stmt.executeUpdate();

			return iTmp;
		}

		catch (SQLException e) 
		{
			logger.error(buf.toString());
			if(con != null)
			{
				try {
					con.rollback();					
				} catch (SQLException e1) {
					// TODO 자동 생성된 catch 블록
					logger.error(e1);
				}
			}

			throw e;
		}
		finally
		{
			release(null, stmt, null);
		}
	}



	/**
	 *  mapp  조회한다.
	 * @param master_id
	 * @return
	 * @throws DASException
	 */
	public TcBeanDO getMappInfo(long ct_id) throws DASException{

		StringBuffer buf = new StringBuffer();
		Connection con = null;		
		PreparedStatement psmt = null;		
		ResultSet rs = null;

		buf.append("\n SELECT						");
		buf.append("\n  map.ct_id           ");
		buf.append("\n ,map.master_id                       ");
		buf.append("\n  from contents_mapp_tbl   map                        ");
		buf.append("\n inner join corner_tbl cor on cor.cn_id = map.cn_id                       ");
		buf.append("\n  inner join TC_JOB_TBL job on map.CT_ID = job.CT_ID                     ");
		buf.append("\n  inner join contents_tbl cont on map.CT_ID = cont.CT_ID                     ");
		buf.append("\n  where map.ct_id = ?   and cont.ct_typ ='003' ");
		buf.append("\n   order by  map.cn_id desc  ");
		buf.append("\n   fetch first 1 rows only    ");
		try {
			con = DBService.getInstance().getConnection();
			//logger.debug("######getMappInfo######## con : " + con);
			psmt = con.prepareStatement(buf.toString());    
			int index = 0;			
			psmt.setLong(++index, ct_id);
			rs = psmt.executeQuery();
			TcBeanDO item = new TcBeanDO();
			if(rs.next())
			{
				item.setCt_id(rs.getLong("ct_id"));
				item.setMaster_id(rs.getLong("master_id"));

			}
			return item;

		}
		catch (Exception ex)
		{
			logger.error(buf.toString());

			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "selectTcJon 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, con);
		}
	}




	/**
	 *  mapp 데이터를 임시 저장한다.
	 * @param master_id
	 * @return
	 * @throws DASException
	 */
	public TcBeanDO getMappInfo2(Connection con,long ct_id) throws DASException{

		StringBuffer buf = new StringBuffer();
		//Connection con = null;		
		PreparedStatement psmt = null;		
		ResultSet rs = null;


		buf.append("\n SELECT						");
		buf.append("\n  map.ct_id           ");
		buf.append("\n ,map.pgm_id                     ");
		buf.append("\n ,map.master_id                       ");
		buf.append("\n ,map.regrid                       ");
		buf.append("\n ,map.cn_id                      ");
		buf.append("\n ,case when job.TC_TYPE='001' then ''                       ");
		buf.append("\n when job.TC_TYPE <>'001' then cor.CN_INFO                       ");
		buf.append("\n else ''                      ");
		buf.append("\n end as CN_INFO                      ");
		buf.append("\n  from contents_mapp_tbl   map                        ");
		buf.append("\n inner  join corner_tbl cor on cor.cn_id = map.cn_id                       ");
		buf.append("\n  inner join TC_JOB_TBL job on map.CT_ID = job.CT_ID                     ");
		buf.append("\n  where map.ct_id = ?    ");
		buf.append("\n   order by  map.cn_id desc  ");
		buf.append("\n   fetch first 1 rows only    ");
		try {
			//con = DBService.getInstance().getConnection();
			psmt = con.prepareStatement(buf.toString());    
			int index = 0;			
			psmt.setLong(++index, ct_id);
			rs = psmt.executeQuery();
			TcBeanDO item = new TcBeanDO();
			if(rs.next())
			{
				item.setCt_id(rs.getLong("ct_id"));
				item.setCn_id(rs.getLong("cn_id"));
				item.setPgm_id(rs.getLong("pgm_id"));
				item.setMaster_id(rs.getLong("master_id"));
				item.setRegrid(rs.getString("regrid"));
				item.setCn_info(rs.getString("CN_INFO"));
			}
			return item;

		}
		catch (SQLException ex)
		{
			logger.error(buf.toString());
			try {
				con.rollback();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				logger.error(e);
			}
			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "selectTcJon 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, null);
		}
	}

	/**
	 * conner tbl에 집어넣는다
	 * @param PdsArchiveDO                                                                                                                                                                                              
	 * @return                                                                                                                                                                                              
	 * @throws Exception 
	 */
	public int insertCornerInfo(Connection con,TcBeanDO tcBeanDO,TcBeanDO oldBeanDO) throws Exception
	{
		logger.debug(tcBeanDO);
		StringBuffer buf = new StringBuffer();
		buf.append("\n INSERT INTO DAS.CORNER_TBL (    ");
		buf.append("\n CN_ID    ");
		buf.append("\n ,MASTER_ID    ");
		buf.append("\n ,CN_NM    ");
		buf.append("\n ,CN_TYPE_CD    ");
		buf.append("\n ,SOM    ");
		buf.append("\n ,EOM    ");
		buf.append("\n ,CN_INFO    ");
		buf.append("\n ,RPIMG_KFRM_SEQ    ");
		buf.append("\n ,REG_DT    ");
		buf.append("\n ,REGRID   ");
		buf.append("\n ,MOD_DT    ");
		buf.append("\n ,MODRID    ");
		buf.append("\n ,DURATION    ");
		buf.append("\n ,RPIMG_CT_ID    ");
		buf.append("\n ,S_FRAME   ) ");
		buf.append("\n values ");
		buf.append("\n ( ");		
		buf.append("\n ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ,?,? ");
		buf.append("\n ) ");

		//Connection con = null;
		PreparedStatement stmt = null;
		try 
		{
			//con = DBService.getInstance().getConnection();
			con.setAutoCommit(false);

			stmt = con.prepareStatement(buf.toString());

			int updateCount = 0;
			int index=0;

			String dateTime = CalendarUtil.getDateTime("yyyyMMddHHmmss");
			index = 0;	
			long cnid= selectCnid();
			stmt.setLong(++index,cnid);//CN_ID
			stmt.setLong(++index, tcBeanDO.getMaster_id());//MASTER_ID
			if(tcBeanDO.getCn_nm().equals("")){
				stmt.setString(++index, "");//CN_NM
			}else {
				stmt.setString(++index, tcBeanDO.getCn_nm());//CN_NM	
			}
			stmt.setString(++index, "003");//CN_TYPE_CD
			stmt.setString(++index,"00:00:00:00");//SOM
			stmt.setString(++index,oldBeanDO.getHR_CT_LENG());//EOM
			stmt.setString(++index, tcBeanDO.getCn_info());//CN_INFO

			stmt.setInt(++index, Integer.parseInt(String.valueOf(oldBeanDO.getRpimg_kfrm())));//RPIMG_KFRM_SEQ
			stmt.setString(++index, dateTime);//REG_DT
			stmt.setString(++index,tcBeanDO.getRegrid());//REGRID
			stmt.setString(++index,dateTime);//MOD_DT
			stmt.setString(++index,  "");//MODRID
			stmt.setLong(++index, Long.parseLong(oldBeanDO.getDURATION()));			//DURATION
			stmt.setLong(++index, 0);//RPIMG_CT_ID
			stmt.setLong(++index,0);//S_FRAME


			tcBeanDO.setCn_id(cnid);
			tcBeanDO.setEom(oldBeanDO.getHR_CT_LENG());
			int count =(int) countAnnotInfo(con,tcBeanDO.getCt_id());
			if(count==1){
				logger.debug("oldBeanDO.getHR_CT_LENG()  "+oldBeanDO.getHR_CT_LENG());

				updateAnnotInfoByManualArchive(con,tcBeanDO);
			}else if(count>1){
				deleteAnnotInfo(con,tcBeanDO);	
			}else{

			}
			updateCount = stmt.executeUpdate();


			if (logger.isDebugEnabled()) 
			{
				logger.debug("[Inserted Count]" + updateCount);
			}

			if(updateCount == 0)
			{
				//여기서 에러를 던진다.
				DASException exception = new DASException(ErrorConstants.NOT_EXIST_PROGRAM_INFO, "저장에 실패했습니다.");
				throw exception;
			}


			con.commit();
			return updateCount;
		} 


		catch (SQLException e) 
		{
			logger.error(buf.toString());

			if(con != null)
			{
				try {
					con.rollback();
				} catch (SQLException e1) {
					// TODO 자동 생성된 catch 블록
					logger.error(e1);
				}
			}


			throw e;
		}
		finally
		{
			try {
				con.setAutoCommit(true);
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				logger.error(e);
			}
			release(null, stmt, null);
			//	return 0;
		}

	}



	/**
	 * conner tbl에 집어넣는다(재생성용)
	 * @param PdsArchiveDO                                                                                                                                                                                              
	 * @return                                                                                                                                                                                              
	 * @throws Exception 
	 */
	public int insertCornerInfo2(Connection con,TcBeanDO tcBeanDO,TcBeanDO oldBeanDO) throws Exception
	{
		logger.debug(tcBeanDO);
		StringBuffer buf = new StringBuffer();
		buf.append("\n INSERT INTO DAS.CORNER_TBL (    ");
		buf.append("\n CN_ID    ");
		buf.append("\n ,MASTER_ID    ");
		buf.append("\n ,CN_NM    ");
		buf.append("\n ,CN_TYPE_CD    ");
		buf.append("\n ,SOM    ");
		buf.append("\n ,EOM    ");
		buf.append("\n ,CN_INFO    ");
		buf.append("\n ,RPIMG_KFRM_SEQ    ");
		buf.append("\n ,REG_DT    ");
		buf.append("\n ,REGRID   ");
		buf.append("\n ,MOD_DT    ");
		buf.append("\n ,MODRID    ");
		buf.append("\n ,DURATION    ");
		buf.append("\n ,RPIMG_CT_ID    ");
		buf.append("\n ,S_FRAME   ) ");
		buf.append("\n values ");
		buf.append("\n ( ");		
		buf.append("\n ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ,?,? ");
		buf.append("\n ) ");

		//Connection con = null;
		PreparedStatement stmt = null;
		try 
		{
			//	con = DBService.getInstance().getConnection();
			con.setAutoCommit(false);

			stmt = con.prepareStatement(buf.toString());

			int updateCount = 0;
			int index=0;

			String dateTime = CalendarUtil.getDateTime("yyyyMMddHHmmss");
			index = 0;	
			if(tcBeanDO.getCn_id()==0){
				long cnid= selectCnid();
				stmt.setLong(++index,cnid);//CN_ID
			}else{
				stmt.setLong(++index,tcBeanDO.getCn_id());//CN_ID
			}

			stmt.setLong(++index, tcBeanDO.getMaster_id());//MASTER_ID
			stmt.setString(++index, "");//CN_NM
			stmt.setString(++index, "003");//CN_TYPE_CD
			stmt.setString(++index,"00:00:00:00");//SOM
			stmt.setString(++index,oldBeanDO.getHR_CT_LENG());//EOM
			stmt.setString(++index, oldBeanDO.getCn_info());//CN_INFO
			stmt.setInt(++index, Integer.parseInt(String.valueOf(oldBeanDO.getRpimg_kfrm())));//RPIMG_KFRM_SEQ
			stmt.setString(++index, dateTime);//REG_DT
			stmt.setString(++index,tcBeanDO.getRegrid());//REGRID
			stmt.setString(++index,dateTime);//MOD_DT
			stmt.setString(++index,  "");//MODRID
			stmt.setLong(++index, Long.parseLong(oldBeanDO.getDURATION()));			//DURATION
			stmt.setLong(++index, 0);//RPIMG_CT_ID
			stmt.setLong(++index,0);//S_FRAME

			int count =(int) countAnnotInfo(con,tcBeanDO.getCt_id());
			if(count==1){
				updateAnnotInfo(con,tcBeanDO);
			}else if(count>1){
				deleteAnnotInfo(con,tcBeanDO);	
			}else{

			}

			updateCount = stmt.executeUpdate();

			if (logger.isDebugEnabled()) 
			{
				logger.debug("[Inserted Count]" + updateCount);
			}

			if(updateCount == 0)
			{
				//여기서 에러를 던진다.
				DASException exception = new DASException(ErrorConstants.NOT_EXIST_PROGRAM_INFO, "저장에 실패했습니다.");
				throw exception;
			}


			con.commit();
			return updateCount;
		} 


		catch (SQLException e) 
		{
			logger.error(buf.toString());

			if(con != null)
			{
				try {
					con.rollback();
				} catch (SQLException e1) {
					// TODO 자동 생성된 catch 블록
					logger.error(e1);
				}
			}


			throw e;
		}
		finally
		{
			try {
				con.setAutoCommit(true);
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				logger.error(e);
			}
			release(null, stmt, null);
			//	return 0;
		}

	}

	/**
	 * 코너ID를 생성한다
	 * @param condition 조회조건을 포함하고 있는 DataObject
	 * @return
	 * @throws Exception 
	 */
	public long selectCnid() throws Exception
	{

		StringBuffer buf = new StringBuffer();
		buf.append("select  NEXTVAL FOR SEQ_CN_ID from sysibm.sysdummy1 ");

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######getMappInfo######## con : " + con);

			stmt = con.prepareStatement(buf.toString());

			int index = 0;

			rs = stmt.executeQuery();
			rs.next();

			long newCN_Id = rs.getLong(1);

			return newCN_Id;
		} 
		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}	
	}

	/**
	 * 마스터id를 찾아온다
	 * @param condition 조회조건을 포함하고 있는 DataObject
	 * @return
	 * @throws Exception 
	 */
	public long findMasterid(long ct_id ) throws Exception
	{

		StringBuffer buf = new StringBuffer();
		buf.append("select master_id from contents_mapp_tbl where ct_id = ? ");

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######findMasterid######## con : " + con);

			stmt = con.prepareStatement(buf.toString());
			stmt.setLong(1, ct_id);

			int index = 0;

			rs = stmt.executeQuery();
			if(rs.next()){
				index=	rs.getInt("master_id");
			}

			//long newCN_Id = rs.getLong(1);
			return index;
		} 
		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}	
	}



	/**
	 * CONTENTS_MAPP_TBL 에 집어넣는다
	 * @param PdsArchiveDO                                                                                                                                                                                              
	 * @return                                                                                                                                                                                              
	 * @throws DASException
	 * @throws SQLException 
	 */
	public int insertContentsMappInfo(Connection con,TcBeanDO tcBeanDO,TcBeanDO oldBeanDO) throws DASException, SQLException
	{
		logger.debug(tcBeanDO);
		StringBuffer buf = new StringBuffer();
		buf.append("\n INSERT INTO DAS.CONTENTS_MAPP_TBL (    ");
		buf.append("\n CT_ID    ");
		buf.append("\n ,PGM_ID    ");
		buf.append("\n ,MASTER_ID    ");
		buf.append("\n ,CN_ID    ");
		buf.append("\n ,CT_SEQ    ");
		buf.append("\n ,S_DURATION    ");
		buf.append("\n ,E_DURATION    ");
		buf.append("\n ,REG_DT    ");
		buf.append("\n ,REGRID    ");
		buf.append("\n ,MODRID   ");
		buf.append("\n ,MOD_DT    ");
		buf.append("\n ,CN_SEQ    ");
		buf.append("\n ,DEL_DD )   ");
		buf.append("\n values ");
		buf.append("\n ( ");		
		buf.append("\n ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?  ");
		buf.append("\n ) ");

		//Connection con = null;
		PreparedStatement stmt = null;
		try 
		{
			//con = DBService.getInstance().getConnection();
			//con.setAutoCommit(false);

			stmt = con.prepareStatement(buf.toString());

			int updateCount = 0;
			int index=0;

			String dateTime = CalendarUtil.getDateTime("yyyyMMddHHmmss");
			index = 0;	

			stmt.setLong(++index,tcBeanDO.getCt_id());
			stmt.setLong(++index, 0);
			stmt.setLong(++index, tcBeanDO.getMaster_id());
			stmt.setLong(++index, tcBeanDO.getCn_id());
			stmt.setInt(++index, 0);
			stmt.setLong(++index, 0);
			stmt.setLong(++index, Long.parseLong(oldBeanDO.getDURATION()));
			stmt.setString(++index, dateTime);
			stmt.setString(++index,"");
			stmt.setString(++index, "");			
			stmt.setString(++index,dateTime);	
			stmt.setInt(++index, 1);
			stmt.setString(++index,"");	

			updateCount = stmt.executeUpdate();

			if (logger.isDebugEnabled()) 
			{
				logger.debug("[Inserted Count]" + updateCount);
			}

			if(updateCount == 0)
			{
				//여기서 에러를 던진다.
				DASException exception = new DASException(ErrorConstants.NOT_EXIST_PROGRAM_INFO, "저장에 실패했습니다.");
				throw exception;
			}


			con.commit();
			return updateCount;
		} 

		catch (SQLException e) 
		{
			logger.error(buf.toString());

			if(con != null)
			{
				try {
					con.rollback();
				} catch (SQLException e1) {
					// TODO 자동 생성된 catch 블록
					logger.error(e1);
				}
			}


			throw e;
		}
		finally
		{
			release(null, stmt, null);
			//	return 0;
		}

	}




	/**
	 * 수동아카이브 여부를 N으로 수정한다
	 * @param TASK_ID                                                                                                                                                                                              
	 * @return                                                                                                                                                                                              
	 * @throws Exception 
	 */
	public int updateManual_yn(long ct_id) throws Exception
	{

		StringBuffer buf = new StringBuffer();
		buf.append("\n update DAS.METADAT_MST_TBL set ");

		buf.append("\n 	MANUAL_YN = 'N'");
		buf.append("\n 	,ING_REG_DD= ? ");
		buf.append("\n 	WHERE master_id= (select master_id from contents_mapp_tbl where ct_id = ?  order by reg_dt desc fetch first 1 rows only )");

		boolean isUpdate = false;
		Connection con = null;
		PreparedStatement stmt = null;

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateManual_yn######## con : " + con);
			con.setAutoCommit(false);

			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			String dateTime = CalendarUtil.getDateTime("yyyyMMddHHmmss");

			stmt.setString(++index, dateTime);
			stmt.setLong(++index, ct_id);
			int updateCount = stmt.executeUpdate();

			if (logger.isDebugEnabled()) 
			{
				logger.debug("[Update Count]" + updateCount);
			}

			if(updateCount == 0)
			{
				//여기서 에러를 던진다.
				DASException exception = new DASException(ErrorConstants.NOT_EXIST_USER, "해당 사용자가 존재하지 않습니다.");
				throw exception;
			}

			//사용자 정보의 수정 내역을 등록한다.
			//insertNonEmployeeRoleHistory(con, beforeRoleDO);
			con.commit();
			return updateCount;
		} 
		catch (Exception e) 
		{
			logger.error(buf.toString());

			if(con != null)
			{
				try {
					con.rollback();
				} catch (SQLException e1) {
					// TODO 자동 생성된 catch 블록
					logger.error(e1);
				}
			}


			throw e;
		}
		finally
		{
			try {
				con.setAutoCommit(true);
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				logger.error(e);
			}
			release(null, stmt, con);
		}
	}




	/**
	 * NLE  & DTL 삭제한다.
	 * @param metadataMstInfoDO
	 * @return
	 * @throws Exception 
	 * @throws RemoteException
	 */
	public int deleteNLEMeta(long ct_id) throws Exception
	{	
		StringBuffer buf = new StringBuffer();
		buf.append("\n update das.metadat_mst_tbl set ");
		buf.append("\n 	del_dd = ? ");
		buf.append("\n 	WHERE MASTER_ID IN (SELECT  MASTER_ID FROM CONTENTS_MAPP_TBL WHERE CT_ID = ? )");
		//buf.append("\n 	AND CART_SEQ= ?");
		boolean isUpdate = false;
		Connection con = null;
		PreparedStatement stmt = null;

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######deleteNLEMeta######## con : " + con);
			con.setAutoCommit(false);

			stmt = con.prepareStatement(buf.toString());
			String dateString = CalendarUtil.getDateTime("yyyyMMdd");
			int index = 0;
			stmt.setString(++index, dateString);
			stmt.setLong(++index, ct_id);

			int updateCount = stmt.executeUpdate();

			if (logger.isDebugEnabled()) 
			{
				logger.debug("[Update Count]" + updateCount);
			}

			if(updateCount == 0)
			{
				//여기서 에러를 던진다.
				DASException exception = new DASException(ErrorConstants.NOT_EXIST_USER, "해당 사용자가 존재하지 않습니다.");
				throw exception;
			}
			/*	String _xml="";
			String str="";

			NevigatorProxy port = new NevigatorProxy();
			str = port.deleteContentService(_xml);

				logger.debug("port.archiveService(_xml)[result]="+str);
				//if(str.)
			 */			

			con.commit();
			return updateCount;
		} 
		catch (Exception e) 
		{
			logger.error(buf.toString());

			if(con != null)
			{
				try {
					con.rollback();
				} catch (SQLException e1) {
					// TODO 자동 생성된 catch 블록
					logger.error(e1);
				}
			}


			throw e;
		}
		finally
		{
			try {
				con.setAutoCommit(true);
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				logger.error(e);
			}
			release(null, stmt, con);
		}

	}




	public boolean isDownloadOutsourcing2(String userId) throws Exception
	{

		StringBuffer buf = new StringBuffer();
		buf.append("\n select ");
		buf.append("\n 	dept_cd ");
		buf.append("\n from user_info_tbl ");
		buf.append("\n where sbs_user_id = ? ");	
		buf.append("\n WITH UR	 ");



		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######isDownloadOutsourcing2######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setString(++index, userId);

			rs = stmt.executeQuery();

			while(rs.next()){;
			if(rs.getString("dept_cd").equals("D3JA01") || rs.getString("dept_cd").equals("QABF01"))
			{
				return true;
			}
			else
			{
				return false;
			}
			}

		} 
		catch (Exception e) 
		{
			logger.error(buf.toString());

			throw e;
		}
		finally
		{

			release(rs, stmt, con);
		}
		return false;		

	}


	private String getTitle(long master_id) throws Exception
	{
		StringBuffer buf = new StringBuffer();
		buf.append("\n select ");
		buf.append("\n 	title ");
		buf.append("\n from DAS.metadat_mst_tbl ");
		buf.append("\n where master_id = ?  ");
		buf.append("\n with ur ");

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######getTitle######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setLong(++index, master_id);

			rs = stmt.executeQuery();

			String title="";
			while(rs.next())
			{
				title=rs.getString("title");
			}
			return title;
		} 
		catch (Exception e) 
		{
			logger.error(buf.toString());

			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}

	private String getRistCdnm(String rist_cd) throws Exception
	{
		StringBuffer buf = new StringBuffer();
		buf.append("\n select ");
		buf.append("\n 	desc  ");
		buf.append("\n from DAS.code_tbl  ");
		buf.append("\n where scl_Cd = ? and clf_cd ='P018' AND GUBUN='L' ");
		buf.append("\n with ur ");

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######getRistCdnm######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setString(++index, rist_cd);

			rs = stmt.executeQuery();

			String title="";
			while(rs.next())
			{
				title=rs.getString("desc");
			}
			return title;
		} 

		catch (Exception e) 
		{
			logger.error(buf.toString());

			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}

	/**
	 * 카트정보를 업데이트 한다.
	 * @param cartContDO
	 * @return
	 * @throws Exception 
	 */
	public int updateCartContTbl(CartContDO cartContDO) throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n UPDATE DAS.CART_CONT_TBL set ");
		buf.append("\n DOWN_STAT=? ");
		buf.append("\n where CART_NO = ? AND CART_SEQ =? ");

		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateCartContTbl######## con : " + con);
			stmt = con.prepareStatement(buf.toString());
			int index = 0;
			stmt.setString(++index, "007");
			stmt.setLong(++index, cartContDO.getCartNo());
			stmt.setLong(++index, cartContDO.getCartSeq());

			int updateCount = stmt.executeUpdate();

			return updateCount;
		}
		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}


	/**
	 * 패스 정보(/mp2 or /arcreq  ==> Y: or z:)
	 * @param path
	 * @return
	 */
	public String getConvertPathString(String path){
		String tmpPath = "";
		String filepath = "";
		if(path.indexOf("\\") > -1) tmpPath= path.replaceAll("\\\\", "/");
		if(!path.startsWith("/")) tmpPath="/"+path.replace("//", "/").trim();
		//    

		if(tmpPath.indexOf("mp2") > -1) {
			filepath = (new StringBuilder("")).append(tmpPath.replace("/mp2", dasHandler.getProperty("MP2")).trim()).toString();
		}else if(tmpPath.indexOf("arcreq") > -1) {
			filepath = (new StringBuilder("")).append(tmpPath.replace("/arcreq", dasHandler.getProperty("ARCREQ")).trim()).toString();
		}else{
			logger.error("File Path header not exist!! (mp2 or arcreq)");
			return Boolean.toString(false);
		}
		return filepath;
	}





	/**
	 * 아카이브 전송재요청한다. DAS2.0
	 * @param 
	 * @return
	 * @throws RemoteException
	 */
	public PdsArchiveDO updateRetryArchive(long seq) throws DASException{

		StringBuffer buf = new StringBuffer();
		Connection con = null;		
		PreparedStatement psmt = null;		
		ResultSet rs = null;

		buf.append(" select loc.cti_id, loc.path,loc.filename,mst.PDS_CMS_PGM_ID,con.media_id ,con.vd_qlty from                 ");
		buf.append(" DAS.CONTENTS_LOC_TBL loc  ");
		buf.append(" inner join contents_inst_tbl inst on inst.CTi_id =loc.cti_id       ");
		buf.append(" inner join contents_tbl con on con.ct_id = inst.ct_id      ");
		buf.append(" inner join contents_mapp_tbl map on map.CT_ID = inst.CT_ID       ");
		buf.append(" inner join metadat_mst_tbl mst on mst.MASTER_ID = map.MASTER_ID       ");
		buf.append(" where num  = ?      ");
		buf.append("   with ur     ");
		try {
			con = DBService.getInstance().getConnection();
			//	logger.debug("######updateRetryArchive######## con : " + con);
			//con.setAutoCommit(false);

			psmt = con.prepareStatement(buf.toString());    
			int index = 0;			
			psmt.setLong(++index, seq);
			rs = psmt.executeQuery();	
			PdsArchiveDO item = new PdsArchiveDO();
			if(rs.next())
			{
				item.setCti_id(rs.getLong("cti_id"));
				String path = rs.getString("path");
				if(path.contains("mp2")||path.contains("arcreq")){
					item.setFl_path(rs.getString("path"));
				}else{
					path= "/mp2/"+path.replace("\\", "/");
					item.setFl_path(path);
				}
				item.setFl_nm(rs.getString("filename"));
				item.setMedia_id(rs.getString("media_id"));
				item.setPds_cms_id(rs.getString("PDS_CMS_PGM_ID"));
				item.setVd_qulty(rs.getString("vd_qlty"));
			}

			//con.setAutoCommit(true);
			return item;   
		}
		catch (Exception ex)
		{
			logger.error(buf.toString());
			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "selectTcJon 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, con);
		}

	}


	/**
	 * 아카이브 전송재요청한다. DAS2.0
	 * @param 
	 * @return
	 * @throws RemoteException
	 */
	public PdsArchiveDO updateRetryArchiveByCtId(long ct_id) throws DASException{

		StringBuffer buf = new StringBuffer();
		Connection con = null;		
		PreparedStatement psmt = null;		
		ResultSet rs = null;

		buf.append(" select distinct inst.cti_id, inst.FL_PATH,value(mst.PDS_CMS_PGM_ID,'') as PDS_CMS_PGM_ID ,con.media_id                ");
		buf.append(" ,mst.ctgr_l_Cd,con.ct_cla              ");
		buf.append(" ,case when mst.ARCH_ROUTE like 'O%' or mst.ARCH_ROUTE like 'D%' THEN INST.WRK_FILE_NM  ELSE inst.org_FILE_NM END as wrk_FILE_NM  from                 ");

		buf.append(" contents_inst_tbl inst   ");
		buf.append(" inner join contents_tbl con on con.ct_id = inst.ct_id      ");
		buf.append(" inner join contents_mapp_tbl map on map.CT_ID = inst.CT_ID       ");
		buf.append(" inner join metadat_mst_tbl mst on mst.MASTER_ID = map.MASTER_ID       ");
		buf.append(" where inst.ct_id =    ?   and inst.cti_fmt like '1%'   ");
		buf.append("   with ur     ");
		try {
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateRetryArchiveByCtId######## con : " + con);
			//con.setAutoCommit(false);
			psmt = con.prepareStatement(buf.toString());    
			int index = 0;			
			psmt.setLong(++index, ct_id);
			rs = psmt.executeQuery();	
			PdsArchiveDO item = new PdsArchiveDO();
			if(rs.next())
			{
				item.setCti_id(rs.getLong("cti_id"));
				String path = rs.getString("FL_PATH");
				if(path.contains("mp2")||path.contains("arcreq")||path.contains("nearline")){
					item.setFl_path(rs.getString("FL_PATH"));
				}else{
					path= "/mp2/"+path.replace("\\", "/");
					item.setFl_path(path);
				}
				item.setFl_nm(rs.getString("wrk_FILE_NM"));
				item.setMedia_id(rs.getString("media_id"));
				item.setPds_cms_id(rs.getString("PDS_CMS_PGM_ID"));
				item.setCtgr_l_cd(rs.getString("CTGR_L_CD"));
				item.setCt_cla(rs.getString("CT_CLA"));
			}

			//con.setAutoCommit(true);
			return item;   
		}
		catch (Exception ex)
		{
			logger.error(buf.toString());

			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "selectTcJon 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, con);
		}

	}


	/**
	 * 해당 영상 아이디로 아카이브 경로를 받아온다
	 * @param ct_id
	 * @return
	 * @throws DASException
	 */
	public PdsArchiveDO selectArchiveInfo(long ct_id) throws DASException{

		StringBuffer buf = new StringBuffer();
		Connection con = null;		
		PreparedStatement psmt = null;		
		ResultSet rs = null;

		buf.append(" SELECT  ARCH_ROUTE,COCD, CHENNEL_CD FROM METADAT_MST_TBL                 ");
		buf.append(" WHERE MASTER_ID = (SELECT MASTER_ID FROM CONTENTS_MAPP_TBL WHERE CT_ID= ? fetch first 1 rows only )  ");

		try {
			con = DBService.getInstance().getConnection();
			//logger.debug("######selectArchiveInfo######## con : " + con);
			//con.setAutoCommit(false);
			psmt = con.prepareStatement(buf.toString());    
			int index = 0;			
			psmt.setLong(++index, ct_id);
			rs = psmt.executeQuery();	
			String arch_route="";

			PdsArchiveDO pdo = new PdsArchiveDO();
			if(rs.next())
			{

				pdo.setArch_route(rs.getString("ARCH_ROUTE"));
				pdo.setCocd(rs.getString("COCD"));
				pdo.setChennel(rs.getString("CHENNEL_CD"));

			}

			//con.setAutoCommit(true);
			return pdo;   
		}
		catch (Exception ex)
		{
			logger.error(buf.toString());

			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "selectTcJon 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, con);
		}

	}


	/**
	 * 해당 영상 아이디로 콘텐츠 아이디를 가지고 온다.(ERP 매체변환 기준)
	 * @param pdsArchiveDO
	 * @return
	 * @throws DASException
	 */
	public PdsArchiveDO selectCtiFromCtIdForNonERP(long ct_id) throws DASException{

		StringBuffer buf = new StringBuffer();
		Connection con = null;		
		PreparedStatement psmt = null;		
		ResultSet rs = null;

		buf.append(" SELECT INST.CTI_ID, INST.FL_PATH, INST.WRK_FILE_NM, CON.MEDIA_ID, CON.REG_DT ,con.vd_qlty  ,con.ct_cla                ");
		buf.append(" ,mst.ctgr_l_cd  ");
		buf.append(" FROM DAS.CONTENTS_INST_TBL INST  ");
		buf.append(" INNER JOIN DAS.CONTENTS_TBL CON ON INST.CT_ID =CON.CT_ID and INST.CTI_FMT LIKE '1%'       ");
		buf.append(" INNER JOIN (select master_id, ct_id  from DAS.CONTENTS_MAPP_TBL group by master_id,ct_id) map ON INST.CT_ID =map.CT_ID       ");
		buf.append(" INNER JOIN das.metadat_mst_Tbl mst on mst.master_id = map.master_id      ");
		buf.append(" WHERE INST.CT_ID = ?         ");
		buf.append(" fetch first 1 rows only        ");
		try {
			con = DBService.getInstance().getConnection();
			//logger.debug("######selectCtiFromCtIdForNonERP######## con : " + con);
			//con.setAutoCommit(false);
			psmt = con.prepareStatement(buf.toString());    
			int index = 0;			
			psmt.setLong(++index, ct_id);
			rs = psmt.executeQuery();	
			PdsArchiveDO item = new PdsArchiveDO();
			if(rs.next())
			{
				item.setCti_id(rs.getLong("CTI_ID"));
				item.setFl_path(rs.getString("FL_PATH"));
				item.setFl_nm(rs.getString("WRK_FILE_NM"));
				item.setMedia_id(rs.getString("MEDIA_ID"));
				item.setReq_dt(rs.getString("REG_DT"));
				item.setVd_qulty(rs.getString("vd_qlty"));
				item.setCt_cla(rs.getString("ct_cla"));
				item.setCtgr_l_cd(rs.getString("ctgr_l_cd"));
			}
			//con.setAutoCommit(true);
			return item;   
		}
		catch (Exception ex)
		{
			logger.error(buf.toString());

			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "selectTcJon 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, con);
		}

	}

	/**
	 * 코너의 내용을 입력한다
	 * @param cnInfoDO                                                                                                                                    	
	 * @throws Exception 
	 */
	public List insertCornerContinfo(long cn_id, List annotInfoList) throws Exception
	{


		Connection con = null;
		PreparedStatement stmt = null;

		StringBuffer buf = new StringBuffer();

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######insertCornerContinfo######## con : " + con);
			con.setAutoCommit(false);


			//	코서 설명 테이블 삭제

			buf.append("\n delete from das.CN_DETAIL where CN_ID = ? ");

			stmt = con.prepareStatement(buf.toString());

			int index = 0;

			stmt.setLong(++index, cn_id);
			stmt.executeUpdate();

			List resultList = new ArrayList();
			Iterator _iter = annotInfoList.iterator();


			while (_iter.hasNext()) 
			{					
				CnInfoDO	cnInfoDO = (CnInfoDO)_iter.next();

				// 만약 annotID가 -1이면 전체를 삭제하고 나가면 된다. annot를 전체 삭제한 경우에만(annot가 하나 있었는데 그걸 삭제한 경우 처리를 위해) annotID가 -1이다.
				if (-1 == cnInfoDO.getCnId())
				{
					break;	// 위에서 삭제를 했으니까 결국은 전체 삭제가 된거다. 
				}

				String query = ExternalStatement.insertCornerContQuery();
				stmt = con.prepareStatement(query);

				index = 0;

				stmt.setLong(++index, cnInfoDO.getSeq());
				stmt.setLong(++index, cnInfoDO.getCnId()); 			
				stmt.setString(++index, cnInfoDO.getSom()); 
				stmt.setString(++index, cnInfoDO.getEom());
				stmt.setString(++index, cnInfoDO.getCont());

				stmt.executeUpdate();

				resultList.add(cnInfoDO);

			}

			con.commit();		

			return resultList;

		} 
		catch (Exception e) 
		{
			logger.error(buf.toString());
			if(con != null)
			{
				try {
					con.rollback();					
				} catch (SQLException e1) {
					// TODO 자동 생성된 catch 블록
					logger.error(e1);
				}
			}

			throw e;
		}
		finally
		{
			//try { 	if (stmt != null)  stmt.close();	} catch (SQLException e) {}
			try {
				con.setAutoCommit(true);
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				logger.error(e);
			}
			release(null, stmt, con);
		}

	}



	/**
	 * 코너의 내용을 입력한다
	 * @param cnInfoDO                                                                                                                                    	
	 * @throws Exception 
	 */
	public List insertCornerContinfoByBatch(long cn_id, List annotInfoList) throws Exception
	{


		Connection con = null;
		PreparedStatement stmt = null;
		StringBuffer buf = new StringBuffer();

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######insertCornerContinfoByBatch######## con : " + con);
			con.setAutoCommit(false);


			//	코서 설명 테이블 삭제

			buf.append("\n delete from das.CN_DETAIL where CN_ID = ? ");

			stmt = con.prepareStatement(buf.toString());

			int index = 0;

			stmt.setLong(++index, cn_id);
			stmt.executeUpdate();


			if(annotInfoList.size()>0){
				String query = ExternalStatement.insertCornerContQuery();
				stmt = con.prepareStatement(query);
			}


			List resultList = new ArrayList();
			Iterator _iter = annotInfoList.iterator();


			while (_iter.hasNext()) 
			{					
				CnInfoDO	cnInfoDO = (CnInfoDO)_iter.next();

				// 만약 annotID가 -1이면 전체를 삭제하고 나가면 된다. annot를 전체 삭제한 경우에만(annot가 하나 있었는데 그걸 삭제한 경우 처리를 위해) annotID가 -1이다.
				if (-1 == cnInfoDO.getCnId())
				{
					break;	// 위에서 삭제를 했으니까 결국은 전체 삭제가 된거다. 
				}

				index = 0;

				stmt.setLong(++index, cnInfoDO.getSeq());
				stmt.setLong(++index, cnInfoDO.getCnId()); 			
				stmt.setString(++index, cnInfoDO.getSom()); 
				stmt.setString(++index, cnInfoDO.getEom());
				stmt.setString(++index, cnInfoDO.getCont());

				stmt.addBatch();
				resultList.add(cnInfoDO);

			}
			int[] rInt = null;
			if(annotInfoList.size()>0)rInt = stmt.executeBatch();

			con.commit();		

			return resultList;

		} 
		catch (Exception e) 
		{
			logger.error(buf.toString());
			if(con != null)
			{
				try {
					con.rollback();					
				} catch (SQLException e1) {
					// TODO 자동 생성된 catch 블록
					logger.error(e1);
				}
			}

			throw e;
		}
		finally
		{
			//try { 	if (stmt != null)  stmt.close();	} catch (SQLException e) {}
			release(null, stmt, con);
		}

	}





	/**
	 * 회차 정보를 을 입력한다
	 * @param cnInfoDO                                                                                                                                    	
	 * @throws Exception 
	 */
	private String getEpisNo(long ct_id) throws Exception
	{
		StringBuffer buf = new StringBuffer();
		buf.append("\n select ");
		buf.append("\n 	mst.epis_no ");
		buf.append("\n from DAS.METADAT_MST_TBL MST ");
		buf.append("\n INNER JOIN CONTENTS_MAPP_tBL MAP ON MAP.MASTER_ID = MST.MASTER_ID ");
		buf.append("\n where CT_ID = ? ");

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######getEpisNo######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setLong(++index, ct_id);

			rs = stmt.executeQuery();

			String epis_no="";

			while(rs.next())
			{
				epis_no = rs.getString("epis_no");

			}

			return epis_no;
		} 
		catch (Exception e) 
		{
			logger.error(buf.toString());

			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}


	/**
	 * 사용등급 명을 얻어온다
	 * @param cnInfoDO                                                                                                                                    	
	 * @throws Exception 
	 */
	private String getRistClfcd(String code) throws Exception
	{
		StringBuffer buf = new StringBuffer();
		buf.append("\n select ");
		buf.append("\n 	desc ");
		buf.append("\n from DAS.code_tbl ");
		buf.append("\n where clf_cd ='P018' and scl_Cd = ? ");

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######getRistClfcd######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setString(++index, code);

			rs = stmt.executeQuery();

			String code_nm="";

			while(rs.next())
			{
				code_nm = rs.getString("desc");

			}

			return code_nm;
		} 
		catch (Exception e) 
		{
			logger.error(buf.toString());

			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}





	public String insertMediaid() throws SQLException
	{

		StringBuffer buf = new StringBuffer();
		StringBuffer buf3 = new StringBuffer();
		Connection con = null;		
		PreparedStatement psmt = null;	
		PreparedStatement psmt3 = null;	
		ResultSet rs = null;


		buf.append(" SELECT   CT_ID  ,LEFT(REG_DT,8) AS REG_DT FROM CONTENTS_TBL WHERE media_id='' AND REG_DT <>'' order by ct_id asc fetch first 100000 rows only  ");

		buf3.append(" update contents_tbl set media_id =? where ct_id =? ");


		try {
			con = DBService.getInstance().getConnection();
			//logger.debug("######insertMediaid######## con : " + con);
			con.setAutoCommit(false);
			psmt = con.prepareStatement(buf.toString()); 
			psmt3 = con.prepareStatement(buf3.toString());
			List resultList = new ArrayList();

			int index = 0;			
			int[] rInt = null;
			int cnt =1;

			rs = psmt.executeQuery();
			while(rs.next())
			{
				PdsArchiveDO item = new PdsArchiveDO();
				item.setCt_id(rs.getLong("CT_ID"));
				item.setReq_dt(rs.getString("reg_dt"));
				resultList.add(item);
			}



			for(int i=0;i<resultList.size();i++){
				index = 0;
				PdsArchiveDO ref = (PdsArchiveDO)resultList.get(i);
				String sTmp = codeInfoDAO.getMediaId(ref.getReq_dt());


				psmt3.setString(++index, sTmp);
				psmt3.setLong(++index, ref.getCt_id()); //REQ_USRID   

				//cnt = cnt +psmt3.executeUpdate();
				psmt3.addBatch();
				if(i%2000==0){
					psmt3.executeBatch();
				}


			}


			rInt = psmt3.executeBatch();
			//  if(resultList.size()>0)rInt = psmt3.executeBatch();

			//con.setAutoCommit(true);

			return rInt + "";   


		}

		catch(Exception ex)
		{
			logger.error(buf.toString());
		}
		finally
		{
			try {
				con.setAutoCommit(true);
			} catch (Exception e) {
				// TODO: handle exception
			}

			release(rs, psmt, con);
			release(null, psmt3, null);
		}

		return "0";   
	}
	/**
	 * 스토리지 여부를 판단한다
	 * @throws Exception 
	 * */ 
	public boolean isStorageYN(long cartNo) throws Exception
	{

		StringBuffer buf = new StringBuffer();
		buf.append("\n select ");
		buf.append("\n 	STORAGE_YN ");
		buf.append("\n from DAS.DOWN_CART_tbl ");
		buf.append("\n where CART_NO = ? ");	
		buf.append("\n WITH UR	 ");

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######isStorageYN######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setLong(++index, cartNo);
			rs = stmt.executeQuery();

			while(rs.next()){;
			if(rs.getString("STORAGE_YN").equals(DASBusinessConstants.YesNo.YES))
			{
				return true;
			}
			else
			{
				return false;
			}
			}
			return false;
		} 
		catch (Exception e) 
		{
			logger.error(buf.toString());

			throw e;
		}
		finally
		{
			if (logger.isDebugEnabled()) 
			{
				logger.debug("[isDownloadRistrict Released : CartNo = " + cartNo + "]");
			}
			release(rs, stmt, con);
		}		

	}




	public String getIdFormasterId(long master_id) throws Exception
	{
		StringBuffer buf = new StringBuffer();
		buf.append("\n select distinct ");
		buf.append("\n 	mapp.ct_id ");
		buf.append("\n from das.contents_mapp_Tbl mapp ");	
		buf.append("\n inner join das.CONTENTS_TBL CON on mapp.ct_id = CON.CT_ID and CON.CT_TYP ='003'");

		buf.append("\n where mapp.master_id = ?	 ");
		buf.append("\n and mapp.del_dd='' ");
		buf.append("\n WITH UR	 ");

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######getIdFormasterId######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setLong(++index, master_id);


			rs = stmt.executeQuery();

			int nPrior = 0;
			int nOldPrior = 0;

			String master_ids = "";
			long masterd =0L;

			while(rs.next()) {
				if(master_ids.equals("")){
					master_ids = String.valueOf(rs.getLong("ct_id"));
				}else{
					master_ids = master_ids+ "," +String.valueOf(rs.getLong("ct_id"));
				}
			}		
			return master_ids;
		} 
		catch (Exception e) 
		{
			logger.error(buf.toString());

			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}






	/**
	 * 해당 사진id로 삭제된 사진들의 수를 파악한다
	 * @param ct_id
	 * @return
	 * @throws DASException
	 */
	public boolean selectDelPhotCount(long pgm_id) throws DASException{

		StringBuffer buf = new StringBuffer();
		Connection con = null;		
		PreparedStatement psmt = null;		
		ResultSet rs = null;


		buf.append(" select DEL_YN, count(*) as del_count from PGM_PHOT_INFO_TBL where phot_id = ? group by del_yn  order by del_yn desc");

		try {
			con = DBService.getInstance().getConnection();
			//logger.debug("######selectDelPhotCount######## con : " + con);
			//con.setAutoCommit(false);
			psmt = con.prepareStatement(buf.toString());    
			int index = 0;			
			psmt.setLong(++index, pgm_id);
			rs = psmt.executeQuery();	
			String del_yn="";
			int del_count=0;
			boolean resutl = true;
			while(rs.next())
			{
				del_yn = rs.getString("DEL_YN");
				del_count = rs.getInt("del_count");

				if(del_yn.trim().equals("N")&&del_count>0){
					resutl = false;
				}

			}


			return resutl;   
		}
		catch (Exception ex)
		{
			logger.error(buf.toString());
			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "selectTcJon 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, con);
		}

	}





	/**
	 *  ct_id에 소속된 메타id를 구한다.
	 * @param master_id
	 * @return
	 * @throws DASException
	 */
	public boolean getCountCtId(long ct_id) throws DASException{

		StringBuffer buf = new StringBuffer();
		Connection con = null;		
		PreparedStatement psmt = null;		
		ResultSet rs = null;


		buf.append("\n SELECT						");
		buf.append("\n count(1) as ct_id from contents_mapp_Tbl where master_id in (select master_id from contents_mapp_Tbl where ct_id = "+ct_id+") and del_dd=''        ");


		try {
			con = DBService.getInstance().getConnection();
			//logger.debug("######getCountCtId######## con : " + con);
			psmt = con.prepareStatement(buf.toString());    
			int index = 0;			
			//psmt.setLong(++index, ct_id);
			rs = psmt.executeQuery();
			boolean trfa = false;
			long old_ct_id=0L;
			long new_ct_id =0L;
			int count=0;
			if(rs.next())
			{

				new_ct_id = rs.getLong("ct_id");
				logger.debug("######new_ct_id :"+new_ct_id);
				if(new_ct_id==0){
					trfa= true;
				}else{
					trfa=false;
				}
			}
			/* int totalCount = getTotalCount(con, buf.toString());
			 logger.debug("#########");
			 if (totalCount > 0) {
				 return false;
			 } else {
				 return true;
			 }*/
			logger.debug("######trfa :"+trfa);
			return trfa;

		}
		catch (Exception ex)
		{
			logger.error(buf.toString());
			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "selectTcJon 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, con);
		}
	}




	/**
	 * 삭제일을 구한다
	 * @param long ct_id
	 * @return String
	 * @throws Exception 
	 */
	public ContentMappInfoDO selectMapDeldd(long master_id) throws Exception
	{
		String query = ExternalStatement.selectMapDeldd(master_id);

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######selectMapDeldd######## con : " + con);
			stmt = con.prepareStatement(query);

			String str = null;		
			rs = stmt.executeQuery();
			String del_dd ="";
			String ct_ids ="";
			ContentMappInfoDO	contentMappInfoDO = new ContentMappInfoDO();
			while(rs.next())
			{
				if(ct_ids.equals("")){
					ct_ids= rs.getString("ct_id");
				}else{
					ct_ids= ct_ids+","+	rs.getString("ct_id");
				}
				if(del_dd.equals("")){
					del_dd = rs.getString("del_dd");
				}else{
					del_dd=del_dd+","+	rs.getString("del_dd");
				}
			}		

			contentMappInfoDO.setCt_ids(ct_ids);
			contentMappInfoDO.setDel_dds(del_dd);
			return contentMappInfoDO;

		} 
		catch (Exception e) 
		{
			logger.error(query);

			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}



	/**
	 * 다운로드 완료 DAS2.0
	 * @param cartNo
	 * @param cartState
	 * @param title
	 * @return
	 * @throws Exception 
	 */
	public int updateCompleteDown(int cart_no, int cart_seq) throws Exception
	{		

		StringBuffer buf = new StringBuffer();

		buf.append("\n update DAS.cart_cont_tbl set ");
		buf.append("\n DOWN_STAT = ? ");
		buf.append("\n where CART_NO = ? ");
		buf.append("\n and cart_seq = ? ");
		PreparedStatement stmt = null;

		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateCompleteDown######## con : " + con);
			//con.setAutoCommit(false);	


			stmt = con.prepareStatement(buf.toString());

			int updateCount=0;
			int index = 0;

			stmt.setString(++index, CodeConstants.CartStatus2.DOWNLOAD_COMPLET);
			stmt.setInt(++index, cart_no);		
			stmt.setInt(++index, cart_seq);		
			updateCount = stmt.executeUpdate();

			//con.setAutoCommit(true);

			return updateCount;
		}

		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}		
		finally
		{
			//try { 	if (stmt != null)  stmt.close();	} catch (SQLException e) {}
			try {
				con.setAutoCommit(true);
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				logger.error(e);
			}
			release(null, stmt, con);
		}

	}





	/**
	 * 사진아이디를 기준으로 사진 정보를 구한다
	 * @param long phot_id
	 * @return String
	 * @throws Exception 
	 */
	public long selectPhotIdForPgmId(long phot_id) throws Exception
	{
		String query = ExternalStatement.selectPhotIdForPgmId(phot_id);

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			stmt = con.prepareStatement(query);

			String str = null;		
			rs = stmt.executeQuery();
			long pgm_id =0l;

			while(rs.next())
			{
				pgm_id = rs.getLong("pgm_id");
			}		


			return pgm_id;

		} 
		catch (Exception e) 
		{
			logger.error(query);

			throw e;
		} 

		finally
		{
			release(rs, stmt, con);
		}
	}




	public String updateBrdLeng() throws SQLException
	{

		StringBuffer buf = new StringBuffer();
		StringBuffer buf2 = new StringBuffer();
		StringBuffer buf3 = new StringBuffer();
		Connection con = null;		
		PreparedStatement psmt = null;	
		PreparedStatement psmt2 = null;	
		PreparedStatement psmt3 = null;	
		ResultSet rs = null;


		buf.append(" SELECT   master_id, sum_brd_leng FROM master_brd_leng  order by master_id asc fetch first 10000 rows only  ");

		buf3.append(" update metadat_mst_Tbl set brd_leng =? where master_id =? ");

		buf2.append("  delete from master_brd_leng where master_id in (?)");
		try {
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateBrdLeng######## con : " + con);
			//con.setAutoCommit(false);
			psmt = con.prepareStatement(buf.toString());
			psmt2 = con.prepareStatement(buf2.toString());
			psmt3 = con.prepareStatement(buf3.toString());
			List resultList = new ArrayList();

			int index = 0;			
			int[] rInt = null;
			int cnt =1;

			rs = psmt.executeQuery();
			while(rs.next())
			{
				CartContDO item = new CartContDO();
				item.setMaster_id(rs.getLong("master_id"));
				item.setDuration(rs.getLong("sum_brd_leng"));
				resultList.add(item);
			}



			for(int i=0;i<resultList.size();i++){
				index = 0;
				CartContDO ref = (CartContDO)resultList.get(i);
				CommonUtl commonUtl = new CommonUtl();
				String timecode=commonUtl.changeDuration(ref.getDuration());

				psmt3.setString(++index, timecode);
				psmt3.setLong(++index, ref.getMaster_id()); //REQ_USRID   

				//cnt = cnt +psmt3.executeUpdate();
				index = 0;
				psmt2.setLong(++index, ref.getMaster_id());
				psmt3.addBatch();
				psmt2.addBatch();

				if(i%2000==0){
					psmt3.executeBatch();
					psmt2.executeBatch();

				}


			}


			rInt = psmt3.executeBatch();
			rInt = psmt2.executeBatch();
			//  if(resultList.size()>0)rInt = psmt3.executeBatch();

			//con.setAutoCommit(true);

			return rInt + "";   


		}
		catch (Exception ex)
		{
			logger.error(buf.toString());
			logger.error(buf2.toString());
			logger.error(buf3.toString());

		}
		finally
		{
			try {
				con.setAutoCommit(true);
			} catch (Exception e) {
				// TODO: handle exception
			}

			release(null, psmt3, null);
			release(null, psmt2, null);
			release(rs, psmt, con);
		}

		return "0";   
	}



	/**
	 * Content_inst_tbl에 데이터를 집어 넣는다(wmv)
	 * @param PdsArchiveDO                                                                                                                                                                                              
	 * @return                                                                                                                                                                                              
	 * @throws Exception 
	 */
	public int insertConInstInfoForLow(TcBeanDO tcbean) throws Exception
	{

		StringBuffer buf = new StringBuffer();
		buf.append("\n INSERT INTO DAS.CONTENTS_INST_TBL (    ");
		buf.append("\n CTI_ID    ");
		buf.append("\n ,CT_ID    ");
		buf.append("\n ,CTI_FMT    ");
		buf.append("\n ,ARCH_STE_YN    ");
		buf.append("\n ,ME_CD    ");
		buf.append("\n ,BIT_RT    ");
		buf.append("\n ,FRM_PER_SEC    ");
		buf.append("\n ,DRP_FRM_YN    ");
		buf.append("\n ,VD_HRESOL    ");
		buf.append("\n ,VD_VRESOL   ");
		buf.append("\n ,COLOR_CD    ");
		buf.append("\n ,RECORD_TYPE_CD    ");
		buf.append("\n ,AUDIO_YN    ");
		buf.append("\n ,AUD_TYPE_CD    ");
		buf.append("\n ,AUD_LAN_CD    ");
		buf.append("\n ,AUD_SAMP_FRQ    ");
		buf.append("\n ,AUDIO_BDWT   ");
		buf.append("\n ,NOI_RDUC_TYP_CD    ");
		buf.append("\n ,INGEST_EQ_ID    ");
		buf.append("\n ,ENC_QLTY_CD    ");
		buf.append("\n ,ENC_QLTY_DESC    ");
		buf.append("\n ,FL_PATH    ");
		buf.append("\n ,WRK_FILE_NM    ");
		buf.append("\n ,ORG_FILE_NM   ");
		buf.append("\n ,FL_SZ    ");
		buf.append("\n ,REG_DT    ");
		buf.append("\n ,REGRID    ");
		buf.append("\n ,MOD_DT    ");
		buf.append("\n ,MODRID    ");
		buf.append("\n ,DTL_YN    ");
		buf.append("\n ,FILE_YN    ");
		buf.append("\n ,OUT_SYSTEM_ID    ");
		buf.append("\n ,WMV_YN  ) ");
		buf.append("\n values ");
		buf.append("\n ( ");		
		buf.append("\n ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,  ");
		buf.append("\n ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,  ");
		buf.append("\n ?, ?, ?, ?, ?, ?, ? ");
		buf.append("\n ) ");

		Connection con = null;
		PreparedStatement stmt = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######insertConInstInfoForLow######## con : " + con);
			con.setAutoCommit(false);

			stmt = con.prepareStatement(buf.toString());

			int updateCount = 0;
			int index=0;


			index = 0;	
			String dateTime = CalendarUtil.getDateTime("yyyyMMddHHmmss");
			long cti_id= systemManageDAO.selectCtiid();
			stmt.setLong(++index, cti_id);//CTI_ID
			stmt.setLong(++index, tcbean.getCt_id());//CT_ID
			stmt.setString(++index, "301");//CTI_FMT
			stmt.setString(++index,"");//ARCH_STE_YN
			stmt.setString(++index, "");//ME_CD
			stmt.setString(++index, "");//BIT_RT
			stmt.setString(++index, "");//FRM_PER_SEC
			stmt.setString(++index, "");//DRP_FRM_YN
			stmt.setInt(++index, 0);//VD_HRESOL
			stmt.setInt(++index, 0);	//	VD_VRESOL	
			stmt.setString(++index, "");//COLOR_CD
			stmt.setString(++index, "");//RECORD_TYPE_CD
			stmt.setString(++index,"N");//AUDIO_YN
			stmt.setString(++index,"");////AUD_TYPE_CD
			stmt.setString(++index, "");//AUD_LAN_CD
			stmt.setString(++index, "");//AUD_SAMP_FRQ
			stmt.setString(++index, "");//AUDIO_BDWT
			stmt.setString(++index, "");//NOI_RDUC_TYP_CD
			stmt.setInt(++index , 0);//INGEST_EQ_ID
			stmt.setString(++index, "");	//		ENC_QLTY_CD
			stmt.setString(++index, "");//ENC_QLTY_DESC
			stmt.setString(++index, "");//FL_PATH
			stmt.setString(++index,cti_id+".mp4");//WRK_FILE_NM
			stmt.setString(++index, "");////ORG_FILE_NM
			stmt.setLong(++index, 0);//FL_SZ
			stmt.setString(++index, dateTime);//REG_DT
			stmt.setString(++index,tcbean.getRegrid());//REGRID
			stmt.setString(++index, "");//MOD_DT
			stmt.setString(++index, "");//MODRID
			stmt.setString(++index, "");	//DTL_YN	
			stmt.setString(++index,"");	//FILE_YN
			stmt.setString(++index, "DAS"+cti_id);//OUT_SYSTEM_ID
			stmt.setString(++index, "N");//WMV_YN

			updateCount = stmt.executeUpdate();

			if (logger.isDebugEnabled()) 
			{
				logger.debug("[Inserted Count]" + updateCount);
			}

			if(updateCount == 0)
			{
				//여기서 에러를 던진다.
				DASException exception = new DASException(ErrorConstants.NOT_EXIST_PROGRAM_INFO, "저장에 실패했습니다.");
				throw exception;
			}


			con.commit();
			return updateCount;
		} 

		catch (Exception e) 
		{
			logger.error(buf.toString());

			if(con != null)
			{
				try {
					con.rollback();
				} catch (SQLException e1) {
					// TODO 자동 생성된 catch 블록
					logger.error(e1);
				}
			}


			throw e;
		}
		finally
		{
			try {
				con.setAutoCommit(true);
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				logger.error(e);
			}
			release(null, stmt, con);
			//	return 0;
		}

	}



	/**
	 * 대본정보를 저장하는 프로시져
	 * @throws Exception 
	 * 
	 */
	public String insertSceanarioForProceduer(long master_id) throws Exception{
		Connection con = null;
		CallableStatement stmt = null;
		String mediaId ="";
		StringBuffer buf = new StringBuffer();
		buf.append(" CALL DAS.PRC_SET_SCENARIO_TBL2(?)");
		try {
			con = DBService.getInstance().getConnection();
			//logger.debug("######insertSceanarioForProceduer######## con : " + con);
			stmt = con.prepareCall(buf.toString());
			stmt.setLong(1,master_id);
			//stmt.registerOutParameter(1, Types.INTEGER);
			stmt.execute();
			//	mediaId = stmt.getString(1);

			stmt.close();

			return "1";
		}

		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			releaseConnection(con);
			releaseStatement(stmt);
		}
	}




	//2012.4.16 das2.0 확장 함수 부분 



	/**
	 * 마스터 테이블 상태코드를 갱신한다.
	 * @param metadataMstInfoDO 

	 * @return        Update count
	 * @throws Exception 
	 */
	public int updateMetaDatastatCd(MetadataMstInfoDO metadataMstInfoDO) throws Exception
	{
		StringBuffer buf = new StringBuffer();				
		if(metadataMstInfoDO.getDataStatCd().equals("007"))
		{
			buf.append("\n update das.metadat_mst_tbl set ");
			buf.append("\n 	data_stat_cd = '007', ");
			buf.append("\n 	use_yn = 'Y', ");
			buf.append("\n 	accept_end_dd = ? ,");
			buf.append("\n 	acceptor_id = ? ");
			buf.append("\n where master_id = ? ");
		}
		else if(metadataMstInfoDO.getDataStatCd().equals("003"))
		{
			buf.append("\n update das.metadat_mst_tbl set ");
			buf.append("\n 	ARRG_END_DT = ?, ");
			buf.append("\n 	data_stat_cd = '003', ");
			buf.append("\n 	use_yn = 'Y', ");		// 정리완료일 때도 적어준다.
			buf.append("\n 	sec_arch_id = ?, ");
			buf.append("\n 	sec_arch_nm = ? ");
			buf.append("\n where master_id = ? ");
		}else if(metadataMstInfoDO.getDataStatCd().equals("009")){
			buf.append("\n update das.metadat_mst_tbl set ");
			buf.append("\n 	data_stat_cd = '009', ");
			buf.append("\n 	ERROR_ID = ?, ");
			buf.append("\n 	MOD_DT = ? ,");
			buf.append("\n 	ERROR_DT = ? ");
			buf.append("\n where master_id = ? ");
		}else if(metadataMstInfoDO.getDataStatCd().equals("001")){
			buf.append("\n update das.metadat_mst_tbl set ");
			buf.append("\n 	data_stat_cd = '001' ");
			buf.append("\n where master_id = ? ");
		}

		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateMetaDatastatCd######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			if(metadataMstInfoDO.getDataStatCd().equals("007"))
			{
				stmt.setString(++index, CalendarUtil.getDateTime("yyyyMMddHHmmss"));
				stmt.setString(++index, metadataMstInfoDO.getAcceptorId());
				stmt.setLong(++index, metadataMstInfoDO.getMasterId());	
			}
			else if(metadataMstInfoDO.getDataStatCd().equals("003"))
			{
				stmt.setString(++index, metadataMstInfoDO.getSecArchId());
				stmt.setString(++index, metadataMstInfoDO.getSecArchNm());
				stmt.setString(++index, CalendarUtil.getDateTime("yyyyMMddHHmmss"));
				stmt.setLong(++index, metadataMstInfoDO.getMasterId());
			}
			else if(metadataMstInfoDO.getDataStatCd().equals("009"))
			{
				stmt.setString(++index, metadataMstInfoDO.getError_id());
				stmt.setString(++index, CalendarUtil.getDateTime("yyyyMMddHHmmss"));
				stmt.setString(++index, CalendarUtil.getDateTime("yyyyMMddHHmmss"));
				stmt.setLong(++index, metadataMstInfoDO.getMasterId());
			}else if(metadataMstInfoDO.getDataStatCd().equals("001"))
			{

				stmt.setLong(++index, metadataMstInfoDO.getMasterId());
			}


			int updateCount = stmt.executeUpdate();

			return updateCount;
		}
		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			//try { 	if (stmt != null)  stmt.close();	} catch (SQLException e) {}
			release(null, stmt, con);
		}

	}





	//2012.4.20 다스 확장 추가 구현분

	/**
	 * 해당 TC Seq를 확인하여 해당 WorkStat 값을 확인한다.
	 * @return
	 * @throws DASException
	 */
	public String selectMediaId(long ct_id) throws DASException{

		StringBuffer buf = new StringBuffer();
		Connection con = null;		
		PreparedStatement psmt = null;		
		ResultSet rs = null;

		buf.append(" select   distinct                ");
		buf.append("     con.media_id                            ");
		buf.append(" 	 from das.contents_inst_tbl inst                  ");
		buf.append(" 	 inner join das.contents_tbl con on con.ct_id = inst.ct_id                 ");
		buf.append(" 	where inst.ct_id = ?                ");

		try {
			con = DBService.getInstance().getConnection();
			//logger.debug("######selectMediaId######## con : " + con);
			//con.setAutoCommit(false);
			//        psmt = con.prepareStatement(buf.toString());    //  로그 inform
			psmt = con.prepareStatement(buf.toString());
			int index = 0;			
			psmt.setLong(++index, ct_id);
			rs = psmt.executeQuery();	
			//TcBeanDO item = new TcBeanDO();
			String media_id = "";
			if(rs.next())
			{

				media_id = rs.getString("media_id");

			}

			//con.setAutoCommit(true);
			return media_id;
		}
		catch (Exception ex)
		{
			logger.error(buf.toString());
			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "selectTcJon 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, con);
		}

	}

	/**
	 * 다운로드 승인 조회한다
	 * @param ApprveDO                                                                                                                                                                                              
	 * @return                                                                                                                                                                                              
	 * @throws Exception 
	 */
	public List getApproveInfoForChennel(ApproveInfoDO ApproveInfoDO) throws Exception
	{
		String query = ExternalStatement.selectApproveInfoForChennel(ApproveInfoDO);

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######getApproveInfoForChennel######## con : " + con);
			stmt = con.prepareStatement(query);

			int index = 0;


			rs = stmt.executeQuery();

			List resultList  = new ArrayList();
			while(rs.next())
			{
				ApproveInfoDO item = new ApproveInfoDO();
				item.setConm(         	rs.getString("desc"));
				item.setUser_id(       	rs.getString("user_id"));
				item.setUser_nm(      		rs.getString("user_nm"));
				item.setCocd(      		rs.getString("cocd"));


				resultList.add(item);
			}

			return resultList; 
		} 
		catch (Exception e) 
		{
			logger.error(query);


			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}



	/**
	 * 채널별  승인자 대상  조회한다.(등록시)
	 * @param ApprveDO                                                                                                                                                                                              
	 * @return                                                                                                                                                                                              
	 * @throws Exception 
	 */
	public List selectApproveInfoListForChennel(ApproveInfoDO ApproveInfoDO) throws Exception
	{
		String query = ExternalStatement.selectApproveInfoListForChennel(ApproveInfoDO);

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######selectApproveInfoListForChennel######## con : " + con);
			stmt = con.prepareStatement(query);

			int index = 0;


			rs = stmt.executeQuery();

			List resultList  = new ArrayList();
			while(rs.next())
			{
				ApproveInfoDO item = new ApproveInfoDO();

				item.setUser_no(      		rs.getString("USER_NUM"));
				item.setUser_nm(		rs.getString("USER_NM"));
				item.setUser_id( rs.getString("sbs_user_id"));
				resultList.add(item);
			}

			return resultList; 
		} 

		catch (Exception e) 
		{
			logger.error(query);


			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}


	/**
	 * 승인자를 등록 한다.
	 * @param roleDO 부서 정보가 포함되어 있는 DataObject
	 * @param 
	 * @throws Exception 
	 */


	public int[] insertApproveInfoForChennel(List roleDO) throws Exception
	{
		String delAddDate = dasHandler.getProperty(DASBusinessConstants.DeleteAfterDate.DELETEAFTERDATE);
		StringBuffer buf = new StringBuffer();

		buf.append("\n insert into DAS.APPROVE_CHENNEL_TBL( ");	
		buf.append("\n 	USER_ID,  ");
		buf.append("\n 	COCD,  ");
		buf.append("\n 	use_yn  ");
		buf.append("\n )  ");
		buf.append("\n values  ");
		buf.append("\n 		(?, ?, ?)   ");
		Connection con = null;
		PreparedStatement stmt = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######insertApproveInfoForChennel######## con : " + con);
			con.setAutoCommit(false);

			stmt = con.prepareStatement(buf.toString());

			int index = 0;

			try{

				for(int i=0;i<roleDO.size();i++){
					index = 0;
					ApproveInfoDO roleDOs = (ApproveInfoDO)roleDO.get(i);
					stmt.setString(++index, roleDOs.getUser_id());
					stmt.setString(++index, roleDOs.getCocd());	
					stmt.setString(++index, "Y");

					stmt.addBatch();

				}

				int[] rInt = null;	
				stmt.executeBatch();

				con.commit();
				return rInt;
			} catch(SQLException e) {
				logger.error(e);
				e = e.getNextException();
			}


		} 

		catch (Exception e) 
		{
			logger.error(buf.toString());

			if(con != null)
			{
				try {
					con.rollback();
				} catch (SQLException e1) {
					// TODO 자동 생성된 catch 블록
					logger.error(e1);
				}
			}


			throw e;
		}
		finally
		{
			try {
				con.setAutoCommit(true);
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				logger.error(e);
			}
			release(null, stmt, con);
		}
		return null;

	}



	/**
	 * BackEnd TC 의 ID 값을 확인하여 'Busy' 값을 부여.
	 * @param ct_id
	 * @return
	 * @throws Exception 
	 */
	public int deleteApproveInfoForChennel(ApproveInfoDO approveInfoDO) throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.APPROVE_CHENNEL_TBL set ");
		buf.append("\n 	USE_YN='N' ");
		buf.append("\n where COCD = ? ");
		buf.append("\n AND USER_ID = ? ");

		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######deleteApproveInfoForChennel######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setString(++index, approveInfoDO.getCocd());
			stmt.setString(++index, approveInfoDO.getUser_id());

			int updateCount = stmt.executeUpdate();

			return updateCount;
		}
		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}





	/**
	 * 미디어 메타데이터 조회를 한다.
	 * @param XML                                                                                                                                                                                              카트내용정보
	 * @return                                                                                                                                                                                              CartContDO
	 * @throws Exception 
	 */
	public List getClipInfoList(MediaArchiveDO mediaArchiveDO) throws Exception
	{
		String query = ExternalStatement.selectClipInfoList(mediaArchiveDO);

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######getClipInfoList######## con : " + con);
			stmt = con.prepareStatement(query);

			int index = 0;


			rs = stmt.executeQuery();

			List resultList  = new ArrayList();
			while(rs.next())
			{
				MediaArchiveDO item = new MediaArchiveDO();
				item.setCocd(rs.getString("CHENNEL_CD"));
				item.setCtgr_lcd(rs.getString("CTGR_L_CD"));
				item.setTpae_media_clf_cd(rs.getString("TAPE_MEDIA_CLF_CD"));
				item.setTape_leng(rs.getString("TAPE_LENG"));
				item.setReq_cd(rs.getString("REQ_CD"));
				item.setScean_no(rs.getInt("SCEAN_NO"));
				item.setTitle((rs.getString("TITLE")));
				item.setSub_ttl((rs.getString("SUB_TTL")));
				item.setEpis_no(rs.getInt("EPIS_NO"));
				item.setBrd_dd(rs.getString("BRD_DD"));
				item.setCmr_place(chageChracter(rs.getString("CMR_PLACE")));
				item.setVd_qlty(rs.getString("VD_QLTY"));
				item.setView_gr_cd(rs.getString("VIEW_GR_CD"));
				item.setCprt_type(chageChracter(rs.getString("CPRT_TYPE")));
				item.setCprt_type_dsc(chageChracter(rs.getString("CPRT_TYPE_DSC")));
				item.setCprt_nm(chageChracter(rs.getString("CPRT_NM")));
				item.setRecord_type_cd(rs.getString("RECORD_TYPE_CD"));
				item.setRist_clf_Cd(rs.getString("RIST_CLF_CD"));
				item.setRist_clf_range(rs.getString("RIST_CLF_RANGE"));
				item.setRsv_prd_cd(rs.getString("RSV_PRD_CD"));
				item.setPrdt_in_outs_cd(rs.getString("PRDT_IN_OUTS_CD"));
				item.setOrg_prdr_nm(chageChracter(rs.getString("ORG_PRDR_NM")));
				item.setCont(chageChracter(rs.getString("CONT")));
				item.setSpc_info(rs.getString("SPC_INFO"));
				item.setAritist(chageChracter(rs.getString("ARTIST")));
				item.setCtgr_m_cd(rs.getString("CTGR_M_CD"));
				item.setCtgr_s_cd(rs.getString("CTGR_S_CD"));
				item.setCountry_cd(rs.getString("COUNTRY_CD"));
				item.setKey_words( chageChracter(rs.getString("KEY_WORDS")));
				item.setDrt_nm(rs.getString("DRT_NM"));
				item.setCmr_drt_nm(rs.getString("CMR_DRT_NM"));
				item.setMc_nm(rs.getString("MC_NM"));
				item.setWriter_nm(rs.getString("WRITER_NM"));
				item.setCt_cla(rs.getString("CT_CLA"));
				item.setSeq(rs.getInt("SEQ"));
				item.setGubun(rs.getString("GUBUN"));

				resultList.add(item);
			}

			return resultList; 
		} 
		catch (Exception e) 
		{
			logger.error(query);


			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}



	//2012.4.26
	/**
	 * dtl의 정보를 구한다.
	 * @param masterId 마스터id 
	 * 
	 * @return String
	 * @throws RemoteException
	 */
	public String getDtl_route (long masterId) throws DASException
	{
		StringBuffer buf = new StringBuffer();
		buf.append("\n  select ct_leng from contents_tbl where ct_id in ( select ct_id from contents_mapp_tbl where master_id = ? group by ct_id) and (ct_typ <> '003') ");

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		long sumTime = 0L;
		CommonUtl commonUtl = new CommonUtl();
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######getDtl_route######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setLong(++index, masterId);

			rs = stmt.executeQuery();
			while(rs.next())
			{
				if(sumTime==0){
					sumTime= commonUtl.changeTime(rs.getString("ct_leng"));
				}else{
					sumTime= sumTime + commonUtl.changeTime(rs.getString("ct_leng"));
				}
			}

			return "1";
		}

		catch (Exception ex)
		{
			logger.error(buf.toString());
			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "MultiLockUnlock 에러 : " + buf.toString(), ex);
			throw exception;
		}

		finally
		{
			release(rs, stmt, con);
		}

	}





	/**
	 * 해당 영상 아이디로 아카이브 경로,채널 , 회사 코드를 받아온다
	 * @param ct_id
	 * @return
	 * @throws DASException
	 */
	public String selectArchiveRote(long ct_id) throws DASException{

		StringBuffer buf = new StringBuffer();
		Connection con = null;		
		PreparedStatement psmt = null;		
		ResultSet rs = null;

		buf.append(" SELECT  ARCH_ROUTE FROM METADAT_MST_TBL                 ");
		buf.append(" WHERE MASTER_ID = (SELECT MASTER_ID FROM CONTENTS_MAPP_TBL WHERE CT_ID= ? fetch first 1 rows only )  ");

		try {
			con = DBService.getInstance().getConnection();
			//logger.debug("######selectArchiveRote######## con : " + con);
			//con.setAutoCommit(false);
			psmt = con.prepareStatement(buf.toString());    
			int index = 0;			
			psmt.setLong(++index, ct_id);
			rs = psmt.executeQuery();	
			String arch_route="";
			if(rs.next())
			{
				arch_route = rs.getString("arch_route");

			}

			//con.setAutoCommit(true);
			return arch_route;   
		}
		catch (Exception ex)
		{
			logger.error(buf.toString());

			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "selectTcJon 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, con);
		}

	}





	/**
	 * DTL 경로 추가.
	 * @param DtlInfoDO                                                                                                                                                                                              
	 * @return                   
	 * @throws Exception 
	 *  */
	public int insertDtlInfo(DtlInfoDO dtlInfoDO)throws Exception{


		Connection con = null;
		PreparedStatement stmt = null;
		StringBuffer buf=new StringBuffer();
		try {
			con=DBService.getInstance().getConnection();
			//logger.debug("######insertDtlInfo######## con : " + con);
			buf.append("\n insert into DAS.DTL_INFO_TBL ( ");
			buf.append("\n DTL_NM ");
			buf.append("\n ,ALIAS ");
			buf.append("\n ,DTL_CONT ");
			buf.append("\n ) VALUES ( ");
			buf.append("\n  ?, ? ,?)");

			stmt=con.prepareStatement(buf.toString());
			int index=0;
			int iTmp=0;
			String dateTime = CalendarUtil.getDateTime("yyyyMMddHHmmss");

			long seq =  selectArchveSeq();

			stmt.setString(++index    , dtlInfoDO.getDtl_nm());
			stmt.setString(++index    , dtlInfoDO.getAlias());
			stmt.setString(++index    , dtlInfoDO.getDtl_cont());
			iTmp = stmt.executeUpdate();

			return iTmp;

		}

		catch (Exception e) 
		{
			logger.error(buf.toString());
			if(con != null)
			{
				try {
					con.rollback();					
				} catch (SQLException e1) {
					// TODO 자동 생성된 catch 블록
					logger.error(e1);
				}
			}


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}
	}



	/**
	 * dtl 목록을 조회한다
	 * @param  xml                                                                                                                                                                                              
	 * @return                                                                                                                                                                                              
	 * @throws Exception 
	 */
	public List getDtlInfo() throws Exception
	{
		String query = ExternalStatement.selectDtlInfo();

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######getDtlInfo######## con : " + con);
			stmt = con.prepareStatement(query);

			int index = 0;


			rs = stmt.executeQuery();

			List resultList  = new ArrayList();
			while(rs.next())
			{
				DtlInfoDO item = new DtlInfoDO();
				item.setDtl_nm(         	rs.getString("DTL_NM"));
				item.setAlias(       	rs.getString("ALIAS"));
				item.setDtl_cont(      		rs.getString("DTL_CONT"));

				resultList.add(item);
			}

			return resultList; 
		} 
		catch (Exception e) 
		{
			logger.error(query);


			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}


	/**
	 * 사용자 로그인 현황을 조회한다(모니터링)
	 * @param  xml                                                                                                                                                                                              
	 * @return                                                                                                                                                                                              
	 * @throws Exception 
	 */
	public List getLogInOutInfo(LogInOutDO logInOutDO) throws Exception
	{
		String query = ExternalStatement.selectLogInOutInfo(logInOutDO);

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######getLogInOutInfo######## con : " + con);
			stmt = con.prepareStatement(query);

			int index = 0;


			rs = stmt.executeQuery();
			int count =countLogInOut(logInOutDO);
			List resultList  = new ArrayList();
			while(rs.next())
			{
				LogInOutDO item = new LogInOutDO();
				item.setUser_id(         	rs.getString("user_id"));
				item.setIp(       	rs.getString("ip"));
				item.setLogin_dt(      		rs.getString("login_dt"));
				item.setStatus(         	rs.getString("status"));
				item.setLogout_dt(       	rs.getString("logout_dt"));
				item.setDept_nm(      		rs.getString("dept_nm"));
				item.setUser_nm(      		rs.getString("user_nm"));
				item.setMobile(      		rs.getString("mobile"));
				item.setTotalcount(count);
				resultList.add(item);
			}

			return resultList; 
		} 
		catch (Exception e) 
		{
			logger.error(query);


			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}



	/**
	 * 사용자 로그인 현황 테이블 총 갯수를 조회한다.
	 * @param masterId
	 * @return list 대본 정보 조회
	 * @throws Exception 
	 */
	public int countLogInOut(LogInOutDO logInOutDO) throws Exception
	{

		String query = ExternalStatement.countLogInOut(logInOutDO);

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######countLogInOut######## con : " + con);
			stmt = con.prepareStatement(query);

			rs = stmt.executeQuery();
			List resultList  = new ArrayList();
			int cnt = 0;

			while(rs.next())
			{
				cnt= rs.getInt("cnt");
			}		

			return cnt;

		} 

		catch (Exception e) 
		{
			logger.error(query);

			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}



	/**
	 * 아카이브 진행 상태를 조회한다(모니터링)
	 * @param  XML                                                                                                                                                                                              
	 * @return                                                                                                                                                                                              
	 * @throws Exception 
	 */
	public List getArchiveInfo(MonitoringDO monitoringDO) throws Exception
	{
		String query = ExternalStatement.selectArchiveInfo(monitoringDO);

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######getArchiveInfo######## con : " + con);
			stmt = con.prepareStatement(query);

			int index = 0;

			rs = stmt.executeQuery();

			List resultList  = new ArrayList();
			int totalcount = ArchiveCount(monitoringDO);
			while(rs.next())
			{
				MonitoringDO item = new MonitoringDO();
				item.setGubun(       	rs.getString("gubun"));
				item.setCt_typ(       	rs.getString("ct_typ"));
				item.setTitle(       	rs.getString("title"));
				item.setPriority(      		rs.getInt("LOC_PRIORITY"));
				item.setTc_state(         	rs.getString("TC_STATE"));
				item.setTc_progress(       	rs.getString("TC_PROGRESS"));
				item.setArchive_state(       	rs.getString("LOC_STATE"));
				item.setArchive_progress(      		rs.getString("PROGRESS"));
				if(item.getArchive_state().equals("")||item.getArchive_state().equals("W")){
					item.setApprove_status("요청중");
				}else{
					item.setApprove_status("승인");	
				}
				item.setDown_state(      		rs.getString("DOWN_STATE"));
				item.setDown_progress(         	rs.getString("down_progress"));
				item.setCopy_progress(      		rs.getString("COPY_PROGRESS"));
				item.setCopy_state(         	rs.getString("COPY_STATUS"));
				item.setBackup_progress(       	rs.getString("BACKUP_PROGRESS"));
				item.setBackup_state(      		rs.getString("BACKUP_STATUS"));
				item.setChange_state(       	rs.getString("CHANGE_STATE"));
				item.setChange_progress(      		rs.getString("change_progress"));
				item.setReq_dt(      		rs.getString("REQ_DT"));
				item.setKey(         	rs.getLong("num"));
				item.setCti_id(         	rs.getLong("CTI_ID"));
				item.setChange_ip(      		rs.getString("change_ip"));
				item.setTc_ip(      		rs.getString("tc_ip"));
				item.setReq_nm(      		rs.getString("REQ_ID"));
				item.setConm(      		rs.getString("cocd"));
				item.setTc_id(      		rs.getString("TC_ID"));
				item.setChange_nm(      		rs.getString("change_nm"));
				item.setCt_id(      		rs.getLong("ct_id"));
				item.setChennel_nm(      		rs.getString("chennel_nm"));
				item.setRoute_nm(      		rs.getString("route_nm"));
				item.setTotalcount(totalcount);

				resultList.add(item);
			}

			return resultList; 
		} 
		catch (Exception e) 
		{
			logger.error(query);


			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}

	/**
	 * 사용자 로그인 현황 테이블 총 갯수를 조회한다.
	 * @param masterId
	 * @return list 대본 정보 조회
	 * @throws Exception 
	 */
	public int ArchiveCount(MonitoringDO monitoringDO) throws Exception
	{

		String query = ExternalStatement.countArchiveMonitoring(monitoringDO);

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######ArchiveCount######## con : " + con);
			stmt = con.prepareStatement(query);

			rs = stmt.executeQuery();
			List resultList  = new ArrayList();
			int cnt = 0;

			while(rs.next())
			{
				cnt= rs.getInt("cnt");
			}		

			return cnt;

		} 
		catch (Exception e) 
		{
			logger.error(query);

			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}



	/**
	 * 복본 표기(loc_tbl)
	 * @param ct_id 컨텐츠id
	 * @return updatecount
	 * @throws Exception 
	 */
	public int updateCopyRE(long ct_id,String reg_id) throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.contents_loc_tbl set ");
		buf.append("\n 	req_id=? ");
		buf.append("\n 	,RE_COPY_REG_DT=? ");
		buf.append("\n where cti_id = (select cti_id from contents_inst_tbl where ct_id= ?  and cti_fmt like '1%' )");

		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateCopyRE######## con : " + con);
			stmt = con.prepareStatement(buf.toString());
			String dateTime = CalendarUtil.getDateTime("yyyyMMddHHmmss");
			int index = 0;

			stmt.setString(++index, reg_id);
			stmt.setString(++index, dateTime);
			stmt.setLong(++index, ct_id);
			int updateCount = stmt.executeUpdate();

			return updateCount;
		}

		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}





	/**
	 * 아카이브 진행 상태를 조회한다(모니터링)
	 * @param  XML                                                                                                                                                                                              
	 * @return                                                                                                                                                                                              
	 * @throws Exception 
	 */
	public List getTCinfo(MonitoringDO monitoringDO) throws Exception
	{
		//String query = ExternalStatement.selectTCinfo(monitoringDO);
		String query = ExternalStatement.selectTCinfoQuery(monitoringDO, DASBusinessConstants.PageQueryFlag.TOTAL_COUNT);

		int totalcount = TCount(monitoringDO);
		if(totalcount > 0) {
			Connection con = null;
			PreparedStatement stmt = null;
			ResultSet rs = null;
			try {
				query = ExternalStatement.selectTCinfoQuery(monitoringDO, DASBusinessConstants.PageQueryFlag.NORMAL);
				con = DBService.getInstance().getConnection();
				logger.debug("######getTCinfo######## con : " + con);
				stmt = con.prepareStatement(query);

				int index = 0;

				rs = stmt.executeQuery();

				List resultList  = new ArrayList();
				while(rs.next()) {
					MonitoringDO item = new MonitoringDO();
					item.setTitle(         	rs.getString("TITLE"));
					item.setReq_cd(       	rs.getString("REQ_CD"));
					item.setKey(      		rs.getLong("SEQ"));
					item.setTc_state(         	rs.getString("JOB_STATUS"));
					item.setTc_progress(       	rs.getString("PROGRESS"));
					item.setDown_progress(         	rs.getString("down_progress"));
					item.setDown_state(       	rs.getString("down_status"));
					item.setPriority(      		rs.getInt("PRIORITY"));
					item.setCt_id(         	rs.getLong("ct_id"));
					item.setReq_dt(       	rs.getString("REQ_DT"));
					item.setReq_nm(       	rs.getString("REQ_NM"));
					item.setTc_ip(       	rs.getString("TC_IP"));
					item.setTc_nm(       	rs.getString("TC_ID"));
					item.setTotalcount(totalcount);

					resultList.add(item);
				}

				return resultList; 
			} catch (Exception e) {
				logger.error(query);
				throw e;
			} finally {
				release(rs, stmt, con);
			}
		} else return null;
		
	}

	/**
	 * tc 현황 테이블 총 갯수를 조회한다.
	 * @param masterId
	 * @return list 대본 정보 조회
	 * @throws Exception 
	 */
	public int TCount(MonitoringDO monitoringDO) throws Exception
	{

		//String query = ExternalStatement.TCount(monitoringDO);
		String query = ExternalStatement.selectTCinfoQuery(monitoringDO, DASBusinessConstants.PageQueryFlag.TOTAL_COUNT);

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######TCount######## con : " + con);
			stmt = con.prepareStatement(query);

			rs = stmt.executeQuery();
			List resultList  = new ArrayList();
			int cnt = 0;

			while(rs.next())
			{
				cnt= rs.getInt("cnt");
			}		

			return cnt;

		} 

		catch (Exception e) 
		{
			logger.error(query);

			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}


	/**
	 * tm진행 상태를 조회한다(모니터링)
	 * @param  XML                                                                                                                                                                                              
	 * @return                                                                                                                                                                                              
	 * @throws Exception 
	 */
	public List getTminfo(MonitoringDO monitoringDO) throws Exception
	{
		String query = ExternalStatement.selectTminfo(monitoringDO);

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######getTminfo######## con : " + con);
			stmt = con.prepareStatement(query);

			int index = 0;
			rs = stmt.executeQuery();
			List resultList  = new ArrayList();
			int totalcount = TmCount(monitoringDO);
			while(rs.next())
			{
				MonitoringDO item = new MonitoringDO();
				item.setStatus(         	rs.getString("STATUS"));
				item.setJob_nm(       	rs.getString("JOB_NM"));
				item.setJob_id(      		rs.getString("TASK_ID"));
				item.setCtgr_l_nm(         	rs.getString("DESC"));
				item.setReq_dt(       	rs.getString("REG_DTM"));
				item.setReq_nm(      		rs.getString("USER_NM"));
				item.setReq_id(         	rs.getString("REGRID"));
				item.setMedia_id(       	rs.getString("MEDIA_ID"));
				item.setPriority(      		rs.getInt("PRIORITY"));
				item.setTotalcount(totalcount);

				resultList.add(item);
			}

			return resultList; 
		}  
		catch (Exception e) 
		{
			logger.error(query);


			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}

	/**
	 * tm 현황 테이블 총 갯수를 조회한다.
	 * @param masterId
	 * @return list 대본 정보 조회
	 * @throws Exception 
	 */
	public int TmCount(MonitoringDO monitoringDO) throws Exception
	{

		String query = ExternalStatement.TCount(monitoringDO);

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######TmCount######## con : " + con);
			stmt = con.prepareStatement(query);
			rs = stmt.executeQuery();
			List resultList  = new ArrayList();
			int cnt = 0;

			while(rs.next())
			{
				cnt= rs.getInt("cnt");
			}		

			return cnt;

		} 
		catch (Exception e) 
		{
			logger.error(query);

			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}



	/**
	 *아카이브  상태를 세부 조회한다(모니터링)
	 * @param  XML                                                                                                                                                                                              
	 * @return                                                                                                                                                                                              
	 * @throws Exception 
	 */
	public List getDetailInfoForArchive(MonitoringDO monitoringDO) throws Exception
	{
		String query = ExternalStatement.selectArchiveDetail(monitoringDO);

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######getDetailInfoForArchive######## con : " + con);
			stmt = con.prepareStatement(query);

			int index = 0;

			rs = stmt.executeQuery();

			List resultList  = new ArrayList();

			while(rs.next())
			{
				MonitoringDO item = new MonitoringDO();
				item.setTitle(         	rs.getString("title"));
				item.setBrd_dd(       	rs.getString("brd_dd"));
				item.setProgress(      		rs.getString("PROGRESS"));
				item.setCtgr_l_nm(         	rs.getString("CTGR_L_NM"));
				item.setCt_cla_nm(       	rs.getString("CT_CLA_NM"));
				item.setCt_typ_nm(      		rs.getString("CT_TYP_NM"));
				item.setMedia_id(       	rs.getString("MEDIA_ID"));
				resultList.add(item);
			}

			return resultList; 
		} 
		catch (Exception e) 
		{
			logger.error(query);


			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}



	/**
	 * tm진행 상태를 조회한다(모니터링)
	 * @param  XML                                                                                                                                                                                              
	 * @return                                                                                                                                                                                              
	 * @throws Exception 
	 */
	public List getDetailInfoForTC(MonitoringDO monitoringDO) throws Exception
	{
		String query = ExternalStatement.selectTCDetail(monitoringDO);

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######getDetailInfoForTC######## con : " + con);
			stmt = con.prepareStatement(query);

			int index = 0;


			rs = stmt.executeQuery();

			List resultList  = new ArrayList();

			while(rs.next())
			{
				MonitoringDO item = new MonitoringDO();
				item.setTitle(         	rs.getString("title"));
				item.setBrd_dd(       	rs.getString("brd_dd"));
				item.setProgress(      		rs.getString("PROGRESS"));
				item.setCtgr_l_nm(         	rs.getString("CTGR_L_NM"));
				item.setCt_cla_nm(       	rs.getString("CT_CLA_NM"));
				item.setCt_typ_nm(      		rs.getString("CT_TYP_NM"));
				item.setMedia_id(       	rs.getString("MEDIA_ID"));

				resultList.add(item);
			}
			return resultList; 
		} 
		catch (Exception e) 
		{
			logger.error(query);


			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}



	/**
	 * tm진행 상태를 조회한다(모니터링)
	 * @param  XML                                                                                                                                                                                              
	 * @return                                                                                                                                                                                              
	 * @throws Exception 
	 */
	public List getDetailInfoForTM(MonitoringDO monitoringDO) throws Exception
	{
		String query = ExternalStatement.selectTmDetail(monitoringDO);

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######getDetailInfoForTM######## con : " + con);
			stmt = con.prepareStatement(query);

			int index = 0;

			rs = stmt.executeQuery();

			List resultList  = new ArrayList();

			while(rs.next())
			{
				MonitoringDO item = new MonitoringDO();
				item.setTitle(         	rs.getString("title"));
				item.setBrd_dd(       	rs.getString("brd_dd"));
				item.setProgress(      		rs.getString("PROGERESS"));
				item.setCtgr_l_nm(         	rs.getString("CTGR_L_NM"));
				item.setCt_cla_nm(       	rs.getString("CT_CLA_NM"));
				item.setCt_typ_nm(      		rs.getString("CT_TYP_NM"));
				item.setMedia_id(       	rs.getString("MEDIA_ID"));
				resultList.add(item);
			}
			return resultList; 
		} 

		catch (Exception e) 
		{
			logger.error(query);


			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}




	/**
	 * 우선순위를 변경한다(아카이브)
	 * @param  autoDO                                                                                                                                                                                              
	 * @return                                                                                                                                                                                              
	 * @throws Exception 
	 */
	public int changePriorityForArchive(MonitoringDO monitoringDO) throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.contents_loc_tbl set ");
		buf.append("\n 	priority=? ");
		buf.append("\n where num in (?)");

		PreparedStatement stmt = null; 
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######changePriorityForArchive######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setInt(++index, monitoringDO.getPriority());		
			stmt.setLong(++index, monitoringDO.getKey());

			int updateCount = stmt.executeUpdate();

			return 1;
		}
		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}



	/**
	 * 우선순위를 변경한다(TC)
	 * @param  autoDO                                                                                                                                                                                              
	 * @return                                                                                                                                                                                              
	 * @throws Exception 
	 */
	public int changePriorityForTC(MonitoringDO monitoringDO) throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.tc_job_tbl set ");
		buf.append("\n 	priority=? ");
		buf.append("\n where seq in (?)");

		PreparedStatement stmt = null; 
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######changePriorityForTC######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setInt(++index, monitoringDO.getPriority());		
			stmt.setLong(++index, monitoringDO.getKey());

			int updateCount = stmt.executeUpdate();

			return 1;
		}
		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}


	/**
	 * 우선순위를 변경한다(TM)
	 * @param  autoDO                                                                                                                                                                                              
	 * @return                                                                                                                                                                                              
	 * @throws Exception 
	 */
	public int changePriorityForTM(MonitoringDO monitoringDO) throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.ariel_info_Tbl set ");
		buf.append("\n 	priority=? ");
		buf.append("\n where task_id in (?)");

		PreparedStatement stmt = null; 
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######changePriorityForTM######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setInt(++index, monitoringDO.getPriority());		
			stmt.setLong(++index, monitoringDO.getKey());

			int updateCount = stmt.executeUpdate();

			return updateCount;
		}
		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}


	}





	/**
	 * 진행중인 작업을 취소한다(아카이브)
	 * @param  autoDO                                                                                                                                                                                              
	 * @return                                                                                                                                                                                              
	 * @throws Exception 
	 */
	public int cancelJobForArchive(MonitoringDO monitoringDO) throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.contents_loc_tbl set ");
		buf.append("\n 	JOB_STATUS='X' ");
		buf.append("\n where num in (?)");

		PreparedStatement stmt = null; 
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######cancelJobForArchive######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			//stmt.setInt(++index, monitoringDO.getPriority());		
			stmt.setLong(++index, monitoringDO.getKey());

			int updateCount = stmt.executeUpdate();

			return updateCount;
		}
		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}



	/**
	 * 진행중인 작업을 취소한다(TC)
	 * @param  autoDO                                                                                                                                                                                              
	 * @return                                                                                                                                                                                              
	 * @throws Exception 
	 */
	public int cancelJobForTC(MonitoringDO monitoringDO) throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.tc_job_tbl set ");
		buf.append("\n 		JOB_STATUS='X' ");
		buf.append("\n where seq in (?)");

		PreparedStatement stmt = null; 
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######cancelJobForTC######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			//stmt.setInt(++index, monitoringDO.getPriority());		
			stmt.setLong(++index, monitoringDO.getKey());

			int updateCount = stmt.executeUpdate();

			return updateCount;
		}

		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}


	/**
	 * 진행중인 작업을 취소한다(TM)
	 * @param  autoDO                                                                                                                                                                                              
	 * @return                                                                                                                                                                                              
	 * @throws Exception 
	 */
	public int cancelJobForTM(MonitoringDO monitoringDO) throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.contents_down_tbl set ");
		buf.append("\n 		STATUS='X' ");
		buf.append("\n where num in (?)");

		PreparedStatement stmt = null; 
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######cancelJobForTM######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			//stmt.setInt(++index, monitoringDO.getPriority());		
			stmt.setLong(++index, monitoringDO.getKey());

			int updateCount = stmt.executeUpdate();

			return updateCount;
		}
		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}


	}





	/**
	 * 사용자 수동삭제목록을 조회한다.
	 * @param  XML                                                                                                                                                                                              
	 * @return                                                                                                                                                                                              
	 * @throws Exception 
	 */
	public List getManualDeleteList(ManualDeleteDO manualDeleteDO) throws Exception
	{
		String query = ExternalStatement.selectManualDeleteList(manualDeleteDO);

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######getManualDeleteList######## con : " + con);
			stmt = con.prepareStatement(query);

			int index = 0;
			int totalcount = ManualDeleteCount(manualDeleteDO);

			rs = stmt.executeQuery();

			List resultList  = new ArrayList();

			while(rs.next())
			{
				ManualDeleteDO item = new ManualDeleteDO();
				item.setGubun(         	rs.getString("gubun_cd"));
				item.setGubun_nm(       	rs.getString("gubun"));
				item.setFile_nm(      		rs.getString("filename"));
				item.setFl_path(         	rs.getString("path"));
				item.setKey(       	rs.getInt("num"));
				item.setTotalcount(totalcount);

				resultList.add(item);
			}

			return resultList; 
		} 

		catch (Exception e) 
		{
			logger.error(query);


			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}





	/**
	 * 사용자 수동삭제목록 총 갯수를 조회한다.
	 * @param masterId
	 * @return list 대본 정보 조회
	 * @throws Exception 
	 */
	public int ManualDeleteCount(ManualDeleteDO manualDeleteDO) throws Exception
	{

		String query = ExternalStatement.ManualDeleteCount(manualDeleteDO);

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######ManualDeleteCount######## con : " + con);
			stmt = con.prepareStatement(query);

			rs = stmt.executeQuery();
			List resultList  = new ArrayList();
			int cnt = 0;

			while(rs.next())
			{
				cnt= rs.getInt("cnt");
			}		

			return cnt;

		} 
		catch (Exception e) 
		{
			logger.error(query);

			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}

	/**
	 *  사용자 수동삭제를 요청한다.(아카이브)
	 * @param  autoDO                                                                                                                                                                                              
	 * @return                                                                                                                                                                                              
	 * @throws Exception 
	 */
	public int manualDeleteForArchive(ManualDeleteDO manualDeleteDO) throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.contents_loc_tbl set ");
		buf.append("\n  use_yn ='N' ");
		buf.append("\n  ,DSTATUS ='998' ");
		buf.append("\n where num in (?)");

		PreparedStatement stmt = null; 
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######manualDeleteForArchive######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			//stmt.setInt(++index, monitoringDO.getPriority());		
			stmt.setLong(++index, manualDeleteDO.getKey());

			int updateCount =  stmt.executeUpdate();

			return updateCount;
		}

		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}




	/**
	 *  사용자 수동삭제를 요청한다.(download)
	 * @param  autoDO                                                                                                                                                                                              
	 * @return                                                                                                                                                                                              
	 * @throws Exception 
	 */
	public int manualDeleteForDown(ManualDeleteDO manualDeleteDO) throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.contents_down_tbl set ");
		buf.append("\n 	USE_YN='N' ");
		buf.append("\n  ,STATUS='998' ");
		buf.append("\n where num in (?)");

		PreparedStatement stmt = null; 
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######manualDeleteForDown######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			//stmt.setInt(++index, monitoringDO.getPriority());		
			stmt.setLong(++index, manualDeleteDO.getKey());

			int updateCount =  stmt.executeUpdate();

			return updateCount;
		}

		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}


	/**
	 * 에러 목록을 조회한다.
	 * @param  XML                                                                                                                                                                                              
	 * @return                                                                                                                                                                                              
	 * @throws Exception 
	 */
	public List getErroeList(ErrorLogDO errorLogDO) throws Exception
	{
		String query = ExternalStatement.selectErroeList(errorLogDO);

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######getErroeList######## con : " + con);
			stmt = con.prepareStatement(query);

			int index = 0;
			int totalcount = ErroeCount(errorLogDO);

			rs = stmt.executeQuery();

			List resultList  = new ArrayList();

			while(rs.next())
			{
				ErrorLogDO item = new ErrorLogDO();
				item.setServer_nm(         	rs.getString("das_eq_nm"));
				item.setIp(       	rs.getString("das_eq_use_ip"));
				item.setReg_dt(      		rs.getString("REG_DT"));
				item.setError_cont(         	rs.getString("ERROR_CONT"));
				item.setTotalcount(totalcount);

				resultList.add(item);
			}

			return resultList; 
		} 

		catch (Exception e) 
		{
			logger.error(query);


			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}


	/**
	 * 에러목록 총 갯수를 조회한다.
	 * @param 
	 * @return 
	 * @throws Exception 
	 */
	public int ErroeCount(ErrorLogDO errorLogDO) throws Exception
	{

		String query = ExternalStatement.ErroeCount(errorLogDO);

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######ErroeCount######## con : " + con);
			stmt = con.prepareStatement(query);

			rs = stmt.executeQuery();
			List resultList  = new ArrayList();
			int cnt = 0;

			while(rs.next())
			{
				cnt= rs.getInt("cnt");
			}		

			return cnt;

		} 
		catch (Exception e) 
		{
			logger.error(query);

			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}





	/**
	 * 서버 목록을 조회한다.
	 * @param  XML                                                                                                                                                                                              
	 * @return                                                                                                                                                                                              
	 * @throws Exception 
	 */
	public List getServerList(ServersDO serversDO)  throws Exception
	{
		String query = ExternalStatement.selectServerList(serversDO);

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######getServerList######## con : " + con);
			stmt = con.prepareStatement(query);

			int index = 0;
			//int totalcount = ErroeCount(errorLogDO);

			rs = stmt.executeQuery();

			List resultList  = new ArrayList();

			while(rs.next())
			{
				ServersDO item = new ServersDO();
				item.setServer_nm(         	rs.getString("DAS_EQ_NM"));
				item.setState(       	rs.getString("desc"));
				item.setNet_state(      		rs.getString("tel_stat"));
				item.setIp(         	rs.getString("DAS_EQ_USE_IP"));
				item.setTitle(         	rs.getString("TITLE"));
				item.setRe_start_dt(         	rs.getString("REG_DT"));
				item.setConfirm_dt(         	rs.getString("MOD_DT"));
				item.setDas_eq_clf_cd(         	rs.getString("das_eq_clf_cd"));
				item.setDas_eq_id(         	rs.getString("das_eq_id"));
				item.setPort(         	rs.getString("port"));

				//item.setTotalcount(totalcount);

				resultList.add(item);
			}

			return resultList; 
		} 

		catch (Exception e) 
		{
			logger.error(query);


			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}




	/**
	 * 특수문자 변환.
	 * @param  XML                                                                                                                                                                                              
	 * @return                                                                                                                                                                                              
	 * @throws DASException
	 */
	public String chageChracter(String cont)  throws DASException
	{
		cont = cont.replaceAll("&", "&amp;");
		cont = cont.replace("'", "&apos;");
		cont = cont.replaceAll("\"", "&quot;");
		cont = cont.replaceAll("<", "&lt;");
		cont = cont.replaceAll(">", "&gt;");

		return cont;
	}





	/**
	 * 소산 여부
	 * @param ct_id 컨텐츠id
	 * @return updatecount
	 * @throws Exception 
	 */
	public int updateBackUpYN(UseInfoDO useInfoDO) throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.contents_loc_tbl set ");
		buf.append("\n 	BACKUP_ID=? ");
		//buf.append("\n 	,BACKUP_YN=? ");
		buf.append("\n 	,BACKUP_DT=? ");
		buf.append("\n where cti_id = (select INST.cti_id from contents_mapp_tbl map  ");
		buf.append("\n inner join contents_inst_tbl inst on inst.ct_id =map.ct_id and inst.cti_id like '1%' ");
		buf.append("\n inner join contents_tbl con on con.CT_id=map.CT_ID and con.ct_typ='003' where map.master_id = ?  fetch first 1 rows only )");
		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateBackUpYN######## con : " + con);
			stmt = con.prepareStatement(buf.toString());
			String dateTime = CalendarUtil.getDateTime("yyyyMMddHHmmss");
			int index = 0;

			stmt.setString(++index, useInfoDO.getBackup_id());
			//stmt.setString(++index, "Y");
			stmt.setString(++index, dateTime);
			stmt.setLong(++index, Long.parseLong(useInfoDO.getMaster_id()));
			int updateCount = stmt.executeUpdate();

			return updateCount;
		}

		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}




	/**
	 * BackEnd TC 의 ID 값을 확인하여 상태값을 부여.
	 * @param ct_id
	 * @return
	 * @throws Exception 
	 */
	public boolean updateTcProgress(TcBeanDO tcBeanDO) throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.tc_job_tbl set ");
		buf.append("\n 	PROGRESS = ? ");
		buf.append("\n 	,JOB_STATUS = ? ");
		buf.append("\n 	,MOD_DT = ? ");
		buf.append("\n where SEQ = ? ");

		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateTcProgress######## con : " + con);
			stmt = con.prepareStatement(buf.toString());
			//	stmt = con.prepareStatement(buf.toString());
			String dateTime = CalendarUtil.getDateTime("yyyyMMddHHmmss");
			int index = 0;
			stmt.setString(++index, tcBeanDO.getProgress());
			if(tcBeanDO.getProgress().equals("100")){
				stmt.setString(++index, "C");

			}else{
				stmt.setString(++index, tcBeanDO.getJob_status());

			}
			stmt.setString(++index, dateTime);
			stmt.setLong(++index, tcBeanDO.getJob_id());

			int updateCount = stmt.executeUpdate();

			if(updateCount>0)return true;
			return false;
		}

		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}




	/**
	 * 에러정보를 등록 및 갱신한다.
	 * @param errorRegisterDO 에러 정보
	 * @retrun errorRegisterDO 에러 정보		
	 * @throws DASException
	 * @throws SQLException 
	 */
	public int insertError(ErrorLogDO errorLogDO) throws DASException, SQLException
	{
		Connection con = null;
		try 
		{
			insertErrorReg(con, errorLogDO);
			con.commit();			
			return 1;

		} 
		catch (SQLException e) 
		{
			if(con != null)
			{
				try {
					con.rollback();					
				} catch (SQLException e1) {
					// TODO 자동 생성된 catch 블록
					logger.error(e1);
				}
			}


			throw e;
		}
		finally
		{
			release(null, null, con);
		}

	}



	/**
	 * 에러정보를 등록한다
	 * @param con 커넥션
	 * @param errorRegisterDO 정보가담겨있는 beans

	 * @throws DASException
	 */
	private void insertErrorReg(Connection con, ErrorLogDO errorLogDO) throws SQLException
	{
		String query = ExternalStatement.insertErrorRegQuery();

		PreparedStatement stmt = null;
		try 
		{  String dateTime = CalendarUtil.getDateTime("yyyyMMddHHmmss");

		stmt = con.prepareStatement(query);

		int index = 0;

		stmt.setString(++index, errorLogDO.getServer_nm()); 
		stmt.setString(++index, errorLogDO.getError_type()); 
		stmt.setString(++index, dateTime); 
		stmt.setString(++index, errorLogDO.getError_cont()); 


		stmt.executeUpdate();
		} 
		catch (SQLException e) 
		{
			logger.error(query);

			throw e;
		}
		finally
		{
			try { 	if (stmt != null)  stmt.close();	} catch (SQLException e) {}
			// panboy. 이런 식으로 그냥 일관성없이 처리해도 될런지 
		}

	}	





	/**
	 * 복본 표기
	 * @param ct_id 컨텐츠id
	 * @return updatecount
	 * @throws Exception 
	 */
	public int updateBackUpYN(long ct_id,String reg_id) throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.contents_inst_tbl set ");
		buf.append("\n 	ETC=? ");
		buf.append("\n 	,regrid=? ");
		buf.append("\n where ct_id = (select map.ct_id from contents_mapp_tbl map inner join contents_tbl con on con.ct_id =map.ct_id and con.ct_typ='003' where map.master_id = ?  fetch first 1 rows only)");

		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateBackUpYN######## con : " + con);
			stmt = con.prepareStatement(buf.toString());
			String dateTime = CalendarUtil.getDateTime("yyyyMMddHHmmss");
			int index = 0;
			stmt.setString(++index, "소산 중입니다");

			stmt.setString(++index, reg_id);
			stmt.setLong(++index, ct_id);
			int updateCount = stmt.executeUpdate();

			return updateCount;
		}

		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}





	/**
	 * wmvlist조회 (H264 전황용)
	 * @param XML                                                                                                                                                                                              카트내용정보
	 * @return                                                                                                                                                                                              CartContDO
	 * @throws Exception 
	 */
	public List getWmvList(WmvH264DO wmvH264DO) throws Exception
	{
		List resultList = Collections.EMPTY_LIST;

		if(org.apache.commons.lang.StringUtils.isNotBlank(wmvH264DO.getGetcount()) &&
				Integer.valueOf(wmvH264DO.getGetcount()) > 0) {
			String query = ExternalStatement.selectWmvList(wmvH264DO);

			Connection con = null;
			PreparedStatement stmt = null;
			ResultSet rs = null;
			try 
			{
				con = DBService.getInstance().getConnection();
				//logger.debug("######getWmvList######## con : " + con);
				stmt = con.prepareStatement(query);

				int index = 0;

				rs = stmt.executeQuery();

				resultList = new ArrayList();
				while(rs.next())
				{
					WmvH264DO item = new WmvH264DO();
					item.setFl_nm(         	rs.getString("WRK_FILE_NM"));
					item.setFl_path(       	rs.getString("FL_PATH"));
					item.setCti_id(      		rs.getLong("CTI_ID"));
					item.setCt_id(      		rs.getLong("CT_ID"));
					item.setVd_qlty(      		rs.getString("VD_QLTY"));
					updateStatus(item.getCt_id());
					resultList.add(item);
				}
			} 
			catch (Exception e) 
			{
				logger.error(query);

				throw e;
			}
			finally
			{
				release(rs, stmt, con);
			}
		}
		return resultList;
	}


	/**
	 * wmvlist조회 (H264 전황용)
	 * @param XML                                                                                                                                                                                              카트내용정보
	 * @return                                                                                                                                                                                              CartContDO
	 * @throws Exception 
	 */

	public List updateWmvStatus(WmvH264DO xml) throws Exception
	{

		StringBuffer buf = new StringBuffer();
		buf.append("\n update contents_inst_Tbl set  ");
		buf.append("\n 	H264_YN = ?, "); 
		buf.append("\n 	H264_DT = ?, "); 
		buf.append("\n 	H264_EQ = ? "); 
		buf.append("\n WHERE CT_ID = ? ");

		Connection con = null;
		PreparedStatement stmt = null;
		List resultList  = new ArrayList();
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateWmvStatus######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			//현재 시간을 받아온다.
			String toDateTime = CalendarUtil.getDateTime("yyyyMMddHHmmss");
			int index = 0;

			stmt.setString(++index, xml.getJob_status()); //진행상태	
			stmt.setString(++index, toDateTime);//등록시간
			stmt.setString(++index, xml.getEq_id());//장비ID
			stmt.setLong(++index, xml.getCt_id());//영상ID
			if(xml.getResult().equals("")){


				if(isThereH264(xml.getCt_id())){
					long cti_id = systemManageDAO.getCtiid(xml.getCt_id());
					xml.setCti_id(cti_id);
					//systemManageDAO.updateWmvInfo(xml);
				}else{
					long newcti_id = systemManageDAO.insertConInstInfoForH264(xml);
					xml.setCti_id(newcti_id);
				}

				xml.setResult("S");
			}else {
				systemManageDAO.updateWmvInfo(xml);
				xml.setResult("S");
			}

			stmt.executeUpdate();

			resultList.add(xml);

			//int[] rInt = null;
			//stmt.executeBatch();

			con.commit();
			return resultList;
		} 

		catch (Exception e) 
		{
			logger.error(buf.toString());

			throw e;
		}


		finally
		{
			release(null, stmt, con);
		}

	}




	/**
	 *읽은것 표기
	 * @param ct_id 컨텐츠id
	 * @return updatecount
	 * @throws Exception 
	 */
	public int updateStatus(long ct_id) throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.contents_inst_tbl set ");
		buf.append("\n  h264_yn= 'W'");
		buf.append("\n where ct_id = ? ");

		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateStatus######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			//	stmt.setLong(++index, cti_id);

			stmt.setLong(++index, ct_id);

			int updateCount = stmt.executeUpdate();

			return updateCount;
		}
		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}



	/**
	 * 회사코드 조회(dtl구분용)
	 * @param cti_id
	 * @return
	 * @throws Exception 
	 */
	public String selectCocd(long cti_id) throws Exception
	{
		//PageDO pageDO = new PageDO();

		StringBuffer buf = new StringBuffer();

		buf.append("\n select mst.cocd from  \n");
		buf.append("\n metadat_mst_tbl mst    \n");
		buf.append("\n inner join (select ct_id,master_id from contents_mapp_tbl group by  ct_id,master_id ) map on mst.master_id = map.master_id \n");
		buf.append("\n inner join contents_inst_Tbl inst on inst.ct_id = map.ct_id and inst.cti_fmt like '1%' \n");
		buf.append("\n where inst.cti_id = "+cti_id+" \n");
		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######selectCocd######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;

			rs = stmt.executeQuery();

			String cocd ="";
			while(rs.next())
			{
				cocd = rs.getString("cocd");

			}

			return cocd;
		}
		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			//			try { 	if (con != null)  con.close();	} catch (SQLException e) {}
			release(rs,stmt,con);
		}
	}


	/**
	 * 회사코드 조회(dtl구분용)
	 * @param cti_id
	 * @return
	 * @throws Exception 
	 */
	public String selectCocdbyCt_id(long ct_id) throws Exception
	{
		//PageDO pageDO = new PageDO();

		StringBuffer buf = new StringBuffer();

		buf.append("\n select mst.cocd from  \n");
		buf.append("\n metadat_mst_tbl mst    \n");
		buf.append("\n inner join (select ct_id,master_id from contents_mapp_tbl group by  ct_id,master_id ) map on mst.master_id = map.master_id \n");
		buf.append("\n inner join contents_inst_Tbl inst on inst.ct_id = map.ct_id and inst.cti_fmt like '1%' \n");
		buf.append("\n where inst.ct_id = "+ct_id+" \n");
		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######selectCocdbyCt_id######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;


			rs = stmt.executeQuery();

			String cocd ="";
			while(rs.next())
			{
				cocd = rs.getString("cocd");

			}

			return cocd;
		}
		catch (Exception e) 
		{
			logger.error(buf.toString());

			throw e;
		}
		finally
		{
			//			try { 	if (con != null)  con.close();	} catch (SQLException e) {}
			release(rs,stmt,con);
		}
	}



	/**
	 * 오토아카이브 정보 조회(dtl구분용)
	 * @param cti_id
	 * @return
	 * @throws Exception 
	 */
	public PdsArchiveDO selectAutoArchiveInfobyCt_id(long ct_id) throws Exception
	{
		//PageDO pageDO = new PageDO();

		StringBuffer buf = new StringBuffer();

		buf.append("\n select mst.cocd ,mst.arch_route,mst.chennel_cd from  \n");
		buf.append("\n metadat_mst_tbl mst    \n");
		buf.append("\n inner join (select ct_id,master_id from contents_mapp_tbl group by  ct_id,master_id ) map on mst.master_id = map.master_id \n");
		buf.append("\n inner join contents_inst_Tbl inst on inst.ct_id = map.ct_id and inst.cti_fmt like '1%' \n");
		buf.append("\n where inst.ct_id = "+ct_id+" \n");
		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######selectCocdbyCt_id######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;


			rs = stmt.executeQuery();
			PdsArchiveDO info = new PdsArchiveDO();
			String cocd ="";
			while(rs.next())
			{
				info.setCocd(rs.getString("cocd"));
				info.setChennel(rs.getString("chennel_cd"));
				info.setArch_route(rs.getString("arch_route"));

			}

			return info;
		}
		catch (Exception e) 
		{
			logger.error(buf.toString());

			throw e;
		}
		finally
		{
			//			try { 	if (con != null)  con.close();	} catch (SQLException e) {}
			release(rs,stmt,con);
		}
	}

	/**
	 * 해당 영상 아이디로 콘텐츠 아이디를 가지고 온다.(IFCMS기준)
	 * @param pdsArchiveDO
	 * @return
	 * @throws DASException
	 */
	public PdsArchiveDO selectCtiFromMediaidForIFCMS(PdsArchiveDO pdsArchiveDO) throws DASException{

		StringBuffer buf = new StringBuffer();
		Connection con = null;		
		PreparedStatement psmt = null;		
		ResultSet rs = null;

		buf.append(" SELECT CTI.CTI_ID as cti_id   ,tc.INPUT_HR as fl_path ,tc.input_hr_nm ,ct.media_id ,ct.reg_dt,CT.VD_QLTY                 ");
		buf.append(" ,ct.ct_cla,mst.ctgr_l_cd ");
		buf.append(" FROM DAS.CONTENTS_TBL CT  ");
		buf.append("     INNER JOIN DAS.CONTENTS_INST_TBL CTI ON CTI.CT_ID= CT.CT_ID AND CTI.CTI_FMT LIKE '10%'  ");
		buf.append("  inner join DAS.TC_JOB_TBL tc on tc.CT_ID=cti.CT_ID       ");
		buf.append("  inner join DAS.contents_mapp_tbl map on  map.ct_id = ct.ct_id        ");
		buf.append("  inner join DAS.metadat_msT_Tbl mst on mst.master_id = map.master_id       ");
		buf.append(" WHERE CT.CT_ID = ?        order by ct.reg_dt desc       ");
		buf.append(" fetch first 1 rows only        ");
		try {
			con = DBService.getInstance().getConnection();
			//logger.debug("######selectCtiFromMediaidForIFCMS######## con : " + con);
			//con.setAutoCommit(false);
			psmt = con.prepareStatement(buf.toString());    
			int index = 0;			
			psmt.setLong(++index, pdsArchiveDO.getCt_id());

			rs = psmt.executeQuery();	
			PdsArchiveDO item = new PdsArchiveDO();
			if(rs.next())
			{
				item.setCti_id(rs.getLong("cti_id"));
				item.setFl_path(rs.getString("fl_path"));
				item.setFl_nm(rs.getString("input_hr_nm"));
				item.setMedia_id(rs.getString("media_id"));
				item.setReq_dt(rs.getString("reg_dt"));
				item.setVd_qulty(rs.getString("VD_QLTY"));
				item.setCt_cla(rs.getString("ct_cla"));
				item.setCtgr_l_cd(rs.getString("ctgr_l_cd"));
			}
			//con.setAutoCommit(true);
			return item;   
		}
		catch (Exception ex)
		{
			logger.error(buf.toString());

			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "selectTcJon 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, con);
		}

	}





	/**
	 * WorkflowService 다운로드 요청시 XML 생성(다스 확장용)
	 * @param downcartDO
	 * @return
	 * @throws DASException
	 */
	public String getNewDownloadXmlFormat(CartContDO CartContDO,String cart_seq_list,String cocd_list) throws DASException{
		StringBuffer buf = new StringBuffer();

		buf.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n");
		buf.append("<das>\n");
		buf.append("<info>\n");
		buf.append("<cart_no>"+CartContDO.getCartNo()+"</cart_no>");
		buf.append("<cart_seq>"+cart_seq_list+"</cart_seq>");
		buf.append("<dtl_type>"+cocd_list+"</dtl_type>");
		buf.append("<regrid>"+CartContDO.getRegrId()+"</regrid>");
		buf.append("<req_id>"+CartContDO.getRegrId()+"</req_id>");
		buf.append("</info>\n");
		buf.append("</das>\n");

		return buf.toString();
	}

	/**
	 * WorkflowService 다운로드 요청시 XML 생성(다스 확장용)
	 * @param downcartDO
	 * @return
	 * @throws DASException
	 */
	public String getNewDownloadXmlFormat(CartContDO cartContDO) throws DASException{
		StringBuffer buf = new StringBuffer();

		buf.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n");
		buf.append("<das>\n");
		buf.append("<info>\n");
		buf.append("<cart_no>"+cartContDO.getCartNo()+"</cart_no>");
		buf.append("<cart_seq>"+cartContDO.getCartSeq()+"</cart_seq>");
		buf.append("<dtl_type>"+cartContDO.getDtl_type()+"</dtl_type>");
		buf.append("<regrid>"+cartContDO.getRegrId()+"</regrid>");
		buf.append("<req_id>"+cartContDO.getRegrId()+"</req_id>");
		buf.append("</info>\n");
		buf.append("</das>\n");

		return buf.toString();
	}




	/**
	 * WorkflowService 다운로드 요청시 XML 생성
	 * @param downcartDO
	 * @return
	 * @throws Exception 
	 */
	public String getNewDownloadXml(DownCartDO downcartDO) throws Exception{

		StringBuffer buf = new StringBuffer();
		PreparedStatement stmt = null;
		Connection con = null;
		ResultSet rs = null;

		buf.append(" SELECT CCT.CART_SEQ  ,cct.cocd FROM DAS.CART_CONT_TBL CCT     ");
		buf.append(" WHERE CCT.CART_NO =? AND                        ");
		buf.append(" CCT.CART_SEQ NOT IN (                              ");
		buf.append(" SELECT CDT.CART_SEQ                                ");
		buf.append(" FROM DAS.CONTENTS_DOWN_TBL CDT                     ");
		buf.append(" WHERE CDT.CART_NO = ? AND CDT.JOB_STATUS <>  'E' ");
		buf.append(" )                                                  ");
		buf.append("  and cct.RIST_YN ='N'  AND CCT.OUTSOURCING_YN='N'                                           ");
		buf.append("\n WITH UR	 ");
		try{
			int index = 0;	
			con = DBService.getInstance().getConnection();
			//logger.debug("######getNewDownloadXml######## con : " + con);
			stmt = con.prepareStatement(buf.toString());
			stmt.setLong(++index	, downcartDO.getCartNo());
			stmt.setLong(++index	, downcartDO.getCartNo());

			rs = stmt.executeQuery();
			String sResult = "";

			String sResult2 = "";
			while(rs.next()){
				sResult = sResult + rs.getString("CART_SEQ")+",";
				String dtl_type = workDAO.getCocdInfo(downcartDO.getCartNo(),rs.getLong("CART_SEQ"));
				sResult2 = sResult2 + dtl_type+",";

			}
			if(sResult.length() > 0 && sResult.endsWith(",")) {
				sResult.substring(0, sResult.lastIndexOf(",")-1);
			} 
			if(sResult.length()>0){
				return getNewDownloadXmlFormat(downcartDO, sResult,sResult2);
			}else{
				return sResult;
			}

		}
		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}		
		finally
		{
			release(rs, stmt, con);
		}
	}

	/**
	 * WorkflowService 다운로드 요청시 XML 생성(신규버전)
	 * @param downcartDO
	 * @return
	 * @throws Exception 
	 */
	public String getXmlInfo(DownCartDO downcartDO) throws Exception{

		StringBuffer buf = new StringBuffer();
		PreparedStatement stmt = null;
		try{
			String sResult = "";

			String sResult2 = "";

			sResult = String.valueOf(downcartDO.getCartSeq());
			String dtl_type = workDAO.getCocdInfo(downcartDO.getCartNo(),downcartDO.getCartSeq());
			sResult2 =dtl_type;



			if(sResult.length()>0){
				return getNewDownloadXmlFormat(downcartDO, sResult,sResult2);
			}else{
				return sResult;
			}

		}

		catch (Exception e) 
		{
			throw e;
		}finally{
			release(null,stmt,null);
		}

	}

	/**
	 * WorkflowService 다운로드 요청시 XML 생성(다스 확장용)
	 * @param downcartDO
	 * @return
	 * @throws Exception 
	 */
	public String getNewDownloadXml(CartContDO cartContDO) throws Exception{

		StringBuffer buf = new StringBuffer();
		PreparedStatement stmt = null;
		Connection con = null;
		ResultSet rs = null;

		buf.append(" SELECT CCT.CART_SEQ ,cct.cocd FROM DAS.CART_CONT_TBL CCT     ");
		buf.append(" WHERE CCT.CART_NO =? AND                        ");
		buf.append(" CCT.CART_SEQ NOT IN (                              ");
		buf.append(" SELECT CDT.CART_SEQ                                ");
		buf.append(" FROM DAS.CONTENTS_DOWN_TBL CDT                     ");
		buf.append(" WHERE CDT.CART_NO = ? AND CDT.JOB_STATUS <> 'E' ");
		buf.append(" )                                                  ");
		buf.append("  and cct.RIST_YN ='N'                                             ");
		try{
			int index = 0;	
			con = DBService.getInstance().getConnection();
			//logger.debug("######getNewDownloadXml######## con : " + con);
			stmt = con.prepareStatement(buf.toString());
			stmt.setLong(++index	, cartContDO.getCartNo());
			stmt.setLong(++index	, cartContDO.getCartNo());

			rs = stmt.executeQuery();
			String sResult = "";
			String sResult2 = "";
			while(rs.next()){
				sResult = sResult + rs.getString("CART_SEQ")+",";
				String dtl_type = rs.getString("cocd");
				if(rs.getString("cocd").equals("S")){
					dtl_type="das";
				}else{
					dtl_type="medianet";
				}
				sResult2 = sResult2 + dtl_type+",";

			}
			if(sResult.length() > 0 && sResult.endsWith(",")) {
				sResult.substring(0, sResult.lastIndexOf(",")-1);
			}
			if(sResult.length()>0){
				return getNewDownloadXmlFormat(cartContDO, sResult,sResult2);
			}else{
				return sResult;
			}

		}
		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}		
		finally
		{
			release(rs, stmt, con);
		}
	}



	/**
	 * WorkflowService 다운로드 요청시 XML 생성
	 * @param downcartDO
	 * @return
	 * @throws DASException
	 */
	public String getNewDownloadXmlFormat(DownCartDO downcartDO,String cart_seq_list,String Cocd_list) throws DASException{
		StringBuffer buf = new StringBuffer();

		buf.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n");
		buf.append("<das>\n");
		buf.append("<info>\n");
		buf.append("<cart_no>"+downcartDO.getCartNo()+"</cart_no>");
		buf.append("<cart_seq>"+cart_seq_list+"</cart_seq>");
		buf.append("<dtl_type>"+Cocd_list+"</dtl_type>");
		buf.append("<regrid>"+downcartDO.getUser_id()+"</regrid>");
		buf.append("<req_id>"+downcartDO.getReqUsrid()+"</req_id>");
		//buf.append("<url>"+downcartDO.getUrl()+"</url>");
		buf.append("</info>\n");
		buf.append("</das>\n");

		return buf.toString();
	}





	/**
	 * 해당 cti_id 의 원본영상 회사코드를 조회한다
	 * @return
	 * @throws DASException
	 */
	public String selectCOCD(long cti_id) throws DASException{

		StringBuffer buf = new StringBuffer();
		Connection con = null;		
		PreparedStatement psmt = null;		
		ResultSet rs = null;

		buf.append(" select distinct mst.cocd from contents_inst_Tbl inst              ");
		buf.append(" inner join contentS_mapp_Tbl map on map.ct_id = inst.ct_id        ");
		buf.append(" inner join metadat_mst_Tbl mst on mst.MASTER_ID = map.MASTER_ID    ");

		buf.append(" 	where inst.cti_id = ?                ");

		try {
			con = DBService.getInstance().getConnection();
			//logger.debug("######selectCOCD######## con : " + con);
			//con.setAutoCommit(false);
			//        psmt = con.prepareStatement(buf.toString());    //  로그 inform
			psmt = con.prepareStatement(buf.toString());
			int index = 0;			
			psmt.setLong(++index, cti_id);
			rs = psmt.executeQuery();	
			//TcBeanDO item = new TcBeanDO();
			String COCD = "";
			if(rs.next())
			{


				COCD = rs.getString("cocd");

			}

			//con.setAutoCommit(true);
			return COCD;
		}
		catch (Exception ex)
		{
			logger.error(buf.toString());

			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "selectTcJon 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, con);
		}
	}



	/**
	 * 해당 master_id 의 원본영상 회사코드를 조회한다
	 * @return
	 * @throws DASException
	 */
	public String selectCOCDForMaster_id(long master_id) throws DASException{

		StringBuffer buf = new StringBuffer();
		Connection con = null;		
		PreparedStatement psmt = null;		
		ResultSet rs = null;

		buf.append(" select cocd from metadat_mst_tbl            ");

		buf.append(" 	where master_id = ?                ");

		try {
			con = DBService.getInstance().getConnection();
			//logger.debug("######selectCOCDForMaster_id######## con : " + con);
			//con.setAutoCommit(false);
			//        psmt = con.prepareStatement(buf.toString());    //  로그 inform
			psmt = con.prepareStatement(buf.toString());
			int index = 0;			
			psmt.setLong(++index, master_id);
			rs = psmt.executeQuery();	
			//TcBeanDO item = new TcBeanDO();
			String COCD = "";
			if(rs.next())
			{


				COCD = rs.getString("cocd");

			}

			//con.setAutoCommit(true);
			return COCD;
		}
		catch (Exception ex)
		{
			logger.error(buf.toString());

			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "selectTcJon 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, con);
		}
	}


	/**
	 * 해당 ct_id 의 원본영상 회사코드를 조회한다
	 * @return
	 * @throws DASException
	 */
	public String selectCOCDForCt_id(long ct_id) throws DASException{

		StringBuffer buf = new StringBuffer();
		Connection con = null;		
		PreparedStatement psmt = null;		
		ResultSet rs = null;

		buf.append(" select distinct mst.cocd from contents_inst_Tbl inst              ");
		buf.append(" inner join contentS_mapp_Tbl map on map.ct_id = inst.ct_id        ");
		buf.append(" inner join metadat_mst_Tbl mst on mst.MASTER_ID = map.MASTER_ID    ");

		buf.append(" 	where inst.ct_id = ?                ");

		try {
			con = DBService.getInstance().getConnection();
			//logger.debug("######selectCOCDForCt_id######## con : " + con);
			//con.setAutoCommit(false);
			//        psmt = con.prepareStatement(buf.toString());    //  로그 inform
			psmt = con.prepareStatement(buf.toString());
			int index = 0;			
			psmt.setLong(++index, ct_id);
			rs = psmt.executeQuery();	
			//TcBeanDO item = new TcBeanDO();
			String COCD = "";
			if(rs.next())
			{


				COCD = rs.getString("cocd");

			}

			//con.setAutoCommit(true);
			return COCD;
		}
		catch (Exception ex)
		{
			logger.error(buf.toString());

			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "selectTcJon 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, con);
		}
	}

	/**
	 * PDAS&IFCMS 복원 요청 신청
	 *    
	 * @param date
	 * @return
	 */
	public String ArchiveRecorveryReq(UseInfoDO pdsArchiveDO,String cms_pgm_id) {

		String xml=""; 
		String _result = "false";
		try{
			PdsArchiveDO pDo = new PdsArchiveDO();
			pDo.setCti_id(pdsArchiveDO.getCti_id());
			pDo.setReq_id(pdsArchiveDO.getUser_id());
			pDo.setCocd(pdsArchiveDO.getDtl_type());
			pDo.setFl_nm(pdsArchiveDO.getFileName());
			DivaManagerDOXML _doing = new DivaManagerDOXML();
			xml= _doing.getNewBackupXML(pDo);


			ServiceNevigatorService nevigatorService = new ServiceNevigatorServiceLocator();
			Nevigator nevigator = nevigatorService.getServiceNevigatorPort();
			_result = nevigator.recoveryService(_doing.getNewBackupXML(pDo));
			//}

			return _result;
		}
		catch (Exception e) {
			logger.error(cms_pgm_id);

		}	

		return "";
	}




	/**
	 * 해당  아이디로 콘텐츠 아이디를 가지고 온다.(복본기준)
	 * @param pdsArchiveDO
	 * @return
	 * @throws DASException
	 */
	public MonitoringDO getOBJNAME(long key) throws DASException{

		StringBuffer buf = new StringBuffer();
		Connection con = null;		
		PreparedStatement psmt = null;		
		ResultSet rs = null;

		buf.append(" SELECT OBJ_NAME,cti_id FROM DAS.CONTENTS_loc_TBL                  ");

		buf.append("\n where num = ?  ");

		buf.append("        ");
		try {
			con = DBService.getInstance().getConnection();
			//logger.debug("######getOBJNAME######## con : " + con);
			//con.setAutoCommit(false);
			psmt = con.prepareStatement(buf.toString());    
			int index = 0;			
			psmt.setLong(++index, key);
			rs = psmt.executeQuery();	
			MonitoringDO item = new MonitoringDO();
			if(rs.next())
			{

				item.setCti_id(rs.getLong("cti_id"));
				item.setObj_name(rs.getString("OBJ_NAME"));

			}


			//con.setAutoCommit(true);
			return item;   
		} 
		catch (Exception ex)
		{
			logger.error(buf.toString());

			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "selectTcJon 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, con);
		}

	}






	/**
	 * 진행중 작업 취소 요청
	 *    
	 * @param date
	 * @return
	 */
	public String cancleJOb(MonitoringDO monitoringDO) {

		String xml=""; 
		String _result = "false";
		try{

			DivaManagerDOXML _doing = new DivaManagerDOXML();
			xml= _doing.getCancleArchiveJobXML(monitoringDO);

			ServiceNevigatorService nevigatorService = new ServiceNevigatorServiceLocator();
			Nevigator nevigator = nevigatorService.getServiceNevigatorPort();

			_result = nevigator.cancelService(_doing.getCancleArchiveJobXML(monitoringDO));
			return _result;
		}
		catch (Exception e) {
			logger.error("cancleJOb",e);
		}	
		return "";
	}





	/**
	 * 우선순위 변경 을 wf에전송손요청한다
	 *    
	 * @param date
	 * @return
	 */
	public String changePriorityForArch(MonitoringDO monitoringDO) {



		String xml=""; 
		String _result = "false";
		try{

			DivaManagerDOXML _doing = new DivaManagerDOXML();
			xml= _doing.getChangePriorityJobXML(monitoringDO);


			ServiceNevigatorService nevigatorService = new ServiceNevigatorServiceLocator();
			Nevigator nevigator = nevigatorService.getServiceNevigatorPort();
			_result= nevigator.changePriorityService(_doing.getChangePriorityJobXML(monitoringDO));
			//}

			return _result;
		}
		catch (Exception e) {
			logger.error("changePriorityForArch",e);
		}	

		return "";
	}





	/**
	 * 해당 TC Seq로 영상의 인스턴스 ID를 얻는다
	 * @return
	 * @throws DASException
	 */
	public long selectMxfID(TcBeanDO tcBeanDO) throws DASException{

		StringBuffer buf = new StringBuffer();
		Connection con = null;		
		PreparedStatement psmt = null;		
		ResultSet rs = null;

		buf.append(" select                   ");
		buf.append("     inst.CTI_ID    from tc_job_tbl tc            ");
		buf.append("   inner join contents_inst_Tbl inst on tc.CT_ID = inst.CT_ID and inst.CTI_FMT like '1%'  ");
		buf.append(" 	WHERE TC.ct_id =  ?                  ");

		try {
			con = DBService.getInstance().getConnection();
			//logger.debug("######selectMxfID######## con : " + con);
			//con.setAutoCommit(false);
			// psmt = con.prepareStatement(buf.toString());    //  로그 inform
			psmt = con.prepareStatement(buf.toString());

			int index = 0;			
			psmt.setLong(++index, tcBeanDO.getCt_id());
			rs = psmt.executeQuery();	
			long cti_id =0;
			if(rs.next())
			{
				cti_id =     	rs.getLong("CTI_ID");

			}

			//con.setAutoCommit(true);
			return cti_id;
		}
		catch (Exception ex)
		{
			logger.error(buf.toString());

			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "selectTcJon 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, con);
		}

	}




	/**
	 * das 장비관리 테이블에 현 진행상황을 업데이트 한다.
	 * @param ct_id
	 * @return
	 * @throws Exception 
	 */
	public boolean updateDasEquipMent(TcBeanDO tcBeanDO) throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.das_equipment_tbl set ");
		buf.append("\n 	PRGRS = ? ");
		buf.append("\n 	,cti_id = ? ");
		buf.append("\n 	,mod_dt = ? ");
		buf.append("\n 	,job_status = ? ");
		buf.append("\n where ");
		buf.append("\n  das_eq_nm = ? ");

		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateDasEquipMent######## con : " + con);
			stmt = con.prepareStatement(buf.toString());
			//	stmt = con.prepareStatement(buf.toString());
			String dateTime = CalendarUtil.getDateTime("yyyyMMddHHmmss");
			int index = 0;
			stmt.setString(++index, tcBeanDO.getProgress());
			stmt.setLong(++index, tcBeanDO.getCti_id());
			stmt.setString(++index, dateTime);
			//20130104 DAS_EQUIPMENT_TBL 관련 Job_status 추가
			stmt.setString(++index, tcBeanDO.getJob_status());;
			stmt.setString(++index, tcBeanDO.getTc_id());

			int updateCount = stmt.executeUpdate();

			if(updateCount>0)return true;
			return false;
		}

		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}



	/**
	 * 해당  아이디로 콘텐츠 아이디를 가지고 온다.(복본기준)
	 * @param pdsArchiveDO
	 * @return
	 * @throws DASException
	 */
	public ManualDeleteDO getOBJNAMEForDelete(long key) throws DASException{

		StringBuffer buf = new StringBuffer();
		Connection con = null;		
		PreparedStatement psmt = null;		
		ResultSet rs = null;

		buf.append(" SELECT inst.ct_id FROM DAS.CONTENTS_inst_TBL inst                 ");
		buf.append(" inner join contents_loc_tbl loc on loc.cti_id = inst.cti_id and inst.cti_fmt like '1%'                  ");

		buf.append("\n where loc.num = ?  ");

		buf.append("        ");
		try {
			con = DBService.getInstance().getConnection();
			//logger.debug("######getOBJNAMEForDelete######## con : " + con);
			//con.setAutoCommit(false);
			psmt = con.prepareStatement(buf.toString());    
			int index = 0;			
			psmt.setLong(++index, key);
			rs = psmt.executeQuery();	
			ManualDeleteDO item = new ManualDeleteDO();
			if(rs.next())
			{

				item.setCt_id(rs.getLong("ct_id"));
				//item.setObj_name(rs.getString("OBJ_NAME"));

			}


			//con.setAutoCommit(true);
			return item;   
		}
		catch (Exception ex)
		{
			logger.error(buf.toString());

			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "selectTcJon 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, con);
		}

	}


	/**
	 * 삭제요청
	 *    
	 * @param date
	 * @return
	 */
	public String deleteJOb(ManualDeleteDO manualDeleteDO) {


		String _result = "false";
		try{

			DivaManagerDOXML _doing = new DivaManagerDOXML();

			ServiceNevigatorService nevigatorService = new ServiceNevigatorServiceLocator();
			Nevigator nevigator = nevigatorService.getServiceNevigatorPort();
			_result=  nevigator.schedulerForceExecute(_doing.getDeleteJobXML(manualDeleteDO));
			//}


			return _result;
		}
		catch (Exception e) {
			logger.error("deleteJOb",e);
		}	
		return "";
	}

	/**
	 * PDS 파일삭제 요청요청
	 *    
	 * @param date
	 * @return
	 */
	public String deletePDSJOb(long ctId) {


		String _result = "false";
		try{

			DivaManagerDOXML _doing = new DivaManagerDOXML();

			ServiceNevigatorService nevigatorService = new ServiceNevigatorServiceLocator();
			Nevigator nevigator = nevigatorService.getServiceNevigatorPort();
			_result=  nevigator.schedulerForceExecute(_doing.getDeleteJobForPDSXML(ctId));
			//}

			logger.debug("_result  :  "+_result);
			return _result;
		}
		catch (Exception e) {
			logger.error("deletePDSJOb",e);
		}	
		return "";
	}


	/**
	 * Job을 MIN 으로 처리순서를 잡고 조회를 한건 한다. (manual tc 완료시)
	 * @throws Exception 
	 */
	public TcBeanDO selectTcJob4(TcBeanDO tcBeanDO) throws Exception{


		/**
		 * allocate 값을 'Y'로 수정하는 것을 추가 ExternalDAO
		 */
		Connection con = null;		
		//PreparedStatement psmt = null;		
		try {

			con = DBService.getInstance().getConnection();
			//logger.debug("######selectTcJob4######## con : " + con);
			if(tcBeanDO.getReq_cd().equals("LRCT")){

				// wmv 재생성일, 명칭 업데이트
				updateContentsInst(con,tcBeanDO);
				// 고해상도 정보 업데이트
				updateContentsInst2(con,tcBeanDO);
				// 메타 데이터 정리전으로 변환
				updateMetadat2(con,tcBeanDO);
				// 키프레임 명 업데이트
				updatemetatbl3(con,tcBeanDO);
				// etc ''값
				updateETCNull(con,tcBeanDO.getCt_id());
				// 경로저장
				updateContents(con,tcBeanDO);
				//기존 코너를 삭제하고 새로운 코너를 생성한다
				TcBeanDO oldInfo = getMappInfo3(tcBeanDO.getCt_id());
				logger.debug("[oldInfo]"+oldInfo);
				tcBeanDO.setCn_info(oldInfo.getCn_info());

				deleteCorner(con,tcBeanDO);
				deleteContentsMapp(con,tcBeanDO);
				insertCornerInfo(con,oldInfo,tcBeanDO);
				insertContentsMappInfo(con,oldInfo,tcBeanDO);
				//20121211 변경
				String  Out_put_lr_path = tcBeanDO.getOut_put_ct_path().replaceAll(dasHandler.getProperty("MP4"), dasHandler.getProperty("WINMP4"));
				Out_put_lr_path = Out_put_lr_path.replaceAll(dasHandler.getProperty("NET_MP4"), dasHandler.getProperty("WINNET_MP4"));  
				insertMergeInfo(tcBeanDO.getTc_id(),tcBeanDO.getCt_id(),Out_put_lr_path);
			}


			// 키프레임 명 업데이트
			if(tcBeanDO.getReq_cd().trim().equals("CT")){
				// 경로저장
				updateContents(con,tcBeanDO);
				// 키프레임 명 업데이트
				updatemetatbl(con,tcBeanDO);
				// etc ''값
				updateETCNull(con,tcBeanDO.getCt_id());


				//기존 코너를 삭제하고 새로운 코너를 생성한다
				//TcBeanDO oldInfo = getMappInfo(tcBeanDO.getCt_id());
				//deleteCorner(con,tcBeanDO);
				//deleteContentsMapp(con,tcBeanDO);
				//insertCornerInfo(con,oldInfo,tcBeanDO);
				//insertContentsMappInfo(con,oldInfo,tcBeanDO);
				//20121211 변경
				String  Out_put_lr_path = tcBeanDO.getOut_put_ct_path().replaceAll(dasHandler.getProperty("MP4"), dasHandler.getProperty("WINMP4"));
				Out_put_lr_path = Out_put_lr_path.replaceAll(dasHandler.getProperty("NET_MP4"), dasHandler.getProperty("WINNET_MP4"));  
				insertMergeInfo(tcBeanDO.getTc_id(),tcBeanDO.getCt_id(),Out_put_lr_path);
			}



			// 대표화면 키프레임 저장
			if(tcBeanDO.getReq_cd().equals("LR")){


				// wmv 재생성일, 명칭 업데이트
				updateContentsInst(con,tcBeanDO);
				updatemetatbl(con,tcBeanDO);
				// 경로저장
				updateContents(con,tcBeanDO);
				updateETCNull(con,tcBeanDO.getCt_id());

			}
			return tcBeanDO;
		} 
		catch (Exception ex)
		{
			try {
				con.rollback();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				logger.error(e);
			}
			throw ex;


		}
		finally
		{
			//    	con.setAutoCommit(true);
			release(null, null, con);
		}

	}

	/**
	 *  mapp  조회한다.
	 * @param master_id
	 * @return
	 * @throws DASException
	 */
	public TcBeanDO getMappInfo2(long ct_id) throws DASException{

		StringBuffer buf = new StringBuffer();
		Connection con = null;		
		PreparedStatement psmt = null;		
		ResultSet rs = null;


		buf.append("\n SELECT						");
		buf.append("\n  map.ct_id           ");

		buf.append("\n ,map.master_id                       ");
		buf.append("\n  from contents_mapp_tbl   map                        ");
		buf.append("\n inner join corner_tbl cor on cor.cn_id = map.cn_id                       ");
		buf.append("\n  inner join TC_JOB_TBL job on map.CT_ID = job.CT_ID                     ");
		buf.append("\n  inner join contents_tbl cont on map.CT_ID = cont.CT_ID                     ");
		buf.append("\n  where map.ct_id = ?    ");
		buf.append("\n   order by  map.cn_id desc  ");
		buf.append("\n   fetch first 1 rows only    ");
		try {
			con = DBService.getInstance().getConnection();
			//logger.debug("######getMappInfo2######## con : " + con);
			psmt = con.prepareStatement(buf.toString());    
			int index = 0;			
			psmt.setLong(++index, ct_id);
			rs = psmt.executeQuery();
			TcBeanDO item = new TcBeanDO();
			if(rs.next())
			{
				item.setCt_id(rs.getLong("ct_id"));
				item.setMaster_id(rs.getLong("master_id"));

			}
			return item;

		}
		catch (Exception ex)
		{
			logger.error(buf.toString());

			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "selectTcJon 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, con);
		}
	}






	/**
	 *  mapp  조회한다.
	 * @param master_id
	 * @return
	 * @throws DASException
	 */
	public TcBeanDO getMappInfo3(long ct_id) throws DASException{

		StringBuffer buf = new StringBuffer();
		Connection con = null;		
		PreparedStatement psmt = null;		
		ResultSet rs = null;

		buf.append("\n SELECT						");
		buf.append("\n  map.ct_id           ");
		buf.append("\n ,map.master_id                       ");
		buf.append("\n ,value(cor.cn_nm,'') as cn_nm                     ");
		buf.append("\n ,case when job.TC_TYPE='001' then ''                       ");
		buf.append("\n when job.TC_TYPE <>'001' then cor.CN_INFO                       ");
		buf.append("\n else ''                      ");
		buf.append("\n end as CN_INFO                      ");
		buf.append("\n  from contents_mapp_tbl   map                        ");
		buf.append("\n inner join corner_tbl cor on cor.cn_id = map.cn_id                       ");
		buf.append("\n  inner join TC_JOB_TBL job on map.CT_ID = job.CT_ID                     ");
		buf.append("\n  inner join contents_tbl cont on map.CT_ID = cont.CT_ID                     ");
		buf.append("\n  where map.ct_id = ?    ");
		buf.append("\n   order by  map.cn_id desc  ");
		buf.append("\n   fetch first 1 rows only    ");
		try {
			con = DBService.getInstance().getConnection();
			//logger.debug("######getMappInfo3######## con : " + con);
			psmt = con.prepareStatement(buf.toString());    
			int index = 0;			
			psmt.setLong(++index, ct_id);
			rs = psmt.executeQuery();
			TcBeanDO item = new TcBeanDO();
			if(rs.next())
			{
				item.setCt_id(rs.getLong("ct_id"));

				item.setMaster_id(rs.getLong("master_id"));
				item.setCn_nm(rs.getString("cn_nm"));
				item.setCn_info(rs.getString("CN_INFO"));

			}
			return item;

		}
		catch (Exception ex)
		{
			logger.error(buf.toString());

			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "selectTcJon 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, con);
		}
	}






	/**
	 * 해당 TC Seq로 영상의 인스턴스 ID를 얻는다
	 * @return
	 * @throws DASException
	 */
	public String selectCOCD(TcBeanDO tcBeanDO) throws DASException{

		StringBuffer buf = new StringBuffer();
		Connection con = null;		
		PreparedStatement psmt = null;		
		ResultSet rs = null;

		buf.append(" select                   ");
		buf.append("     mst.cocd  from tc_job_tbl tc            ");
		buf.append("   inner join contents_mapp_Tbl map on tc.CT_ID = map.CT_ID  ");
		buf.append("   inner join metadat_mst_Tbl mst  on mst.master_ID = map.master_id  ");

		buf.append(" 	WHERE TC.ct_id =  ?                  ");

		try {
			con = DBService.getInstance().getConnection();
			//logger.debug("######selectCOCD######## con : " + con);
			//con.setAutoCommit(false);
			//        psmt = con.prepareStatement(buf.toString());    //  로그 inform
			psmt = con.prepareStatement(buf.toString());
			int index = 0;			
			psmt.setLong(++index, tcBeanDO.getCt_id());
			rs = psmt.executeQuery();	
			String cocd="";
			if(rs.next())
			{
				cocd =     	rs.getString("cocd");

			}

			//con.setAutoCommit(true);
			return cocd;
		}
		catch (Exception ex)
		{
			logger.error(buf.toString());

			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "selectTcJon 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, con);
		}

	}



	/**
	 * BackEnd TC 의 ID 값을 확인하여 'Busy' 값을 부여.
	 * @param ct_id
	 * @return
	 * @throws Exception 
	 */
	public boolean updateMediaTcState(TcBeanDO tcBeanDO) throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.Mediatc_state_tbl set ");
		buf.append("\n 	WORK_STAT = ? ");
		buf.append("\n where TC_ID = ? ");

		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateMediaTcState######## con : " + con);
			//		stmt = con.prepareStatement(buf.toString());
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setString(++index, tcBeanDO.getWork_stat()+"");
			stmt.setString(++index, tcBeanDO.getTc_id());

			int updateCount = stmt.executeUpdate();

			if(updateCount>0)return true;
			return false;
		}
		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}


	/**
	 * BackEnd TC 의 ID 값을 확인하여 상태값을 부여.
	 * @param ct_id
	 * @return
	 * @throws Exception 
	 */
	public boolean updateMediaTcProgress(TcBeanDO tcBeanDO) throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.TC_MEDIA_JOB_TBL set ");
		buf.append("\n 	PROGRESS = ? ");
		buf.append("\n 	,JOB_STATUS = ? ");
		buf.append("\n where SEQ = ? ");

		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateMediaTcProgress######## con : " + con);
			//		stmt = con.prepareStatement(buf.toString());
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setString(++index, tcBeanDO.getProgress());
			stmt.setString(++index, tcBeanDO.getJob_status());
			stmt.setLong(++index, tcBeanDO.getJob_id());

			int updateCount = stmt.executeUpdate();

			if(updateCount>0)return true;
			return false;
		}
		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}


	/**
	 * 해당 TC Seq를 확인하여 해당 WorkStat 값을 확인한다.
	 * @return
	 * @throws DASException
	 */
	public TcBeanDO selectMediaTcState(TcBeanDO tcBeanDO) throws DASException{

		StringBuffer buf = new StringBuffer();
		Connection con = null;		
		PreparedStatement psmt = null;		
		ResultSet rs = null;

		buf.append(" select                   ");
		buf.append("      SEQ, TC_ID,TC_NM,CH_SEQ,WORK_STAT                              ");
		buf.append(" 	 from das.MEDIAtc_STATE_tbl A where A.SEQ = ?                  ");

		try {
			con = DBService.getInstance().getConnection();
			//logger.debug("######selectMediaTcState######## con : " + con);
			//con.setAutoCommit(false);
			//        psmt = con.prepareStatement(buf.toString());    //  로그 inform
			psmt = con.prepareStatement(buf.toString());
			int index = 0;			
			psmt.setString(++index, tcBeanDO.getSeq()+"");
			rs = psmt.executeQuery();	
			TcBeanDO item = new TcBeanDO();
			if(rs.next())
			{
				item.setSeq(     	rs.getLong("SEQ"));
				item.setTc_id(      rs.getString("TC_ID"));
				item.setTc_nm(rs.getString("TC_NM"));
				item.setCh_seq(rs.getString("CH_SEQ"));
				item.setWork_stat(rs.getString("WORK_STAT"));
			}

			//con.setAutoCommit(true);
			return item;
		}
		catch (Exception ex)
		{
			logger.error(buf.toString());

			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "selectTcJon 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, con);
		}

	}



	/**
	 * work_stat의 상태가 F일때는 실패로 등록한다
	 * @param tcBeanDO
	 * @return boolean
	 * @throws Exception 
	 * @throws RemoteException
	 */
	public boolean updateErrMediaTcjob(TcBeanDO tcBeanDO) throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.tc_media_job_tbl set ");
		buf.append("\n 	JOB_ALOCATE = 'F' ");
		buf.append("\n where CT_ID = ? ");

		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateErrMediaTcjob######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			//stmt.setString(++index, tcBeanDO.getWork_stat()+"");
			stmt.setLong(++index, tcBeanDO.getCt_id());

			int updateCount = stmt.executeUpdate();
			updateMetadat3(con,tcBeanDO);
			if(updateCount>0)return true;
			return false;
		}
		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}




	/**
	 * Job을 MIN 으로 처리순서를 잡고 조회를 한건 한다. 
	 */
	public TcBeanDO selectMediaTcJob() throws DASException{

		StringBuffer buf = new StringBuffer();
		Connection con = null;		
		PreparedStatement psmt = null;		
		ResultSet rs = null;

		//	buf.append(" select * from (                                                       ");
		//	buf.append(" select ROW_NUMBER() OVER(ORDER BY A.seq desc) AS rownum                    ");
		//	buf.append("       ,SEQ, MEDIA_ID, REG_DT, RESULT, TC_ID                           ");
		//	buf.append("       , REQ_CD,  INPUT_LR, OUTPUT_LR_PATH, OUTPUT_CT_PATH    ");
		//	buf.append("       , OUTPUT_LR_NM, OUTPUT_CT_NM, CT_ID, FILE_READY, JOB_ALOCATE    ");
		//	buf.append("       , VALUE(INPUT_HR_NM,'') AS INPUT_HR_NM,  VALUE( INPUT_HR,'') AS INPUT_HR    ");
		//	buf.append(" from das.tc_job_tbl A where A.JOB_ALOCATE = 'N'                       ");
		//	buf.append(" ) B                                                                   ");
		//	buf.append(" where B.rownum =  ?                                                  ");

		/**
		 * Job을 MIN 으로 처리순서를 잡고 조회를 한건 한다. 
		 */
		buf.append(" select										                   ");
		buf.append("       SEQ, MEDIA_ID, REG_DT, RESULT, TC_ID                           ");
		buf.append("       , REQ_CD,  INPUT_LR, OUTPUT_LR_PATH, OUTPUT_CT_PATH    ");
		buf.append("       , OUTPUT_LR_NM, OUTPUT_CT_NM, CT_ID, FILE_READY, JOB_ALOCATE    ");
		buf.append("       , VALUE(INPUT_HR_NM,'') AS INPUT_HR_NM,  VALUE( INPUT_HR,'') AS INPUT_HR    ");
		buf.append(" from das.tc_job_tbl A                     ");
		buf.append("  where      seq = (select seq from das.tc_job_tbl where job_alocate='N' AND COCD <> 'S' order by priority desc fetch first 1 rows only ) ");

		try {
			con = DBService.getInstance().getConnection();
			//logger.debug("######selectMediaTcJob######## con : " + con);
			//con.setAutoCommit(false);
			// psmt = con.prepareStatement(buf.toString());    
			psmt = con.prepareStatement(buf.toString());
			int index = 0;			
			//		psmt.setLong(++index, Long.parseLong(getNextSquence(con, DASBusinessConstants.SequenceName.TC_JOB)));
			rs = psmt.executeQuery();
			String input_hr=""; 
			if(rs.next())
			{
				TcBeanDO item = new TcBeanDO();
				item.setSeq(     	rs.getLong("SEQ"));
				item.setMedia_id(   rs.getString("MEDIA_ID"));
				item.setReg_dt(     rs.getString("REG_DT"));
				item.setResult(     rs.getString("RESULT"));
				item.setTc_id(      rs.getString("TC_ID"));
				item.setReq_cd(     rs.getString("REQ_CD"));
				String hr = rs.getString("INPUT_HR").trim();
				if(hr.matches(".*arcreq.*")){
					input_hr = hr.replaceAll("/"+dasHandler.getProperty("WINARCREQ"), dasHandler.getProperty("ARCREQ"));
					input_hr = input_hr.replaceAll(dasHandler.getProperty("WINARCREQ"), dasHandler.getProperty("ARCREQ"));
					logger.debug("input arcreq =========== " +input_hr);
					item.setInput_hr(input_hr);
				}else if(hr.matches(".*mp2.*")){
					input_hr =hr.replaceAll("/"+dasHandler.getProperty("WINMP2"),dasHandler.getProperty("MP2"));
					input_hr =input_hr.replaceAll(dasHandler.getProperty("WINMP2"),dasHandler.getProperty("MP2"));
					logger.debug("input mp2 =========== " +input_hr);
					item.setInput_hr(input_hr);
				}else if(hr.matches(".*nearline.*")){
					input_hr =hr.replaceAll("/"+dasHandler.getProperty("WINNEARLINE"),dasHandler.getProperty("NEARLINE"));
					input_hr =input_hr.replaceAll(dasHandler.getProperty("WINNEARLINE"),dasHandler.getProperty("NEARLINE"));
					logger.debug("input nearline =========== " +input_hr);
					item.setInput_hr(input_hr);
				}else{
					item.setInput_hr(hr);
					logger.debug("input nomal =========== " +input_hr);
				} 

				item.setInput_lr("");

				/*
				String Out_put_lr_path = rs.getString("OUTPUT_LR_PATH").trim().replaceAll(dasHandler.getProperty("WINMP4"), dasHandler.getProperty("MP4"));
				item.setOut_put_lr_path(Out_put_lr_path);
				String Out_put_ct_path = rs.getString("OUTPUT_CT_PATH").replaceAll(dasHandler.getProperty("WINMP4"), dasHandler.getProperty("MP4"));
				item.setOut_put_ct_path(Out_put_ct_path);
				 */
				//2012.06.19 변경안

				String Out_put_lr_path = rs.getString("OUTPUT_LR_PATH").trim().replaceAll(dasHandler.getProperty("WINMP4"), dasHandler.getProperty("MP4"));
				Out_put_lr_path = rs.getString("OUTPUT_LR_PATH").trim().replaceAll(dasHandler.getProperty("WINNET_MP4"), dasHandler.getProperty("NET_MP4"));
				item.setOut_put_lr_path(Out_put_lr_path);
				String Out_put_ct_path = rs.getString("OUTPUT_CT_PATH").replaceAll(dasHandler.getProperty("WINMP4"), dasHandler.getProperty("MP4"));
				Out_put_ct_path = rs.getString("OUTPUT_CT_PATH").replaceAll(dasHandler.getProperty("WINNET_MP4"), dasHandler.getProperty("NET_MP4"));
				item.setOut_put_ct_path(Out_put_ct_path);
				item.setOut_put_lr_nm(   rs.getString("OUTPUT_LR_NM"));
				item.setOut_put_ct_nm(   rs.getString("OUTPUT_CT_NM"));
				item.setCt_id(         	 rs.getLong("CT_ID"));
				item.setFile_ready(      rs.getString("FILE_READY"));
				item.setInput_lr_nm(      rs.getString("OUTPUT_LR_NM"));
				item.setInput_hr_nm(      rs.getString("INPUT_HR_NM"));
				item.setJob_alocate(	 rs.getString("JOB_ALOCATE"));

				/**
				 * allocate 값을 'Y'로 수정하는 것을 추가 ExternalDAO
				 */

				int result = updateResultTcjob(item);


				// wmv 재생성일, 명칭 업데이트
				//	updateContentsInst(item);

				// 키프레임 명 업데이트
				//updateContents(item);

				// 대표화면 키프레임 저장
				//	updatemetatbl(item);
				if(result ==1){
					return item;
				}else{
					return null;
				}
			}


			return null;

		}
		catch (Exception ex)
		{
			logger.error(buf.toString());

			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "selectTcJon 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			//   	con.setAutoCommit(true);
			release(rs, psmt, con);
		}

	}



	/**
	 * BackEnd TC 의 STATE 를 확인하여 Idle 인 TC GET
	 * @return
	 * @throws DASException
	 */

	public TcBeanDO selectMediaTcAllocationState(TcBeanDO tcBeanDO) throws DASException{

		StringBuffer buf = new StringBuffer();
		Connection con = null;		
		PreparedStatement psmt = null;		
		ResultSet rs = null;

		/**
		 * rownum 분배가 이루어 지는 구조. (BackendTC 요청시 동시성 해결 OK)
		 */
		//	buf.append(" select * from (                                                      ");
		//	buf.append(" select ROW_NUMBER() OVER(ORDER BY A.seq) AS rownum                   ");
		//	buf.append("      ,SEQ, TC_ID,TC_NM,CH_SEQ,WORK_STAT                              ");
		//	buf.append(" 	 from das.tc_STATE_tbl A where A.WORK_STAT = 'I'                  ");
		//	buf.append(" ) B                                                                  ");
		//	buf.append(" where B.rownum =  ?                                                  ");

		/**
		 * Min 분배가 이루어 지는 구조 . (BackendTC 요청시 동시성 미해결 )
		 */
		buf.append(" select ");
		buf.append("     SEQ, TC_ID,TC_NM,CH_SEQ,WORK_STAT                              ");
		buf.append(" from das.mediatc_STATE_tbl A                 ");
		buf.append(" where A.seq = ? and A.WORK_STAT='I' ");

		try {
			con = DBService.getInstance().getConnection();
			//logger.debug("######selectMediaTcAllocationState######## con : " + con);
			//con.setAutoCommit(false);
			//        psmt = con.prepareStatement(buf.toString());    
			psmt = con.prepareStatement(buf.toString());

			int index = 0;			
			//        long seq =Long.parseLong(getNextSquence(con, DASBusinessConstants.SequenceName.TC_STATE));
			//        logger.debug("[DASBusinessConstants.SequenceName.TC_STATE]"+seq);
			//		psmt.setLong(++index,seq);  // rownum 분배가 이루어 지는 Sequence
			psmt.setLong(++index,tcBeanDO.getSeq());
			rs = psmt.executeQuery();	
			if(rs.next())
			{
				TcBeanDO item = new TcBeanDO();
				item.setSeq(     	rs.getLong("SEQ"));
				item.setTc_id(      rs.getString("TC_ID"));
				item.setTc_nm(rs.getString("TC_NM"));
				item.setCh_seq(rs.getString("CH_SEQ"));
				item.setWork_stat(rs.getString("WORK_STAT"));

				//con.setAutoCommit(true);


				/**
				 * TC_STATE 값을 'I' (IDLE)로 수정하는 것을 추가
				 */

				if(tcBeanDO.getWork_stat().equals("I")){
					updateTcState(tcBeanDO);
				}

				return item;
			}
			con.setAutoCommit(true);
			return null;

		}
		catch (Exception ex)
		{
			logger.error(buf.toString());

			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "selectTcJon 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, con);
		}

	}




	/**
	 * TC에게 작업을 배정하는 메소드 
	 * @param tcJobBeanDO JOB 을 가지고 오는 빈
	 * @param stateBeanDO TC를 가지고 오는 빈
	 * @param tc_inter_path
	 * @throws Exception 
	 */
	public void getMediaTCJob(TcBeanDO tcJobBeanDO,TcBeanDO stateBeanDO,String tc_inter_path)throws Exception{

		try {
			if(logger.isDebugEnabled()){
				//		logger.debug("getTCJob [input tcBeanDO,tc_inter_path]"+tcJobBeanDO+","+tc_inter_path+","+stateBeanDO.getTc_id());
			}
			TcBeanDOXML _doXML = new TcBeanDOXML();
			TcBeanDO _do = (TcBeanDO)_doXML.setDO(tcJobBeanDO);

			/**
			 * 해당 디렉토리에 XML 파일을 전송,저장한다.
			 */
			jutil fo = new jutil();
			//	logger.debug("_doXML.toXML()   " + _doXML.toXML());
			//fo.makeFile(_doXML.toXML(),"C:\\12\\"+tcJobBeanDO.getCt_id());
			logger.debug("location [_doXML.toXML()]"+tc_inter_path+stateBeanDO.getTc_id()+"/"+tcJobBeanDO.getCt_id());
			fo.makeFile(_doXML.toXML(), tc_inter_path+stateBeanDO.getTc_id()+"/"+tcJobBeanDO.getCt_id());
			//fo.makeFile(_doXML.toXML(), "/app/jeus/test/"+tcJobBeanDO.getCt_id());
			logger.debug("getTCJob [_doXML.toXML()]"+_doXML.toXML());
			/**  
			 * FTP로 해당 파일을 전달한다.
			 */
			/*FtpUtil.ftpTransport(dasHandler.getProperty("TC_HOST_IP"),
					dasHandler.getProperty("TC_ID"), dasHandler.getProperty("디투넷"), _doXML.toXML(), _do.getCt_id()+"");
			 */
		} catch (Exception e) {

			logger.error(tc_inter_path); 
			throw e;
		}

	}




	/**
	 * Backend Tc 잡상태 변화
	 * @param tcBeanDO
	 * @return
	 * @throws Exception 
	 * @throws RemoteException
	 */
	public int updateMediaTcJobState(Long seq,String tc_id) throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.tc_media_job_tbl set ");
		buf.append("\n 	job_alocate = 'Y' ");
		buf.append("\n 	,tc_id=? ");
		buf.append("\n where seq = ? ");

		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateMediaTcJobState######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setString(++index, tc_id);
			stmt.setLong(++index, seq);

			int updateCount = stmt.executeUpdate();

			return updateCount;
		}
		catch (Exception e) 
		{
			logger.error(buf.toString());

			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}



	/**
	 * BackEnd TC 의 ID 값을 확인하여 'Busy' 값을 부여.
	 * @param ct_id
	 * @return
	 * @throws Exception 
	 */
	public int updateMediaTcState(String SEQ) throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.mediatc_state_tbl set ");
		buf.append("\n 	WORK_STAT = 'B' ");
		buf.append("\n where SEQ = ? ");

		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateMediaTcState######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setString(++index, SEQ);


			int updateCount = stmt.executeUpdate();

			return updateCount;
		}

		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}




	/**
	 * 이용자별 다운로드 목록을 조회한다
	 * @param CartItemDO                                                                                                                                                                                            
	 * @param                                                                                                                                                                                               
	 * @return                                                                                                            
	 * @throws Exception 
	 */
	public List  getGroupForMaster(long master_id) throws Exception
	{
		String query = ExternalStatement.selectGroupForMaster(master_id);
		Connection con = null;
		PreparedStatement stmt = null;
		PreparedStatement stmt2 = null;
		ResultSet rs = null;
		ResultSet rs2 = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######getGroupForMaster######## con : " + con);
			int index = 0;

			stmt = con.prepareStatement(query);
			rs = stmt.executeQuery();

			List resultList  = new ArrayList();
			WmvH264DO item = new WmvH264DO();
			String ctidgroup="";
			String ctNMgroup="";
			long ct_id=0;
			String ct_nm="";
			long rel_master_id =0;
			while(rs.next())
			{
				if(ctidgroup.equals("")){
					ctidgroup=String.valueOf(rs.getLong("CT_ID"));
					ctNMgroup=String.valueOf(rs.getString("CT_NM"));
				}else{
					ctidgroup = ctidgroup+","+rs.getLong("CT_ID");
					ctNMgroup = ctNMgroup+","+rs.getString("CT_NM");
				}
				rel_master_id = rs.getLong("rel_master_id");
			}
			if(rel_master_id!=0){
				String query2 = ExternalStatement.selectGroupForMasterForRelation(rel_master_id);
				//stmt2 = LoggableStatement.getInstance(con, query2);
				stmt2 = con.prepareStatement(query2);
				rs2 = stmt2.executeQuery();
				while(rs2.next())
				{
					ct_id=rs2.getLong("CT_ID");
					ct_nm=rs2.getString("CT_NM");
				}
			}
			item.setCti_ids(ctidgroup);
			item.setCt_nm(ctNMgroup);
			item.setRel_ct_id(String.valueOf(ct_id));
			item.setRel_ct_nm(ct_nm+"(관련영상)");
			resultList.add(item);

			return resultList; 
		} 
		catch (Exception e) 
		{
			logger.error(query);


			throw e;
		}
		finally
		{
			release(rs, stmt, con);
			release(rs2, stmt2, null);
		}
	}


	/**
	 * 화면정보를 조회한다(미디어넷 스토리보드).
	 * @param master_id
	 * @return
	 * @throws RemoteException
	 */
	public String getSceanInfoForIfCms(long ct_id) throws DASException
	{	
		StringBuffer strResultBuffer = new StringBuffer();

		long nMasterID = 0;

		strResultBuffer.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n");
		strResultBuffer.append("<das>\n");

		// Corner, CT, CTI, Map, Meta, Content에서 찾는 경우
		strResultBuffer.append(this.getCornerResultXMLForIfCms(ct_id));
		//cart 에서 찾는 경우
		//	strResultBuffer.append(this.getCartResultXML(ct_id));

		strResultBuffer.append("</das>\n");   
		//	logger.debug("strResultBuffer.toString()"+strResultBuffer.toString());
		return strResultBuffer.toString();

	}


	// 코너 정보를 가져온다.
	private String getCornerResultXMLForIfCms(long ct_id) throws DASException
	{
		StringBuffer buf = new StringBuffer();
		StringBuffer strResult = new StringBuffer();

		buf.append("\n select ");
		buf.append("\n 	value(CN.CN_ID, '')as cn_id ");	
		buf.append("\n 	,case when cn.cn_nm <>'' then CN.CN_NM ");	
		buf.append("\n 	 when cn.CN_NM is null or cn.CN_NM=''  and ct_typ<>'003'  then ct.CT_NM ");	
		buf.append("\n 	 else cn.CN_NM ");	
		buf.append("\n 	 end as CN_NM ");	
		buf.append("\n 	,value(CN.RPIMG_KFRM_SEQ, 0) as RPIMG_KFRM_SEQ, value(CN.SOM, '') as SOM, value(CN.EOM, '') as EOM, '' as CN_TYPE_CD, value(CN.RPIMG_CT_ID, '')as RPIMG_CT_ID, value(CN.CN_INFO, '')as CN_INFO");	
		buf.append("\n 	, value(CT.CT_ID, '')as CT_ID, value(CODE.DESC, '')as CT_NM, value(CT.REG_DT, '')as REG_DT, value(CT.CT_LENG, '')as CT_LENG, value(CT.DURATION, 0)as DURATION, value(CT.CT_SEQ, 0)as CT_SEQ, value(CT.KFRM_PATH, '')as KFRM_PATH");
		buf.append("\n 	, value(CT.KFRM_PX_CD, '')as KFRM_PX_CD, value(CT.VD_QLTY, '')as VD_QLTY, value(CT.ASP_RTO_CD, '')as ASP_RTO_CD, value(CT.CONT, '')as CONT ,value(CT.CT_CLA, '')as CT_CLA,value(CT.TOT_KFRM_NUMS, 0)as TOT_KFRM_NUMS,value(CT.MEDIA_ID, '')as MEDIA_ID");
		buf.append(" \n	, value(CTI.INGEST_EQ_ID, 0)as INGEST_EQ_ID, value(CTI.FL_PATH, '')as FL_PATH, value(CTI.WRK_FILE_NM, '')as WRK_FILE_NM, value(CTI.CTI_FMT, '')as CTI_FMT, value(CTI.FL_SZ, '')as FL_SZ, value(CTI.CTI_ID, '')as CTI_ID ");
		buf.append(" \n	,  value(CTI.ARCH_STE_YN, '')as ARCH_STE_YN, value(CTI.VD_HRESOL, 0)as VD_HRESOL, value(CTI.VD_VRESOL, 0)as VD_VRESOL, value(CTI.BIT_RT, '')as BIT_RT, value(CTI.FRM_PER_SEC, '')as FRM_PER_SEC, value(CTI.AUD_SAMP_FRQ, '')as AUD_SAMP_FRQ ");
		buf.append("\n 	,  value(CTI.AUDIO_BDWT, '')as AUDIO_BDWT ");
		buf.append("\n 	,  value(meta.title, '')as TITLE");
		buf.append("\n	, MAP.S_DURATION, MAP.E_DURATION ");
		buf.append("\n , meta.rpimg_ct_id as meta_rpimg_ct_id , meta.rpimg_kfrm_seq as meta_rpimg_kfrm_seq");
		buf.append("\n from DAS.CONTENTS_TBL CT, DAS.CONTENTS_MAPP_TBL MAP , ");
		buf.append("\n 	DAS.METADAT_MST_TBL META, DAS.CORNER_TBL CN , das.code_tbl code");
		buf.append("\n 	, (select * from CONTENTS_INST_TBL where ct_id =? and cti_fmt like '3%' order by ct_id desc fetch first 1 rows only)  CTI");
		buf.append("\n where  ");
		buf.append(" \n	CT.CT_ID = CTI.CT_ID and META.MASTER_ID = MAP.MASTER_ID ");
		buf.append(" \n	and CN.CN_ID = MAP.CN_ID ");
		buf.append("\n 	and MAP.CT_ID = CTI.CT_ID and map.ct_id = ? ");
		//buf.append("\n 	and (MAP.del_dd is null or MAP.del_dd = '')   ");
		buf.append("\n 	and map.CT_ID = cti.CT_ID   ");
		buf.append("\n 	 AND CODE.SCL_CD = CT.CT_TYP     ");
		buf.append("\n  AND CODE.CLF_CD='P016'     ");
		buf.append("\n 	and cti.cti_fmt like '30%'  ");
		buf.append("\n   and  map.del_yn <>'Y'   ");
		buf.append("\n  order by code.rmk_2 asc, cn.som asc  ");
		buf.append("\n with ur");

		Connection con = null;

		PreparedStatement psmt = null;
		PreparedStatement psmt_annot = null;

		ResultSet rs = null;
		ResultSet rs_annot = null;


		try
		{
			strResult.append("\n  <corner>");
			long nOldCN_ID = 0;        	

			con = DBService.getInstance().getConnection();
			//logger.debug("######getCornerResultXMLForIfCms######## con : " + con);
			psmt = con.prepareStatement(buf.toString());    
			int index = 0;			
			psmt.setLong(++index, ct_id);
			psmt.setLong(++index, ct_id);
			rs = psmt.executeQuery();	
			String gubun="";
			long gcn_id =0L;
			while(rs.next())
			{		
				long nCN_ID = rs.getLong("CN_ID");
				this.AddToResultXMLBuffer(strResult, "KFRM_PATH".toLowerCase(), "      ", rs.getString("KFRM_PATH"));
				logger.debug("path :    "+rs.getString("KFRM_PATH")+"/"+rs.getLong("CT_ID")+".mer");
				File f = new File("/"+rs.getString("KFRM_PATH")+"/"+rs.getLong("CT_ID")+".mer");

				if(f.exists()){
					logger.debug("file is exist");
				}else{
					logger.debug("file is not exist");
				}
				this.AddToResultXMLBuffer(strResult, "KFRM_SIZE".toLowerCase(), "      ", f.length()+"");
				this.AddToResultXMLBuffer(strResult, "META_RPIMG_KFRM_SEQ".toLowerCase(), "      ",rs.getLong("META_RPIMG_KFRM_SEQ")+ "");
				this.AddToResultXMLBuffer(strResult, "FL_PATH".toLowerCase(), "      ", rs.getString("FL_PATH"));
				this.AddToResultXMLBuffer(strResult, "WRK_FILE_NM".toLowerCase(), "      ", rs.getString("WRK_FILE_NM"));
				this.AddToResultXMLBuffer(strResult, "CT_LENG".toLowerCase(), "      ", rs.getString("CT_LENG"));
				this.AddToResultXMLBuffer(strResult, "MEDIA_ID".toLowerCase(), "      ", rs.getString("MEDIA_ID"));
				this.AddToResultXMLBuffer(strResult, "TITLE".toLowerCase(), "      ", rs.getString("TITLE"));
				strResult.append("\n    <item>");

				this.AddToResultXMLBuffer(strResult, "CN_ID".toLowerCase(), "      ", nCN_ID + "");
				this.AddToResultXMLBuffer(strResult, "CN_NM".toLowerCase(), "      ", rs.getString("CN_NM"));
				this.AddToResultXMLBuffer(strResult, "TITLE".toLowerCase(), "      ", rs.getString("TITLE"));
				//2009.08.05 CT_NM ----->CN_NM  CHANGE 
				this.AddToResultXMLBuffer(strResult, "RPIMG_KFRM_SEQ".toLowerCase(), "      ", rs.getLong("RPIMG_KFRM_SEQ") + "");
				this.AddToResultXMLBuffer(strResult, "SOM".toLowerCase(), "      ", rs.getString("SOM"));
				this.AddToResultXMLBuffer(strResult, "EOM".toLowerCase(), "      ", rs.getString("EOM"));
				this.AddToResultXMLBuffer(strResult, "CN_TYPE_CD".toLowerCase(), "      ", rs.getString("CN_TYPE_CD"));
				this.AddToResultXMLBuffer(strResult, "RPIMG_CT_ID".toLowerCase(), "      ", rs.getLong("RPIMG_CT_ID") + "");

				this.AddToResultXMLBuffer(strResult, "META_RPIMG_KFRM_SEQ".toLowerCase(), "      ", rs.getLong("META_RPIMG_KFRM_SEQ")+ "");
				this.AddToResultXMLBuffer(strResult, "META_RPIMG_CT_ID".toLowerCase(), "      ", rs.getLong("META_RPIMG_CT_ID") + "");

				/**
				 * 문제의 특수문자있는 곳 김동은 20090731 청구번호 BS92-0550 으로 조회시에....
				 */
				this.AddToResultXMLBuffer(strResult, "CN_INFO".toLowerCase(), "      ", rs.getString("CN_INFO"));

				// CT 관련 자료
				this.AddToResultXMLBuffer(strResult, "CT_ID".toLowerCase(), "      ", rs.getLong("CT_ID") + "");

				this.AddToResultXMLBuffer(strResult, "CT_NM".toLowerCase(), "      ", rs.getString("CT_NM"));
				this.AddToResultXMLBuffer(strResult, "REG_DT".toLowerCase(), "      ", rs.getString("REG_DT"));
				this.AddToResultXMLBuffer(strResult, "CT_LENG".toLowerCase(), "      ", rs.getString("CT_LENG"));
				this.AddToResultXMLBuffer(strResult, "DURATION".toLowerCase(), "      ", rs.getLong("DURATION") + "");
				this.AddToResultXMLBuffer(strResult, "CT_SEQ".toLowerCase(), "      ", rs.getLong("CT_SEQ") + "");
				this.AddToResultXMLBuffer(strResult, "KFRM_PX_CD".toLowerCase(), "      ", rs.getString("KFRM_PX_CD"));
				this.AddToResultXMLBuffer(strResult, "VD_QLTY".toLowerCase(), "      ", rs.getString("VD_QLTY"));
				this.AddToResultXMLBuffer(strResult, "ASP_RTO_CD".toLowerCase(), "      ", rs.getString("ASP_RTO_CD"));
				this.AddToResultXMLBuffer(strResult, "CT_CLA".toLowerCase(), "      ", rs.getString("CT_CLA"));
				this.AddToResultXMLBuffer(strResult, "TOT_KFRM_NUMS".toLowerCase(), "      ", rs.getString("TOT_KFRM_NUMS"));

				/**
				 * 문제의 특수문자가 있는 cont
				 */
				this.AddToResultXMLBuffer(strResult, "CONT".toLowerCase(), "      ", rs.getString("CONT"));

				// CTI 관련 자료
				this.AddToResultXMLBuffer(strResult, "CTI_ID".toLowerCase(), "      ", rs.getLong("CTI_ID") + "");
				this.AddToResultXMLBuffer(strResult, "INGEST_EQ_ID".toLowerCase(), "      ", rs.getLong("INGEST_EQ_ID") + "");
				this.AddToResultXMLBuffer(strResult, "FL_PATH".toLowerCase(), "      ", rs.getString("FL_PATH"));
				this.AddToResultXMLBuffer(strResult, "WRK_FILE_NM".toLowerCase(), "      ", rs.getString("WRK_FILE_NM"));
				this.AddToResultXMLBuffer(strResult, "CTI_FMT".toLowerCase(), "      ", rs.getString("CTI_FMT"));
				this.AddToResultXMLBuffer(strResult, "FL_SZ".toLowerCase(), "      ", rs.getLong("FL_SZ") + "");
				this.AddToResultXMLBuffer(strResult, "ARCH_STE_YN".toLowerCase(), "      ", rs.getString("ARCH_STE_YN"));
				this.AddToResultXMLBuffer(strResult, "VD_HRESOL".toLowerCase(), "      ", rs.getString("VD_HRESOL"));
				this.AddToResultXMLBuffer(strResult, "VD_VRESOL".toLowerCase(), "      ", rs.getString("VD_VRESOL") + "");
				this.AddToResultXMLBuffer(strResult, "BIT_RT".toLowerCase(), "      ", rs.getString("BIT_RT") + "");
				this.AddToResultXMLBuffer(strResult, "FRM_PER_SEC".toLowerCase(), "      ", rs.getString("FRM_PER_SEC"));
				this.AddToResultXMLBuffer(strResult, "AUD_SAMP_FRQ".toLowerCase(), "      ", rs.getString("AUD_SAMP_FRQ") + "");
				this.AddToResultXMLBuffer(strResult, "AUDIO_BDWT".toLowerCase(), "      ", rs.getString("AUDIO_BDWT") + "");


				// MAP 관련 자료
				this.AddToResultXMLBuffer(strResult, "S_DURATION".toLowerCase(), "      ", rs.getLong("S_DURATION") + "");
				this.AddToResultXMLBuffer(strResult, "E_DURATION".toLowerCase(), "      ", rs.getLong("E_DURATION") + "");

				// CART 관련 자료
				//this.AddToResultXMLBuffer(strResult, "RIST_CLF_CD", "      ", rs.getString("RIST_CLF_CD") + "");
				//this.AddToResultXMLBuffer(strResult, "REGRID", "      ", rs.getString("REGRID") + "");
				//this.AddToResultXMLBuffer(strResult, "MODRID", "      ", rs.getString("MODRID") + "");
				//this.AddToResultXMLBuffer(strResult, "MOD_DT", "      ", rs.getString("MOD_DT") + "");


				// annot 관련 자료
				strResult.append("\n      <Annot>");

				if (nCN_ID != nOldCN_ID)		// 각 코너마다 한번씩만 쿼리.
				{            	            	
					StringBuffer buf_annot = new StringBuffer();
					buf_annot.append("\n select anot.CN_ID, anot.ANNOT_ID, anot.CT_ID, anot.ANNOT_CLF_CD");
					buf_annot.append("\n ,anot.ANNOT_CLF_CONT, anot.SOM, anot.EOM,anot.GUBUN ");
					buf_annot.append("\n from DAS.corner_tbl cn ");
					buf_annot.append("\n inner join DAS.ANNOT_INFO_TBL anot on cn.cn_id = anot.cn_id ");
					buf_annot.append("\n inner join  DAS.CONTENTS_MAPP_TBL mapp on mapp.CN_ID = anot.CN_ID ");
					buf_annot.append("\n where ");
					buf_annot.append("\n (mapp.del_dd is null or mapp.del_dd = '') and anot.gubun='L' ");
					buf_annot.append("\n  and mapp.cn_id= ? order by anot.cn_id asc with ur");

					psmt_annot = con.prepareStatement(buf_annot.toString());
					int index_annot = 0;			
					psmt_annot.setLong(++index_annot, nCN_ID);


					rs_annot = psmt_annot.executeQuery();	
					while(rs_annot.next())
					{                	
						strResult.append("\n        <Annot_item>");
						gcn_id=rs_annot.getLong("ANNOT_ID");
						this.AddToResultXMLBuffer(strResult, "ANNOT_ID".toLowerCase(), "      ", rs_annot.getLong("ANNOT_ID") + "");
						this.AddToResultXMLBuffer(strResult, "CT_ID".toLowerCase(), "      ", rs_annot.getLong("CT_ID") + "");
						this.AddToResultXMLBuffer(strResult, "ANNOT_CLF_CD".toLowerCase(), "      ", rs_annot.getString("ANNOT_CLF_CD"));
						/**
						 * 특수문자가 있는 annot_clf_conf
						 */
						this.AddToResultXMLBuffer(strResult, "ANNOT_CLF_CONT".toLowerCase(), "      ", rs_annot.getString("ANNOT_CLF_CONT"));
						this.AddToResultXMLBuffer(strResult, "SOM".toLowerCase(), "      ", rs_annot.getString("SOM"));
						this.AddToResultXMLBuffer(strResult, "EOM".toLowerCase(), "      ", rs_annot.getString("EOM"));
						this.AddToResultXMLBuffer(strResult, "GUBUN".toLowerCase(), "      ", rs_annot.getString("GUBUN"));
						String yn = isEntireRistcdForCT_ID(ct_id);
						if(yn.equals("")){
							this.AddToResultXMLBuffer(strResult, "ENTIRE_YN".toLowerCase(), "      ","N" );	
						}else if(!yn.equals("")){
							if(yn.equals(rs_annot.getString("ANNOT_CLF_CD"))){
								this.AddToResultXMLBuffer(strResult, "ENTIRE_YN".toLowerCase(), "      ","Y" );
							}else {
								this.AddToResultXMLBuffer(strResult, "ENTIRE_YN".toLowerCase(), "      ","N" );		
							}
						}

						strResult.append("\n        </Annot_item>");      


					}	// while annot

					/*  if(gcn_id==0&&nCN_ID != gcn_id ){
	            		this.AddToResultXMLBuffer(strResult, "ANNOT_ID", "      ","0" + "");
	                	this.AddToResultXMLBuffer(strResult, "CT_ID", "      ", rs.getLong("CT_ID") + "");
	                	this.AddToResultXMLBuffer(strResult, "ANNOT_CLF_CD", "      ", "007");
					 *//**
					 * 특수문자가 있는 annot_clf_conf
					 *//*
	                	this.AddToResultXMLBuffer(strResult, "ANNOT_CLF_CONT", "      ", "");
	                	this.AddToResultXMLBuffer(strResult, "SOM", "      ", rs.getString("SOM"));
	                	this.AddToResultXMLBuffer(strResult, "EOM", "      ", rs.getString("EOM"));
	                	this.AddToResultXMLBuffer(strResult, "GUBUN", "      ", "L");
	                	strResult.append("\n        </Annot_item>");    
	            	}*/
				}                

				strResult.append("\n      </Annot>");
				strResult.append("\n    </item>");            	

				nOldCN_ID = nCN_ID;
			}	// while rs.next

			strResult.append("  </corner>");

		}

		catch (Exception ex)
		{
			logger.error(buf.toString());

			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "getCornerResultXML 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, null);
			release(rs_annot, psmt_annot, con);
		}        
		return strResult.toString();
	}



	/**
	 * ctid 기준 영상 길이의 합을 구함다
	 * @param masterId 마스터id 
	 * 
	 * @return String
	 * @throws RemoteException
	 */
	public String isEntireRistcdForCT_ID (long ct_id) throws DASException
	{
		StringBuffer buf = new StringBuffer();
		buf.append("\n select b.ANNOT_CLF_CD, sum(duration) as duration ");
		buf.append("\n from ");
		buf.append("\n  ( select annot_clf_cd ,duration  ");
		buf.append("\n from annot_info_Tbl where ct_id = ? ");
		buf.append("\n group by annot_clf_cd ,duration ) a, ");
		buf.append("\n ( select distinct annot_clf_cd ");
		buf.append("\n  from annot_info_Tbl ");
		buf.append("\n where ct_id =  ? ");
		buf.append("\n ) b ");
		buf.append("\n where a.annot_clf_cd = b.ANNOT_CLF_CD ");
		buf.append("\n 	group by b.annot_clf_cd ");

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		String annot_clf_cd="";
		String new_annot_clf_cd="";
		String old_annot_clf_cd="";
		long  new_duratioin =0L;
		long  old_duratioin =0L;
		CommonUtl commonUtl = new CommonUtl();
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######isEntireRistcdForCT_ID######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setLong(++index, ct_id);
			stmt.setLong(++index, ct_id);

			rs = stmt.executeQuery();
			while(rs.next())
			{
				new_annot_clf_cd=rs.getString("ANNOT_CLF_CD");
				new_duratioin=rs.getLong("duration");
				long totalbrd_leng = getbrd_lengForCTid(ct_id);
				if((totalbrd_leng-30<=new_duratioin && new_duratioin <=totalbrd_leng+5)|| totalbrd_leng==new_duratioin ){
					annot_clf_cd=new_annot_clf_cd;
				}

			}		
			return annot_clf_cd;
		}
		catch (Exception ex)
		{
			logger.error(buf.toString());
			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "MultiLockUnlock 에러 : " + buf.toString(), ex);
			throw exception;
		}

		finally
		{
			release(rs, stmt, con);
		}

	}


	/**
	 * ctid 기준 영상 길이의 합을 구함다
	 * @param ctid 영상id 
	 * 
	 * @return String
	 * @throws RemoteException
	 */
	public long getbrd_lengForCTid (long ct_id) throws DASException
	{
		StringBuffer buf = new StringBuffer();
		buf.append("\n select ct_leng from contents_tbl where ct_id = ?");

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		long sumTime = 0L;
		CommonUtl commonUtl = new CommonUtl();
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######getbrd_lengForCTid######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setLong(++index, ct_id);

			rs = stmt.executeQuery();
			while(rs.next())
			{
				sumTime= commonUtl.changeTime(rs.getString("ct_leng"));
			}

			return sumTime;
		}

		catch (Exception ex)
		{
			logger.error(buf.toString());
			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "MultiLockUnlock 에러 : " + buf.toString(), ex);
			throw exception;
		}

		finally
		{
			release(rs, stmt, con);
		}

	}



	/**
	 * 해당 ct_id 의 원본영상 경로를 조회한다
	 * @return
	 * @throws DASException
	 */
	public String selectFlPathorCt_id(long ct_id) throws DASException{

		StringBuffer buf = new StringBuffer();
		Connection con = null;		
		PreparedStatement psmt = null;		
		ResultSet rs = null;

		buf.append(" select fl_path from contents_inst_Tbl ");
		buf.append(" where ct_id = ?     and cti_fmt like '1%' ");

		try {
			con = DBService.getInstance().getConnection();
			//logger.debug("######selectFlPathorCt_id######## con : " + con);
			//con.setAutoCommit(false);
			//        psmt = con.prepareStatement(buf.toString());    //  로그 inform
			psmt = con.prepareStatement(buf.toString());
			int index = 0;			
			psmt.setLong(++index, ct_id);
			rs = psmt.executeQuery();	
			//TcBeanDO item = new TcBeanDO();
			String fl_path = "";
			if(rs.next())
			{


				fl_path = rs.getString("fl_path");

			}

			//con.setAutoCommit(true);
			return fl_path;
		}
		catch (Exception ex)
		{
			logger.error(buf.toString());

			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "selectTcJon 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, con);
		}
	}



	/**
	 * 재시도한다(아카이브)
	 * @param  autoDO                                                                                                                                                                                              
	 * @return                                                                                                                                                                                              
	 * @throws Exception 
	 */
	public String tryAgainForArchive(MonitoringDO monitoringDO) throws Exception
	{
		StringBuffer buf = new StringBuffer();				


		Connection con = null;		
		PreparedStatement psmt = null;		
		ResultSet rs = null;

		buf.append(" select distinct inst.cti_id, inst.FL_PATH,inst.wrk_FILE_NM,value(mst.PDS_CMS_PGM_ID,'') as PDS_CMS_PGM_ID ,con.media_id from                 ");
		buf.append(" contents_inst_tbl inst   ");
		buf.append(" inner join contents_tbl con on con.ct_id = inst.ct_id      ");
		buf.append(" inner join contents_mapp_tbl map on map.CT_ID = inst.CT_ID       ");
		buf.append(" inner join metadat_mst_tbl mst on mst.MASTER_ID = map.MASTER_ID       ");
		buf.append(" where inst.ct_id =    ?   and inst.cti_fmt like '1%'   ");
		buf.append("   with ur     ");
		try {
			con = DBService.getInstance().getConnection();
			//logger.debug("######tryAgainForArchive######## con : " + con);
			//con.setAutoCommit(false);
			psmt = con.prepareStatement(buf.toString());    
			int index = 0;			
			psmt.setLong(++index, monitoringDO.getCt_id());
			rs = psmt.executeQuery();	
			PdsArchiveDO item = new PdsArchiveDO();
			if(rs.next())
			{
				item.setCti_id(rs.getLong("cti_id"));
				String path = rs.getString("FL_PATH");
				if(path.contains("mp2")||path.contains("arcreq")){
					item.setFl_path(rs.getString("FL_PATH"));
				}else{
					path= "/mp2/"+path.replace("\\", "/");
					item.setFl_path(path);
				}
				item.setFl_nm(rs.getString("wrk_FILE_NM"));
				item.setMedia_id(rs.getString("media_id"));
				item.setPds_cms_id(rs.getString("PDS_CMS_PGM_ID"));
			}

			//con.setAutoCommit(true);
		}

		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(rs, psmt, con);
		}
		return "";

	}


	/**
	 * 재시도한다(다운로드)
	 * @param  autoDO                                                                                                                                                                                              
	 * @return                                                                                                                                                                                              
	 * @throws Exception 
	 */
	public String tryAgainForDownload(MonitoringDO monitoringDO) throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.contents_loc_tbl set ");
		buf.append("\n 	priority=? ");
		buf.append("\n where num in (?)");

		PreparedStatement stmt = null; 
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######tryAgainForDownload######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setInt(++index, monitoringDO.getPriority());		
			stmt.setLong(++index, monitoringDO.getKey());

			int updateCount = stmt.executeUpdate();

			return "";
		}
		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}


	/**
	 * 재시도한다(전송)
	 * @param  autoDO                                                                                                                                                                                              
	 * @return                                                                                                                                                                                              
	 * @throws Exception 
	 */
	public int tryAgainForTransfer(MonitoringDO monitoringDO) throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.contents_loc_tbl set ");
		buf.append("\n 	priority=? ");
		buf.append("\n where num in (?)");

		PreparedStatement stmt = null; 
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######tryAgainForTransfer######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setInt(++index, monitoringDO.getPriority());		
			stmt.setLong(++index, monitoringDO.getKey());

			int updateCount = stmt.executeUpdate();

			return updateCount;
		}

		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}


	/**
	 * 재시도한다(수동복본)
	 * @param  autoDO                                                                                                                                                                                              
	 * @return                                                                                                                                                                                              
	 * @throws Exception 
	 */
	public String tryAgainForCopy(MonitoringDO monitoringDO) throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.contents_loc_tbl set ");
		buf.append("\n 	priority=? ");
		buf.append("\n where num in (?)");

		PreparedStatement stmt = null; 
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######tryAgainForCopy######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setInt(++index, monitoringDO.getPriority());		
			stmt.setLong(++index, monitoringDO.getKey());

			int updateCount = stmt.executeUpdate();

			return "";
		}
		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}


	/**
	 * 재시도한다(수동소산)
	 * @param  autoDO                                                                                                                                                                                              
	 * @return                                                                                                                                                                                              
	 * @throws Exception 
	 */
	public String tryAgainForBackup(MonitoringDO monitoringDO) throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.contents_loc_tbl set ");
		buf.append("\n 	priority=? ");
		buf.append("\n where num in (?)");

		PreparedStatement stmt = null; 
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######tryAgainForBackup######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setInt(++index, monitoringDO.getPriority());		
			stmt.setLong(++index, monitoringDO.getKey());

			int updateCount = stmt.executeUpdate();

			return "";
		}

		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}


	/**
	 * 재시도한다(수동복원)
	 * @param  autoDO                                                                                                                                                                                              
	 * @return                                                                                                                                                                                              
	 * @throws Exception 
	 */
	public String tryAgainForReArchive(MonitoringDO monitoringDO) throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.contents_loc_tbl set ");
		buf.append("\n priority=? ");
		buf.append("\n where num in (?)");

		PreparedStatement stmt = null; 
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######tryAgainForReArchive######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setInt(++index, monitoringDO.getPriority());		
			stmt.setLong(++index, monitoringDO.getKey());

			int updateCount = stmt.executeUpdate();

			return "";
		}

		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}




	/**
	 * 재시도한다(재생성)
	 * @param  autoDO                                                                                                                                                                                              
	 * @return                                                                                                                                                                                              
	 * @throws Exception 
	 */
	public String tryAgainForReMake(MonitoringDO monitoringDO) throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.tc_job_tbl set ");
		buf.append("\n 	job_alocate='N' ");
		buf.append("\n where SEQ in (?)");

		PreparedStatement stmt = null; 
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######tryAgainForReMake######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;

			stmt.setLong(++index, monitoringDO.getKey());

			int updateCount = stmt.executeUpdate();

			return "success";
		}
		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}





	/**
	 * 다운로드 현황을 조회한다(모니터링)
	 * @param  XML                                                                                                                                                                                              
	 * @return                                                                                                                                                                                              
	 * @throws Exception 
	 */
	public List getDowninfo(MonitoringDO monitoringDO) throws Exception
	{
		String query = ExternalStatement.selectDowninfo(monitoringDO);

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######getDowninfo######## con : " + con);

			stmt = con.prepareStatement(query);

			int index = 0;

			rs = stmt.executeQuery();

			List resultList  = new ArrayList();
			int totalcount = DownCount(monitoringDO);
			while(rs.next())
			{
				MonitoringDO item = new MonitoringDO();
				item.setKey(         	rs.getLong("NUM"));
				//item.setDown_title(rs.getString("DOWN_SUBJ"));
				item.setDown_title( CommonUtl.transXMLText(rs.getString("DOWN_SUBJ")));
				item.setCart_no(      		rs.getLong("CART_NO"));
				item.setCart_seq(         	rs.getLong("CART_SEQ"));
				item.setJob_nm(       	rs.getString("DOWN_GUBUN"));
				item.setDown_progress(      		rs.getString("DOWN_PROGRESS"));
				item.setDown_state(         	rs.getString("JOB_STATUS"));
				item.setDown_priority(       	rs.getString("DOWN_PRIORITY"));
				item.setTm_progress(      		rs.getString("TM_PROGRESS"));
				item.setTm_state(      		rs.getString("TM_STATUS"));
				item.setTm_priority(      		rs.getString("TM_PRIORITY"));
				item.setReq_nm( CommonUtl.transXMLText(rs.getString("user_nm")));     		
				item.setConm(      		rs.getString("CONM"));
				item.setReq_dt(      		rs.getString("REG_DT"));
				item.setStoragenm(      		rs.getString("STORAGENAME"));
				item.setTitle(      		rs.getString("TITLE"));
				item.setBrd_dd(      		rs.getString("BRD_DD"));
				item.setSom(      		rs.getString("SOM"));
				item.setEom(      		rs.getString("EOM"));
				item.setRist_clf_nm(      		rs.getString("RIST_CLF_NM"));
				item.setApprovenm(      		rs.getString("APPROVE_NM"));
				item.setMedia_id(      		rs.getString("MEDIA_ID"));
				item.setCti_id(      		rs.getLong("CTI_ID"));
				item.setTm_ip(      		rs.getString("TM_IP"));
				item.setCt_id(      		rs.getLong("ct_id"));
				item.setChennel_nm(      		rs.getString("chennel_nm"));
				item.setTotalcount(totalcount);

				resultList.add(item);
			}

			return resultList; 
		} 
		catch (Exception e) 
		{
			logger.error(query);


			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}



	/**
	 * 다운로드 현황을 조회한다(ifcms)
	 * @param  XML                                                                                                                                                                                              
	 * @return                                                                                                                                                                                              
	 * @throws Exception 
	 */
	public List getDowninfoForIfCms(MonitoringDO monitoringDO) throws Exception
	{
		String query = ExternalStatement.selectDowninfoForIfCms(monitoringDO);

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######getDowninfoForIfCms######## con : " + con);
			stmt = con.prepareStatement(query);

			int index = 0;

			rs = stmt.executeQuery();

			List resultList  = new ArrayList();

			while(rs.next())
			{
				MonitoringDO item = new MonitoringDO();

				//item.setTitle(     	rs.getString("DOWN_SUBJ"));
				item.setTitle( CommonUtl.transXMLText(rs.getString("DOWN_SUBJ"))   );
				item.setCart_no(      		rs.getLong("CART_NO"));
				item.setDown_progress(      		rs.getString("DTL_PROGRESS"));
				item.setDown_state(         	rs.getString("DTL_STATUS"));
				item.setTm_progress(      		rs.getString("TM_PROGRESS"));
				item.setTm_state(      		rs.getString("TM_STATUS"));
				item.setReq_dt(      		rs.getString("REG_DT"));

				resultList.add(item);
			}

			return resultList; 
		} 
		catch (Exception e) 
		{
			logger.error(query);


			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}




	/**
	 * 수동 작업 현황을 조회한다(모니터링)
	 * @param  XML                                                                                                                                                                                              
	 * @return                                                                                                                                                                                              
	 * @throws Exception 
	 */
	public List getManualJobinfo(MonitoringDO monitoringDO) throws Exception
	{
		String query = ExternalStatement.selectManualJobinfo(monitoringDO);

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######getManualJobinfo######## con : " + con);
			stmt = con.prepareStatement(query);

			int index = 0;

			rs = stmt.executeQuery();

			List resultList  = new ArrayList();
			int totalcount = ManualJobCount(monitoringDO);
			while(rs.next())
			{
				MonitoringDO item = new MonitoringDO();
				//item.setTitle(       	rs.getString("title"));
				item.setTitle(   CommonUtl.transXmlText(rs.getString("title")));
				item.setArchive_state(       	rs.getString("LOC_STATE"));
				item.setArchive_progress(      		rs.getString("PROGRESS"));
				item.setDown_state(      		rs.getString("DOWN_STATE"));
				item.setDown_progress(         	rs.getString("down_progress"));
				item.setCopy_progress(      		rs.getString("COPY_PROGRESS"));
				item.setCopy_state(         	rs.getString("COPY_STATUS"));
				item.setBackup_progress(       	rs.getString("BACKUP_PROGRESS"));
				item.setBackup_state(      		rs.getString("BACKUP_STATUS"));
				item.setChange_state(       	rs.getString("CHANGE_STATE"));
				item.setChange_progress(      		rs.getString("change_progress"));
				item.setKey(         	rs.getLong("num"));
				item.setCti_id(         	rs.getLong("CTI_ID"));
				item.setReq_dt(      		rs.getString("REQ_DT"));
				item.setReq_nm(      		rs.getString("REQ_NM"));
				item.setTm_ip(      		rs.getString("TM_IP"));
				item.setConm(      		rs.getString("COCD"));
				item.setTm_nm(      		rs.getString("TM_NM"));
				item.setCt_id(      		rs.getLong("ct_id"));
				item.setChennel_nm(      		rs.getString("chennel_nm"));
				item.setTotalcount(totalcount);

				resultList.add(item);
			}

			return resultList; 
		} 
		catch (Exception e) 
		{
			logger.error(query);


			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}




	/**
	 * 수동 작업 현황 테이블 총 갯수를 조회한다.
	 * @param masterId
	 * @return list 대본 정보 조회
	 * @throws Exception 
	 */
	public int ManualJobCount(MonitoringDO monitoringDO) throws Exception
	{

		String query = ExternalStatement.countManualMonitoring(monitoringDO);

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######ManualJobCount######## con : " + con);
			stmt = con.prepareStatement(query);

			rs = stmt.executeQuery();
			List resultList  = new ArrayList();
			int cnt = 0;

			while(rs.next())
			{
				cnt= rs.getInt("cnt");
			}		

			return cnt;

		} 

		catch (Exception e) 
		{
			logger.error(query);

			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}





	/**
	 * 복본 신청자 표기
	 * @param master_id 컨텐츠id
	 * @return updatecount
	 * @throws Exception 
	 */
	public int updateCopyReqId(long master_id,String reg_id) throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.contents_loc_tbl set ");
		buf.append("\n 	copy_id=? ");
		//buf.append("\n 	,regrid=? ");
		buf.append("\n where cti_id in (select distinct inst.cti_id from contents_mapp_tbl map inner join contents_tbl con on con.ct_id =map.ct_id and con.ct_typ='003' ");
		buf.append("\n                 inner join contents_inst_tbl inst on inst.ct_id = map.ct_id and inst.cti_fmt like '1%'");
		buf.append("\n                 inner join contents_loc_tbl loc on loc.cti_id = inst.cti_id where map.master_id =? )");

		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateCopyReqId######## con : " + con);
			stmt = con.prepareStatement(buf.toString());
			String dateTime = CalendarUtil.getDateTime("yyyyMMddHHmmss");
			int index = 0;
			//	stmt.setString(++index, "복본 재생성 중입니다");

			stmt.setString(++index, reg_id);
			stmt.setLong(++index, master_id);
			int updateCount = stmt.executeUpdate();

			return updateCount;
		}
		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}


	/**
	 * 복원 신청자 표기
	 * @param master_id 컨텐츠id
	 * @return updatecount
	 * @throws Exception 
	 */
	public int updateReCorverReqId(long master_id,String reg_id) throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.contents_loc_tbl set ");
		buf.append("\n 	recorver_id=? ");
		//buf.append("\n 	,regrid=? ");
		buf.append("\n where cti_id in (select distinct map.ct_id from contents_mapp_tbl map inner join contents_tbl con on con.ct_id =map.ct_id and con.ct_typ='003' ");
		buf.append("\n inner join contents_inst_tbl inst on inst.ct_id = map.ct_id and inst.cti_fmt like '1%'");
		buf.append("\n inner join contents_loc_tbl loc on loc.cti_id = inst.cti_id where map.master_id =? )");

		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateReCorverReqId######## con : " + con);
			stmt = con.prepareStatement(buf.toString());
			String dateTime = CalendarUtil.getDateTime("yyyyMMddHHmmss");
			int index = 0;
			//	stmt.setString(++index, "복본 재생성 중입니다");

			stmt.setString(++index, reg_id);
			stmt.setLong(++index, master_id);
			int updateCount = stmt.executeUpdate();

			return updateCount;
		}

		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}



	/**
	 * 소산  신청자 표기
	 * @param master_id 컨텐츠id
	 * @return updatecount
	 * @throws Exception 
	 */
	public int updateBackUpReqId(long master_id,String reg_id) throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.contents_loc_tbl set ");
		buf.append("\n 	backupd_id=? ");
		//buf.append("\n 	,regrid=? ");
		buf.append("\n where ct_id in (select distinct map.ct_id from contents_mapp_tbl map inner join contents_tbl con on con.ct_id =map.ct_id and con.ct_typ='003' ");
		buf.append("\n                 inner join contents_inst_tbl inst on inst.ct_id = map.ct_id and inst.cti_fmt like '1%'");
		buf.append("\n                 inner join contents_loc_tbl loc on loc.cti_id = inst.cti_id where map.master_id =? ");

		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateBackUpReqId######## con : " + con);
			stmt = con.prepareStatement(buf.toString());
			String dateTime = CalendarUtil.getDateTime("yyyyMMddHHmmss");
			int index = 0;
			//	stmt.setString(++index, "복본 재생성 중입니다");

			stmt.setString(++index, reg_id);
			stmt.setLong(++index, master_id);
			int updateCount = stmt.executeUpdate();

			return updateCount;
		}

		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}




	/**
	 * contents_inst_tbl 잡상태 변화(wmv영상)
	 * @param tcBeanDO
	 * @return
	 * @throws SQLException 
	 * @throws RemoteException
	 */
	public int updateContentsInstCatalog(Connection con,TcBeanDO tcBeanDO) throws DASException, SQLException
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.contents_inst_tbl set ");
		buf.append("\n 	catalog_yn = ? ");
		buf.append("\n where ct_id = ? ");
		//buf.append("\n and cti_fmt like '%20%'  ");
		PreparedStatement stmt = null;
		//Connection con = null;		

		try 
		{
			//con = DBService.getInstance().getConnection();
			stmt = con.prepareStatement(buf.toString());
			//String dateTime = CalendarUtil.getDateTime("yyyyMMddHHmmss");
			int index = 0;

			stmt.setString(++index, "Y" );
			stmt.setLong(++index, tcBeanDO.getCt_id());	

			int updateCount = stmt.executeUpdate();

			return updateCount;
		}

		catch (SQLException e) 
		{
			logger.error(buf.toString());
			if(con != null)
			{
				try {
					con.rollback();
				} catch (SQLException e1) {
					// TODO 자동 생성된 catch 블록
					logger.error(e1);
				}
			}

			throw e;
		}
		finally
		{
			release(null, stmt, null);
		}

	}




	/**
	 * 다운 현황 테이블 총 갯수를 조회한다.
	 * @param masterId
	 * @return list 대본 정보 조회
	 * @throws Exception 
	 */
	public int DownCount(MonitoringDO monitoringDO) throws Exception
	{

		String query = ExternalStatement.downcount(monitoringDO);

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######DownCount######## con : " + con);
			stmt = con.prepareStatement(query);

			rs = stmt.executeQuery();
			List resultList  = new ArrayList();
			int cnt = 0;

			while(rs.next())
			{
				cnt= rs.getInt("cnt");
			}		

			return cnt;

		} 
		catch (Exception e) 
		{
			logger.error(query);

			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}






	/**
	 * contents_inst_tbl 잡상태 변화(H264영상)
	 * @param tcBeanDO
	 * @return
	 * @throws SQLException 
	 * @throws RemoteException
	 */
	public int updateContentsInstForH264(Connection con,TcBeanDO tcBeanDO) throws DASException, SQLException
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.contents_inst_tbl set ");
		buf.append("\n 	fl_sz = ? ");
		buf.append("\n 	,bit_rt = ? ");
		buf.append("\n 	,vd_hresol = ? ");
		buf.append("\n 	,vd_vresol = ? ");
		buf.append("\n 	,frm_per_sec = ? ");
		buf.append("\n 	,drp_frm_yn = ? ");
		//buf.append("\n 	,audio_bdwt = ? ");
		buf.append("\n 	,aud_samp_frq = ? ");
		buf.append("\n 	,wrk_file_nm = ? ");
		buf.append("\n 	,fl_path = ? ");
		buf.append("\n where ct_id = ? ");
		buf.append("\n and cti_fmt like '3%'  ");
		PreparedStatement stmt = null;
		//Connection con = null;		

		try 
		{
			//con = DBService.getInstance().getConnection();
			stmt = con.prepareStatement(buf.toString());

			String dateTime = CalendarUtil.getDateTime("yyyyMMddHHmmss");
			int index = 0;

			stmt.setLong(++index,Long.parseLong(tcBeanDO.getH264_FL_SZ()));
			stmt.setString(++index, tcBeanDO.getH264_BIT_RT());
			String[] sol = tcBeanDO.getH264_resol().split("X");
			for(int i =0; i<sol.length;i++){
				stmt.setString(++index, sol[i] );
			}
			stmt.setString(++index, tcBeanDO.getH264_FRM_PER_SEC());			
			stmt.setString(++index, "Y" );
			//stmt.setString(++index, tcBeanDO.getH264_AUDIO_BDWT());
			stmt.setString(++index, tcBeanDO.getH264_AUDIO_SAMP_FRQ());
			stmt.setString(++index, tcBeanDO.getOut_put_lr_nm().replaceAll(".wmv", ".mp4"));
			String fl_path =tcBeanDO.getOut_put_lr_path();
			fl_path = fl_path.replaceAll(dasHandler.getProperty("NET_MP4"), dasHandler.getProperty("WINNET_MP4"));
			fl_path = fl_path.replaceAll(dasHandler.getProperty("MP4"), dasHandler.getProperty("WINMP4"));
			stmt.setString(++index, fl_path);//FL_PATH
			stmt.setLong(++index, tcBeanDO.getCt_id());

			int updateCount = stmt.executeUpdate();
			//updateContents2(tcBeanDO);
			return updateCount;
		}

		catch (SQLException e) 
		{
			logger.error(buf.toString());
			try {
				con.rollback();
			} catch (SQLException e1) {
				// TODO Auto-generated catch block
				logger.error(e1);
			}

			throw e;
		}
		finally
		{
			release(null, stmt, null);
		}

	}


	/**
	 * h264 정보 존재여부를 판단한다.
	 * 
	 * @param perRegNo
	 *            주민번호
	 * 
	 * @return true, false
	 * @throws Exception 
	 */

	public boolean isThereH264(long ct_id) throws Exception {
		// PageDO pageDO = new PageDO();

		StringBuffer buf = new StringBuffer();

		buf.append("\n select count(1) FROM  contents_inst_Tbl where ct_id = "
				+ ct_id + " and cti_fmt like '3%' \n");
		Connection con = null;
		try {
			con = DBService.getInstance().getConnection();
			//logger.debug("######isThereH264######## con : " + con);
			// 총 조회 갯수를 구한다.
			int totalCount = getTotalCount(con, buf.toString());

			if (totalCount > 0) {
				return true;
			} else {
				return false;
			}
		}  catch (Exception e) {
			logger.error(buf.toString());

			throw e;
		} finally {
			try {
				if (con != null)
					con.close();
			} catch (SQLException e) {
			}
		}
	}



	/**
	 * 해당 ct_id 의 저해상도 cti_id 를 조회한다
	 * @return
	 * @throws DASException
	 */
	public Long selectCtiidForCtid(long ct_id) throws DASException{

		StringBuffer buf = new StringBuffer();
		Connection con = null;		
		PreparedStatement psmt = null;		
		ResultSet rs = null;

		buf.append(" select cti_id from contents_inst_Tbl");
		buf.append(" 	where ct_id = ?  and cti_fmt like '3%'");

		try {
			con = DBService.getInstance().getConnection();
			//logger.debug("######selectCtiidForCtid######## con : " + con);
			//con.setAutoCommit(false);
			//        psmt = con.prepareStatement(buf.toString());    //  로그 inform
			psmt = con.prepareStatement(buf.toString());
			int index = 0;			
			psmt.setLong(++index, ct_id);
			rs = psmt.executeQuery();	
			//TcBeanDO item = new TcBeanDO();
			long cti_id = 0;
			if(rs.next())
			{

				cti_id = rs.getLong("cti_id");

			}

			//con.setAutoCommit(true);
			return cti_id;
		}
		catch (Exception ex)
		{
			logger.error(buf.toString());

			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "selectTcJon 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, con);
		}
	}




	/**
	 * 우선순위를 변경한다(수동작업)
	 * @param  autoDO                                                                                                                                                                                              
	 * @return                                                                                                                                                                                              
	 * @throws Exception 
	 */
	public int changePriorityForManualJob(MonitoringDO monitoringDO) throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.ariel_info_Tbl set ");
		buf.append("\n 	priority=? ");
		buf.append("\n where task_id in (?)");

		PreparedStatement stmt = null; 
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######changePriorityForManualJob######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setInt(++index, monitoringDO.getPriority());		
			stmt.setLong(++index, monitoringDO.getKey());

			int updateCount = stmt.executeUpdate();

			return updateCount;
		}
		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}


	}

	/**
	 * 우선순위를 변경한다(다운로드)
	 * @param  autoDO                                                                                                                                                                                              
	 * @return                                                                                                                                                                                              
	 * @throws Exception 
	 */
	public int changePriorityForDown(MonitoringDO monitoringDO) throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.contents_down_tbl set ");
		buf.append("\n 	priority=? ");
		buf.append("\n where num in (?)");

		PreparedStatement stmt = null; 
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######changePriorityForDown######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setInt(++index, monitoringDO.getPriority());		
			stmt.setLong(++index, monitoringDO.getKey());

			int updateCount = stmt.executeUpdate();

			return updateCount;
		}
		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}


	}




	/**
	 * 해당  아이디로 콘텐츠 아이디를 가지고 온다.(다운로드 기준)
	 * @param pdsArchiveDO
	 * @return
	 * @throws DASException
	 */
	public MonitoringDO getOBJNAMEForDown(long key) throws DASException{

		StringBuffer buf = new StringBuffer();
		Connection con = null;		
		PreparedStatement psmt = null;		
		ResultSet rs = null;

		buf.append(" SELECT OBJ_NAME,cti_id FROM DAS.CONTENTS_down_TBL                  ");
		buf.append("\n where num = ?  ");
		buf.append("        ");
		try {
			con = DBService.getInstance().getConnection();
			//logger.debug("######changePriorityForDown######## con : " + con);
			//con.setAutoCommit(false);
			psmt = con.prepareStatement(buf.toString());    
			int index = 0;			
			psmt.setLong(++index, key);
			rs = psmt.executeQuery();	
			MonitoringDO item = new MonitoringDO();
			if(rs.next())
			{

				item.setCti_id(rs.getLong("cti_id"));
				item.setObj_name(rs.getString("OBJ_NAME"));
				//item.setObj_name(CommonUtl.transXmlText(rs.getString("OBJ_NAME")));

			}

			logger.debug("cti_id    " + item.getCti_id());

			//con.setAutoCommit(true);
			return item;   
		}
		catch (Exception ex)
		{
			logger.error(buf.toString());

			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "selectTcJon 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, con);
		}

	}




	/**
	 * 재시도한다(전송)
	 * @param  autoDO                                                                                                                                                                                              
	 * @return                                                                                                                                                                                              
	 * @throws Exception 
	 */
	public String tryAgainForTM(MonitoringDO monitoringDO) throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.contents_loc_tbl set ");
		buf.append("\n 	priority=? ");
		buf.append("\n where num in (?)");

		PreparedStatement stmt = null; 
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######tryAgainForTM######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setInt(++index, monitoringDO.getPriority());		
			stmt.setLong(++index, monitoringDO.getKey());

			int updateCount = stmt.executeUpdate();

			return "";
		}

		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}





	/**
	 * 해당 Seq로 영상의 인스턴스 ID를 얻는다
	 * @return
	 * @throws DASException
	 */
	public long selectCT_IDForArchive(long key) throws DASException{

		StringBuffer buf = new StringBuffer();
		Connection con = null;		
		PreparedStatement psmt = null;		
		ResultSet rs = null;

		buf.append(" select                   ");
		buf.append("     inst.ct_id            ");
		buf.append("  from contents_loc_tbl loc  ");
		buf.append("   inner join contents_insT_Tbl inst on inst.cti_id= loc.cti_id");

		buf.append(" 	WHERE loc.num =  ?                  ");

		try {
			con = DBService.getInstance().getConnection();
			//logger.debug("######selectCT_IDForArchive######## con : " + con);
			//con.setAutoCommit(false);
			//        psmt = con.prepareStatement(buf.toString());    //  로그 inform
			psmt = con.prepareStatement(buf.toString());
			int index = 0;			
			psmt.setLong(++index, key);
			rs = psmt.executeQuery();	
			long ct_id=0;
			if(rs.next())
			{
				ct_id =     	rs.getLong("ct_id");

			}

			//con.setAutoCommit(true);
			return ct_id;
		}
		catch (Exception ex)
		{
			logger.error(buf.toString());

			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "selectTcJon 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, con);
		}

	}



	/**
	 * 해당 Seq로 영상의 마스터 ID를 얻는다
	 * @return
	 * @throws DASException
	 */
	public long selectMaster_id(long key) throws DASException{

		StringBuffer buf = new StringBuffer();
		Connection con = null;		
		PreparedStatement psmt = null;		
		ResultSet rs = null;

		buf.append(" select    distinct               ");
		buf.append("     map.master_id            ");
		buf.append("  from contents_loc_tbl loc  ");
		buf.append("   inner join contents_insT_Tbl inst on inst.cti_id= loc.cti_id");
		buf.append("   inner join contents_mapp_Tbl map on map.ct_id = inst.ct_id ");

		buf.append(" 	WHERE loc.num =  ?                  ");

		try {
			con = DBService.getInstance().getConnection();
			//logger.debug("######selectMaster_id######## con : " + con);
			//con.setAutoCommit(false);
			//        psmt = con.prepareStatement(buf.toString());    //  로그 inform
			psmt = con.prepareStatement(buf.toString());
			int index = 0;			
			psmt.setLong(++index, key);
			rs = psmt.executeQuery();	
			long master_id=0;
			if(rs.next())
			{
				master_id =     	rs.getLong("master_id");

			}

			//con.setAutoCommit(true);
			return master_id;
		}
		catch (Exception ex)
		{
			logger.error(buf.toString());

			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "selectTcJon 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, con);
		}

	}


	/**
	 * 해당 Seq로 영상의 마스터 ID를 얻는다
	 * @return
	 * @throws DASException
	 */
	public CartContDO selectCartInfo(long key) throws DASException{

		StringBuffer buf = new StringBuffer();
		Connection con = null;		
		PreparedStatement psmt = null;		
		ResultSet rs = null;

		buf.append(" select    cart_no,cart_seq               ");
		buf.append("  from contents_down_tbl  ");
		buf.append(" 	WHERE num =  ?                  ");

		try {
			con = DBService.getInstance().getConnection();
			//logger.debug("######selectCartInfo######## con : " + con);
			//con.setAutoCommit(false);
			//        psmt = con.prepareStatement(buf.toString());    //  로그 inform
			psmt = con.prepareStatement(buf.toString());
			int index = 0;			
			psmt.setLong(++index, key);
			rs = psmt.executeQuery();
			CartContDO item = new CartContDO();
			if(rs.next())
			{
				item.setCartNo(rs.getLong("cart_no"));
				item.setCartSeq(rs.getInt("cart_seq"));
			}

			//con.setAutoCommit(true);
			return item;
		}
		catch (Exception ex)
		{
			logger.error(buf.toString());

			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "selectTcJon 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, con);
		}

	}




	/**
	 * 해당 ct_id 의 수동등록여부 를 조회한다
	 * @return
	 * @throws DASException
	 */
	public String selectManualYnForCt_id(long ct_id) throws DASException{

		StringBuffer buf = new StringBuffer();
		Connection con = null;		
		PreparedStatement psmt = null;		
		ResultSet rs = null;

		buf.append(" select distinct mst.manual_yn from contents_inst_Tbl inst              ");
		buf.append(" inner join contentS_mapp_Tbl map on map.ct_id = inst.ct_id        ");
		buf.append(" inner join metadat_mst_Tbl mst on mst.MASTER_ID = map.MASTER_ID    ");

		buf.append(" 	where inst.ct_id = ?                ");

		try {
			con = DBService.getInstance().getConnection();
			//logger.debug("######selectManualYnForCt_id######## con : " + con);
			//con.setAutoCommit(false);
			//        psmt = con.prepareStatement(buf.toString());    //  로그 inform
			psmt = con.prepareStatement(buf.toString());
			int index = 0;			
			psmt.setLong(++index, ct_id);
			rs = psmt.executeQuery();	
			//TcBeanDO item = new TcBeanDO();
			String manual_yn = "";
			if(rs.next())
			{

				manual_yn = rs.getString("manual_yn");

			}

			//con.setAutoCommit(true);
			return manual_yn;
		}
		catch (Exception ex)
		{
			logger.error(buf.toString());

			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "selectTcJon 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, con);
		}
	}



	/**
	 * metadat_mst_tbl  대표화면 키프레임 업데이트
	 * @param IfCmsArchiveDO
	 * @return
	 * @throws Exception 
	 * @throws RemoteException
	 */
	public int updatemetatbl(IfCmsArchiveDO pad) throws Exception
	{

		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.metadat_mst_tbl set ");
		buf.append("\n 	RPIMG_KFRM_SEQ = ? ");
		buf.append("\n 	,RPIMG_CT_ID = ? ");
		buf.append("\n where master_id = ? ");

		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			if(pad.getConn() == null) {
				con = DBService.getInstance().getConnection();
				con.setAutoCommit(false);
			} else
				con = pad.getConn();

			int index = 0;
			stmt.setLong(++index, 0);		
			stmt.setLong(++index, pad.getCti_idForHigh());
			stmt.setLong(++index, pad.getMaster_id());
			int updateCount = stmt.executeUpdate();

			if(pad.getConn() == null) con.commit();

			return updateCount;
		} catch (Exception e) {
			if(pad.getConn() == null) con.rollback();
			throw e;
		} finally {
			if(pad.getConn() == null)
				release(null, stmt, con);
			else
				release(null, stmt, null);
		}

	}



	/**
	 * metadat_mst_tbl  대표화면 키프레임 업데이트
	 * @param IfCmsArchiveDO
	 * @return
	 * @throws Exception 
	 * @throws RemoteException
	 */
	public int updateMetadatTblForIfCms(IfCmsArchiveDO pad) throws Exception
	{

		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.metadat_mst_tbl set ");
		buf.append("\n 	RPIMG_KFRM_SEQ = ? ");
		buf.append("\n 	,RPIMG_CT_ID = ? ");
		buf.append("\n where master_id = ? ");

		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateMetadatTblForIfCms######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setLong(++index, 0);		
			stmt.setLong(++index, pad.getCti_idForHigh());
			stmt.setLong(++index, pad.getMaster_id());
			int updateCount = stmt.executeUpdate();

			return updateCount;
		}

		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}





	/**
	 * 카트정보를 업데이트 한다.
	 * @param cartContDO
	 * @return
	 * @throws Exception 
	 */
	public int updateCartContTbl(DownCartDO cartContDO) throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n UPDATE DAS.CART_CONT_TBL set ");
		buf.append("\n DOWN_STAT=? ");
		buf.append("\n where CART_NO = ? AND CART_SEQ =? ");

		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateCartContTbl######## con : " + con);
			stmt = con.prepareStatement(buf.toString());
			int index = 0;
			stmt.setString(++index, "007");
			stmt.setLong(++index, cartContDO.getCartNo());
			stmt.setLong(++index, cartContDO.getCartSeq());

			int updateCount = stmt.executeUpdate();

			return updateCount;
		}

		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}



	/**
	 * 해당 id가 ifcms 승인자 인지 확인한다
	 * @param user_id 사용자id 
	 * @return String result
	 * @throws Exception 
	 * @throws RemoteException
	 */
	public String getIfCmsApproveYn(String user_id) throws Exception{

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		String str = null;		

		StringBuffer buf = new StringBuffer();
		buf.append("\n select count(*) from approve_chennel_tbl ");
		buf.append("\n where user_id ='"+user_id+"' and use_yn='Y' ");;

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######getIfCmsApproveYn######## con : " + con);
			stmt = con.prepareStatement(buf.toString());
			//stmt.setString(1, user_id);
			//rs = stmt.executeQuery();

			// 총 조회 갯수를 구한다.
			int totalCount = getTotalCount(con, buf.toString());

			if (totalCount > 0) {

				return "Y";
			}		

			return "N";

		} 
		catch (Exception e) 
		{
			logger.error(buf.toString());

			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}






	/**
	 * 내 아카이브 요청 목록조회
	 * @param commonDO
	 * @return
	 * @throws Exception 
	 * @throws RemoteException
	 */
	public List getMyArchiveRequestList(WorkStatusConditionDO dO) throws Exception
	{
		String query = ExternalStatement.selectArchiveRequestInfo(dO);

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######getMyArchiveRequestList######## con : " + con);
			stmt = con.prepareStatement(query);

			int index = 0;

			rs = stmt.executeQuery();

			List resultList  = new ArrayList();
			int totalcount =ArchiveRequestCount(dO);
			while(rs.next())
			{
				WorkStatusConditionDO item = new WorkStatusConditionDO();
				item.setCti_id(rs.getLong("CTI_ID"));
				item.setTitle(         	rs.getString("TITLE"));
				//item.setTitle(CommonUtl.transXmlText(rs.getString("title")));
				item.setBrd_dd(       	rs.getString("brd_dd"));
				item.setCtgr_l_cd(      		rs.getString("DESC"));
				item.setReq_dt(      		rs.getString("REG_DT"));
				item.setProgress(      		rs.getString("PROGRESS"));
				item.setArch_stat(      		rs.getString("JOB_STATUS"));
				item.setTotalcount(totalcount);
				resultList.add(item);
			}

			return resultList; 
		} 
		catch (Exception e) 
		{
			logger.error(query);


			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}



	/**
	 * 아카이브 요청 테이블 총 갯수를 조회한다.
	 * @param masterId
	 * @return list 대본 정보 조회
	 * @throws Exception 
	 */
	public int ArchiveRequestCount(WorkStatusConditionDO dO) throws Exception
	{

		String query = ExternalStatement.countArchiveRequestInfo(dO);

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######ArchiveRequestCount######## con : " + con);
			stmt = con.prepareStatement(query);

			rs = stmt.executeQuery();
			List resultList  = new ArrayList();
			int cnt = 0;

			while(rs.next())
			{
				cnt= rs.getInt("cnt");
			}		

			return cnt;

		} 
		catch (Exception e) 
		{
			logger.error(query);

			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}

	/**
	 * BackEnd TC 의 ID 값을 확인하여 상태값을 부여.
	 * @param ct_id
	 * @return
	 * @throws Exception 
	 */
	public boolean updateTcProgressForH264(TcBeanDO tcBeanDO) throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.tc_job_tbl set ");
		buf.append("\n 	H264_PROGRESS = ? ");
		buf.append("\n 	,H264_STATUS = ? ");
		buf.append("\n where SEQ = ? ");

		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateTcProgressForH264######## con : " + con);
			stmt = con.prepareStatement(buf.toString());
			//	stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setString(++index, tcBeanDO.getProgress());
			stmt.setString(++index, tcBeanDO.getJob_status());
			stmt.setLong(++index, tcBeanDO.getJob_id());

			int updateCount = stmt.executeUpdate();

			if(updateCount>0)return true;
			return false;
		}

		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}

	/**
	 *  아카이브 진행 상태를 조회한다(if cms)
	 * @param  XML                                                                                                                                                                                              
	 * @return                                                                                                                                                                                              
	 * @throws Exception 
	 */
	public List getJobStatusForArchive(MonitoringDO monitoringDO) throws Exception
	{

		Connection con = null;
		PreparedStatement stmt = null;
		Connection con2 = null;
		PreparedStatement stmt2 = null;
		ResultSet rs = null;
		String query  = null;
		try 
		{
			int index = 0;

			List resultList  = new ArrayList();

			String title ="";
			String progress="";
			//각각의 진행상태에서 대해서 Q에 담는다.

			//tx_값을 기준으로 ct_id를 구한다
			long ct_id = selectCt_idByTxid(monitoringDO.getKeyid());
			monitoringDO.setCt_id(ct_id);

			String manual_yn = selectManualYnForCt_id(monitoringDO.getCt_id());

			query = ExternalStatement.selectTCstatusForArchive(monitoringDO);
			con = DBService.getInstance().getConnection();
			//logger.debug("######getJobStatusForArchive  1######## con : " + con);
			//stmt = con.prepareStatement(query);
			stmt = con.prepareStatement(query);
			rs = stmt.executeQuery();

			while(rs.next())
			{

				MonitoringDO item = new MonitoringDO();
				//item.setTitle(       	rs.getString("title"));
				item.setTitle(CommonUtl.transXmlText(rs.getString("title")));
				//title= rs.getString("title");
				item.setTc_state(         	rs.getString("desc"));
				item.setTc_progress(       	rs.getString("PROGRESS"));
				item.setStart_time(       	rs.getString("reg_dt"));
				item.setEnd_time(       	rs.getString("reg_dt"));
				progress=	rs.getString("PROGRESS");

				resultList.add(item);
			}

			MonitoringDO item2 = new MonitoringDO();

			//수동아카이브 여부가 Y면 TC 진행상태까지만 보여주고 종료
			if(manual_yn.equals("Y")){
				item2.setTitle(title);
				item2.setStatus("승인대기");
				resultList.add(item2);
				return resultList; 
			}else if(manual_yn.equals("N")){
				item2.setTitle(title);
				item2.setStatus("승인");
				resultList.add(item2);

				String query2 = ExternalStatement.selectStatusForArchive(monitoringDO);
				con2 = DBService.getInstance().getConnection();
				//logger.debug("######getJobStatusForArchive 2######## con : " + con);
				//stmt2 = LoggableStatement.getInstance(con2, query2);
				stmt2 = con2.prepareStatement(query2);
				rs = stmt2.executeQuery();

				while(rs.next())
				{

					MonitoringDO item = new MonitoringDO();
					//item.setTitle(       	rs.getString("title"));
					item.setTitle(CommonUtl.transXmlText(rs.getString("title")));
					item.setArchive_state(         	rs.getString("desc"));
					item.setArchive_progress(       	rs.getString("PROGRESS"));
					item.setStart_time(       	rs.getString("reg_dt"));
					item.setEnd_time(       	rs.getString("end_dt"));

					resultList.add(item);
				}
			}
			return resultList; 



		} 
		catch (Exception e) 
		{
			logger.error(query);


			throw e;
		}
		finally
		{
			release(rs, stmt, con);
			release(rs, stmt2, con2);
		}
	}




	/**
	 * 해당 TX_ID로 CT_ID를 얻는다.
	 * @return
	 * @throws DASException
	 */
	public long selectCt_idByTxid(String key) throws DASException{

		StringBuffer buf = new StringBuffer();
		Connection con = null;		
		PreparedStatement psmt = null;		
		ResultSet rs = null;

		buf.append(" select                   ");
		buf.append("    con.ct_id            ");
		buf.append("  from contents_tbl con   ");
		buf.append("  inner join contents_mapp_tbl map on map.ct_id = con.ct_id   ");
		buf.append("  inner join metadat_mst_Tbl mst on mst.master_id = map.master_id   ");
		buf.append(" 	WHERE con.tx_id =?      and value(MST.del_dd,'')=''           ");

		try {
			con = DBService.getInstance().getConnection();
			//logger.debug("######selectCt_idByTxid######## con : " + con);
			//con.setAutoCommit(false);
			// psmt = con.prepareStatement(buf.toString());    //  로그 inform
			psmt = con.prepareStatement(buf.toString());
			int index = 0;			
			psmt.setString(++index, key);
			rs = psmt.executeQuery();	
			long ct_id=0;
			if(rs.next())
			{
				ct_id =     	rs.getLong("ct_id");

			}

			//con.setAutoCommit(true);
			return ct_id;
		}
		catch (Exception ex)
		{
			logger.error(buf.toString());

			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "selectTcJon 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, con);
		}

	}






	/**
	 *  다운로드 진행 상태를 조회한다(if cms)
	 * @param  XML                                                                                                                                                                                              
	 * @return                                                                                                                                                                                              
	 * @throws Exception 
	 */
	public List getJobStatusForDownload(MonitoringDO monitoringDO) throws Exception
	{

		Connection con = null;
		PreparedStatement stmt = null;
		Connection con2 = null;
		PreparedStatement stmt2 = null;
		ResultSet rs = null;
		String SecondConnect ="";
		String query = null;
		try 
		{
			int index = 0;



			List resultList  = new ArrayList();

			String title ="";
			String status="";
			//각각의 진행상태에서 대해서 Q에 담는다.

			query = ExternalStatement.selectApproveStatusForDownload(monitoringDO);
			con = DBService.getInstance().getConnection();
			//logger.debug("######getJobStatusForDownload######## con : " + con);
			stmt = con.prepareStatement(query);
			//stmt = con.prepareStatement(query);
			rs = stmt.executeQuery();
			String storage_yn ="";
			if(rs.next())
			{

				MonitoringDO item = new MonitoringDO();

				title = CommonUtl.transXmlText(rs.getString("title"));
				item.setTitle(title);

				status=	rs.getString("DOWN_STAT");
				item.setStatus(       	rs.getString("DESC"));
				item.setStart_time(       	rs.getString("reg_dt"));
				item.setEnd_time(       	rs.getString("mod_Dt"));
				storage_yn=rs.getString("storage_yn");
				item.setApprove_gubun(rs.getString("rist_yn"));
				item.setOut_user_yn(rs.getString("outsourcing_yn"));

				String cont = "";
				if(rs.getString("APP_CONT") != null) {
					//cont = CommonUtl.transXmlText(rs.getString("APP_CONT"));
				}
				item.setRefuse_cont(cont);
				//item.setRefuse_cont(rs.getString("APP_CONT"));
				if(!item.getApprove_gubun().equals("N")||item.getApprove_gubun().equals("N")&&item.getOut_user_yn().equals("Y")){

					resultList.add(item);
				}
			}


			//다운로드 상태가 다운중이면 표시.
			if(status.equals("006")){
				SecondConnect="Y";
				String query2 = ExternalStatement.selectProgressForDownload(monitoringDO);
				con2 = DBService.getInstance().getConnection();
				//stmt2 = LoggableStatement.getInstance(con, query2);
				stmt2 = con2.prepareStatement(query2);
				rs = stmt2.executeQuery();

				if(rs.next())
				{

					MonitoringDO item = new MonitoringDO();
					item.setTitle(CommonUtl.transXmlText(title));
					item.setDown_state(CommonUtl.transXmlText(rs.getString("DESC")));
					item.setDown_progress(       	rs.getString("PROGRESS"));
					item.setStart_time(       	rs.getString("reg_dtm"));
					item.setEnd_time(       	rs.getString("updt_dtm"));

					resultList.add(item);
				}

				return resultList; 
			}


			//다운로드 상태가 다운완료이면 TM 표시도 같이.
			if(status.equals("007")){
				SecondConnect="Y";
				//스토리지 다운로드라면
				if(storage_yn.equals("Y")){

					String query2 = ExternalStatement.selectProgressForDownloadInStorage(monitoringDO);
					con2 = DBService.getInstance().getConnection();
					//stmt2 = LoggableStatement.getInstance(con, query2);
					stmt2 = con2.prepareStatement(query2);
					rs = stmt2.executeQuery();

					if(rs.next())
					{

						MonitoringDO item = new MonitoringDO();
						//item.setTitle(title);
						item.setTitle(CommonUtl.transXmlText(title));
						item.setDown_state(CommonUtl.transXmlText(rs.getString("DESC")));
						item.setDown_progress(       	rs.getString("PROGRESS"));
						item.setStart_time(       	rs.getString("reg_dtm"));
						item.setEnd_time(       	rs.getString("updt_dtm"));

						resultList.add(item);
					}

					//tm 전송상태 표시
					String query3 = ExternalStatement.selectProgressForTmForStorage(monitoringDO);
					//con2 = DBService.getInstance().getConnection();
					//logger.debug("######getJobStatusForDownload######## con2 : " + con2);
					//	stmt2 = LoggableStatement.getInstance(con, query3);
					stmt2 = con2.prepareStatement(query3);
					rs = stmt2.executeQuery();

					if(rs.next())
					{

						MonitoringDO item = new MonitoringDO();
						item.setTitle(CommonUtl.transXmlText(title));
						item.setTm_state(CommonUtl.transXmlText(rs.getString("DESC")));
						item.setTm_progress(       	rs.getString("PROGERESS"));
						item.setStart_time(       	rs.getString("reg_dtm"));
						item.setEnd_time(       	rs.getString("updt_dtm"));


						resultList.add(item);
					}

					return resultList; 

				} else {
					//dtl다운로드라면
					SecondConnect="Y";
					//다운로드 상태 표시
					String query2 = ExternalStatement.selectProgressForDownload(monitoringDO);
					con2 = DBService.getInstance().getConnection();
					//stmt2 = LoggableStatement.getInstance(con, query2);
					stmt2 = con2.prepareStatement(query2);
					rs = stmt2.executeQuery();

					if(rs.next())
					{

						MonitoringDO item = new MonitoringDO();
						item.setTitle(CommonUtl.transXmlText(title));
						item.setDown_state(CommonUtl.transXmlText(rs.getString("DESC")));
						item.setDown_progress(       	rs.getString("PROGRESS"));
						item.setStart_time(       	rs.getString("reg_dtm"));
						item.setEnd_time(       	rs.getString("updt_dtm"));


						resultList.add(item);
					}

					//tm 전송상태 표시
					String query3 = ExternalStatement.selectProgressForTm(monitoringDO);
					//con2 = DBService.getInstance().getConnection();
					//logger.debug("######getJobStatusForDownload######## con2 : " + con2);
					//stmt2 = LoggableStatement.getInstance(con, query3);
					stmt2 = con2.prepareStatement(query3);
					rs = stmt2.executeQuery();

					if(rs.next())
					{

						MonitoringDO item = new MonitoringDO();
						item.setTitle(CommonUtl.transXmlText(title));
						item.setTm_state(CommonUtl.transXmlText(rs.getString("DESC")));
						item.setTm_progress(       	rs.getString("PROGERESS"));
						item.setStart_time(       	rs.getString("reg_dtm"));
						item.setEnd_time(       	rs.getString("updt_dtm"));

						resultList.add(item);
					}

					return resultList; 
				}
			}

			return resultList; 

		} 
		catch (Exception e) 
		{
			logger.error(query);


			throw e;
		}
		finally
		{
			release(rs, stmt, con);
			if(SecondConnect.equals("Y")){
				release(rs, stmt2, con2);
			}
		}
	}





	/**
	 * DTL 이관전 클립 TM용 데이타 수집
	 * @param cartNo
	 * @param cartSeq
	 * @return
	 * @throws Exception 
	 */
	public String addTaskByStorageClipForFull(long cartNo,long cartSeq)throws Exception{
		String xml="";
		String rtnValue="";
		int errorcount =0;
		xml = selectAddTaskForXmlByStorageClip(cartNo,cartSeq);
		try {

			TansferPortTypeProxy port = new TansferPortTypeProxy();
			//rtnValue = port.addTaskPFR(	CommonUtl.transXmlText(xml));
			rtnValue = port.addTaskPFR(xml);

			//return 		CommonUtl.transXMLText(rtnValue);
			return 		(rtnValue);
			// TODO Auto-generated catch block

		} catch (RemoteException e) {
			try {
				errorcount =1;

				TansferPortTypeProxy port = new TansferPortTypeProxy();
				//rtnValue = port.addTaskPFR(	CommonUtl.transXmlText(xml));
				rtnValue = port.addTaskPFR(xml);

				//return 		CommonUtl.transXMLText(rtnValue);
				return 		(rtnValue);
			} catch (RemoteException e1) {
				try {
					errorcount =2;

					TansferPortTypeProxy port = new TansferPortTypeProxy();
					//rtnValue = port.addTaskPFR(	CommonUtl.transXmlText(xml));
					rtnValue = port.addTaskPFR(xml);

					//return 		CommonUtl.transXMLText(rtnValue);
					return 		(rtnValue);
				} catch (RemoteException e2) {
					// TODO Auto-generated catch block
					e2.printStackTrace();
				}
			}

			//return 		CommonUtl.transXMLText(rtnValue);
			return 		(rtnValue);
		} catch (Exception e) {
			logger.error(cartSeq);
			logger.error(cartNo);
		}
		return "";
	}






	/**
	 * contents_inst_tbl 잡상태 변화(wmv영상)
	 * @param tcBeanDO
	 * @return
	 * @throws SQLException 
	 * @throws RemoteException
	 */
	public int updateContentsInstForIfCms(Connection con,IfCmsArchiveDO item) throws DASException, SQLException
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.contents_inst_tbl set ");
		buf.append("\n 	fl_path = ? ");
		buf.append("\n where ct_id = ? ");
		buf.append("\n and cti_fmt like '%10%'  ");
		PreparedStatement stmt = null;
		//Connection con = null;		

		try 
		{
			//con = DBService.getInstance().getConnection();
			stmt = con.prepareStatement(buf.toString());

			int index = 0;

			String storage =  item.getStorage_path();

			storage = storage.replaceAll(dasHandler.getProperty("NEARLINE"), dasHandler.getProperty("WINNEARLINE"));
			stmt.setString(++index, storage);			
			stmt.setLong(++index, item.getCt_id());	

			int updateCount = stmt.executeUpdate();

			return updateCount;
		}

		catch (SQLException e) 
		{
			logger.error(buf.toString());
			if(con != null)
			{
				try {
					con.rollback();
				} catch (SQLException e1) {
					// TODO 자동 생성된 catch 블록
					logger.error(e1);
				}
			}

			throw e;
		}
		finally
		{
			release(null, stmt, null);
		}

	}




	/**
	 * 영상의 제목을 가져온다
	 * @param cnInfoDO                                                                                                                                    	
	 * @throws Exception 
	 */
	private String getTitleForCartNo(long cart_no) throws Exception
	{
		StringBuffer buf = new StringBuffer();
		buf.append("\n select ");
		buf.append("\n 	CASE WHEN MST.CTGR_L_CD ='100' THEN MST.TITLE ");
		buf.append("\n 	WHEN MST.CTGR_L_CD='200' AND VALUE(MST.PGM_ID,0)!=0 THEN PGM.PGM_NM ");
		buf.append("\n 	ELSE MST.TITLE END AS TITLE  ");
		buf.append("\n 	FROM CART_CONT_tBL CART ");
		buf.append("\n INNER JOIN METADAT_MST_tBL MST ON MST.MASTER_ID = CART.MASTER_ID ");
		buf.append("\n LEFT OUTER JOIN PGM_INFO_TBL PGM ON PGM.PGM_ID = MST.PGM_ID ");
		buf.append("\n where cart.cart_no = ? ");

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######getTitleForCartNo######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setLong(++index, cart_no);

			rs = stmt.executeQuery();

			String title="";

			while(rs.next())
			{
				title = rs.getString("TITLE");



			}

			return title;
		} 
		catch (Exception e) 
		{
			logger.error(buf.toString());

			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}




	/**
	 * task_id기준 값을 가져온다.
	 * @param cnInfoDO                                                                                                                                    	
	 * @throws Exception 
	 */
	private IfCmsArchiveDO getIdsForTask(int task_id) throws Exception
	{
		StringBuffer buf = new StringBuffer();
		buf.append("\n select ");
		buf.append("\n cart.cti_id,cart.cart_no,cart.cart_seq,value(ari.mod_dt,'00000000000000') as mod_dt,value(cart.url,'') as url ");
		buf.append("\n ,down.reg_user ");
		buf.append("\n 	from ariel_info_Tbl ari ");
		buf.append("\n 	inner join cart_conT_tbl cart on cart.cart_no = ari.cart_no and cart.cart_seq = ari.cart_seq ");
		buf.append("\n 	inner join contents_down_tbl down on cart.cart_no = down.cart_no and down.cart_seq = cart.cart_seq");

		buf.append("\n where ari.task_id = ?");

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######getIdsForTask######## con : " + con);
			//stmt = con.prepareStatement(buf.toString());
			stmt = con.prepareStatement(buf.toString());
			int index = 0;
			stmt.setLong(++index, task_id);

			rs = stmt.executeQuery();

			String title="";
			IfCmsArchiveDO item = new IfCmsArchiveDO();
			while(rs.next())
			{
				item.setCti_idForHigh(rs.getLong("cti_id"));
				item.setCart_no(rs.getLong("cart_no"));
				item.setCart_seq(rs.getInt("cart_seq"));
				item.setComplete_dt(rs.getString("mod_dt"));
				item.setCallback_url(rs.getString("url"));
				item.setReg_nm(rs.getString("reg_user"));
			}

			return item;
		} 

		catch (Exception e) 
		{
			logger.error(buf.toString());

			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}





	/**
	 * 장비의 상태 업데이트를 한다
	 * @param DepInfoDO                                                                                                                                                                                             
	 * @return                                                                                                                                                                                              
	 * @throws Exception 
	 */
	public int updateMediaCilpStatus(MediaArchiveDO mediaArchiveDO) throws Exception
	{

		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.media_tapeinfo_tbl set ");
		buf.append("\n 	gubun = ? ");
		buf.append("\n where seq = ? ");

		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateMediaCilpStatus######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;

			stmt.setString(++index, mediaArchiveDO.getGubun());
			stmt.setInt(++index, mediaArchiveDO.getSeq());

			int updateCount = stmt.executeUpdate();

			return updateCount;
		}
		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			//try { 	if (stmt != null)  stmt.close();	} catch (SQLException e) {}
			release(null, stmt, con);
		}

	}





	/**
	 * 미디어넷 자료 상태를 업데이트한다
	 * @param DepInfoDO                                                                                                                                                                                             
	 * @return                                                                                                                                                                                              
	 * @throws Exception 
	 */
	public int updateEquipMentStatus(EquipMentInfoDO mediaArchiveDO) throws Exception
	{

		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.das_equipment_tbl set ");
		buf.append("\n 	title = ? ");
		buf.append("\n 	,prgrs = ? ");
		buf.append("\n 	,mod_dt = ? ");
		buf.append("\n 	,cti_id = ? ");
		buf.append("\n 	,job_status = ? ");
		buf.append("\n where das_eq_clf_Cd = ? ");
		buf.append("\n and das_eq_id = ? ");

		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateEquipMentStatus######## con : " + con);
			//stmt = con.prepareStatement(buf.toString());
			stmt = con.prepareStatement(buf.toString());
			int index = 0;

			String dateTime = CalendarUtil.getDateTime("yyyyMMddHHmmss");
			stmt.setString(++index, mediaArchiveDO.getTitle());
			stmt.setString(++index, mediaArchiveDO.getProgress());
			stmt.setString(++index, dateTime);
			stmt.setLong(++index, mediaArchiveDO.getCti_id());
			stmt.setString(++index, mediaArchiveDO.getStatus());
			stmt.setString(++index, mediaArchiveDO.getDas_eq_clf_cd());
			stmt.setInt(++index, Integer.parseInt(mediaArchiveDO.getDas_eq_id()));


			int updateCount = stmt.executeUpdate();

			return updateCount;
		}
		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			//try { 	if (stmt != null)  stmt.close();	} catch (SQLException e) {}
			release(null, stmt, con);
		}

	}









	/**
	 * 마스터id별 ctiid의 묶음을 조회한다
	 * @param cartItemDO                                                                                                                                                                                            
	 * @param                                                                                                                                                                                               
	 * @return                                                                                                            
	 * @throws Exception 
	 */
	public List  getGroupForMasterForClient(long master_id) throws Exception
	{
		String query = ExternalStatement.selectGroupForMasterForClient(master_id);
		Connection con = null;
		PreparedStatement stmt = null;

		ResultSet rs = null;

		try 
		{
			con = DBService.getInstance().getConnection();

			//logger.debug("######getGroupForMasterForClient######## con : " + con);
			int index = 0;

			stmt = con.prepareStatement(query);
			rs = stmt.executeQuery();

			List resultList  = new ArrayList();

			while(rs.next())
			{
				WmvH264DO item = new WmvH264DO();
				item.setCti_id(rs.getLong("CTI_ID"));
				item.setCt_nm(rs.getString("CT_NM"));
				item.setKey(rs.getLong("KEY"));
				item.setCyn(rs.getString("COPY_STATUS"));
				item.setOld_cyn(rs.getString("OLD_COPY_STATUS"));
				item.setByn(rs.getString("BACKUP_STATUS"));
				item.setFl_sz(rs.getLong("FL_SZ"));
				item.setCt_leng(rs.getString("CT_LENG"));
				item.setDtl_yn(rs.getString("ARCHIVE_STATUS"));
				resultList.add(item);
			}


			return resultList; 
		} 
		catch (Exception e) 
		{
			logger.error(query);


			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}




	/**
	 * 에러값을 등록한다
	 * @param tcBeanDO
	 * @return boolean
	 * @throws Exception 
	 * @throws RemoteException
	 */
	public boolean InsertErrjob(long eq_id, String error_code, String error_cont,String job_id,String process_id,  long key) throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n insert into ERROR_LOG_TBL ( ");
		buf.append("\n 	SERVER_NM ");
		buf.append("\n 	,ERROR_TYPE ");
		buf.append("\n 	,REG_DT ");
		buf.append("\n 	,ERROR_CONT ");
		buf.append("\n 	,JOB_ID ");
		buf.append("\n 	,PROCESS_ID ");
		buf.append("\n 	,EQ_ID ");
		buf.append("\n 	,KEY ");
		buf.append("\n 	) VALUES ( ");
		buf.append("\n 	?,?,?,?,?,?,?,?) ");

		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######InsertErrjob######## con : " + con);
			//stmt = con.prepareStatement(buf.toString());
			stmt = con.prepareStatement(buf.toString());
			int index = 0;
			String dateTime = CalendarUtil.getDateTime("yyyyMMddHHmmss");
			stmt.setLong(++index, eq_id);
			stmt.setString(++index, error_code);
			stmt.setString(++index, dateTime);
			stmt.setString(++index, error_cont);
			stmt.setString(++index, job_id);
			stmt.setString(++index, process_id);
			stmt.setLong(++index, eq_id);
			stmt.setLong(++index, key);
			int updateCount = stmt.executeUpdate();
			//updateMetadat3(con,tcBeanDO);
			if(updateCount>0)return true;
			return false;
		}

		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}




	/**
	 * 해당 TC id를 확인하여 해당 WorkStat 값을 확인한다.
	 * @return
	 * @throws DASException
	 */
	public long selectTcEqId(TcBeanDO tcBeanDO) throws DASException{

		StringBuffer buf = new StringBuffer();
		Connection con = null;		
		PreparedStatement psmt = null;		
		ResultSet rs = null;

		buf.append(" select                   ");
		buf.append("      das_eq_id                             ");
		buf.append(" 	 from das.das_equipment_tbl where  das_eq_nm = ?                  ");

		try {
			con = DBService.getInstance().getConnection();
			//logger.debug("######selectTcEqId######## con : " + con);
			//con.setAutoCommit(false);
			// psmt = con.prepareStatement(buf.toString());    //  로그 inform
			psmt = con.prepareStatement(buf.toString());
			int index = 0;			
			psmt.setString(++index, tcBeanDO.getTc_id());
			rs = psmt.executeQuery();	
			long eq_id=0;
			if(rs.next())
			{
				eq_id =      	rs.getLong("das_eq_id");

			}

			//con.setAutoCommit(true);
			return eq_id;
		}
		catch (Exception ex)
		{
			logger.error(buf.toString());

			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "selectTcJon 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, con);
		}

	}




	/**
	 * 해당 채널코드의 회사코드를 조회한다
	 * @return
	 * @throws DASException
	 */
	public String selectCOCDForChannel(String channel) throws DASException{

		StringBuffer buf = new StringBuffer();
		Connection con = null;		
		PreparedStatement psmt = null;		
		ResultSet rs = null;

		buf.append(" select                   ");
		buf.append("      GUBUN                             ");
		buf.append(" 	 from das.CODE_TBL WHERE CLF_CD='P058' AND SCL_CD= ?                  ");

		try {
			con = DBService.getInstance().getConnection();
			//logger.debug("######selectCOCDForChannel######## con : " + con);
			//con.setAutoCommit(false);
			psmt = con.prepareStatement(buf.toString());    //  로그 inform
			// psmt = con.prepareStatement(buf.toString());
			int index = 0;			
			psmt.setString(++index, channel);
			rs = psmt.executeQuery();	
			String cocd="";
			if(rs.next())
			{
				cocd =      	rs.getString("GUBUN");

			}
			if(cocd.equals("")){

				cocd =channel;
			}

			//con.setAutoCommit(true);
			return cocd;
		}
		catch (Exception ex)
		{
			logger.error(buf.toString());

			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "selectTcJon 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, con);
		}

	}




	/**
	 * 장비상태를  업데이트한다
	 * @param DepInfoDO                                                                                                                                                                                             
	 * @return                                                                                                                                                                                              
	 * @throws Exception 
	 */
	public int updateEquipMentStatus(long cti_id, String progress, String eq_clf_cd,int eq_id,String job_status) throws Exception
	{

		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.das_equipment_tbl set ");

		buf.append("\n 	prgrs = ? ");
		buf.append("\n 	,mod_dt = ? ");
		buf.append("\n 	,cti_id = ? ");
		buf.append("\n 	,job_status = ? ");
		buf.append("\n where das_eq_clf_Cd = ? ");
		buf.append("\n and das_eq_id = ? ");

		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateEquipMentStatus######## con : " + con);
			//stmt = con.prepareStatement(buf.toString());
			stmt = con.prepareStatement(buf.toString());
			int index = 0;

			String dateTime = CalendarUtil.getDateTime("yyyyMMddHHmmss");

			stmt.setString(++index, progress);
			stmt.setString(++index, dateTime);
			stmt.setLong(++index, cti_id);
			stmt.setString(++index, job_status);
			stmt.setString(++index, eq_clf_cd);
			stmt.setInt(++index, eq_id);


			int updateCount = stmt.executeUpdate();

			return updateCount;
		}

		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			//try { 	if (stmt != null)  stmt.close();	} catch (SQLException e) {}
			release(null, stmt, con);
		}

	}




	/**
	 * 취소 업데이트
	 * @param DepInfoDO                                                                                                                                                                                             
	 * @return                                                                                                                                                                                              
	 * @throws Exception 
	 */
	public int updateCancleJobForDown(long num) throws Exception
	{

		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.contents_down_tbl set ");
		buf.append("\n 	job_status = 'D' ");
		buf.append("\n 	,updt_dtm = ? ");
		buf.append("\n where num = ? ");

		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateCancleJobForDown######## con : " + con);
			stmt = con.prepareStatement(buf.toString());
			//stmt = con.prepareStatement(buf.toString());
			int index = 0;


			String dateTime = CalendarUtil.getDateTime("yyyyMMddHHmmss");

			stmt.setString(++index, dateTime);
			stmt.setLong(++index, num);

			int updateCount = stmt.executeUpdate();

			return updateCount;
		}

		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			//try { 	if (stmt != null)  stmt.close();	} catch (SQLException e) {}
			release(null, stmt, con);
		}

	}



	/**
	 * 취소 업데이트
	 * @param DepInfoDO                                                                                                                                                                                             
	 * @return                                                                                                                                                                                              
	 * @throws Exception 
	 */
	public int updateCancleJobForArchive(long num) throws Exception
	{

		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.contents_loc_tbl set ");

		buf.append("\n 	job_status = 'D' ");
		buf.append("\n 	,updt_dtm = ? ");

		buf.append("\n where num = ? ");

		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateCancleJobForArchive######## con : " + con);
			stmt = con.prepareStatement(buf.toString());
			//stmt = con.prepareStatement(buf.toString());
			int index = 0;


			String dateTime = CalendarUtil.getDateTime("yyyyMMddHHmmss");

			stmt.setString(++index, dateTime);
			stmt.setLong(++index, num);


			int updateCount = stmt.executeUpdate();

			return updateCount;
		}

		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			//try { 	if (stmt != null)  stmt.close();	} catch (SQLException e) {}
			release(null, stmt, con);
		}

	}





	/**
	 * 복본 표기
	 * @param ct_id 컨텐츠id
	 * @return updatecount
	 * @throws Exception 
	 */
	public int updateCopyYNForCtId(long ct_id,String reg_id) throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.contents_inst_tbl set ");
		buf.append("\n 	ETC=? ");
		buf.append("\n 	,regrid=? ");
		buf.append("\n where ct_id  = ? ");

		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateCopyYNForCtId######## con : " + con);
			stmt = con.prepareStatement(buf.toString());
			String dateTime = CalendarUtil.getDateTime("yyyyMMddHHmmss");
			int index = 0;
			stmt.setString(++index, "복본 재생성 중입니다");

			stmt.setString(++index, reg_id);
			stmt.setLong(++index, ct_id);
			int updateCount = stmt.executeUpdate();

			return updateCount;
		}

		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}



	/**
	 * 복본 신청자 표기
	 * @param master_id 컨텐츠id
	 * @return updatecount
	 * @throws Exception 
	 */
	public int updateCopyReqIdForCtId(long ct_id,String reg_id) throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.contents_loc_tbl set ");
		buf.append("\n 	copy_id=? ");
		//buf.append("\n 	,regrid=? ");
		buf.append("\n where cti_id in (select cti_id from contents_inst_Tbl where ct_id = ? )");

		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateCopyReqIdForCtId######## con : " + con);
			stmt = con.prepareStatement(buf.toString());
			String dateTime = CalendarUtil.getDateTime("yyyyMMddHHmmss");
			int index = 0;
			//	stmt.setString(++index, "복본 재생성 중입니다");

			stmt.setString(++index, reg_id);
			stmt.setLong(++index, ct_id);
			int updateCount = stmt.executeUpdate();

			return updateCount;
		}

		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}





	public UseInfoDO getIdForCtIdForCopy(long ct_id) throws Exception
	{
		StringBuffer buf = new StringBuffer();
		buf.append("\n select ");
		buf.append("\n 	cti_id ");
		buf.append("\n from das.contents_inst_tbl  ");
		buf.append("\n where ct_id = ? and cti_fmt like '%10%'");
		buf.append("\n WITH UR	 ");

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######getIdForCtIdForCopy######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setLong(++index, ct_id);
			rs = stmt.executeQuery();

			int nPrior = 0;
			int nOldPrior = 0;
			String annotClfCd = "";

			UseInfoDO cart = new UseInfoDO();
			while(rs.next())
			{

				cart.setCti_id(rs.getLong("cti_id"));
			}		
			return cart;
		} 
		catch (Exception e) 
		{
			logger.error(buf.toString());

			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}

	/**
	 * 복본 표기
	 * @param ct_id 컨텐츠id
	 * @return updatecount
	 * @throws Exception 
	 */
	public int updateBackUpYNForCtId(long ct_id,String reg_id) throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.contents_inst_tbl set ");
		buf.append("\n 	ETC=? ");
		buf.append("\n 	,regrid=? ");
		buf.append("\n where ct_id =  ? ");

		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateBackUpYNForCtId######## con : " + con);
			stmt = con.prepareStatement(buf.toString());
			String dateTime = CalendarUtil.getDateTime("yyyyMMddHHmmss");
			int index = 0;
			stmt.setString(++index, "소산 중입니다");

			stmt.setString(++index, reg_id);
			stmt.setLong(++index, ct_id);
			int updateCount = stmt.executeUpdate();

			return updateCount;
		}
		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}







	/**
	 * 소산 여부
	 * @param ct_id 컨텐츠id
	 * @return updatecount
	 * @throws Exception 
	 */
	public int updateBackUpYNForCtId(UseInfoDO useInfoDO) throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.contents_loc_tbl set ");
		buf.append("\n 	BACKUP_ID=? ");
		//buf.append("\n 	,BACKUP_YN=? ");
		buf.append("\n 	,BACKUP_DT=? ");
		buf.append("\n where cti_id in (select cti_id from contents_inst_Tbl where ct_id = ? )");

		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateBackUpYNForCtId######## con : " + con);
			stmt = con.prepareStatement(buf.toString());
			String dateTime = CalendarUtil.getDateTime("yyyyMMddHHmmss");
			int index = 0;

			stmt.setString(++index, useInfoDO.getBackup_id());
			//stmt.setString(++index, "Y");
			stmt.setString(++index, dateTime);
			stmt.setLong(++index, useInfoDO.getCt_id());
			int updateCount = stmt.executeUpdate();

			return updateCount;
		}
		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}



	/**
	 * 복원 신청자 표기
	 * @param master_id 컨텐츠id
	 * @return updatecount
	 * @throws Exception 
	 */
	public int updateReCorverReqIdForCtId(long ct_id,String reg_id) throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.contents_loc_tbl set ");
		buf.append("\n 	recorver_id=? ");
		//buf.append("\n 	,regrid=? ");
		buf.append("\n where cti_id in (select cti_id from contents_inst_Tbl where ct_id = ? )");

		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateReCorverReqIdForCtId######## con : " + con);
			stmt = con.prepareStatement(buf.toString());
			String dateTime = CalendarUtil.getDateTime("yyyyMMddHHmmss");
			int index = 0;
			//	stmt.setString(++index, "복본 재생성 중입니다");

			stmt.setString(++index, reg_id);
			stmt.setLong(++index, ct_id);
			int updateCount = stmt.executeUpdate();

			return updateCount;
		}
		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}






	/**
	 * 기본적인 메타데이터(기본정보) 에 해당되는 데이터들을 가져온다(속도개선안 20120907)
	 * @param master_id
	 * @return
	 * @throws RemoteException
	 */
	public MetaDataInfo getBaseResult(long nMasterID) throws DASException
	{
		StringBuffer buf = new StringBuffer();
		StringBuffer strResult = new StringBuffer();

		buf.append("\n SELECT ");
		buf.append("\n   value(meta.master_ID, '') as META_MASTER_ID  ");
		buf.append("\n   , value(meta.PGM_ID, '') as META_PGM_ID  ");
		buf.append("\n   ,  case when meta.pgm_id !=0 then pgm.pgm_cd ");
		buf.append("\n  when meta.pgm_id =0 then value(meta.pgm_cd,'') ");
		buf.append("\n    else value(meta.pgm_cd,'') end as PGM_PGM_CD ");
		buf.append("\n    , CASE WHEN meta.ctgr_l_cd='100'  THEN Meta.TITLE   ");
		buf.append("\n   WHEN   meta.ctgr_l_cd='200' and  meta.pgm_id!=0  THEN pgm.PGM_NM ");
		buf.append("\n   ELSE meta.title   ");
		buf.append("\n   END AS PGM_PGM_NM ");
		buf.append("\n   ,  value(META.TITLE, '') as TITLE  ");
		buf.append("\n   ,  value(pgm.BRD_BGN_DD, '') as PGM_BRD_BGN_DD ");
		buf.append("\n   , value( pgm.BRD_END_DD, '') as PGM_BRD_END_DD ");
		buf.append("\n   ,  value(pgm.MEDIA_CD, '') as PGM_MEDIA_CD ");
		buf.append("\n   , value(meta.EPIS_NO,0) as META_EPIS_NO  ");
		buf.append("\n   ,  value(pgm.CHAN_CD, '') as PGM_CHAN_CD ");
		buf.append("\n   , value( pgm.PILOT_YN, '') as PGM_PILOT_YN  ");


		buf.append("\n   , value( meta.CTGR_L_CD, '') as META_CTGR_L_CD  ");
		buf.append("\n   , value( meta.CTGR_M_CD, '') as META_CTGR_M_CD  ");
		buf.append("\n   , value( meta.CTGR_S_CD, '') as META_CTGR_S_CD  ");
		buf.append("\n   ,value( meta.BRD_DD,'') AS META_BRD_DD   ");
		buf.append("\n   , value( meta.PDS_CMS_PGM_ID, '') as META_PDS_CMS_PGM_ID  ");
		buf.append("\n   , value( meta.FINAL_BRD_YN, '') as META_FINAL_BRD_YN  ");
		buf.append("\n   ,value(  meta.SNPS, '') as META_SNPS  ");
		buf.append("\n   , value( meta.KEY_WORDS, '') as META_KEY_WORDS  ");
		buf.append("\n   , value( meta.BRD_BGN_HMS, '') as META_BRD_BGN_HMS  ");
		buf.append("\n   , value( meta.BRD_END_HMS, '') as META_BRD_END_HMS  ");
		buf.append("\n   , value( meta.BRD_LENG, '') as META_BRD_LENG  ");
		buf.append("\n   , value( meta.PGM_RATE, '') as META_PGM_RATE  ");
		buf.append("\n   , value( meta.DRT_NM, '') as META_DRT_NM  ");
		buf.append("\n   , value( meta.PRODUCER_NM, '') as META_PRODUCER_NM  ");
		buf.append("\n   , value( meta.WRITER_NM, '') as META_WRITER_NM  ");
		buf.append("\n   , value( meta.PRDT_IN_OUTS_CD, '') as META_PRDT_IN_OUTS_CD  ");
		buf.append("\n   , value( meta.PRDT_DEPT_CD, '') as META_PRDT_DEPT_CD  ");
		buf.append("\n   , value( meta.PRDT_DEPT_NM, '') as META_PRDT_DEPT_NM  ");
		buf.append("\n   , value( meta.ORG_PRDR_NM, '') as META_ORG_PRDR_NM  ");
		buf.append("\n   , value( meta.MC_NM, '') as META_MC_NM  ");
		buf.append("\n   , value( meta.CAST_NM, '') as META_CAST_NM  ");
		buf.append("\n   , value( meta.CMR_DRT_NM, '') as META_CMR_DRT_NM  ");
		buf.append("\n   , value( meta.FM_DT, '') as META_FM_DT  ");
		buf.append("\n   , value( meta.CMR_PLACE, '') as META_CMR_PLACE  ");
		buf.append("\n   , value( meta.SPC_INFO, '') as META_SPC_INFO  ");
		buf.append("\n   , value( meta.REQ_CD, '') as META_REQ_CD  ");
		buf.append("\n   , value( user.USER_NM, '') as META_SEC_ARCH_NM  ");
		buf.append("\n   , value( meta.SEC_ARCH_ID, '') as META_SEC_ARCH_ID  ");
		buf.append("\n   , value( meta.GATH_CO_CD, '') as META_GATH_CO_CD  ");
		buf.append("\n   , value( meta.GATH_CLF_CD, '') as META_GATH_CLF_CD  ");
		buf.append("\n   , value( meta.ARCH_REG_DD, '') as META_ARCH_REG_DD  ");
		buf.append("\n   , value( meta.ARRG_END_DT, '') as META_ARRG_END_DT  ");
		buf.append("\n   , value( meta.WORK_PRIO_CD, '') as META_WORK_PRIO_CD  ");
		buf.append("\n   , value( meta.RSV_PRD_CD, '') as META_RSV_PRD_CD  ");
		buf.append("\n   , value( meta.CPRTR_NM, '') as META_CPRTR_NM  ");
		buf.append("\n   , value( meta.CPRT_TYPE, '') as META_CPRT_TYPE  ");
		buf.append("\n   , value( meta.CPRT_TYPE_DSC, '') as META_CPRT_TYPE_DSC  ");
		buf.append("\n   , value( meta.VIEW_GR_CD, '') as META_VIEW_GR_CD  ");
		buf.append("\n   , value( meta.DLBR_CD, '') as META_DLBR_CD  ");
		buf.append("\n   , value( meta.AWARD_HSTR, '') as META_AWARD_HSTR ");
		buf.append("\n   , value( meta.TAPE_ID, '') as META_TAPE_ID  ");
		buf.append("\n   , value( meta.TAPE_ITEM_ID, '') as META_TAPE_ITEM_ID  ");
		buf.append("\n   , value( meta.TAPE_MEDIA_CLF_CD, '') as META_TAPE_MEDIA_CLF_CD  ");
		buf.append("\n   , value( meta.RSV_PRD_END_DD, '') as META_RSV_PRD_END_DD  ");
		buf.append("\n   , value( meta.DEL_DD, '') as META_DEL_DD  ");
		buf.append("\n   , value( meta.USE_YN, '') as META_USE_YN  ");
		buf.append("\n   , value( meta.REG_DT, '') as META_REG_DT  ");
		buf.append("\n   , value( meta.MODRID, '') as META_MODRID  ");
		buf.append("\n   , value( meta.ARRG_END_DT, '') as META_MOD_DT  ");
		buf.append("\n   , value( meta.GATH_DEPT_CD, '') as META_GATH_DEPT_CD  ");
		buf.append("\n   , value( meta.MCUID, '') as META_MCUID  ");
		buf.append("\n   , value( meta.RPIMG_CT_ID, 0) as META_RPIMG_CT_ID  ");
		buf.append("\n   , value( meta.RPIMG_KFRM_SEQ, 0) as META_RPIMG_KFRM_SEQ  ");
		buf.append("\n   , value( meta.DATA_STAT_CD, '') as META_DATA_STAT_CD  ");
		buf.append("\n   , value( meta.ING_REG_DD, '') as META_ING_REG_DD  ");
		buf.append("\n   , value( meta.COPY_KEEP, '') as META_COPY_KEEP  ");
		buf.append("\n   ,value(  meta.CLEAN_KEEP, '') as META_CLEAN_KEEP  ");
		buf.append("\n   , value( meta.MUSIC_INFO, '') as META_MUSIC_INFO  ");
		buf.append("\n   , value( meta.RST_CONT, '') as META_RST_CONT  ");
		buf.append("\n   , value( meta.RERUN, '') as META_RERUN  ");
		buf.append("\n   , value( meta.ACCEPTOR_ID, '') as META_ACCEPTOR_ID  ");
		buf.append("\n   , value( meta.SUB_TTL , '') as META_SUB_TTL  ");
		buf.append("\n   , value( meta.PRDT_DEPT_CD , '') as META_PRDT_DEPT_CD ");
		buf.append("\n   , value(meta.ARRANGE_NM, '') as META_ARRANGE_NM  ");
		buf.append("\n   , value( erpuser.USER_NM, '') as META_ACCEPTOR_NM  ");
		buf.append("\n   , value(scenario.TITLE, '') AS META_SCENARIO_TITLE ");
		buf.append("\n   , value( INST.AUD_TYPE_CD, '') as META_AUD_TYPE_CD   ");
		buf.append("\n   , value( INST.RECORD_TYPE_CD, '') as META_RECORD_TYPE_CD  ");
		buf.append("\n   , value( INST.ME_CD, '') as META_ME_CD  ");
		buf.append("\n   , value( INST.COLOR_CD, '') as META_COLOR_CD  ");
		buf.append("\n   , value( CON.ASP_RTO_CD, '') AS META_ASP_RTO_CD ");
		buf.append("\n   , value( CON.VD_QLTY, '') AS META_VD_QLTY  ");
		buf.append("\n   , value( CON.MEDIA_ID, '') AS META_MEDIA_ID  ");


		buf.append("\n   , value( CON.DURATION, 0) AS META_DURATION  ");
		buf.append("\n   , value( CON.CT_TYP, '') AS META_CT_TYP   ");
		buf.append("\n   , value( CON.CT_CLA, '') AS META_CT_CLA  ");
		buf.append("\n   , value( INST.AUDIO_BDWT, '') AS META_AUDIO_BDWT  ");
		buf.append("\n   , value( INST.FRM_PER_SEC, '') AS META_FRM_PER_SEC ");
		buf.append("\n   , value( INST.AUD_SAMP_FRQ, '') AS META_AUD_SAMP_FRQ  ");
		buf.append("\n   , value( INST.BIT_RT, '') AS META_BIT_RT  ");

		buf.append("\n   , value( INST.VD_HRESOL ||'*'||VD_VRESOL , '') AS META_HRESOL  ");
		buf.append("\n   , value( INST.VD_HRESOL , 0) AS META_VD_HRESOL  ");
		buf.append("\n   , value( INST.VD_VRESOL , 0) AS META_VD_VRESOL  ");
		buf.append("\n   , value( INST.CT_ID , 0) AS META_CT_ID  ");
		buf.append("\n   , value( PRE.PREVIEW_SUBJ , '') AS META_PREVIEW_SUBJ ");
		buf.append("\n   , value( meta.REGRID, '') as META_ARCHIVE_REQID  ");
		buf.append("\n   , value( INST.INGEST_EQ_ID, 0) as META_INGEST_EQ_ID  ");

		//2012.4.30 추가
		buf.append("\n   , value( meta.artist, '') as META_ARTIST  ");
		buf.append("\n   , value( meta.country_cd, '') as META_COUNTRY_CD ");
		buf.append("\n   , value( meta.chennel_cd, '') as META_CHENNEL_CD ");
		buf.append("\n   , value( meta.cocd, '') as META_COCD ");
		buf.append("\n   , value( meta.RIST_CLF_CD, '') as META_RIST_CLF_CD ");
		buf.append("\n   , value( annot.ANNOT_CLF_CONT, '') as META_RIST_CLF_Cont");
		/*buf.append("\n    , CASE WHEN ((INST.ARCH_STE_YN = 'Y' and INST.DTL_YN='N') OR  (INST.ARCH_STE_YN = 'N'and INST.DTL_YN='N'))  THEN  '스토리지' ");
		buf.append("\n    WHEN  INST.ARCH_STE_YN='Y' AND  INST.DTL_YN='Y'  THEN 'DTL'  ");
		buf.append("\n   ELSE ''  ");
		buf.append("\n   END AS META_STORAGE  ");
		buf.append("\n   from das.metadat_mst_tbl meta  ");*/
		buf.append("\n    , ( DECODE((  SELECT SUB_CIT.FL_PATH FROM METADAT_MST_TBL SUB_MMT ");
		buf.append("\n    INNER JOIN CORNER_TBL SUB_CNT ON SUB_MMT.MASTER_ID = SUB_CNT.MASTER_ID  ");
		buf.append("\n   INNER JOIN CONTENTS_MAPP_TBL SUB_CMT ON SUB_CNT.MASTER_ID = SUB_CMT.MASTER_ID AND SUB_CMT.MASTER_ID = SUB_MMT.MASTER_ID   ");
		buf.append("\n  INNER JOIN CONTENTS_TBL SUB_CT ON SUB_CT.CT_ID = SUB_CMT.CT_ID AND SUB_CT.CT_TYP ='003'   ");
		buf.append("\n  INNER JOIN CONTENTS_INST_TBL SUB_CIT ON SUB_CIT.CT_ID = SUB_CMT.CT_ID AND SUB_CIT.CTI_FMT LIKE '1%'  ");
		buf.append("\n  WHERE SUB_MMT.MASTER_ID = ?  ");
		buf.append("\n  FETCH FIRST 1 ROWS ONLY  ");
		buf.append("\n  ),'','DTL','스토리지')) AS META_STORAGE ");

		buf.append("\n   from das.metadat_mst_tbl meta  ");
		buf.append("\n     left outer join das.PGM_INFO_TBL pgm on meta.pgm_ID = pgm.pgm_id  ");
		buf.append("\n      left outer join DAS.USER_INFO_TBL erpuser on meta.acceptor_ID = erpuser.SBS_USER_ID    ");
		buf.append("\n      left outer join DAS.USER_INFO_TBL user on  meta.SEC_ARCH_ID = user.SBS_USER_ID    ");

		buf.append("\n     left outer join DAS.SCENARIO_TBL scenario ON META.MASTER_ID = scenario.MASTER_ID ");
		buf.append("\n     left outer join (SELECT MASTER_ID,CT_ID FROM DAS.CONTENTS_MAPP_TBL where master_id = ? GROUP BY MASTER_ID,CT_ID) MAP ON  MAP.MASTER_ID=META.MASTER_ID   ");
		buf.append("\n     left outer join DAS.CONTENTS_INST_TBL INST  ON INST.CT_ID= MAP.CT_ID  and inst.cti_fmt like '1%' ");
		buf.append("\n     LEFT OUTER JOIN DAS.CONTENTS_TBL CON ON CON.CT_ID = MAP.CT_ID  and con.ct_id =  meta.rpimg_ct_id    AND con.CT_TYP = '003' ");
		buf.append("\n    LEFT OUTER JOIN das.PREVIEW_TBL PRE ON PRE.MASTER_ID=META.MASTER_ID ");
		buf.append("\n    LEFT OUTER JOIN das.annot_info_tbl annot ON annot.MASTER_ID=META.MASTER_ID  ");

		buf.append("\n   where meta.MASTER_ID = ?  ");
		buf.append("\n    order by con.MEDIA_ID asc  ");
		buf.append("\n   fetch first 1 rows only ");
		buf.append("\n   WITH UR ");		

		Connection con = null;		
		PreparedStatement psmt = null;		
		ResultSet rs = null;

		try
		{

			con = DBService.getInstance().getConnection();
			//logger.debug("query : " + buf.toString());
			psmt = con.prepareStatement(buf.toString());    
			int index = 0;			
			psmt.setLong(++index, nMasterID);
			psmt.setLong(++index, nMasterID);
			psmt.setLong(++index, nMasterID);
			rs = psmt.executeQuery();	
			//List resultList  = new ArrayList();
			MetaDataInfo item = new MetaDataInfo();
			if (rs.next())
			{	

				long nCurMasterID = rs.getLong("META_MASTER_ID");
				item.setMasterId(nCurMasterID);
				item.setPgmId(rs.getLong("META_PGM_ID"));
				item.setPgmCd(rs.getString("PGM_PGM_CD"));
				item.setPgmNm(rs.getString("PGM_PGM_NM"));
				item.setPgmBrdBgnDd(rs.getString("PGM_BRD_BGN_DD").trim());
				item.setPgmBrdEndDd(rs.getString("PGM_BRD_END_DD").trim());
				item.setPgmMediaCd(rs.getString("PGM_MEDIA_CD"));
				if(rs.getLong("META_EPIS_NO")!=0){
					item.setEpisNo(rs.getString("META_EPIS_NO"));
				}else {
					item.setEpisNo("");

				}
				item.setPgmChanCd(rs.getString("PGM_CHAN_CD").trim());
				item.setPgmPilotYn(rs.getString("PGM_PILOT_YN"));
				item.setTitle(rs.getString("TITLE"));
				item.setCtgrLCd(rs.getString("META_CTGR_L_CD"));
				item.setCtgrMCd(rs.getString("META_CTGR_M_CD"));
				item.setCtgrSCd(rs.getString("META_CTGR_S_CD"));
				item.setBrdDd(rs.getString("META_BRD_DD"));
				item.setFinalBrdYn(rs.getString("META_FINAL_BRD_YN"));
				item.setSnps(rs.getString("META_SNPS"));
				item.setKeyWords(rs.getString("META_KEY_WORDS"));
				item.setBrdBgnHms(rs.getString("META_BRD_BGN_HMS").trim());
				item.setBrdEndHms(rs.getString("META_BRD_END_HMS").trim());
				item.setBrdLeng(rs.getString("META_BRD_LENG").trim());
				item.setPgmRate(rs.getString("META_PGM_RATE"));
				item.setDrtNm(rs.getString("META_DRT_NM"));
				item.setProducerNm(rs.getString("META_PRODUCER_NM"));
				item.setWriterNm(rs.getString("META_WRITER_NM"));
				item.setPrdtInOutsCd(rs.getString("META_PRDT_IN_OUTS_CD"));
				item.setPrdtDeptCd(rs.getString("META_PRDT_DEPT_CD"));
				item.setPrdtDeptNm(rs.getString("META_PRDT_DEPT_NM"));
				item.setOrgPrdrNm(rs.getString("META_ORG_PRDR_NM"));
				item.setMcNm(rs.getString("META_MC_NM"));
				item.setCastNm( rs.getString("META_CAST_NM"));
				item.setCmrDrtNm(rs.getString("META_CMR_DRT_NM"));
				item.setFmDt(rs.getString("META_FM_DT"));
				item.setCmrPlace(rs.getString("META_CMR_PLACE"));
				item.setSpcInfo(rs.getString("META_SPC_INFO"));
				item.setReqCd(rs.getString("META_REQ_CD"));
				item.setSecArchNm(rs.getString("META_SEC_ARCH_NM"));
				item.setSecArchId(rs.getString("META_SEC_ARCH_ID"));
				item.setGathCoCd(rs.getString("META_GATH_CO_CD"));
				item.setGathClfCd(rs.getString("META_GATH_CLF_CD").trim());
				item.setArchRegDd(rs.getString("META_ARCH_REG_DD").trim());
				item.setArrgEndDt(rs.getString("META_ARRG_END_DT").trim());
				item.setWorkPrioCd(rs.getString("META_WORK_PRIO_CD"));
				item.setRsvPrdCd(rs.getString("META_RSV_PRD_CD"));
				item.setCprtrNm(rs.getString("META_CPRTR_NM"));
				item.setCprtType(rs.getString("META_CPRT_TYPE"));
				item.setCprtTypeDsc(rs.getString("META_CPRT_TYPE_DSC"));
				item.setViewGrCd(rs.getString("META_VIEW_GR_CD"));
				item.setDlbrCd(rs.getString("META_DLBR_CD"));
				item.setAwardHstr(rs.getString("META_AWARD_HSTR"));
				item.setTapeId(rs.getString("META_TAPE_ID").trim());
				item.setTapeItemId(rs.getString("META_TAPE_ITEM_ID").trim());
				item.setTapeMediaClfCd(rs.getString("META_TAPE_MEDIA_CLF_CD"));
				item.setRsvPrdEndDd(rs.getString("META_RSV_PRD_END_DD").trim());
				item.setDelDd(rs.getString("META_DEL_DD").trim());
				item.setUseYn(rs.getString("META_USE_YN"));
				item.setRegDt(rs.getString("META_REG_DT"));
				item.setModrid(rs.getString("META_MODRID"));
				item.setModDt(rs.getString("META_MOD_DT"));
				item.setGathDeptCd(rs.getString("META_GATH_DEPT_CD"));
				item.setMcuid(rs.getString("META_MCUID"));
				item.setRpimgCtId(rs.getLong("META_RPIMG_CT_ID"));
				item.setRpimgKfrmSeq(rs.getInt("META_RPIMG_KFRM_SEQ"));
				item.setDataStatCd(rs.getString("META_DATA_STAT_CD"));
				item.setIngRegDd(rs.getString("META_ING_REG_DD"));
				item.setCopyKeep(rs.getString("META_COPY_KEEP").trim());
				item.setCleanKeep(rs.getString("META_CLEAN_KEEP").trim());
				item.setMusicInfo(rs.getString("META_MUSIC_INFO"));
				item.setRstCont(rs.getString("META_RST_CONT"));
				item.setRerun(rs.getString("META_RERUN"));
				item.setAcceptorId(rs.getString("META_ACCEPTOR_ID"));
				item.setSubTtl(rs.getString("META_SUB_TTL"));
				item.setArrangeNm(rs.getString("META_ARRANGE_NM"));
				item.setAcceptorNm(rs.getString("META_ACCEPTOR_NM"));
				item.setScenarioTitle(rs.getString("META_SCENARIO_TITLE"));
				item.setPrdtDeptCd(rs.getString("META_PRDT_DEPT_CD"));
				item.setAud_type_cd(rs.getString("META_AUD_TYPE_CD"));
				item.setRecordTypeCd(rs.getString("META_RECORD_TYPE_CD").trim());
				item.setColorCd(rs.getString("META_COLOR_CD").trim());
				item.setMeCd(rs.getString("META_ME_CD"));
				item.setAspRtoCd(rs.getString("META_ASP_RTO_CD"));
				item.setVdQlty(rs.getString("META_VD_QLTY"));
				item.setDuration(rs.getString("META_DURATION"));
				item.setCtTyp(rs.getString("META_CT_TYP"));
				item.setCtCla(rs.getString("META_CT_CLA"));
				item.setAudioBdwt(rs.getString("META_AUDIO_BDWT"));
				item.setFrmPerSec(rs.getString("META_FRM_PER_SEC"));
				item.setAudSampFrq(rs.getString("META_AUD_SAMP_FRQ"));
				item.setBitRt(rs.getString("META_BIT_RT"));
				item.setHresol(rs.getString("META_HRESOL"));
				item.setVdHresol(rs.getString("META_VD_HRESOL"));
				item.setVdVresol(rs.getString("META_VD_VRESOL"));
				item.setPreviewSubj(rs.getString("META_PREVIEW_SUBJ"));
				item.setArchiveReqId(rs.getString("META_ARCHIVE_REQID"));
				item.setIngestEqId(rs.getInt("META_INGEST_EQ_ID"));
				item.setPdsCmsPgmId(rs.getString("META_PDS_CMS_PGM_ID").trim());
				item.setCtId(rs.getLong("META_CT_ID"));
				item.setStorage(rs.getString("META_STORAGE"));
				item.setArtist(rs.getString("META_ARTIST"));
				item.setCountryCd(rs.getString("META_COUNTRY_CD"));
				item.setChennelCd(rs.getString("META_CHENNEL_CD"));
				item.setCocd(rs.getString("META_COCD"));
				item.setAnnotClfCd(rs.getString("META_RIST_CLF_CD"));
				item.setAnnotClfDesc(rs.getString("META_RIST_CLF_Cont"));
				item.setMediaId(rs.getString("META_MEDIA_ID"));

				//resultList.add(item);
			}	//if (rs.next())
			long rMasterID = 0;

			return item;
		}
		catch (Exception ex)
		{
			logger.error(buf.toString());
			logger.error(ex);
			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "getMetaResultXML 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, con);
		}        
	}



	/**
	 * getbaseinfo에서 조회시 인제스트 정보에 해당하는 메타데이터를 조회한다(성능향샹 20120907)
	 * @param nMasterID 마스터id
	 * @return xml
	 */
	public Ingest getIngestMetaResult(long nMasterID) throws DASException
	{
		StringBuffer buf = new StringBuffer();
		StringBuffer strResult = new StringBuffer();

		buf.append("SELECT   ");
		buf.append("\n   CON.CT_ID AS META_CT_ID  ");	
		buf.append("\n   ,inst.CTI_ID AS META_CTI_ID  ");
		buf.append("\n   ,CODE2.DESC  AS META_CT_NM ");	
		buf.append("\n   ,CON.CT_LENG  AS META_CT_LENG  ");
		buf.append("\n   ,CON.REG_DT AS META_REG_DT  ");
		buf.append("\n   ,(select fl_sz from contents_inst_tbl inst where con.ct_id=inst.ct_id and cti_fmt like '10%') as META_M2_SZ ");
		buf.append("\n   ,value((select fl_sz from contents_inst_tbl inst where con.ct_id=inst.ct_id and cti_fmt like '30%' order by cti_id desc fetch first 1 rows only),0) as META_M4_SZ    ");
		buf.append("\n   ,INST.INGEST_EQ_ID AS META_INGEST_EQ_ID ");
		buf.append("\n   ,INST.VD_HRESOL AS META_VD_HRESOL ");
		buf.append("\n   ,INST.VD_VRESOL AS META_VD_VRESOL ");
		buf.append("\n   ,INST.BIT_RT AS META_BIT_RT ");
		buf.append("\n   ,INST.FRM_PER_SEC AS META_FRM_PER_SEC ");
		buf.append("\n   ,INST.AUD_SAMP_FRQ AS META_AUD_SAMP_FRQ ");
		buf.append("\n   ,INST.AUDIO_BDWT AS META_AUDIO_BDWT ");
		buf.append("\n   ,CON.TOT_KFRM_NUMS AS META_TOT_KFRM_NUMS ");
		buf.append("\n   ,CODE.DESC AS META_CT_CLA ");
		buf.append("\n   ,map.del_dd AS META_DEL_DD ");
		buf.append("\n   FROM CONTENTS_TBL CON ");
		buf.append("\n  inner join (select master_id, ct_id ,del_dd,del_yn from  CONTENTS_MAPP_TBL group by master_id, ct_id,del_dd,del_yn) map on map.ct_id =con.ct_id ");		
		buf.append("\n  INNER JOIN METADAT_MST_TBL MST ON MST.MASTER_ID=MAP.MASTER_ID  ");
		buf.append("\n   INNER JOIN CONTENTS_INST_TBL INST ON INST.CT_ID=CON.CT_ID and inst.CTI_FMT like '1%' ");
		buf.append("\n   LEFT OUTER JOIN CODE_TBL CODE ON CODE.SCL_CD = CON.CT_CLA AND CODE.CLF_CD='A001' ");
		buf.append("\n   LEFT OUTER JOIN CODE_TBL CODE2 ON CODE2.SCL_CD = CON.CT_TYP AND CODE2.CLF_CD='A002' ");
		buf.append("\n   WHERE MST.MASTER_ID= ?   	   ");

		buf.append("\n   and  map.del_yn <>'Y'   ");
		//buf.append("\n   order by   CODE2.rmk_2 asc , con.ct_seq asc	   ");
		//getscenainfo와 조회조건을 동일하게 함 201211211 by asura207
		buf.append("\n    order by   code2.rmk_2 asc,CON.ct_id asc, CON.ct_seq asc, CON.CT_LENG ASC 	   ");

		buf.append("\n   WITH UR ");

		Connection con = null;		
		PreparedStatement psmt = null;		
		ResultSet rs = null;

		try
		{


			con = DBService.getInstance().getConnection();
			//logger.debug("######getIngestMetaResult######## con : " + con);
			psmt = con.prepareStatement(buf.toString()); 

			int index = 0;			
			psmt.setLong(++index, nMasterID);
			rs = psmt.executeQuery();
			int i=0;
			Ingest ingest = new Ingest();
			while (rs.next())
			{		
				IngestInfo ingestInfo = new IngestInfo();
				i++;
				logger.debug(i);
				logger.debug("META_CT_ID  " + rs.getLong("META_CT_ID"));
				logger.debug("META_CTI_ID  " + rs.getLong("META_CTI_ID"));
				logger.debug("META_M2_SZ  " + rs.getString("META_M2_SZ"));
				logger.debug("META_M4_SZ  " + rs.getString("META_M4_SZ"));
				logger.debug("META_VD_HRESOL  " + rs.getInt("META_VD_HRESOL"));
				logger.debug("META_VD_VRESOL  " + rs.getInt("META_VD_VRESOL"));
				logger.debug("META_INGEST_EQ_ID  " + rs.getInt("META_INGEST_EQ_ID"));
				logger.debug("META_TOT_KFRM_NUMS   " + rs.getInt("META_TOT_KFRM_NUMS"));
				logger.debug("");

				ingestInfo.setCtId(rs.getLong("META_CT_ID"));
				ingestInfo.setCtiId(rs.getLong("META_CTI_ID"));
				ingestInfo.setCtNm(rs.getString("META_CT_NM"));
				ingestInfo.setCtLeng(rs.getString("META_CT_LENG"));
				ingestInfo.setRegDt(rs.getString("META_REG_DT"));
				//20121005 -- 8비트 로 변환 
				ingestInfo.setM2Sz(Long.parseLong(rs.getString("META_M2_SZ"))*8);
				ingestInfo.setM4Sz(Long.parseLong(rs.getString("META_M4_SZ"))*8);
				ingestInfo.setIngestEqId(rs.getString("META_INGEST_EQ_ID"));
				ingestInfo.setVdHresol(rs.getInt("META_VD_HRESOL"));
				ingestInfo.setVdVresol(rs.getInt("META_VD_VRESOL"));
				ingestInfo.setBitRt(rs.getString("META_BIT_RT"));
				ingestInfo.setFrmPerSec(rs.getString("META_FRM_PER_SEC"));
				ingestInfo.setIngestEqId(String.valueOf(rs.getInt("META_INGEST_EQ_ID")));
				ingestInfo.setAudSampFrq(rs.getString("META_AUD_SAMP_FRQ"));
				ingestInfo.setTotKfrmNums(rs.getInt("META_TOT_KFRM_NUMS"));
				ingestInfo.setAudioBdwt(rs.getString("META_AUDIO_BDWT"));
				ingestInfo.setCtCla(rs.getString("META_CT_CLA"));
				ingestInfo.setDelDd(rs.getString("META_DEL_DD").trim());

				ingest.addItem(ingestInfo);

			}	


			release(rs, psmt, con);
			return ingest;
		}
		catch (Exception ex)
		{
			logger.error(buf.toString());
			logger.error(ex);
			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "getMetaResultXML 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, con);
		}        
	}


	/**
	 * 해당 master_id 기준으로 연계되어있는 다른 master_id의 메타정보를 불러온다(기능개선 20120907)
	 * @param nMasterID 마스터id
	 * @return String xml
	 * @throws RemoteException
	 */
	public Relation getRelationMetaResult(long nMasterID) throws DASException
	{
		StringBuffer buf = new StringBuffer();
		StringBuffer strResult = new StringBuffer();

		buf.append("SELECT DISTINCT ");
		buf.append("\n   meta.master_ID as REL_MASTER_ID  ");	
		buf.append("\n   , meta.BRD_DD as REL_BRD_DD  ");	
		buf.append("\n   , meta.REQ_CD as REL_REQ_CD  ");
		buf.append("\n   , meta.BRD_LENG as REL_BRD_LENG  ");
		buf.append("\n   , meta.SUB_TTL as REL_SUB_TTL  ");
		buf.append("\n   ,  CON.ASP_RTO_CD as REL_ASP_RTO_CD  ");
		buf.append("\n   ,  CON.vd_qlty as REL_VD_QLTY  ");

		buf.append("\n   FROM METADAT_MST_TBL meta  ");
		buf.append("\n   inner join contents_mapp_tbl map on map.MASTER_ID=meta.MASTER_ID ");
		buf.append("\n   inner join CONTENTS_TBL CON ON CON.CT_ID=map.CT_ID ");

		buf.append("\n   WHERE meta.master_ID=  ? ");

		buf.append("\n   WITH UR ");

		Connection con = null;		
		PreparedStatement psmt = null;		
		ResultSet rs = null;

		try
		{

			con = DBService.getInstance().getConnection();
			//logger.debug("######getRelationMetaResult######## con : " + con);
			psmt = con.prepareStatement(buf.toString());    
			int index = 0;			
			psmt.setLong(++index, nMasterID);
			rs = psmt.executeQuery();
			Relation relation = new Relation();	
			if (rs.next())
			{		
				long nCurMasterID = rs.getLong("REL_MASTER_ID");
				relation.setMasterId(nCurMasterID);
				relation.setBrdDd(rs.getString("REL_BRD_DD"));
				relation.setReqCd(rs.getString("REL_REQ_CD"));
				relation.setBrdLeng(rs.getString("REL_BRD_LENG"));
				relation.setSubTtl(rs.getString("REL_SUB_TTL"));
				relation.setAspRtoCd(rs.getString("REL_ASP_RTO_CD"));
				relation.setVdQlty(rs.getString("REL_VD_QLTY"));


			}	

			return relation;
		}
		catch (Exception ex)
		{
			logger.error(buf.toString());

			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "getMetaResultXML 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, con);
		}        
	}




	/**
	 * getbaseinfo 조회시 첨부파일 정보를 조회한다.성능개성 20120907
	 * @param master_id
	 * @return
	 * @throws RemoteException
	 */
	public Attach getAttachResult(long nMasterID) throws DASException
	{
		StringBuffer buf = new StringBuffer();
		StringBuffer strResult = new StringBuffer();

		buf.append("\n select  ");
		buf.append("\n attch.FL_NM,  ");
		buf.append("\n code.DESC,  ");
		buf.append("\n attch.FL_SZ,  ");
		buf.append("\n attch.FL_PATH,  ");
		buf.append("\n attch.SEQ,  ");
		buf.append("\n attch.ATTC_FILE_TYPE_CD,  ");
		buf.append("\n attch.ATTC_CLF_CD,  ");
		buf.append("\n attch.ORG_FILE_NM,  ");
		buf.append("\n  value(code.desc,'') as CAPTION_TYPE_NM , ");
		buf.append("\n attch.CAPTION_TYPE   ");
		buf.append("\n from das.ATTCH_TBL attch ");
		buf.append("\n LEFT OUTER JOIN das.CODE_TBL code  ON  code.CLF_CD='P015' and code.SCL_CD=attch.ATTC_FILE_TYPE_CD    ");
		//buf.append("\n LEFT OUTER JOIN das.CODE_TBL code2  ON  code2.CLF_CD='A056' and code2.SCL_CD=attch.CAPTION_TYPE  ");
		buf.append("\n where attch.MOTHR_DATA_ID= ?  ");

		buf.append("\n order by attch.SEQ asc with ur ");

		Connection con = null;
		PreparedStatement psmt = null;
		ResultSet rs = null;

		try
		{	
			con = DBService.getInstance().getConnection();
			//logger.debug("######getAttachResult######## con : " + con);
			psmt = con.prepareStatement(buf.toString());    
			int index = 0;			
			psmt.setLong(++index, nMasterID);
			rs = psmt.executeQuery();
			Attach attach = new Attach();
			while (rs.next())
			{

				AttachItem item = new AttachItem();
				item.setFlNm(rs.getString("FL_NM"));
				item.setDesc(rs.getString("DESC"));
				item.setFlSz(rs.getLong("FL_SZ"));
				item.setFlPath(rs.getString("FL_PATH")+"/");
				item.setSeq(Long.parseLong(String.valueOf(rs.getInt("SEQ"))));
				item.setAttcFileType(rs.getString("ATTC_FILE_TYPE_CD"));
				item.setAttcClfCd(rs.getString("ATTC_CLF_CD"));
				item.setOrgFileNm(rs.getString("ORG_FILE_NM"));
				item.setCaptionType( rs.getString("CAPTION_TYPE"));
				item.setCaptionTypeNm( rs.getString("CAPTION_TYPE_NM"));
				attach.addItem(item);
			}	//while (rs.next()) 

			return attach;
		}

		catch (Exception ex)
		{
			logger.error(buf.toString());

			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "getAttachResultXML 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, con);
		}        
	}

	/**
	 * 사용등급, 주제영상 정보를 조회한다(성능개선 20120907)
	 * @param nMasterID  마스터id
	 * @return xml
	 * @throws RemoteException
	 */
	public Annot getAnnotInfo(long nMasterID) throws DASException
	{
		StringBuffer buf = new StringBuffer();
		StringBuffer strResult = new StringBuffer();

		buf.append("\n select  ");
		buf.append("\n  value (code.DESC, '') AS ANNOT_CLF_NM, ");
		buf.append("\n value (annot.ANNOT_CLF_CONT, '') AS ANNOT_CONT   ");
		buf.append("\n from annot_info_tbl annot  ");
		buf.append("\n inner join CODE_TBL code on code.clf_cd='P018' and code.SCL_CD = annot.ANNOT_CLF_CD and code.GUBUN = 'L' ");
		buf.append("\n where annot.master_id= ? ");
		buf.append("\n and annot.ANNOT_CLF_cd <> '007' ");

		Connection con = null;

		PreparedStatement psmt = null;

		ResultSet rs = null;

		try
		{	
			con = DBService.getInstance().getConnection();
			//logger.debug("######getAnnotInfo######## con : " + con);
			psmt = con.prepareStatement(buf.toString());    
			int index = 0;			
			psmt.setLong(++index, nMasterID);
			rs = psmt.executeQuery();	
			String annot_nm ="00";
			String annot_cont ="00";
			String newannot_nm ="00";
			String newannot_cont ="00";
			Annot annot = new Annot();
			while (rs.next())
			{
				AnnotInfo annotInfo = new AnnotInfo();
				newannot_nm = rs.getString("ANNOT_CLF_NM").trim();
				newannot_cont = rs.getString("ANNOT_CONT").trim();

				if(!newannot_nm.equals(annot_nm)||!annot_cont.equals(newannot_cont)){
					annotInfo.setAnnotClfNm(rs.getString("ANNOT_CLF_NM"));
					annotInfo.setAnnotClfCont(rs.getString("ANNOT_CONT"));
					annot.addAnnotInfo(annotInfo);

				}

				annot_nm = rs.getString("ANNOT_CLF_NM").trim();
				annot_cont = rs.getString("ANNOT_CONT").trim();

			}	//while (rs.next()) 

			return annot;
		}
		catch (Exception ex)
		{
			logger.error(buf.toString());

			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "getAttachResultXML 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, con);
		}        
	}






	/**
	 * 화면정보를 조회한다.(성능개선)
	 * @param master_id
	 * @return
	 * @throws RemoteException
	 */
	public String getSceanInfo2(long master_id) throws DASException
	{	
		StringBuffer strResultBuffer = new StringBuffer();

		long nMasterID = 0;

		XmlConvertorService<Das> convertorService = new XmlConvertorServiceImpl<Das>();

		Das das = new Das();

		Corner corner = this.getCornerResult(master_id);
		das.setCorner(corner);
		String xml = "";
		try {
			xml = convertorService.createMarshaller(das);
		} catch (JAXBException e) {
			logger.error("getBaseInfo Xml Create Error", e);
		}

		return xml;


	}





	// 코너 정보를 가져온다.
	private Corner getCornerResult(long nMasterID) throws DASException
	{
		StringBuffer buf = new StringBuffer();
		StringBuffer strResult = new StringBuffer();

		buf.append("\n select ");
		buf.append("\n 	value(CN.CN_ID, '')as cn_id ");	
		buf.append("\n 	,case when cn.cn_nm <>'' then CN.CN_NM ");	
		buf.append("\n 	 when cn.CN_NM is null or cn.CN_NM=''  and ct_typ<>'003'  then ct.CT_NM ");	
		buf.append("\n 	 else cn.CN_NM ");	
		buf.append("\n 	 end as CN_NM ");	
		buf.append("\n 	,value(CN.RPIMG_KFRM_SEQ, 0) as RPIMG_KFRM_SEQ, value(CN.SOM, '') as SOM, value(CN.EOM, '') as EOM, '' as CN_TYPE_CD, value(CN.RPIMG_CT_ID, '')as RPIMG_CT_ID, value(CN.CN_INFO, '')as CN_INFO");	

		buf.append("\n 	, value(CT.CT_ID, '')as CT_ID, value(CODE.DESC, '')as CT_NM, value(CT.REG_DT, '')as REG_DT, value(CT.CT_LENG, '')as CT_LENG, value(CT.DURATION, 0)as DURATION, value(CT.CT_SEQ, 0)as CT_SEQ, value(CT.KFRM_PATH, '')as KFRM_PATH");
		buf.append("\n 	, value(CT.KFRM_PX_CD, '')as KFRM_PX_CD, value(CT.VD_QLTY, '')as VD_QLTY, value(CT.ASP_RTO_CD, '')as ASP_RTO_CD, value(CT.CONT, '')as CONT ,value(CT.CT_CLA, '')as CT_CLA,value(CT.TOT_KFRM_NUMS, 0)as TOT_KFRM_NUMS,value(CT.MEDIA_ID, '')as MEDIA_ID");
		buf.append(" \n	, value(CTI.INGEST_EQ_ID, 0)as INGEST_EQ_ID, value(CTI.FL_PATH, '')as FL_PATH, value(CTI.WRK_FILE_NM, '')as WRK_FILE_NM, value(CTI.CTI_FMT, '')as CTI_FMT, value(CTI.FL_SZ, '')as FL_SZ, value(CTI.CTI_ID, '')as CTI_ID ");
		buf.append(" \n	,  value(CTI.ARCH_STE_YN, '')as ARCH_STE_YN, value(CTI.VD_HRESOL, 0)as VD_HRESOL, value(CTI.VD_VRESOL, 0)as VD_VRESOL, value(CTI.BIT_RT, '')as BIT_RT, value(CTI.FRM_PER_SEC, '')as FRM_PER_SEC, value(CTI.AUD_SAMP_FRQ, '')as AUD_SAMP_FRQ ");
		buf.append("\n 	,  value(CTI.AUDIO_BDWT, '')as AUDIO_BDWT ");
		buf.append("\n	, MAP.S_DURATION, MAP.E_DURATION ");
		buf.append("\n , meta.rpimg_ct_id as meta_rpimg_ct_id , meta.rpimg_kfrm_seq as meta_rpimg_kfrm_seq ");
		buf.append("\n 	,  value(ct.entire_yn, '')as ENTIRE_YN ");
		buf.append("\n 	,  value(ct.rist_clf_cd, '')as ENTIRE_RIST_CLF_CD ");


		buf.append("\n from DAS.CONTENTS_TBL CT, DAS.CONTENTS_MAPP_TBL MAP, CONTENTS_INST_TBL CTI, ");
		buf.append("\n 	DAS.METADAT_MST_TBL META, DAS.CORNER_TBL CN , das.code_tbl code");


		buf.append("\n where  ");
		buf.append(" \n	CT.CT_ID = CTI.CT_ID and META.MASTER_ID = MAP.MASTER_ID ");
		buf.append(" \n	and CN.CN_ID = MAP.CN_ID ");
		buf.append("\n 	and MAP.CT_ID = CTI.CT_ID and META.MASTER_ID = ? ");
		//buf.append("\n 	and (MAP.del_dd is null or MAP.del_dd = '')   ");
		buf.append("\n 	and map.CT_ID = cti.CT_ID   ");
		buf.append("\n 	 AND CODE.SCL_CD = CT.CT_TYP     ");
		buf.append("\n  AND CODE.CLF_CD='P016'     ");
		buf.append("\n 	and cti.cti_fmt like '30%'  ");
		buf.append("\n   and  map.del_yn <>'Y'   ");
		buf.append("\n  order by code.rmk_2 asc,ct.ct_id asc, ct.ct_seq asc, cn.som asc ,CT.CT_LENG ASC ");
		buf.append("\n with ur");

		Connection con = null;

		PreparedStatement psmt = null;
		PreparedStatement psmt_annot = null;

		ResultSet rs = null;
		ResultSet rs_annot = null;


		try
		{
			Corner corner = new Corner();
			long nOldCN_ID = 0;        	

			con = DBService.getInstance().getConnection();
			//logger.debug("######getCornerResult######## con : " + con);
			psmt = con.prepareStatement(buf.toString());    
			int index = 0;			
			psmt.setLong(++index, nMasterID);
			rs = psmt.executeQuery();	
			String gubun="";
			long gcn_id =0L;
			while(rs.next())
			{		
				CornerItem item = new CornerItem();
				long nCN_ID = rs.getLong("CN_ID");
				item.setCnId(nCN_ID);
				item.setCnNm(rs.getString("CN_NM"));
				item.setRpimgKfrmSeq(rs.getInt("RPIMG_KFRM_SEQ"));
				item.setSom(rs.getString("SOM"));
				item.setEom(rs.getString("EOM"));
				item.setCnTypeCd(rs.getString("CN_TYPE_CD"));
				item.setRpimgCtId(rs.getLong("RPIMG_CT_ID"));
				item.setMetaRpimgKfrmSeq(rs.getLong("META_RPIMG_KFRM_SEQ"));
				item.setMetaRpimgCtId(rs.getLong("META_RPIMG_CT_ID"));

				// 2015-10-12 Das Client에서 info 내용 끝부분에 공백이 있으면 오류가 발생함.
				String cnInfo = rs.getString("CN_INFO");
				item.setCnInfo(cnInfo == null ? "" : cnInfo.trim());
				item.setCtId(rs.getLong("CT_ID"));
				item.setCtNm(rs.getString("CT_NM"));
				item.setRegDt(rs.getString("REG_DT"));
				item.setCtLeng(rs.getString("CT_LENG"));
				item.setDuration(String.valueOf(rs.getLong("DURATION")));
				item.setCtSeq(rs.getInt("CT_SEQ"));
				item.setKfrmPath(rs.getString("KFRM_PATH"));
				item.setKfrmPxCd(rs.getString("KFRM_PX_CD"));
				item.setVdQlty(rs.getString("VD_QLTY"));
				item.setAspRtoCd(rs.getString("ASP_RTO_CD"));
				item.setCtCla(rs.getString("CT_CLA"));
				item.setTotKfrmNums(rs.getInt("TOT_KFRM_NUMS"));
				item.setMediaId(rs.getString("MEDIA_ID"));

				// 2015-10-12 Das Client에서 info 내용 끝부분에 공백이 있으면 오류가 발생함.
				String conf = rs.getString("CONT");
				item.setCont(conf == null ? "" : conf.trim());
				item.setCtiId(rs.getLong("CTI_ID"));
				item.setIngestEqId(rs.getString("INGEST_EQ_ID"));
				String hr = rs.getString("FL_PATH");
				if(hr.matches(".*net_mp4.*")){
					item.setFlPath("cs_net_mp4/"+rs.getString("FL_PATH"));

				}else if(hr.matches(".*mp4.*")){
					item.setFlPath("cs_mp4/"+rs.getString("FL_PATH"));

				}else{
					item.setFlPath(rs.getString("FL_PATH"));
				}
				item.setWrkFileNm(rs.getString("WRK_FILE_NM"));
				item.setCtiFmt(rs.getString("CTI_FMT"));
				item.setFlSz(rs.getLong("FL_SZ"));
				item.setArchSteYn(rs.getString("ARCH_STE_YN"));
				item.setVdHresol(rs.getString("VD_HRESOL"));
				item.setVdvresol(rs.getString("VD_VRESOL"));
				item.setBitRt(rs.getString("BIT_RT"));
				item.setFrmPerSec(rs.getString("FRM_PER_SEC"));
				item.setAudSampFrq(rs.getString("AUD_SAMP_FRQ"));
				item.setAudioBdwt(rs.getString("AUDIO_BDWT"));
				item.setsDuration(rs.getLong("S_DURATION"));
				item.seteDuration(rs.getLong("E_DURATION"));


				// annot 관련 자료

				Annot annot = new Annot();
				if (nCN_ID != nOldCN_ID)		// 각 코너마다 한번씩만 쿼리.
				{            	            	
					StringBuffer buf_annot = new StringBuffer();
					buf_annot.append("\n select anot.CN_ID, anot.ANNOT_ID, anot.CT_ID, anot.ANNOT_CLF_CD");
					buf_annot.append("\n ,anot.ANNOT_CLF_CONT, anot.SOM, anot.EOM,anot.GUBUN ");
					buf_annot.append("\n ,value(anot.entire_yn,'N') AS ENTIER_YN");
					buf_annot.append("\n from DAS.corner_tbl cn ");
					buf_annot.append("\n inner join DAS.ANNOT_INFO_TBL anot on cn.cn_id = anot.cn_id ");
					buf_annot.append("\n inner join  DAS.CONTENTS_MAPP_TBL mapp on mapp.CN_ID = anot.CN_ID ");

					buf_annot.append("\n where ");
					buf_annot.append("\n (mapp.del_dd is null or mapp.del_dd = '') ");
					buf_annot.append("\n  and mapp.cn_id= ? order by anot.cn_id asc with ur");

					psmt_annot = con.prepareStatement(buf_annot.toString());
					int index_annot = 0;			
					psmt_annot.setLong(++index_annot, nCN_ID);


					rs_annot = psmt_annot.executeQuery();	
					while(rs_annot.next())
					{                	
						AnnotInfo annotInfo = new AnnotInfo();
						gcn_id=rs_annot.getLong("ANNOT_ID");
						annotInfo.setAnnotId(rs_annot.getLong("ANNOT_ID"));
						annotInfo.setCtId(rs_annot.getLong("CT_ID"));
						annotInfo.setAnnotClfCd(rs_annot.getString("ANNOT_CLF_CD"));

						// 2015-10-12 Das Client에서 info 내용 끝부분에 공백이 있으면 오류가 발생함.
						String annotClfConf = rs_annot.getString("ANNOT_CLF_CONT");
						annotInfo.setAnnotClfCont(annotClfConf == null ? "" : annotClfConf.trim());
						annotInfo.setSom(rs_annot.getString("SOM"));
						annotInfo.setEom(rs_annot.getString("EOM"));
						annotInfo.setGubun(rs_annot.getString("GUBUN"));


						//String yn = isEntireRistcd(nMasterID);
						String entire=rs_annot.getString("ENTIER_YN");
						/*if(yn.equals("")){
								annotInfo.setEntireYn("N");

							}else if(!yn.equals("")||entire.equals("Y")){
								if(yn.equals(rs_annot.getString("ANNOT_CLF_CD"))){
									annotInfo.setEntireYn("Y");
									annotInfo.setEntireRistClfCd(yn);
								}else if(entire.equals("Y")){
									annotInfo.setEntireYn("Y");
									annotInfo.setEntireRistClfCd(rs_annot.getString("ENTIER_RIST_CLF_CD"));
								}else {
									annotInfo.setEntireYn("N");
									annotInfo.setEntireRistClfCd("");

								}
							}*/
						if(entire.equals("Y")){
							if(entire.equals("Y")){
								annotInfo.setEntireYn(entire);
								//annotInfo.setEntireRistClfCd(rs_annot.getString("ENTIRE_RIST_CLF_CD"));
							}else {
								annotInfo.setEntireYn(entire);
								//annotInfo.setEntireRistClfCd("");

							}
						}
						annot.addItem(annotInfo);

					}	// while annot


				}                

				item.setAnnot(annot);
				nOldCN_ID = nCN_ID;
				corner.addItem(item);
			}	// whil
			return corner;
		}

		catch (Exception ex)
		{
			logger.error(buf.toString());
			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "getCornerResultXML 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, null);
			release(rs_annot, psmt_annot, con);
		}        

	}


	/**
	 * 사용등급 재설정
	 * @param tcBeanDO 삭제할 정보가 들어있는 beans
	 * @throws DASException
	 * @throws SQLException 
	 */
	public int deleteAnnotInfo(Connection con,TcBeanDO tcBeanDO)throws DASException, SQLException{

		//Connection con = null;
		PreparedStatement stmt = null;
		StringBuffer buf=new StringBuffer();
		try {
			//con=DBService.getInstance().getConnection();
			buf.append("\n delete from  DAS.annot_info_tbl where ct_id =  ?  ");
			stmt=con.prepareStatement(buf.toString());
			int index=0;
			stmt.setLong(++index	, tcBeanDO.getCt_id());


			int iTmp = stmt.executeUpdate();
			return iTmp;
		}

		catch (SQLException e) 
		{
			logger.error(buf.toString());
			if(con != null)
			{
				try {
					con.rollback();					
				} catch (SQLException e1) {
					// TODO 자동 생성된 catch 블록
					logger.error(e1);
				}
			}

			throw e;
		}
		finally
		{
			release(null, stmt, null);
		}
	}


	/**
	 * annot_info_tbl cn_id 변화
	 * @param tcBeanDO
	 * @return
	 * @throws SQLException 
	 * @throws RemoteException
	 */
	public int updateAnnotInfo(Connection con,TcBeanDO tcBeanDO) throws DASException, SQLException
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.annot_info_tbl set ");
		buf.append("\n 	cn_id = ? ");

		buf.append("\n where ct_id = ? ");

		PreparedStatement stmt = null;
		//Connection con = null;		

		try 
		{
			//con = DBService.getInstance().getConnection();
			stmt = con.prepareStatement(buf.toString());

			int index = 0;

			stmt.setLong(++index, tcBeanDO.getCn_id());
			stmt.setLong(++index, tcBeanDO.getCt_id());
			int updateCount = stmt.executeUpdate();

			return updateCount;
		}

		catch (SQLException e) 
		{
			logger.error(buf.toString());
			try {
				con.rollback();
			} catch (SQLException e1) {
				// TODO Auto-generated catch block
				logger.error(e1);
			}

			throw e;
		}
		finally
		{
			release(null, stmt, null);
		}

	}


	/**
	 * 수동 아카이브시 annot_info_tbl cn_id, eom  변화
	 * @param tcBeanDO
	 * @return
	 * @throws SQLException 
	 * @throws RemoteException
	 */
	public int updateAnnotInfoByManualArchive(Connection con,TcBeanDO tcBeanDO) throws DASException, SQLException
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.annot_info_tbl set ");
		buf.append("\n 	cn_id = ? ");
		buf.append("\n 	,eom = ? ");
		buf.append("\n where ct_id = ? ");

		PreparedStatement stmt = null;
		//Connection con = null;		

		try 
		{
			//con = DBService.getInstance().getConnection();
			stmt = con.prepareStatement(buf.toString());

			int index = 0;

			stmt.setLong(++index, tcBeanDO.getCn_id());
			stmt.setString(++index, tcBeanDO.getEom());
			stmt.setLong(++index, tcBeanDO.getCt_id());
			int updateCount = stmt.executeUpdate();

			return updateCount;
		}

		catch (SQLException e) 
		{
			logger.error(buf.toString());
			try {
				con.rollback();
			} catch (SQLException e1) {
				// TODO Auto-generated catch block
				logger.error(e1);
			}

			throw e;
		}
		finally
		{
			release(null, stmt, null);
		}

	}

	/**
	 * 전체 여부 컬럼 업데이트 변화
	 * @param tcBeanDO
	 * @return
	 * @throws Exception 
	 * @throws RemoteException
	 */
	public int updateEntireInfo(AnnotInfoDO	annotInfoDO) throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.contents_tbl set ");
		buf.append("\n 	entire_yn = ? ");
		buf.append("\n 	,rist_clf_cd = ? ");
		buf.append("\n where ct_id = ? ");


		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateEntireInfo######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setString(++index, annotInfoDO.getEntire_yn());
			stmt.setString(++index, annotInfoDO.getAnnotClfCd());
			stmt.setLong(++index, annotInfoDO.getCtId());
			int updateCount = stmt.executeUpdate();

			return updateCount;
		}

		catch (Exception e) 
		{
			logger.error(buf.toString());
			try {
				con.rollback();
			} catch (SQLException e1) {
				// TODO Auto-generated catch block
				logger.error(e1);
			}

			throw e;
		} 
		finally
		{
			release(rs, stmt, con);
		}

	}





	/**
	 * 사용등급 갯수를 구한다.
	 * @return
	 * @throws DASException
	 */
	public long countAnnotInfo(Connection con,long ct_id) throws DASException{

		StringBuffer buf = new StringBuffer();
		//	Connection con = null;		
		PreparedStatement psmt = null;		
		ResultSet rs = null;

		buf.append(" select count(*) as cnt                  ");
		buf.append("                             ");
		buf.append(" 	 from das.annot_info_Tbl where ct_id = ?    with ur    ");

		try {
			//con = DBService.getInstance().getConnection();
			//con.setAutoCommit(false);
			psmt = con.prepareStatement(buf.toString());    //  로그 inform
			// psmt = con.prepareStatement(buf.toString());
			int index = 0;			
			psmt.setLong(++index, ct_id);
			rs = psmt.executeQuery();	
			int count=0;
			if(rs.next())
			{
				count =      	rs.getInt("cnt");

			}
			//con.setAutoCommit(true);

			return count;

		}
		catch (SQLException ex)
		{
			logger.error(buf.toString());

			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "selectTcJon 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, null);
		}

	}





	public String updateRistClfCd() throws SQLException
	{

		StringBuffer buf = new StringBuffer();
		StringBuffer buf3 = new StringBuffer();
		Connection con = null;		
		PreparedStatement psmt = null;	
		PreparedStatement psmt3 = null;	
		ResultSet rs = null;


		buf.append(" SELECT ct.ct_id,  annot2.annot_clf_cd FROM CONTENTS_TBL ct     ");
		buf.append(" inner JOIN ANNOT_INFO_TBL annot1 ON ct.ct_id = annot1.ct_id ");
		buf.append(" inner JOIN ANNOT_INFO_TBL annot2 ON ct.ct_id = annot2.ct_id ");
		buf.append(" WHERE annot1.som = '00:00:00:00' and  ct.CT_LENG = annot2.eom ");
		buf.append(" AND annot1.ct_id = annot2.ct_id AND ct.ct_typ = '003' and ct.rist_clf_cd='' ");
		buf.append(" GROUP BY ct.ct_id, ct.ct_leng, annot2.annot_clf_cd  ");

		buf.append("   fetch first 100000 rows only  ");

		buf3.append(" update contents_tbl set rist_clf_Cd =? ,entire_yn='Y' where ct_id =? ");


		try {
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateRistClfCd######## con : " + con);
			//con.setAutoCommit(false);
			psmt = con.prepareStatement(buf.toString()); 
			psmt3 = con.prepareStatement(buf3.toString());
			List resultList = new ArrayList();

			int index = 0;			
			int[] rInt = null;
			int cnt =1;

			rs = psmt.executeQuery();
			while(rs.next())
			{
				PdsArchiveDO item = new PdsArchiveDO();
				item.setCt_id(rs.getLong("CT_ID"));
				item.setRist_clf_cd(rs.getString("annot_clf_cd"));
				resultList.add(item);
			}

			for(int i=0;i<resultList.size();i++){
				index = 0;
				PdsArchiveDO ref = (PdsArchiveDO)resultList.get(i);
				//String sTmp = codeInfoDAO.getMediaId(ref.getReq_dt());

				psmt3.setString(++index, ref.getRist_clf_cd());
				psmt3.setLong(++index, ref.getCt_id()); //REQ_USRID   

				//cnt = cnt +psmt3.executeUpdate();
				psmt3.addBatch();
				if(i%2000==0){
					psmt3.executeBatch();
					logger.debug("저장 "+i+"건 완료되었습니다");
				}


			}


			rInt = psmt3.executeBatch();
			//  if(resultList.size()>0)rInt = psmt3.executeBatch();

			//con.setAutoCommit(true);

			return rInt + "";   


		}
		catch (Exception ex)
		{
			logger.error(buf.toString());

		}
		finally
		{
			con.setAutoCommit(true);
			release(rs, psmt, con);
			release(null, psmt3, null);
		}

		return "0";   
	}



	/**
	 * 카트의 내용을 저장한다.(스토리지에 있는 것 포함)
	 * @param cartContDO 카트내용정보
	 * @return CartContDO
	 * @throws Exception 
	 */
	public List insertStCartContInfoForList(DownCartDO downCartDO,CartContDO cartContDO) throws Exception
	{
		Connection con = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######insertStCartContInfoForList######## con : " + con);

			//현재 시간을 받아온다.
			String toDateTime = CalendarUtil.getDateTime("yyyyMMddHHmmss");
			List resultList  = new ArrayList();
			//입력받은 카트번호에 해당하는 카트 내용들 중에 가장 큰 카트 내 순번을 구한다.
			CartContDO cart = getIdForMasterId(cartContDO.getMasterId());
			String[] groupctids=cart.getGroup_ct_ids().split(",");
			String[] groupctiids=cart.getGroup_cti_ids().split(",");

			for(int i=0;i<groupctiids.length;i++){
				int seq = selectCartContMaxSeq(downCartDO.getCartNo());

				CartContDO cart2 =  selectAspVdInfo(Long.parseLong(groupctids[i]));
				String riskYn = DASBusinessConstants.YesNo.NO;
				cartContDO.setCartSeq(++seq);
				cartContDO.setCtId(Long.parseLong(groupctids[i]));
				cartContDO.setCtiId(Long.parseLong(groupctiids[i]));
				cartContDO.setVd_qlty(cart2.getVd_qlty());

				cartContDO.setAsp_rto_cd(cart2.getAsp_rto_cd());
				cartContDO.setAsp_rto_nm(cart2.getAsp_rto_nm());			
				cartContDO.setVd_qlty_nm(cart2.getVd_qlty_nm());
				cartContDO.setSom("00:00:00:00");
				// 풀다운로드 요청에 대한 EOM 값 Call
				if(StringUtils.isEmpty(cartContDO.getEom())||cartContDO.getEom().equals("00:00:00:00")){
					cartContDO.setEom(selectEomByCtId(cartContDO.getCtId()));
				}
				if(StringUtils.isEmpty(cartContDO.getAsp_rto_cd())){
					cartContDO.setAsp_rto_cd(selectAspRtoCDByCtId(cartContDO.getCtId()));
				}
				String riskClfCd = getRiskClfCd(cartContDO);
				//사용제한구분이 무제한이 아니면 사용제한포함여부는 'Y'이
				//if(!CodeConstants.RiskCode.UNLIMIT.equals(riskClfCd))
				String risknm =getRistCdnm(riskClfCd);
				//사용제한구분이 무제한이 아니면 사용제한포함여부는 'Y'이
				//if(!CodeConstants.RiskCode.UNLIMIT.equals(riskClfCd))
				if(riskClfCd.equals(CodeConstants.AnnotCode.UNLIMITED))
				{
					riskYn = DASBusinessConstants.YesNo.NO;
				}else if (riskClfCd.equals(CodeConstants.AnnotCode.USE_LIMITED)){
					riskYn = DASBusinessConstants.YesNo.NO;
				}else if (riskClfCd.equals(CodeConstants.AnnotCode.CHECK_BY_COMPANY)){
					riskYn = DASBusinessConstants.YesNo.YES;
				}else if (riskClfCd.equals(CodeConstants.AnnotCode.CHECK_BY_PD)){
					riskYn = DASBusinessConstants.YesNo.YES;
				}else if (riskClfCd.equals(CodeConstants.AnnotCode.NOT_USE)){
					riskYn = DASBusinessConstants.YesNo.YES;
				}else if (riskClfCd.equals(CodeConstants.AnnotCode.LIMITED_BY_BROADCASTCENTER)){
					riskYn = DASBusinessConstants.YesNo.YES;
				}else {
					riskYn = DASBusinessConstants.YesNo.NO;
				}
				if(StringUtils.isEmpty(cartContDO.getSom())){
					cartContDO.setDuration(Long.parseLong(selectDurationByCtId(cartContDO.getCtId())));
				}
				insertCartContInfo(con, cartContDO, toDateTime, riskClfCd);
				cartContDO.setRistClfCd(riskClfCd);
				cartContDO.setRist_clf_nm(risknm);
				cartContDO.setTitle(getTitle(cartContDO.getMasterId()));

				//사용제한 여부가 'Y'이면 다운로드카트의 사용제한포함여부를 'Y'로 수정한다.
				if(DASBusinessConstants.YesNo.YES.equals(riskYn))
				{
					updateRiskYn(con, cartContDO.getCartNo(),cartContDO.getCartSeq(), riskYn);
				}
				resultList.add(cartContDO);
			}
			return resultList;
		} 
		catch (Exception e) 
		{			
			throw e;
		}
		finally
		{
			release(null, null, con);
		}

	}


	/**
	 * 다운로드 재요청시 down 컬럼 대기상태로 변환
	 * @param CartContDO
	 * @return
	 * @throws Exception 
	 * @throws RemoteException
	 */
	public int updateDownState(CartContDO cartContDO) throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		//buf.append("\n delete from  das.contents_down_tbl where num =? ");
		buf.append("\n update  das.contents_down_tbl set job_status='R' where num =? ");
		//buf.append("\n 	job_status = 'W' ");
		//buf.append("\n 	,progress = '100' ");
		//buf.append("\n where cart_no = ? and cart_seq = ?");


		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateDownState######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;

			stmt.setLong(++index, cartContDO.getNum());
			//stmt.setLong(++index, cartContDO.getCartSeq());
			int updateCount = stmt.executeUpdate();
			updateCartContState(cartContDO);
			return updateCount;
		}

		catch (Exception e) 
		{
			logger.error(buf.toString());
			try {
				con.rollback();
			} catch (SQLException e1) {
				// TODO Auto-generated catch block
				logger.error(e1);
			}

			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}

	}


	/**
	 * 다운로드 재요청시 cart_cont_Tbl 컬럼 다운로드 중으로 변환
	 * @param CartContDO
	 * @return
	 * @throws Exception 
	 * @throws RemoteException
	 */
	public int updateCartContState(CartContDO cartContDO) throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.cart_cont_tbl set ");
		buf.append("\n 	down_stat = '' ");

		buf.append("\n where cart_no = ? and cart_seq = ?");


		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateCartContState######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;

			stmt.setLong(++index, cartContDO.getCartNo());
			stmt.setLong(++index, cartContDO.getCartSeq());
			int updateCount = stmt.executeUpdate();

			return updateCount;
		}

		catch (Exception e) 
		{
			logger.error(buf.toString());
			try {
				con.rollback();
			} catch (SQLException e1) {
				logger.error(buf.toString());
			}

			throw e;
		} 
		finally
		{
			release(rs, stmt, con);
		}

	}





	/**
	 * 풀,파셜다운로드 정보를 가져온다
	 * @param cart_no                                                                                                                                    	
	 * @throws Exception 
	 */
	private String getDownType(long cart_no, long cart_seq) throws Exception
	{
		StringBuffer buf = new StringBuffer();
		buf.append("\n select ");
		buf.append("\n 	down_typ ");
		buf.append("\n 	from cart_cont_Tbl ");
		buf.append("\n 	where cart_no = ? and cart_seq = ?  ");

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######getDownType######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setLong(++index, cart_no);
			stmt.setLong(++index, cart_seq);
			rs = stmt.executeQuery();

			String down_type="";

			while(rs.next())
			{
				down_type = rs.getString("down_typ");



			}




			return down_type;
		} 
		catch (Exception e) 
		{
			logger.error(buf.toString());

			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}




	/**
	 * CONTENTS_DOWN_TBL에 정보를 등록한다.
	 * @param 
	 * @return boolean
	 * @throws Exception 
	 * @throws RemoteException
	 */
	public boolean InsertContentsDownTbl(DownCartDO downCartDO) throws Exception
	{
		StringBuffer buf = new StringBuffer();				

		buf.append("\n insert into CONTENTS_DOWN_TBL ( ");
		buf.append("\n 	NUM ");
		buf.append("\n 	,CTI_ID ");
		buf.append("\n 	,REG_DTM ");
		buf.append("\n 	,REG_USER ");
		buf.append("\n 	,JOB_STATUS ");
		buf.append("\n 	,OBJ_NAME ");
		buf.append("\n 	,PATH ");
		buf.append("\n 	,FILENAME ");
		buf.append("\n 	,CART_NO ");
		buf.append("\n 	,CART_SEQ ");
		buf.append("\n 	,PROGRESS ");
		buf.append("\n 	) VALUES ( ");
		buf.append("\n 	?,?,?,?,?,?,?,?,?,?,?) ");

		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######InsertContentsDownTbl######## con : " + con);
			//stmt = con.prepareStatement(buf.toString());
			stmt = con.prepareStatement(buf.toString());
			int index = 0;
			long num = systemManageDAO.selectContentsDownid();
			String dateTime = CalendarUtil.getDateTime("yyyyMMddHHmmss");
			stmt.setLong(++index, num);
			stmt.setLong(++index, downCartDO.getCti_id());
			stmt.setString(++index, dateTime);
			stmt.setString(++index, "DasCms");
			stmt.setString(++index, "I");
			String obj_name = getObjName(downCartDO.getCti_id());
			stmt.setString(++index, obj_name);
			stmt.setString(++index, downCartDO.getFl_path());
			stmt.setString(++index, downCartDO.getFile_nm());
			stmt.setLong(++index, downCartDO.getCartNo());
			stmt.setLong(++index, downCartDO.getCartSeq());
			stmt.setString(++index, "0");
			int updateCount = stmt.executeUpdate();
			//updateMetadat3(con,tcBeanDO);
			if(updateCount>0)return true;
			return false;
		}
		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}

	}


	/**
	 * objname을 가져온다
	 * @param cart_no                                                                                                                                    	
	 * @throws Exception 
	 */
	private String getObjName(long cti_id) throws Exception
	{
		StringBuffer buf = new StringBuffer();
		buf.append("\n select ");
		buf.append("\n 	out_system_id ");
		buf.append("\n 	from contents_inst_Tbl ");
		buf.append("\n 	where cti_id =  ?  ");

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######getObjName######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setLong(++index, cti_id);

			rs = stmt.executeQuery();

			String obj_name="";

			while(rs.next())
			{
				obj_name = rs.getString("out_system_id");



			}


			return obj_name;
		} 

		catch (Exception e) 
		{
			logger.error(buf.toString());

			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}


	/**
	 * 장비상태를  업데이트한다
	 * @param DepInfoDO                                                                                                                                                                                             
	 * @return                                                                                                                                                                                              
	 * @throws Exception 
	 */
	public int updateConTentsTbl(TransferDO transferDO) throws Exception
	{

		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.contents_down_tbl set ");

		buf.append("\n 	progress = ? ");
		buf.append("\n 	,updt_dtm = ? ");
		buf.append("\n 	,job_status = ? ");

		buf.append("\n where cart_no = ? ");
		buf.append("\n and cart_seq = ? ");

		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateConTentsTbl######## con : " + con);
			//stmt = con.prepareStatement(buf.toString());
			stmt = con.prepareStatement(buf.toString());
			int index = 0;


			String dateTime = CalendarUtil.getDateTime("yyyyMMddHHmmss");

			stmt.setString(++index, transferDO.getProgress());
			stmt.setString(++index, dateTime);
			stmt.setString(++index, transferDO.getStatus());
			stmt.setLong(++index, transferDO.getCart_no());
			stmt.setLong(++index, transferDO.getCart_seq());


			int updateCount = stmt.executeUpdate();

			return updateCount;
		}

		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			//try { 	if (stmt != null)  stmt.close();	} catch (SQLException e) {}
			release(null, stmt, con);
		}

	}

	/**
	 * merge 파일 업로드 정보 저장 로직
	 * @param xml
	 * @return updaetcount
	 * @throws Exception 
	 * @throws RemoteException
	 */
	public int insertMergeInfo(String url,long ct_id,String path)throws Exception{


		Connection con = null;
		PreparedStatement stmt = null;
		StringBuffer buf=new StringBuffer();
		try {
			con=DBService.getInstance().getConnection();
			//logger.debug("######insertMergeInfo######## con : " + con);
			buf.append("\n insert into DAS.MER_HIST_TBL ( ");
			buf.append("\n SEQ ");
			buf.append("\n ,CT_ID ");
			buf.append("\n ,EQ_ID ");
			buf.append("\n ,KFRM_PATH ");
			buf.append("\n ,REG_DTM ");
			buf.append("\n ,STATUS ");
			buf.append("\n ,ERR_CD ");
			buf.append("\n ) VALUES ( ");
			buf.append("\n  ?, ? ,?,?,?,?,?)");

			stmt=con.prepareStatement(buf.toString());
			int index=0;
			int iTmp=0;
			String dateTime = CalendarUtil.getDateTime("yyyyMMddHHmmss");

			long seq =  selectMerSeq();
			stmt.setLong(++index    , seq);
			stmt.setLong(++index    , ct_id);
			stmt.setString(++index    , url);
			stmt.setString(++index    , path);
			stmt.setString(++index    , dateTime);
			stmt.setString(++index    , "W");
			stmt.setString(++index    , "");
			iTmp = stmt.executeUpdate();

			return iTmp;

		}
		catch (Exception e) 
		{
			logger.error(buf.toString());
			if(con != null)
			{
				try {
					con.rollback();					
				} catch (SQLException e1) {
					// TODO 자동 생성된 catch 블록
					logger.error(e1);
				}
			}


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}
	}


	/**
	 * mer seq 를 생성한다
	 * @param condition 조회조건을 포함하고 있는 DataObject
	 * @return
	 * @throws Exception 
	 */
	public long selectMerSeq() throws Exception
	{

		StringBuffer buf = new StringBuffer();
		buf.append("select  NEXTVAL FOR SEQ_MER_ID from sysibm.sysdummy1 ");



		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######selectMerSeq######## con : " + con);

			stmt = con.prepareStatement(buf.toString());


			int index = 0;

			rs = stmt.executeQuery();
			rs.next();

			long newSeq_Id = rs.getLong(1);



			return newSeq_Id;
		} 

		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}	
	}



	public String isVideoReleateYN(long master_id , long ct_id) throws Exception{

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		String str = null;		

		StringBuffer buf = new StringBuffer();
		buf.append("\n SELECT distinct rel.CHILD_MASTER_ID FROM  CONTENTS_MAPP_TBL MAP ");
		buf.append("\n inner JOIN RELATION_MASTER rel ON rel.CHILD_MASTER_ID = map.MASTER_ID ");
		buf.append("\n WHERE   map.CT_ID=? ");

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######isVideoReleateYN######## con : " + con);
			//con.setAutoCommit(false);
			stmt = con.prepareStatement(buf.toString());
			//stmt.setLong(1, master_id);
			stmt.setLong(1, ct_id);
			rs = stmt.executeQuery();
			//con.setAutoCommit(true);
			if(rs.next())
			{
				String result = rs.getString("CHILD_MASTER_ID");

				return "Y";
			}		

			return "N";

		} 
		catch (Exception e) 
		{
			logger.error(buf.toString());

			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}




	/**
	 * 각장비의 마지막 수정일을 확인하고 5분을 넘겼을시 오류로 업데이트한다.
	 * @param  XML                                                                                                                                                                                              
	 * @return                                                                                                                                                                                              
	 * @throws Exception 
	 */
	public int updateServerStatus(ServersDO serversDO)  throws Exception
	{
		String query = ExternalStatement.getLastModDtInfo();

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			stmt = con.prepareStatement(query);

			int index = 0;

			rs = stmt.executeQuery();



			while(rs.next())
			{
				ServersDO item = new ServersDO();

				item.setDas_eq_id(         	rs.getString("DAS_EQ_ID"));
				item.setConfirm_dt(         	rs.getString("MOD_DT"));

				SimpleDateFormat formatter = new SimpleDateFormat("yyyyMMddHHmm");
				Date beginDate = new Date();
				String startDate = formatter.format(beginDate);

				String endDate = item.getConfirm_dt();
				long diff = Long.parseLong(startDate) - Long.parseLong(endDate);

				//현재 시간과 마지막 수정시간의 차가 5분이상 난다면 에러로 업데이트 한다.
				if(diff >= 5){
					updateEquipMentStatus(item);
				}


			}

			return 1; 
		} 

		catch (Exception e) 
		{
			logger.error(query);


			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}



	/**
	 * 장비상태를  업데이트한다
	 * @param DepInfoDO                                                                                                                                                                                             
	 * @return                                                                                                                                                                                              
	 * @throws Exception 
	 */
	public int updateEquipMentStatus(ServersDO serversDO) throws Exception
	{

		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.das_equipment_tbl set ");

		buf.append("\n 	job_status = ? ");

		buf.append("\n where DAS_EQ_ID = ? ");


		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateConTentsTbl######## con : " + con);
			//stmt = con.prepareStatement(buf.toString());
			stmt = con.prepareStatement(buf.toString());
			int index = 0;


			String dateTime = CalendarUtil.getDateTime("yyyyMMddHHmmss");


			stmt.setString(++index, "T");

			stmt.setString(++index, serversDO.getDas_eq_id());


			int updateCount = stmt.executeUpdate();

			return updateCount;
		}

		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			//try { 	if (stmt != null)  stmt.close();	} catch (SQLException e) {}
			release(null, stmt, con);
		}

	}


	/**
	 *  아카이브 진행 상태를 조회한다(if cms)
	 * @param  XML                                                                                                                                                                                              
	 * @return                                                                                                                                                                                              
	 * @throws Exception 
	 */
	public String getRistClfInfoListForTime(TimeRistInfo info) throws Exception
	{

		Connection con = null;
		PreparedStatement stmt = null;		
		ResultSet rs = null;
		String query  = null;
		String xml = "";
		List<TimeRistInfo> list = new ArrayList();
		Das das = new Das();
		TimeRist timeRist = new TimeRist();
		try 
		{
			int index = 0;
			logger.debug("#########################  "+info.getWeek());
			query = ExternalStatement.selectTimeRistList(info);
			con = DBService.getInstance().getConnection();

			stmt = con.prepareStatement(query);
			rs = stmt.executeQuery();
			XmlConvertorService<Das> convertorService = new XmlConvertorServiceImpl<Das>();

			while(rs.next())
			{

				TimeRistInfo item = new TimeRistInfo();
				item.setSeq( rs.getLong("SEQ"));
				String sTime = rs.getString("S_TIME");
				String eTime = rs.getString("E_TIME");

				StringBuffer sbuffer = new StringBuffer(sTime.substring(0, 4));
				StringBuffer ebuffer = new StringBuffer(eTime.substring(0, 4));

				item.setsTime(sbuffer.insert(2, ":").toString());
				item.seteTime(ebuffer.insert(2, ":").toString());
				item.setRistClfNm(rs.getString("RIST_CLF_NM"));
				item.setRegDt(rs.getString("REG_DT"));
				item.setWeek(rs.getLong("WEEK"));
				item.setWeekNm(rs.getString("WEEK_NM"));
				item.setPdsPgmId(rs.getString("PDS_PGM_ID"));
				item.setPdsPgmNm(rs.getString("PDS_PGM_NM"));
				list.add(item);
			}
			timeRist.setItems(list);
			das.setTimeRist(timeRist);
			xml = convertorService.createMarshaller(das);

			return xml;
		} 
		catch (Exception e) 
		{
			logger.error(query);


			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}




	/**
	 * 에러정보를 등록 및 갱신한다.
	 * @param errorRegisterDO 에러 정보
	 * @throws Exception 
	 * @retrun errorRegisterDO 에러 정보		
	 */
	public String insertRistClfInfoListForTime(TimeRistInfo timeRistInfo) throws Exception
	{


		Connection con = null;
		PreparedStatement stmt = null;
		StringBuffer buf=new StringBuffer();
		Das das = new Das();
		String xml ="";
		try {
			con=DBService.getInstance().getConnection();
			//logger.debug("######insertMergeInfo######## con : " + con);
			buf.append("\n insert into DAS.TIME_RIST_SET_TBL ( ");
			buf.append("\n SEQ ");
			buf.append("\n ,S_TIME ");
			buf.append("\n ,E_TIME ");
			buf.append("\n ,RIST_CLF_CD ");
			buf.append("\n ,REG_DT ");
			buf.append("\n ,REG_ID ");
			buf.append("\n ,WEEK ");
			buf.append("\n ,PDS_PGM_ID ");
			buf.append("\n ) VALUES ( ");
			buf.append("\n  ?, ? ,?,?,?,?,?,?)");

			stmt=con.prepareStatement(buf.toString());
			int index=0;
			int iTmp=0;
			String dateTime = CalendarUtil.getDateTime("yyyyMMddHHmmss");

			long seq =  selectTimeSetSeq();
			stmt.setLong(++index    , seq);
			String stime = timeRistInfo.getsTime().replace(":","");
			String etime = timeRistInfo.geteTime().replace(":","");
			stmt.setString(++index    , stime.trim()+"00");
			stmt.setString(++index    , etime.trim()+"00");
			stmt.setString(++index    , timeRistInfo.getRistClfCd());
			stmt.setString(++index    , dateTime);			
			stmt.setString(++index    , timeRistInfo.getRegId());
			stmt.setLong(++index    , timeRistInfo.getWeek());
			stmt.setString(++index    , timeRistInfo.getPdsPgmId());
			iTmp = stmt.executeUpdate();
			XmlConvertorService<Das> convertorService = new XmlConvertorServiceImpl<Das>();
			if(iTmp > 0){
				TimeRist timeRist = new TimeRist();
				timeRist.setResult("success");
				das.setTimeRist(timeRist);
				xml = convertorService.createMarshaller(das);
			}else{
				TimeRist timeRist = new TimeRist();
				timeRist.setResult("fail");
				das.setTimeRist(timeRist);
				xml =  convertorService.createMarshaller(das);
			}

			return xml;
		}
		catch (Exception e) 
		{
			logger.error(buf.toString());
			if(con != null)
			{
				try {
					con.rollback();					
				} catch (SQLException e1) {
					// TODO 자동 생성된 catch 블록
					logger.error(e1);
				}
			}


			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}
	}

	/**
	 * mer seq 를 생성한다
	 * @param condition 조회조건을 포함하고 있는 DataObject
	 * @return
	 * @throws Exception 
	 */
	public long selectTimeSetSeq() throws Exception
	{

		StringBuffer buf = new StringBuffer();
		buf.append("select  NEXTVAL FOR SEQ_TIME_RIST from sysibm.sysdummy1 ");



		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######selectMerSeq######## con : " + con);

			stmt = con.prepareStatement(buf.toString());



			rs = stmt.executeQuery();
			rs.next();

			long newSeq_Id = rs.getLong(1);



			return newSeq_Id;
		} 

		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}	
	}


	/**
	 * 시간대별 사용등급정보를 수정한다.
	 * @param TimeRistInfo                                                                                                                                                                                             
	 * @return                                                                                                                                                                                              
	 * @throws Exception 
	 */
	public String updateRistClfInfoListForTime(TimeRistInfo info) throws Exception
	{

		StringBuffer buf = new StringBuffer();				

		buf.append("\n update DAS.TIME_RIST_SET_TBL set ");

		if(!StringUtils.isEmpty(info.getsTime())){
			buf.append("\n 	S_TIME = ? ");
			buf.append("\n 	,E_TIME = ? ");
		}
		if(!StringUtils.isEmpty(info.getRistClfCd())){
			buf.append("\n 	,RIST_CLF_CD = ? ");
		}
		buf.append("\n 	,MOD_ID = ? ");
		buf.append("\n 	,MOD_DT = ? ");
		buf.append("\n 	,WEEK = ? ");
		buf.append("\n 	,PDS_PGM_ID = ? ");
		buf.append("\n where SEQ = ? ");

		PreparedStatement stmt = null;
		Connection con = null;		
		String xml="";
		Das das = new Das();
		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######updateConTentsTbl######## con : " + con);
			//stmt = con.prepareStatement(buf.toString());
			stmt = con.prepareStatement(buf.toString());
			int index = 0;


			String dateTime = CalendarUtil.getDateTime("yyyyMMddHHmmss");
			if(!StringUtils.isEmpty(info.getsTime())){
				String stime = info.getsTime().replace(":","");
				String etime = info.geteTime().replace(":","");
				logger.debug("stime    "+stime);
				logger.debug("etime     "+etime);


				stmt.setString(++index, stime+"00");
				stmt.setString(++index, etime+"00");
			}
			if(!StringUtils.isEmpty(info.getRistClfCd())){
				stmt.setString(++index, info.getRistClfCd());
			}
			stmt.setString(++index, info.getRegId());
			stmt.setString(++index, dateTime);
			stmt.setLong(++index, info.getWeek());
			stmt.setString(++index, info.getPdsPgmId());
			stmt.setLong(++index, info.getSeq());

			int updateCount = stmt.executeUpdate();

			XmlConvertorService<Das> convertorService = new XmlConvertorServiceImpl<Das>();
			if(updateCount > 0){
				TimeRist timeRist = new TimeRist();
				timeRist.setResult("success");
				das.setTimeRist(timeRist);
				xml = convertorService.createMarshaller(das);
			}else{
				TimeRist timeRist = new TimeRist();
				timeRist.setResult("fail");
				das.setTimeRist(timeRist);
				xml =  convertorService.createMarshaller(das);
			}

			return xml;
		}

		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			//try { 	if (stmt != null)  stmt.close();	} catch (SQLException e) {}
			release(null, stmt, con);
		}

	}

	/**
	 * 관련영상 정보를 삭제한다.
	 * 
	 * @throws Exception 
	 * @throws RemoteException
	 */
	public String deleteRistClfInfoListForTime(TimeRistInfo info)throws Exception{

		Connection con = null;
		PreparedStatement stmt = null;
		StringBuffer buf=new StringBuffer();
		String xml = "";
		Das das = new Das();

		try {
			con=DBService.getInstance().getConnection();

			buf.append("\n delete from  DAS.TIME_RIST_SET_TBL where SEQ =?  ");
			stmt=con.prepareStatement(buf.toString());
			int index=0;
			stmt.setLong(++index	, info.getSeq());


			int iTmp = stmt.executeUpdate();
			XmlConvertorService<Das> convertorService = new XmlConvertorServiceImpl<Das>();
			if(iTmp > 0){
				TimeRist timeRist = new TimeRist();
				timeRist.setResult("success");
				das.setTimeRist(timeRist);
				xml = convertorService.createMarshaller(das);
			}else{
				TimeRist timeRist = new TimeRist();
				timeRist.setResult("fail");
				das.setTimeRist(timeRist);
				xml =  convertorService.createMarshaller(das);
			}

			return xml;
		}

		catch (Exception e) 
		{
			logger.error(buf.toString());
			if(con != null)
			{
				try {
					con.rollback();					
				} catch (SQLException e1) {
					// TODO 자동 생성된 catch 블록
					logger.error(e1);
				}
			}

			throw e;
		}
		finally
		{
			release(null, stmt, con);
		}
	}

	/**
	 *  시간대 중복여부를 조회한다
	 * @param  XML                                                                                                                                                                                              
	 * @return                                                                                                                                                                                              
	 * @throws Exception 
	 */
	public List<TimeRistInfo> checkDuplication(TimeRistInfo info) throws Exception
	{
		StringBuffer buf = new StringBuffer();
		StringBuffer strResult = new StringBuffer();

		buf.append("\n select  ");
		buf.append("\n  seq,s_time,e_time,rist_clf_cd ");
		buf.append("\n from TIME_RIST_SET_TBL ");
		buf.append("\n where ((s_time >= ? AND ? >= s_time)");
		buf.append("\n or (e_time >= ? AND ? >= e_time))");
		buf.append("\n and week = ?");
		Connection con = null;

		PreparedStatement psmt = null;

		ResultSet rs = null;

		try
		{	
			con = DBService.getInstance().getConnection();
			//logger.debug("######getAnnotInfo######## con : " + con);
			psmt = con.prepareStatement(buf.toString());    
			int index = 0;			
			String stime = info.getsTime().replace(":","");
			String etime = info.geteTime().replace(":","");

			logger.debug("stime    "+stime);
			logger.debug("etime     "+etime);
			logger.debug("psmt     "+buf.toString());


			psmt.setString(++index, stime+"00");
			psmt.setString(++index, etime+"00");
			psmt.setString(++index, stime+"00");
			psmt.setString(++index, etime+"00");
			psmt.setLong(++index, info.getWeek());
			rs = psmt.executeQuery();	

			List<TimeRistInfo> list = new ArrayList<TimeRistInfo>();
			while (rs.next())
			{
				TimeRistInfo result = new TimeRistInfo();
				String sTime = rs.getString("s_time");
				String eTime = rs.getString("e_time");

				StringBuffer sbuffer = new StringBuffer(sTime.substring(0, 4));
				StringBuffer ebuffer = new StringBuffer(eTime.substring(0, 4));

				result.setsTime(sbuffer.insert(2, ":").toString());
				result.seteTime(ebuffer.insert(2, ":").toString());
				result.setRistClfCd(rs.getString("rist_clf_cd"));
				result.setSeq(rs.getLong("seq"));
				list.add(result);

			}	//while (rs.next()) 

			return list;
		}
		catch (Exception ex)
		{
			logger.error(buf.toString());

			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "getAttachResultXML 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, con);
		}        
	}

	/**
	 * 청구번호를 수기로 입력, 수정한다..
	 * @param xml                                                                                                              
	 * @return                                                                                                           
	 * @throws Exception 
	 * @throws DASException
	 */
	public String updateReqCd(Das das) throws Exception
	{

		StringBuffer buf = new StringBuffer();				

		buf.append("\n update das.metadat_mst_tbl set ");

		buf.append("\n 	req_cd = ? ");

		buf.append("\n where master_id = ? ");


		PreparedStatement stmt = null;
		Connection con = null;		

		try 
		{
			con = DBService.getInstance().getConnection();

			stmt = con.prepareStatement(buf.toString());
			int index = 0;
			String xml ="";
			Das result = new Das();
			stmt.setString(++index, das.getMetaDataInfo().getReqCd());

			stmt.setLong(++index, das.getMetaDataInfo().getMasterId());


			int updateCount = stmt.executeUpdate();

			XmlConvertorService<Das> convertorService = new XmlConvertorServiceImpl<Das>();
			if(updateCount > 0){
				MetaDataInfo metaDataInfo = new MetaDataInfo();
				metaDataInfo.setResult("success");
				result.setMetaDataInfo(metaDataInfo);
				xml = convertorService.createMarshaller(result);
			}else{

				MetaDataInfo metaDataInfo = new MetaDataInfo();
				metaDataInfo.setResult("fail");
				result.setMetaDataInfo(metaDataInfo);
				xml = convertorService.createMarshaller(result);

			}
			return xml;
		}

		catch (Exception e) 
		{
			logger.error(buf.toString());


			throw e;
		}
		finally
		{
			//try { 	if (stmt != null)  stmt.close();	} catch (SQLException e) {}
			release(null, stmt, con);
		}

	}

	/**
	 *  아카이브 진행 상태를 조회한다(if cms)
	 * @param  XML                                                                                                                                                                                              
	 * @return                                                                                                                                                                                              
	 * @throws Exception 
	 */
	public String getSchedulerList() throws Exception
	{

		Connection con = null;
		PreparedStatement stmt = null;		
		ResultSet rs = null;
		String query  = null;
		String xml = "";
		List<Scheduler> list = new ArrayList();
		Das das = new Das();
		Scheduler scheduler = new Scheduler();
		try 
		{
			int index = 0;

			query = ExternalStatement.selectSchedulerList();
			con = DBService.getInstance().getConnection();

			stmt = con.prepareStatement(query);
			rs = stmt.executeQuery();
			XmlConvertorService<Das> convertorService = new XmlConvertorServiceImpl<Das>();

			while(rs.next())
			{

				Scheduler item = new Scheduler();
				item.setSchedulerNm( rs.getString("scheduler_nm"));	

				//yyyy-MM-dd HH:mm:ss - > yyyyMMddHHmmss 형식으로 변환
				SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				SimpleDateFormat runFormat = new SimpleDateFormat("yyyyMMddHHmmss");


				String runDt = rs.getString("RUN_DT");
				String tempRunDt = runDt.substring(0,runDt.lastIndexOf("."));
				Date temp = format.parse(tempRunDt);				
				item.setRunDt(runFormat.format(temp));

				String NextRunDt = rs.getString("NEXT_RUN_DT");
				String tempNextRunDt = NextRunDt.substring(0,NextRunDt.lastIndexOf("."));
				Date tempNext = format.parse(tempNextRunDt); 
				item.setNextRunDt(runFormat.format(tempNext));
				String pattern = rs.getString("pattern");
				String[] fields = pattern.split(" ");

				if(item.getSchedulerNm().equals("storageCheckTrigger")){
					item.setPattern(StringUtils.timeCheck(fields[2], 'H', fields));
				}else if(item.getSchedulerNm().equals("highStorageQuotaCheckTrigger")){
					item.setPattern(StringUtils.timeCheck(fields[1], 'M', fields));
				}else{
					item.setPattern(StringUtils.timeCheck(fields[2], 'H' ,fields));
				}
				int timeDiffer = Integer.parseInt(rs.getString("TIME_DIFER"));
				int interval = Integer.parseInt(rs.getString("interval"));

				if((timeDiffer - interval) == 0){
					item.setRunYn("정상");
				}else{
					item.setRunYn("오류");
				}



				if(item.getSchedulerNm().equals("userRequestContentDelTrigger")){
					item.setDesc("사용자 요청 폐기 대상 삭제 스케줄러");
				}else if(item.getSchedulerNm().equals("archivedContentDelTrigger")){
					item.setDesc("아카이브 완료 건에 대한 스토리지 삭제 스케줄러");
				}else if(item.getSchedulerNm().equals("downloadedContentDelTrigger")){
					item.setDesc("다운로드 완료 건에 대한 삭제 스케줄러");
				}else if(item.getSchedulerNm().equals("highStorageQuotaCheckTrigger")){
					item.setDesc("스토리지 잔여용량 체크 스케줄러");
				}else if(item.getSchedulerNm().equals("pdsPgmInfoTrigger")){
					item.setDesc("PDS 프로그램 정보 연동 스케줄러");
				}else if(item.getSchedulerNm().equals("storageCheckTrigger")){
					item.setDesc("스토리지 쓰레기 데이터 삭제 스케줄러");
				}
				list.add(item);
			}

			das.setScheduler(list);
			xml = convertorService.createMarshaller(das);

			return xml;
		} 
		catch (Exception e) 
		{
			logger.error(query);


			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}



	/**
	 * erp 청구번호 중복 여부를 파악한다
	 * @param cart_no                                                                                                                                    	
	 * @throws Exception 
	 */ 
	public int countErpReqCd(String reqCd) throws Exception
	{
		StringBuffer buf = new StringBuffer();
		buf.append("\n select ");
		buf.append("\n 	count(*) as cnt ");
		buf.append("\n 	from D_TAPE_TBL  ");
		buf.append("\n 	where req_no =  ?  ");

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;

		try 
		{
			con = DBService.getInstance().getErpConnection();
			//logger.debug("######getObjName######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setString(++index, reqCd);

			rs = stmt.executeQuery();

			int count=0;
			if(rs.next())
			{
				count =      	rs.getInt("cnt");

			}

			XmlConvertorService<Das> convertorService = new XmlConvertorServiceImpl<Das>();
			MetaDataInfo metaDataInfo = new MetaDataInfo();

			if(count <1 ){
				metaDataInfo.setResult("no duplicate");				
			}else{
				metaDataInfo.setResult("duplicate");
			}

			return count;
		} 

		catch (Exception e) 
		{
			logger.error(buf.toString());

			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}



	/**
	 *  아카이브 진행 상태를 조회한다(if cms)
	 * @param  XML                                                                                                                                                                                              
	 * @return                                                                                                                                                                                              
	 * @throws Exception 
	 */
	public String getDuplicateReqCd(Das das) throws Exception
	{
		StringBuffer buf = new StringBuffer();
		buf.append("\n select ");
		buf.append("\n 	count(*) as cnt ");
		buf.append("\n 	from D_TAPE_TBL  ");
		buf.append("\n 	where req_cd =  ?  ");

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;

		try 
		{
			con = DBService.getInstance().getErpConnection();
			//logger.debug("######getObjName######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setString(++index, das.getMetaDataInfo().getReqCd());

			rs = stmt.executeQuery();

			int count=0;
			if(rs.next())
			{
				count =      	rs.getInt("cnt");

			}


			return "";
		} 

		catch (Exception e) 
		{
			logger.error(buf.toString());

			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}


	/**
	 *  메타데이터의  
	 * @param  XML                                                                                                                                                                                              
	 * @return                                                                                                                                                                                              
	 * @throws Exception 
	 */
	public MetaDataInfo getMetaDatMstInfo(Das das) throws Exception
	{

		Connection con = null;
		PreparedStatement stmt = null;		
		ResultSet rs = null;
		String query  = null;
		String xml = "";

		MetaDataInfo info = new MetaDataInfo();

		try 
		{

			query = ExternalStatement.selectMetaDat(das.getMasterId());
			con = DBService.getInstance().getConnection();

			stmt = con.prepareStatement(query);
			rs = stmt.executeQuery();

			while(rs.next())
			{

				info.setTapeId(rs.getString("tape_id"));
				info.setTapeItemId(rs.getString("tape_item_id"));
				info.setMasterId(das.getMasterId());

			}


			return info;
		} 
		catch (Exception e) 
		{
			logger.error(query);


			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}


	/**
	 * 청구번호와 테이브 id, 테이프itemid정보를 조회한다
	 * @param cart_no                                                                                                                                    	
	 * @throws Exception 
	 */ 
	public String getErpInfo(MetaDataInfo info) throws Exception
	{
		StringBuffer buf = new StringBuffer();
		buf.append("\n select ");
		buf.append("\n 	req_no ");
		buf.append("\n 	from D_TAPE_TBL  ");
		buf.append("\n 	where tape_id =  ?  "); 

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;

		try 
		{
			con = DBService.getInstance().getErpConnection();
			//logger.debug("######getObjName######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setString(++index, info.getTapeId());

			rs = stmt.executeQuery();

			String reqNo=null;
			if(rs.next())
			{
				reqNo =      	rs.getString("req_no");

			}



			return reqNo;
		} 

		catch (Exception e) 
		{
			logger.error(buf.toString());

			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}



	/**
	 * 해당  아이디로 콘텐츠 아이디를 가지고 온다.(다운로드 기준)
	 * @param pdsArchiveDO
	 * @return
	 * @throws DASException
	 */
	public String getContentsLocTbl(long key) throws DASException{

		StringBuffer buf = new StringBuffer();
		Connection con = null;		
		PreparedStatement psmt = null;		
		ResultSet rs = null;

		buf.append(" SELECT filename FROM DAS.CONTENTS_loc_TBL                  ");
		buf.append("\n where num = ?  ");
		buf.append("        ");
		try {
			con = DBService.getInstance().getConnection();
			//logger.debug("######changePriorityForDown######## con : " + con);
			//con.setAutoCommit(false);
			psmt = con.prepareStatement(buf.toString());    
			int index = 0;			
			psmt.setLong(++index, key);
			rs = psmt.executeQuery();	
			String fileName = "";
			if(rs.next())
			{

				fileName = rs.getString("filename");

			}

			logger.debug("fileName    " + fileName);

			//con.setAutoCommit(true);
			return fileName;   
		}
		catch (Exception ex)
		{
			logger.error(buf.toString());

			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "selectTcJon 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, con);
		}

	}



	/**
	 * dasdb 청구번호 중복 여부를 파악한다
	 * @param cart_no                                                                                                                                    	
	 * @throws Exception 
	 */ 
	public int countDasReqCd(String reqCd) throws Exception
	{
		StringBuffer buf = new StringBuffer();
		buf.append("\n select ");
		buf.append("\n 	count(*) as cnt ");
		buf.append("\n 	from metadat_mst_tbl  ");
		buf.append("\n 	where req_cd =  ?  ");

		Connection con = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;

		try 
		{
			con = DBService.getInstance().getConnection();
			//logger.debug("######getObjName######## con : " + con);
			stmt = con.prepareStatement(buf.toString());

			int index = 0;
			stmt.setString(++index, reqCd);

			rs = stmt.executeQuery();

			int count=0;
			if(rs.next())
			{
				count =      	rs.getInt("cnt");

			}


			return count;
		} 

		catch (Exception e) 
		{
			logger.error(buf.toString());

			throw e;
		}
		finally
		{
			release(rs, stmt, con);
		}
	}



	/**
	 * 해당  아이디로 콘텐츠 아이디를 가지고 온다.(다운로드 기준)
	 * @param pdsArchiveDO
	 * @return
	 * @throws DASException
	 */
	public String getContentsInstTbl(long ctId) throws DASException{

		StringBuffer buf = new StringBuffer();
		Connection con = null;		
		PreparedStatement psmt = null;		
		ResultSet rs = null;

		buf.append(" SELECT wrk_file_nm FROM DAS.CONTENTS_inst_TBL                  ");
		buf.append("\n where ct_id = ?  and cti_fmt like '3%' ");
		buf.append("        ");
		try {
			con = DBService.getInstance().getConnection();
			//logger.debug("######changePriorityForDown######## con : " + con);
			//con.setAutoCommit(false);
			psmt = con.prepareStatement(buf.toString());    
			int index = 0;			
			psmt.setLong(++index, ctId);
			rs = psmt.executeQuery();	
			String fileName = "";
			if(rs.next())
			{

				fileName = rs.getString("wrk_file_nm");

			}

			logger.debug("fileName    " + fileName);

			//con.setAutoCommit(true);
			return fileName;   
		}
		catch (Exception ex)
		{
			logger.error(buf.toString());

			DASException exception = new DASException(ErrorConstants.SYSTEM_ERR, "selectTcJon 에러 : " + buf.toString(), ex);
			throw exception;
		}
		finally
		{
			release(rs, psmt, con);
		}

	}

}
